window.history.pushState=function(){};
document.oncontextmenu=function(event){return false; };
if(!window.Graph) window.Graph = {};
window.Graph.config = {"workerURL": "worker.js", "dragpoints": true, "keypad": true}; 
  
/*if(!window.console) window.console = {};
if(!window.console.log) window.console.log = function(){};*/

function randomHash()
{
var str='';
var n;
for(i=0;i<9;i++)
{
n=Math.round(Math.random()*36).toString(36);
str+=n;
}
return str;
}

function id(e){return document.getElementById(e)}
function tag(e){return document.getElementsByTagName(e)}
function mkscr()
{
cnv=tag('canvas');
id('s0').width=cnv[0].width;
id('s0').height=cnv[0].height;
ctx=id('s0').getContext('2d');
ctx.drawImage(cnv[0],0,0);
ctx.drawImage(cnv[1],0,0);
ctx.drawImage(cnv[2],0,0);
id('sgo').href=id('s0').toDataURL();
id('sgo').click();
}
function save()
{
if (typeof(Calc.userController.currentUser)!='undefined')
{
localStorage.user=JSON.stringify(Calc.userController.currentUser);
}
else
{
localStorage.user='null';
}
}

/**
 * almond 0.2.5 Copyright (c) 2011-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/jrburke/almond for details
 */
//Going sloppy to avoid 'use strict' string cost, but strict practices should
//be followed.
/*jslint sloppy: true */
/*global setTimeout: false */

var requirejs, require, define;
(function (undef) {
    var main, req, makeMap, handlers,
        defined = {},
        waiting = {},
        config = {},
        defining = {},
        hasOwn = Object.prototype.hasOwnProperty,
        aps = [].slice;

    function hasProp(obj, prop) {
        return hasOwn.call(obj, prop);
    }

    /**
     * Given a relative module name, like ./something, normalize it to
     * a real name that can be mapped to a path.
     * @param {String} name the relative name
     * @param {String} baseName a real name that the name arg is relative
     * to.
     * @returns {String} normalized name
     */
    function normalize(name, baseName) {
        var nameParts, nameSegment, mapValue, foundMap,
            foundI, foundStarMap, starI, i, j, part,
            baseParts = baseName && baseName.split("/"),
            map = config.map,
            starMap = (map && map['*']) || {};

        //Adjust any relative paths.
        if (name && name.charAt(0) === ".") {
            //If have a base name, try to normalize against it,
            //otherwise, assume it is a top-level require that will
            //be relative to baseUrl in the end.
            if (baseName) {
                //Convert baseName to array, and lop off the last part,
                //so that . matches that "directory" and not name of the baseName's
                //module. For instance, baseName of "one/two/three", maps to
                //"one/two/three.js", but we want the directory, "one/two" for
                //this normalization.
                baseParts = baseParts.slice(0, baseParts.length - 1);

                name = baseParts.concat(name.split("/"));

                //start trimDots
                for (i = 0; i < name.length; i += 1) {
                    part = name[i];
                    if (part === ".") {
                        name.splice(i, 1);
                        i -= 1;
                    } else if (part === "..") {
                        if (i === 1 && (name[2] === '..' || name[0] === '..')) {
                            //End of the line. Keep at least one non-dot
                            //path segment at the front so it can be mapped
                            //correctly to disk. Otherwise, there is likely
                            //no path mapping for a path starting with '..'.
                            //This can still fail, but catches the most reasonable
                            //uses of ..
                            break;
                        } else if (i > 0) {
                            name.splice(i - 1, 2);
                            i -= 2;
                        }
                    }
                }
                //end trimDots

                name = name.join("/");
            } else if (name.indexOf('./') === 0) {
                // No baseName, so this is ID is resolved relative
                // to baseUrl, pull off the leading dot.
                name = name.substring(2);
            }
        }

        //Apply map config if available.
        if ((baseParts || starMap) && map) {
            nameParts = name.split('/');

            for (i = nameParts.length; i > 0; i -= 1) {
                nameSegment = nameParts.slice(0, i).join("/");

                if (baseParts) {
                    //Find the longest baseName segment match in the config.
                    //So, do joins on the biggest to smallest lengths of baseParts.
                    for (j = baseParts.length; j > 0; j -= 1) {
                        mapValue = map[baseParts.slice(0, j).join('/')];

                        //baseName segment has  config, find if it has one for
                        //this name.
                        if (mapValue) {
                            mapValue = mapValue[nameSegment];
                            if (mapValue) {
                                //Match, update name to the new value.
                                foundMap = mapValue;
                                foundI = i;
                                break;
                            }
                        }
                    }
                }

                if (foundMap) {
                    break;
                }

                //Check for a star map match, but just hold on to it,
                //if there is a shorter segment match later in a matching
                //config, then favor over this star map.
                if (!foundStarMap && starMap && starMap[nameSegment]) {
                    foundStarMap = starMap[nameSegment];
                    starI = i;
                }
            }

            if (!foundMap && foundStarMap) {
                foundMap = foundStarMap;
                foundI = starI;
            }

            if (foundMap) {
                nameParts.splice(0, foundI, foundMap);
                name = nameParts.join('/');
            }
        }

        return name;
    }

    function makeRequire(relName, forceSync) {
        return function () {
            //A version of a require function that passes a moduleName
            //value for items that may need to
            //look up paths relative to the moduleName
            return req.apply(undef, aps.call(arguments, 0).concat([relName, forceSync]));
        };
    }

    function makeNormalize(relName) {
        return function (name) {
            return normalize(name, relName);
        };
    }

    function makeLoad(depName) {
        return function (value) {
            defined[depName] = value;
        };
    }

    function callDep(name) {
        if (hasProp(waiting, name)) {
            var args = waiting[name];
            delete waiting[name];
            defining[name] = true;
            main.apply(undef, args);
        }

        if (!hasProp(defined, name) && !hasProp(defining, name)) {
            throw new Error('No ' + name);
        }
        return defined[name];
    }

    //Turns a plugin!resource to [plugin, resource]
    //with the plugin being undefined if the name
    //did not have a plugin prefix.
    function splitPrefix(name) {
        var prefix,
            index = name ? name.indexOf('!') : -1;
        if (index > -1) {
            prefix = name.substring(0, index);
            name = name.substring(index + 1, name.length);
        }
        return [prefix, name];
    }

    /**
     * Makes a name map, normalizing the name, and using a plugin
     * for normalization if necessary. Grabs a ref to plugin
     * too, as an optimization.
     */
    makeMap = function (name, relName) {
        var plugin,
            parts = splitPrefix(name),
            prefix = parts[0];

        name = parts[1];

        if (prefix) {
            prefix = normalize(prefix, relName);
            plugin = callDep(prefix);
        }

        //Normalize according
        if (prefix) {
            if (plugin && plugin.normalize) {
                name = plugin.normalize(name, makeNormalize(relName));
            } else {
                name = normalize(name, relName);
            }
        } else {
            name = normalize(name, relName);
            parts = splitPrefix(name);
            prefix = parts[0];
            name = parts[1];
            if (prefix) {
                plugin = callDep(prefix);
            }
        }

        //Using ridiculous property names for space reasons
        return {
            f: prefix ? prefix + '!' + name : name, //fullName
            n: name,
            pr: prefix,
            p: plugin
        };
    };

    function makeConfig(name) {
        return function () {
            return (config && config.config && config.config[name]) || {};
        };
    }

    handlers = {
        require: function (name) {
            return makeRequire(name);
        },
        exports: function (name) {
            var e = defined[name];
            if (typeof e !== 'undefined') {
                return e;
            } else {
                return (defined[name] = {});
            }
        },
        module: function (name) {
            return {
                id: name,
                uri: '',
                exports: defined[name],
                config: makeConfig(name)
            };
        }
    };

    main = function (name, deps, callback, relName) {
        var cjsModule, depName, ret, map, i,
            args = [],
            usingExports;

        //Use name if no relName
        relName = relName || name;

        //Call the callback to define the module, if necessary.
        if (typeof callback === 'function') {

            //Pull out the defined dependencies and pass the ordered
            //values to the callback.
            //Default to [require, exports, module] if no deps
            deps = !deps.length && callback.length ? ['require', 'exports', 'module'] : deps;
            for (i = 0; i < deps.length; i += 1) {
                map = makeMap(deps[i], relName);
                depName = map.f;

                //Fast path CommonJS standard dependencies.
                if (depName === "require") {
                    args[i] = handlers.require(name);
                } else if (depName === "exports") {
                    //CommonJS module spec 1.1
                    args[i] = handlers.exports(name);
                    usingExports = true;
                } else if (depName === "module") {
                    //CommonJS module spec 1.1
                    cjsModule = args[i] = handlers.module(name);
                } else if (hasProp(defined, depName) ||
                           hasProp(waiting, depName) ||
                           hasProp(defining, depName)) {
                    args[i] = callDep(depName);
                } else if (map.p) {
                    map.p.load(map.n, makeRequire(relName, true), makeLoad(depName), {});
                    args[i] = defined[depName];
                } else {
                    throw new Error(name + ' missing ' + depName);
                }
            }

            ret = callback.apply(defined[name], args);

            if (name) {
                //If setting exports via "module" is in play,
                //favor that over return value and exports. After that,
                //favor a non-undefined return value over exports use.
                if (cjsModule && cjsModule.exports !== undef &&
                        cjsModule.exports !== defined[name]) {
                    defined[name] = cjsModule.exports;
                } else if (ret !== undef || !usingExports) {
                    //Use the return value from the function.
                    defined[name] = ret;
                }
            }
        } else if (name) {
            //May just be an object definition for the module. Only
            //worry about defining if have a module name.
            defined[name] = callback;
        }
    };

    requirejs = require = req = function (deps, callback, relName, forceSync, alt) {
        if (typeof deps === "string") {
            if (handlers[deps]) {
                //callback in this case is really relName
                return handlers[deps](callback);
            }
            //Just return the module wanted. In this scenario, the
            //deps arg is the module name, and second arg (if passed)
            //is just the relName.
            //Normalize module name, if it contains . or ..
            return callDep(makeMap(deps, callback).f);
        } else if (!deps.splice) {
            //deps is a config object, not an array.
            config = deps;
            if (callback.splice) {
                //callback is an array, which means it is a dependency list.
                //Adjust args if there are dependencies
                deps = callback;
                callback = relName;
                relName = null;
            } else {
                deps = undef;
            }
        }

        //Support require(['a'])
        callback = callback || function () {};

        //If relName is a function, it is an errback handler,
        //so remove it.
        if (typeof relName === 'function') {
            relName = forceSync;
            forceSync = alt;
        }

        //Simulate async callback;
        if (forceSync) {
            main(undef, deps, callback, relName);
        } else {
            //Using a non-zero value because of concern for what old browsers
            //do, and latest browsers "upgrade" to 4 if lower value is used:
            //http://www.whatwg.org/specs/web-apps/current-work/multipage/timers.html#dom-windowtimers-settimeout:
            //If want a value immediately, use require('id') instead -- something
            //that works in almond on the global level, but not guaranteed and
            //unlikely to work in other AMD implementations.
            setTimeout(function () {
                main(undef, deps, callback, relName);
            }, 4);
        }

        return req;
    };

    /**
     * Just drops the config on the floor, but returns req in case
     * the config return value is used.
     */
    req.config = function (cfg) {
        config = cfg;
        if (config.deps) {
            req(config.deps, config.callback);
        }
        return req;
    };

    define = function (name, deps, callback) {

        //This module may not have dependencies
        if (!deps.splice) {
            //deps is not an array, so probably means
            //an object literal or factory function for
            //the value. Adjust args.
            callback = deps;
            deps = [];
        }

        if (!hasProp(defined, name) && !hasProp(waiting, name)) {
            waiting[name] = [name, deps, callback];
        }
    };

    define.amd = {
        jQuery: true
    };
}());

define("vendor/almond", function(){});

/*!
 * jQuery JavaScript Library v1.8.3
 * http://jquery.com/
 *
 * Includes Sizzle.js
 * http://sizzlejs.com/
 *
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: Tue Nov 13 2012 08:20:33 GMT-0500 (Eastern Standard Time)
 */
(function( window, undefined ) {
var
	// A central reference to the root jQuery(document)
	rootjQuery,

	// The deferred used on DOM ready
	readyList,

	// Use the correct document accordingly with window argument (sandbox)
	document = window.document,
	location = window.location,
	navigator = window.navigator,

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$,

	// Save a reference to some core methods
	core_push = Array.prototype.push,
	core_slice = Array.prototype.slice,
	core_indexOf = Array.prototype.indexOf,
	core_toString = Object.prototype.toString,
	core_hasOwn = Object.prototype.hasOwnProperty,
	core_trim = String.prototype.trim,

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {
		// The jQuery object is actually just the init constructor 'enhanced'
		return new jQuery.fn.init( selector, context, rootjQuery );
	},

	// Used for matching numbers
	core_pnum = /[\-+]?(?:\d*\.|)\d+(?:[eE][\-+]?\d+|)/.source,

	// Used for detecting and trimming whitespace
	core_rnotwhite = /\S/,
	core_rspace = /\s+/,

	// Make sure we trim BOM and NBSP (here's looking at you, Safari 5.0 and IE)
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	rquickExpr = /^(?:[^#<]*(<[\w\W]+>)[^>]*$|#([\w\-]*)$)/,

	// Match a standalone tag
	rsingleTag = /^<(\w+)\s*\/?>(?:<\/\1>|)$/,

	// JSON RegExp
	rvalidchars = /^[\],:{}\s]*$/,
	rvalidbraces = /(?:^|:|,)(?:\s*\[)+/g,
	rvalidescape = /\\(?:["\\\/bfnrt]|u[\da-fA-F]{4})/g,
	rvalidtokens = /"[^"\\\r\n]*"|true|false|null|-?(?:\d\d*\.|)\d+(?:[eE][\-+]?\d+|)/g,

	// Matches dashed string for camelizing
	rmsPrefix = /^-ms-/,
	rdashAlpha = /-([\da-z])/gi,

	// Used by jQuery.camelCase as callback to replace()
	fcamelCase = function( all, letter ) {
		return ( letter + "" ).toUpperCase();
	},

	// The ready event handler and self cleanup method
	DOMContentLoaded = function() {
		if ( document.addEventListener ) {
			document.removeEventListener( "DOMContentLoaded", DOMContentLoaded, false );
			jQuery.ready();
		} else if ( document.readyState === "complete" ) {
			// we're here because readyState === "complete" in oldIE
			// which is good enough for us to call the dom ready!
			document.detachEvent( "onreadystatechange", DOMContentLoaded );
			jQuery.ready();
		}
	},

	// [[Class]] -> type pairs
	class2type = {};

jQuery.fn = jQuery.prototype = {
	constructor: jQuery,
	init: function( selector, context, rootjQuery ) {
		var match, elem, ret, doc;

		// Handle $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Handle $(DOMElement)
		if ( selector.nodeType ) {
			this.context = this[0] = selector;
			this.length = 1;
			return this;
		}

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector.charAt(0) === "<" && selector.charAt( selector.length - 1 ) === ">" && selector.length >= 3 ) {
				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && (match[1] || !context) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[1] ) {
					context = context instanceof jQuery ? context[0] : context;
					doc = ( context && context.nodeType ? context.ownerDocument || context : document );

					// scripts is true for back-compat
					selector = jQuery.parseHTML( match[1], doc, true );
					if ( rsingleTag.test( match[1] ) && jQuery.isPlainObject( context ) ) {
						this.attr.call( selector, context, true );
					}

					return jQuery.merge( this, selector );

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[2] );

					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE and Opera return items
						// by name instead of ID
						if ( elem.id !== match[2] ) {
							return rootjQuery.find( selector );
						}

						// Otherwise, we inject the element directly into the jQuery object
						this.length = 1;
						this[0] = elem;
					}

					this.context = document;
					this.selector = selector;
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || rootjQuery ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( jQuery.isFunction( selector ) ) {
			return rootjQuery.ready( selector );
		}

		if ( selector.selector !== undefined ) {
			this.selector = selector.selector;
			this.context = selector.context;
		}

		return jQuery.makeArray( selector, this );
	},

	// Start with an empty selector
	selector: "",

	// The current version of jQuery being used
	jquery: "1.8.3",

	// The default length of a jQuery object is 0
	length: 0,

	// The number of elements contained in the matched element set
	size: function() {
		return this.length;
	},

	toArray: function() {
		return core_slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {
		return num == null ?

			// Return a 'clean' array
			this.toArray() :

			// Return just the object
			( num < 0 ? this[ this.length + num ] : this[ num ] );
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems, name, selector ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		ret.context = this.context;

		if ( name === "find" ) {
			ret.selector = this.selector + ( this.selector ? " " : "" ) + selector;
		} else if ( name ) {
			ret.selector = this.selector + "." + name + "(" + selector + ")";
		}

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	// (You can seed the arguments with an array of args, but this is
	// only used internally.)
	each: function( callback, args ) {
		return jQuery.each( this, callback, args );
	},

	ready: function( fn ) {
		// Add the callback
		jQuery.ready.promise().done( fn );

		return this;
	},

	eq: function( i ) {
		i = +i;
		return i === -1 ?
			this.slice( i ) :
			this.slice( i, i + 1 );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	slice: function() {
		return this.pushStack( core_slice.apply( this, arguments ),
			"slice", core_slice.call(arguments).join(",") );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map(this, function( elem, i ) {
			return callback.call( elem, i, elem );
		}));
	},

	end: function() {
		return this.prevObject || this.constructor(null);
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: core_push,
	sort: [].sort,
	splice: [].splice
};

// Give the init function the jQuery prototype for later instantiation
jQuery.fn.init.prototype = jQuery.fn;

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[0] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;
		target = arguments[1] || {};
		// skip the boolean and the target
		i = 2;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !jQuery.isFunction(target) ) {
		target = {};
	}

	// extend jQuery itself if only one argument is passed
	if ( length === i ) {
		target = this;
		--i;
	}

	for ( ; i < length; i++ ) {
		// Only deal with non-null/undefined values
		if ( (options = arguments[ i ]) != null ) {
			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject(copy) || (copyIsArray = jQuery.isArray(copy)) ) ) {
					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && jQuery.isArray(src) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject(src) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend({
	noConflict: function( deep ) {
		if ( window.$ === jQuery ) {
			window.$ = _$;
		}

		if ( deep && window.jQuery === jQuery ) {
			window.jQuery = _jQuery;
		}

		return jQuery;
	},

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Hold (or release) the ready event
	holdReady: function( hold ) {
		if ( hold ) {
			jQuery.readyWait++;
		} else {
			jQuery.ready( true );
		}
	},

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Make sure body exists, at least, in case IE gets a little overzealous (ticket #5443).
		if ( !document.body ) {
			return setTimeout( jQuery.ready, 1 );
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );

		// Trigger any bound ready events
		if ( jQuery.fn.trigger ) {
			jQuery( document ).trigger("ready").off("ready");
		}
	},

	// See test/unit/core.js for details concerning isFunction.
	// Since version 1.3, DOM methods and functions like alert
	// aren't supported. They return false on IE (#2968).
	isFunction: function( obj ) {
		return jQuery.type(obj) === "function";
	},

	isArray: Array.isArray || function( obj ) {
		return jQuery.type(obj) === "array";
	},

	isWindow: function( obj ) {
		return obj != null && obj == obj.window;
	},

	isNumeric: function( obj ) {
		return !isNaN( parseFloat(obj) ) && isFinite( obj );
	},

	type: function( obj ) {
		return obj == null ?
			String( obj ) :
			class2type[ core_toString.call(obj) ] || "object";
	},

	isPlainObject: function( obj ) {
		// Must be an Object.
		// Because of IE, we also have to check the presence of the constructor property.
		// Make sure that DOM nodes and window objects don't pass through, as well
		if ( !obj || jQuery.type(obj) !== "object" || obj.nodeType || jQuery.isWindow( obj ) ) {
			return false;
		}

		try {
			// Not own constructor property must be Object
			if ( obj.constructor &&
				!core_hasOwn.call(obj, "constructor") &&
				!core_hasOwn.call(obj.constructor.prototype, "isPrototypeOf") ) {
				return false;
			}
		} catch ( e ) {
			// IE8,9 Will throw exceptions on certain host objects #9897
			return false;
		}

		// Own properties are enumerated firstly, so to speed up,
		// if last one is own, then all properties are own.

		var key;
		for ( key in obj ) {}

		return key === undefined || core_hasOwn.call( obj, key );
	},

	isEmptyObject: function( obj ) {
		var name;
		for ( name in obj ) {
			return false;
		}
		return true;
	},

	error: function( msg ) {
		throw new Error( msg );
	},

	// data: string of html
	// context (optional): If specified, the fragment will be created in this context, defaults to document
	// scripts (optional): If true, will include scripts passed in the html string
	parseHTML: function( data, context, scripts ) {
		var parsed;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		if ( typeof context === "boolean" ) {
			scripts = context;
			context = 0;
		}
		context = context || document;

		// Single tag
		if ( (parsed = rsingleTag.exec( data )) ) {
			return [ context.createElement( parsed[1] ) ];
		}

		parsed = jQuery.buildFragment( [ data ], context, scripts ? null : [] );
		return jQuery.merge( [],
			(parsed.cacheable ? jQuery.clone( parsed.fragment ) : parsed.fragment).childNodes );
	},

	parseJSON: function( data ) {
		if ( !data || typeof data !== "string") {
			return null;
		}

		// Make sure leading/trailing whitespace is removed (IE can't handle it)
		data = jQuery.trim( data );

		// Attempt to parse using the native JSON parser first
		if ( window.JSON && window.JSON.parse ) {
			return window.JSON.parse( data );
		}

		// Make sure the incoming data is actual JSON
		// Logic borrowed from http://json.org/json2.js
		if ( rvalidchars.test( data.replace( rvalidescape, "@" )
			.replace( rvalidtokens, "]" )
			.replace( rvalidbraces, "")) ) {

			return ( new Function( "return " + data ) )();

		}
		jQuery.error( "Invalid JSON: " + data );
	},

	// Cross-browser xml parsing
	parseXML: function( data ) {
		var xml, tmp;
		if ( !data || typeof data !== "string" ) {
			return null;
		}
		try {
			if ( window.DOMParser ) { // Standard
				tmp = new DOMParser();
				xml = tmp.parseFromString( data , "text/xml" );
			} else { // IE
				xml = new ActiveXObject( "Microsoft.XMLDOM" );
				xml.async = "false";
				xml.loadXML( data );
			}
		} catch( e ) {
			xml = undefined;
		}
		if ( !xml || !xml.documentElement || xml.getElementsByTagName( "parsererror" ).length ) {
			jQuery.error( "Invalid XML: " + data );
		}
		return xml;
	},

	noop: function() {},

	// Evaluates a script in a global context
	// Workarounds based on findings by Jim Driscoll
	// http://weblogs.java.net/blog/driscoll/archive/2009/09/08/eval-javascript-global-context
	globalEval: function( data ) {
		if ( data && core_rnotwhite.test( data ) ) {
			// We use execScript on Internet Explorer
			// We use an anonymous function so that context is window
			// rather than jQuery in Firefox
			( window.execScript || function( data ) {
				window[ "eval" ].call( window, data );
			} )( data );
		}
	},

	// Convert dashed to camelCase; used by the css and data modules
	// Microsoft forgot to hump their vendor prefix (#9572)
	camelCase: function( string ) {
		return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
	},

	nodeName: function( elem, name ) {
		return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();
	},

	// args is for internal usage only
	each: function( obj, callback, args ) {
		var name,
			i = 0,
			length = obj.length,
			isObj = length === undefined || jQuery.isFunction( obj );

		if ( args ) {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.apply( obj[ name ], args ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.apply( obj[ i++ ], args ) === false ) {
						break;
					}
				}
			}

		// A special, fast, case for the most common use of each
		} else {
			if ( isObj ) {
				for ( name in obj ) {
					if ( callback.call( obj[ name ], name, obj[ name ] ) === false ) {
						break;
					}
				}
			} else {
				for ( ; i < length; ) {
					if ( callback.call( obj[ i ], i, obj[ i++ ] ) === false ) {
						break;
					}
				}
			}
		}

		return obj;
	},

	// Use native String.trim function wherever possible
	trim: core_trim && !core_trim.call("\uFEFF\xA0") ?
		function( text ) {
			return text == null ?
				"" :
				core_trim.call( text );
		} :

		// Otherwise use our own trimming functionality
		function( text ) {
			return text == null ?
				"" :
				( text + "" ).replace( rtrim, "" );
		},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var type,
			ret = results || [];

		if ( arr != null ) {
			// The window, strings (and functions) also have 'length'
			// Tweaked logic slightly to handle Blackberry 4.7 RegExp issues #6930
			type = jQuery.type( arr );

			if ( arr.length == null || type === "string" || type === "function" || type === "regexp" || jQuery.isWindow( arr ) ) {
				core_push.call( ret, arr );
			} else {
				jQuery.merge( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		var len;

		if ( arr ) {
			if ( core_indexOf ) {
				return core_indexOf.call( arr, elem, i );
			}

			len = arr.length;
			i = i ? i < 0 ? Math.max( 0, len + i ) : i : 0;

			for ( ; i < len; i++ ) {
				// Skip accessing in sparse arrays
				if ( i in arr && arr[ i ] === elem ) {
					return i;
				}
			}
		}

		return -1;
	},

	merge: function( first, second ) {
		var l = second.length,
			i = first.length,
			j = 0;

		if ( typeof l === "number" ) {
			for ( ; j < l; j++ ) {
				first[ i++ ] = second[ j ];
			}

		} else {
			while ( second[j] !== undefined ) {
				first[ i++ ] = second[ j++ ];
			}
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, inv ) {
		var retVal,
			ret = [],
			i = 0,
			length = elems.length;
		inv = !!inv;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			retVal = !!callback( elems[ i ], i );
			if ( inv !== retVal ) {
				ret.push( elems[ i ] );
			}
		}

		return ret;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var value, key,
			ret = [],
			i = 0,
			length = elems.length,
			// jquery objects are treated as arrays
			isArray = elems instanceof jQuery || length !== undefined && typeof length === "number" && ( ( length > 0 && elems[ 0 ] && elems[ length -1 ] ) || length === 0 || jQuery.isArray( elems ) ) ;

		// Go through the array, translating each of the items to their
		if ( isArray ) {
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}

		// Go through every key on the object,
		} else {
			for ( key in elems ) {
				value = callback( elems[ key ], key, arg );

				if ( value != null ) {
					ret[ ret.length ] = value;
				}
			}
		}

		// Flatten any nested arrays
		return ret.concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// Bind a function to a context, optionally partially applying any
	// arguments.
	proxy: function( fn, context ) {
		var tmp, args, proxy;

		if ( typeof context === "string" ) {
			tmp = fn[ context ];
			context = fn;
			fn = tmp;
		}

		// Quick check to determine if target is callable, in the spec
		// this throws a TypeError, but we will just return undefined.
		if ( !jQuery.isFunction( fn ) ) {
			return undefined;
		}

		// Simulated bind
		args = core_slice.call( arguments, 2 );
		proxy = function() {
			return fn.apply( context, args.concat( core_slice.call( arguments ) ) );
		};

		// Set the guid of unique handler to the same of original handler, so it can be removed
		proxy.guid = fn.guid = fn.guid || jQuery.guid++;

		return proxy;
	},

	// Multifunctional method to get and set values of a collection
	// The value/s can optionally be executed if it's a function
	access: function( elems, fn, key, value, chainable, emptyGet, pass ) {
		var exec,
			bulk = key == null,
			i = 0,
			length = elems.length;

		// Sets many values
		if ( key && typeof key === "object" ) {
			for ( i in key ) {
				jQuery.access( elems, fn, i, key[i], 1, emptyGet, value );
			}
			chainable = 1;

		// Sets one value
		} else if ( value !== undefined ) {
			// Optionally, function values get executed if exec is true
			exec = pass === undefined && jQuery.isFunction( value );

			if ( bulk ) {
				// Bulk operations only iterate when executing function values
				if ( exec ) {
					exec = fn;
					fn = function( elem, key, value ) {
						return exec.call( jQuery( elem ), value );
					};

				// Otherwise they run against the entire set
				} else {
					fn.call( elems, value );
					fn = null;
				}
			}

			if ( fn ) {
				for (; i < length; i++ ) {
					fn( elems[i], key, exec ? value.call( elems[i], i, fn( elems[i], key ) ) : value, pass );
				}
			}

			chainable = 1;
		}

		return chainable ?
			elems :

			// Gets
			bulk ?
				fn.call( elems ) :
				length ? fn( elems[0], key ) : emptyGet;
	},

	now: function() {
		return ( new Date() ).getTime();
	}
});

jQuery.ready.promise = function( obj ) {
	if ( !readyList ) {

		readyList = jQuery.Deferred();

		// Catch cases where $(document).ready() is called after the browser event has already occurred.
		// we once tried to use readyState "interactive" here, but it caused issues like the one
		// discovered by ChrisS here: http://bugs.jquery.com/ticket/12282#comment:15
		if ( document.readyState === "complete" ) {
			// Handle it asynchronously to allow scripts the opportunity to delay ready
			setTimeout( jQuery.ready, 1 );

		// Standards-based browsers support DOMContentLoaded
		} else if ( document.addEventListener ) {
			// Use the handy event callback
			document.addEventListener( "DOMContentLoaded", DOMContentLoaded, false );

			// A fallback to window.onload, that will always work
			window.addEventListener( "load", jQuery.ready, false );

		// If IE event model is used
		} else {
			// Ensure firing before onload, maybe late but safe also for iframes
			document.attachEvent( "onreadystatechange", DOMContentLoaded );

			// A fallback to window.onload, that will always work
			window.attachEvent( "onload", jQuery.ready );

			// If IE and not a frame
			// continually check to see if the document is ready
			var top = false;

			try {
				top = window.frameElement == null && document.documentElement;
			} catch(e) {}

			if ( top && top.doScroll ) {
				(function doScrollCheck() {
					if ( !jQuery.isReady ) {

						try {
							// Use the trick by Diego Perini
							// http://javascript.nwbox.com/IEContentLoaded/
							top.doScroll("left");
						} catch(e) {
							return setTimeout( doScrollCheck, 50 );
						}

						// and execute any waiting functions
						jQuery.ready();
					}
				})();
			}
		}
	}
	return readyList.promise( obj );
};

// Populate the class2type map
jQuery.each("Boolean Number String Function Array Date RegExp Object".split(" "), function(i, name) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
});

// All jQuery objects should point back to these
rootjQuery = jQuery(document);
// String to Object options format cache
var optionsCache = {};

// Convert String-formatted options into Object-formatted ones and store in cache
function createOptions( options ) {
	var object = optionsCache[ options ] = {};
	jQuery.each( options.split( core_rspace ), function( _, flag ) {
		object[ flag ] = true;
	});
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		( optionsCache[ options ] || createOptions( options ) ) :
		jQuery.extend( {}, options );

	var // Last fire value (for non-forgettable lists)
		memory,
		// Flag to know if list was already fired
		fired,
		// Flag to know if list is currently firing
		firing,
		// First callback to fire (used internally by add and fireWith)
		firingStart,
		// End of the loop when firing
		firingLength,
		// Index of currently firing callback (modified by remove if needed)
		firingIndex,
		// Actual callback list
		list = [],
		// Stack of fire calls for repeatable lists
		stack = !options.once && [],
		// Fire callbacks
		fire = function( data ) {
			memory = options.memory && data;
			fired = true;
			firingIndex = firingStart || 0;
			firingStart = 0;
			firingLength = list.length;
			firing = true;
			for ( ; list && firingIndex < firingLength; firingIndex++ ) {
				if ( list[ firingIndex ].apply( data[ 0 ], data[ 1 ] ) === false && options.stopOnFalse ) {
					memory = false; // To prevent further calls using add
					break;
				}
			}
			firing = false;
			if ( list ) {
				if ( stack ) {
					if ( stack.length ) {
						fire( stack.shift() );
					}
				} else if ( memory ) {
					list = [];
				} else {
					self.disable();
				}
			}
		},
		// Actual Callbacks object
		self = {
			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {
					// First, we save the current length
					var start = list.length;
					(function add( args ) {
						jQuery.each( args, function( _, arg ) {
							var type = jQuery.type( arg );
							if ( type === "function" ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && type !== "string" ) {
								// Inspect recursively
								add( arg );
							}
						});
					})( arguments );
					// Do we need to add the callbacks to the
					// current firing batch?
					if ( firing ) {
						firingLength = list.length;
					// With memory, if we're not firing then
					// we should call right away
					} else if ( memory ) {
						firingStart = start;
						fire( memory );
					}
				}
				return this;
			},
			// Remove a callback from the list
			remove: function() {
				if ( list ) {
					jQuery.each( arguments, function( _, arg ) {
						var index;
						while( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
							list.splice( index, 1 );
							// Handle firing indexes
							if ( firing ) {
								if ( index <= firingLength ) {
									firingLength--;
								}
								if ( index <= firingIndex ) {
									firingIndex--;
								}
							}
						}
					});
				}
				return this;
			},
			// Control if a given callback is in the list
			has: function( fn ) {
				return jQuery.inArray( fn, list ) > -1;
			},
			// Remove all callbacks from the list
			empty: function() {
				list = [];
				return this;
			},
			// Have the list do nothing anymore
			disable: function() {
				list = stack = memory = undefined;
				return this;
			},
			// Is it disabled?
			disabled: function() {
				return !list;
			},
			// Lock the list in its current state
			lock: function() {
				stack = undefined;
				if ( !memory ) {
					self.disable();
				}
				return this;
			},
			// Is it locked?
			locked: function() {
				return !stack;
			},
			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				args = args || [];
				args = [ context, args.slice ? args.slice() : args ];
				if ( list && ( !fired || stack ) ) {
					if ( firing ) {
						stack.push( args );
					} else {
						fire( args );
					}
				}
				return this;
			},
			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},
			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};
jQuery.extend({

	Deferred: function( func ) {
		var tuples = [
				// action, add listener, listener list, final state
				[ "resolve", "done", jQuery.Callbacks("once memory"), "resolved" ],
				[ "reject", "fail", jQuery.Callbacks("once memory"), "rejected" ],
				[ "notify", "progress", jQuery.Callbacks("memory") ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				then: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;
					return jQuery.Deferred(function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {
							var action = tuple[ 0 ],
								fn = fns[ i ];
							// deferred[ done | fail | progress ] for forwarding actions to newDefer
							deferred[ tuple[1] ]( jQuery.isFunction( fn ) ?
								function() {
									var returned = fn.apply( this, arguments );
									if ( returned && jQuery.isFunction( returned.promise ) ) {
										returned.promise()
											.done( newDefer.resolve )
											.fail( newDefer.reject )
											.progress( newDefer.notify );
									} else {
										newDefer[ action + "With" ]( this === deferred ? newDefer : this, [ returned ] );
									}
								} :
								newDefer[ action ]
							);
						});
						fns = null;
					}).promise();
				},
				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Keep pipe for back-compat
		promise.pipe = promise.then;

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 3 ];

			// promise[ done | fail | progress ] = list.add
			promise[ tuple[1] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(function() {
					// state = [ resolved | rejected ]
					state = stateString;

				// [ reject_list | resolve_list ].disable; progress_list.lock
				}, tuples[ i ^ 1 ][ 2 ].disable, tuples[ 2 ][ 2 ].lock );
			}

			// deferred[ resolve | reject | notify ] = list.fire
			deferred[ tuple[0] ] = list.fire;
			deferred[ tuple[0] + "With" ] = list.fireWith;
		});

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( subordinate /* , ..., subordinateN */ ) {
		var i = 0,
			resolveValues = core_slice.call( arguments ),
			length = resolveValues.length,

			// the count of uncompleted subordinates
			remaining = length !== 1 || ( subordinate && jQuery.isFunction( subordinate.promise ) ) ? length : 0,

			// the master Deferred. If resolveValues consist of only a single Deferred, just use that.
			deferred = remaining === 1 ? subordinate : jQuery.Deferred(),

			// Update function for both resolve and progress values
			updateFunc = function( i, contexts, values ) {
				return function( value ) {
					contexts[ i ] = this;
					values[ i ] = arguments.length > 1 ? core_slice.call( arguments ) : value;
					if( values === progressValues ) {
						deferred.notifyWith( contexts, values );
					} else if ( !( --remaining ) ) {
						deferred.resolveWith( contexts, values );
					}
				};
			},

			progressValues, progressContexts, resolveContexts;

		// add listeners to Deferred subordinates; treat others as resolved
		if ( length > 1 ) {
			progressValues = new Array( length );
			progressContexts = new Array( length );
			resolveContexts = new Array( length );
			for ( ; i < length; i++ ) {
				if ( resolveValues[ i ] && jQuery.isFunction( resolveValues[ i ].promise ) ) {
					resolveValues[ i ].promise()
						.done( updateFunc( i, resolveContexts, resolveValues ) )
						.fail( deferred.reject )
						.progress( updateFunc( i, progressContexts, progressValues ) );
				} else {
					--remaining;
				}
			}
		}

		// if we're not waiting on anything, resolve the master
		if ( !remaining ) {
			deferred.resolveWith( resolveContexts, resolveValues );
		}

		return deferred.promise();
	}
});
jQuery.support = (function() {

	var support,
		all,
		a,
		select,
		opt,
		input,
		fragment,
		eventName,
		i,
		isSupported,
		clickFn,
		div = document.createElement("div");

	// Setup
	div.setAttribute( "className", "t" );
	div.innerHTML = "  <link/><table></table><a href='/a'>a</a><input type='checkbox'/>";

	// Support tests won't run in some limited or non-browser environments
	all = div.getElementsByTagName("*");
	a = div.getElementsByTagName("a")[ 0 ];
	if ( !all || !a || !all.length ) {
		return {};
	}

	// First batch of tests
	select = document.createElement("select");
	opt = select.appendChild( document.createElement("option") );
	input = div.getElementsByTagName("input")[ 0 ];

	a.style.cssText = "top:1px;float:left;opacity:.5";
	support = {
		// IE strips leading whitespace when .innerHTML is used
		leadingWhitespace: ( div.firstChild.nodeType === 3 ),

		// Make sure that tbody elements aren't automatically inserted
		// IE will insert them into empty tables
		tbody: !div.getElementsByTagName("tbody").length,

		// Make sure that link elements get serialized correctly by innerHTML
		// This requires a wrapper element in IE
		htmlSerialize: !!div.getElementsByTagName("link").length,

		// Get the style information from getAttribute
		// (IE uses .cssText instead)
		style: /top/.test( a.getAttribute("style") ),

		// Make sure that URLs aren't manipulated
		// (IE normalizes it by default)
		hrefNormalized: ( a.getAttribute("href") === "/a" ),

		// Make sure that element opacity exists
		// (IE uses filter instead)
		// Use a regex to work around a WebKit issue. See #5145
		opacity: /^0.5/.test( a.style.opacity ),

		// Verify style float existence
		// (IE uses styleFloat instead of cssFloat)
		cssFloat: !!a.style.cssFloat,

		// Make sure that if no value is specified for a checkbox
		// that it defaults to "on".
		// (WebKit defaults to "" instead)
		checkOn: ( input.value === "on" ),

		// Make sure that a selected-by-default option has a working selected property.
		// (WebKit defaults to false instead of true, IE too, if it's in an optgroup)
		optSelected: opt.selected,

		// Test setAttribute on camelCase class. If it works, we need attrFixes when doing get/setAttribute (ie6/7)
		getSetAttribute: div.className !== "t",

		// Tests for enctype support on a form (#6743)
		enctype: !!document.createElement("form").enctype,

		// Makes sure cloning an html5 element does not cause problems
		// Where outerHTML is undefined, this still works
		html5Clone: document.createElement("nav").cloneNode( true ).outerHTML !== "<:nav></:nav>",

		// jQuery.support.boxModel DEPRECATED in 1.8 since we don't support Quirks Mode
		boxModel: ( document.compatMode === "CSS1Compat" ),

		// Will be defined later
		submitBubbles: true,
		changeBubbles: true,
		focusinBubbles: false,
		deleteExpando: true,
		noCloneEvent: true,
		inlineBlockNeedsLayout: false,
		shrinkWrapBlocks: false,
		reliableMarginRight: true,
		boxSizingReliable: true,
		pixelPosition: false
	};

	// Make sure checked status is properly cloned
	input.checked = true;
	support.noCloneChecked = input.cloneNode( true ).checked;

	// Make sure that the options inside disabled selects aren't marked as disabled
	// (WebKit marks them as disabled)
	select.disabled = true;
	support.optDisabled = !opt.disabled;

	// Test to see if it's possible to delete an expando from an element
	// Fails in Internet Explorer
	try {
		delete div.test;
	} catch( e ) {
		support.deleteExpando = false;
	}

	if ( !div.addEventListener && div.attachEvent && div.fireEvent ) {
		div.attachEvent( "onclick", clickFn = function() {
			// Cloning a node shouldn't copy over any
			// bound event handlers (IE does this)
			support.noCloneEvent = false;
		});
		div.cloneNode( true ).fireEvent("onclick");
		div.detachEvent( "onclick", clickFn );
	}

	// Check if a radio maintains its value
	// after being appended to the DOM
	input = document.createElement("input");
	input.value = "t";
	input.setAttribute( "type", "radio" );
	support.radioValue = input.value === "t";

	input.setAttribute( "checked", "checked" );

	// #11217 - WebKit loses check when the name is after the checked attribute
	input.setAttribute( "name", "t" );

	div.appendChild( input );
	fragment = document.createDocumentFragment();
	fragment.appendChild( div.lastChild );

	// WebKit doesn't clone checked state correctly in fragments
	support.checkClone = fragment.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Check if a disconnected checkbox will retain its checked
	// value of true after appended to the DOM (IE6/7)
	support.appendChecked = input.checked;

	fragment.removeChild( input );
	fragment.appendChild( div );

	// Technique from Juriy Zaytsev
	// http://perfectionkills.com/detecting-event-support-without-browser-sniffing/
	// We only care about the case where non-standard event systems
	// are used, namely in IE. Short-circuiting here helps us to
	// avoid an eval call (in setAttribute) which can cause CSP
	// to go haywire. See: https://developer.mozilla.org/en/Security/CSP
	if ( div.attachEvent ) {
		for ( i in {
			submit: true,
			change: true,
			focusin: true
		}) {
			eventName = "on" + i;
			isSupported = ( eventName in div );
			if ( !isSupported ) {
				div.setAttribute( eventName, "return;" );
				isSupported = ( typeof div[ eventName ] === "function" );
			}
			support[ i + "Bubbles" ] = isSupported;
		}
	}

	// Run tests that need a body at doc ready
	jQuery(function() {
		var container, div, tds, marginDiv,
			divReset = "padding:0;margin:0;border:0;display:block;overflow:hidden;",
			body = document.getElementsByTagName("body")[0];

		if ( !body ) {
			// Return for frameset docs that don't have a body
			return;
		}

		container = document.createElement("div");
		container.style.cssText = "visibility:hidden;border:0;width:0;height:0;position:static;top:0;margin-top:1px";
		body.insertBefore( container, body.firstChild );

		// Construct the test element
		div = document.createElement("div");
		container.appendChild( div );

		// Check if table cells still have offsetWidth/Height when they are set
		// to display:none and there are still other visible table cells in a
		// table row; if so, offsetWidth/Height are not reliable for use when
		// determining if an element has been hidden directly using
		// display:none (it is still safe to use offsets if a parent element is
		// hidden; don safety goggles and see bug #4512 for more information).
		// (only IE 8 fails this test)
		div.innerHTML = "<table><tr><td></td><td>t</td></tr></table>";
		tds = div.getElementsByTagName("td");
		tds[ 0 ].style.cssText = "padding:0;margin:0;border:0;display:none";
		isSupported = ( tds[ 0 ].offsetHeight === 0 );

		tds[ 0 ].style.display = "";
		tds[ 1 ].style.display = "none";

		// Check if empty table cells still have offsetWidth/Height
		// (IE <= 8 fail this test)
		support.reliableHiddenOffsets = isSupported && ( tds[ 0 ].offsetHeight === 0 );

		// Check box-sizing and margin behavior
		div.innerHTML = "";
		div.style.cssText = "box-sizing:border-box;-moz-box-sizing:border-box;-webkit-box-sizing:border-box;padding:1px;border:1px;display:block;width:4px;margin-top:1%;position:absolute;top:1%;";
		support.boxSizing = ( div.offsetWidth === 4 );
		support.doesNotIncludeMarginInBodyOffset = ( body.offsetTop !== 1 );

		// NOTE: To any future maintainer, we've window.getComputedStyle
		// because jsdom on node.js will break without it.
		if ( window.getComputedStyle ) {
			support.pixelPosition = ( window.getComputedStyle( div, null ) || {} ).top !== "1%";
			support.boxSizingReliable = ( window.getComputedStyle( div, null ) || { width: "4px" } ).width === "4px";

			// Check if div with explicit width and no margin-right incorrectly
			// gets computed margin-right based on width of container. For more
			// info see bug #3333
			// Fails in WebKit before Feb 2011 nightlies
			// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
			marginDiv = document.createElement("div");
			marginDiv.style.cssText = div.style.cssText = divReset;
			marginDiv.style.marginRight = marginDiv.style.width = "0";
			div.style.width = "1px";
			div.appendChild( marginDiv );
			support.reliableMarginRight =
				!parseFloat( ( window.getComputedStyle( marginDiv, null ) || {} ).marginRight );
		}

		if ( typeof div.style.zoom !== "undefined" ) {
			// Check if natively block-level elements act like inline-block
			// elements when setting their display to 'inline' and giving
			// them layout
			// (IE < 8 does this)
			div.innerHTML = "";
			div.style.cssText = divReset + "width:1px;padding:1px;display:inline;zoom:1";
			support.inlineBlockNeedsLayout = ( div.offsetWidth === 3 );

			// Check if elements with layout shrink-wrap their children
			// (IE 6 does this)
			div.style.display = "block";
			div.style.overflow = "visible";
			div.innerHTML = "<div></div>";
			div.firstChild.style.width = "5px";
			support.shrinkWrapBlocks = ( div.offsetWidth !== 3 );

			container.style.zoom = 1;
		}

		// Null elements to avoid leaks in IE
		body.removeChild( container );
		container = div = tds = marginDiv = null;
	});

	// Null elements to avoid leaks in IE
	fragment.removeChild( div );
	all = a = select = opt = input = fragment = div = null;

	return support;
})();
var rbrace = /(?:\{[\s\S]*\}|\[[\s\S]*\])$/,
	rmultiDash = /([A-Z])/g;

jQuery.extend({
	cache: {},

	deletedIds: [],

	// Remove at next major release (1.9/2.0)
	uuid: 0,

	// Unique for each copy of jQuery on the page
	// Non-digits removed to match rinlinejQuery
	expando: "jQuery" + ( jQuery.fn.jquery + Math.random() ).replace( /\D/g, "" ),

	// The following elements throw uncatchable exceptions if you
	// attempt to add expando properties to them.
	noData: {
		"embed": true,
		// Ban all objects except for Flash (which handle expandos)
		"object": "clsid:D27CDB6E-AE6D-11cf-96B8-444553540000",
		"applet": true
	},

	hasData: function( elem ) {
		elem = elem.nodeType ? jQuery.cache[ elem[jQuery.expando] ] : elem[ jQuery.expando ];
		return !!elem && !isEmptyDataObject( elem );
	},

	data: function( elem, name, data, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, ret,
			internalKey = jQuery.expando,
			getByName = typeof name === "string",

			// We have to handle DOM nodes and JS objects differently because IE6-7
			// can't GC object references properly across the DOM-JS boundary
			isNode = elem.nodeType,

			// Only DOM nodes need the global jQuery cache; JS object data is
			// attached directly to the object so GC can occur automatically
			cache = isNode ? jQuery.cache : elem,

			// Only defining an ID for JS objects if its cache already exists allows
			// the code to shortcut on the same path as a DOM node with no cache
			id = isNode ? elem[ internalKey ] : elem[ internalKey ] && internalKey;

		// Avoid doing any more work than we need to when trying to get data on an
		// object that has no data at all
		if ( (!id || !cache[id] || (!pvt && !cache[id].data)) && getByName && data === undefined ) {
			return;
		}

		if ( !id ) {
			// Only DOM nodes need a new unique ID for each element since their data
			// ends up in the global cache
			if ( isNode ) {
				elem[ internalKey ] = id = jQuery.deletedIds.pop() || jQuery.guid++;
			} else {
				id = internalKey;
			}
		}

		if ( !cache[ id ] ) {
			cache[ id ] = {};

			// Avoids exposing jQuery metadata on plain JS objects when the object
			// is serialized using JSON.stringify
			if ( !isNode ) {
				cache[ id ].toJSON = jQuery.noop;
			}
		}

		// An object can be passed to jQuery.data instead of a key/value pair; this gets
		// shallow copied over onto the existing cache
		if ( typeof name === "object" || typeof name === "function" ) {
			if ( pvt ) {
				cache[ id ] = jQuery.extend( cache[ id ], name );
			} else {
				cache[ id ].data = jQuery.extend( cache[ id ].data, name );
			}
		}

		thisCache = cache[ id ];

		// jQuery data() is stored in a separate object inside the object's internal data
		// cache in order to avoid key collisions between internal data and user-defined
		// data.
		if ( !pvt ) {
			if ( !thisCache.data ) {
				thisCache.data = {};
			}

			thisCache = thisCache.data;
		}

		if ( data !== undefined ) {
			thisCache[ jQuery.camelCase( name ) ] = data;
		}

		// Check for both converted-to-camel and non-converted data property names
		// If a data property was specified
		if ( getByName ) {

			// First Try to find as-is property data
			ret = thisCache[ name ];

			// Test for null|undefined property data
			if ( ret == null ) {

				// Try to find the camelCased property
				ret = thisCache[ jQuery.camelCase( name ) ];
			}
		} else {
			ret = thisCache;
		}

		return ret;
	},

	removeData: function( elem, name, pvt /* Internal Use Only */ ) {
		if ( !jQuery.acceptData( elem ) ) {
			return;
		}

		var thisCache, i, l,

			isNode = elem.nodeType,

			// See jQuery.data for more information
			cache = isNode ? jQuery.cache : elem,
			id = isNode ? elem[ jQuery.expando ] : jQuery.expando;

		// If there is already no cache entry for this object, there is no
		// purpose in continuing
		if ( !cache[ id ] ) {
			return;
		}

		if ( name ) {

			thisCache = pvt ? cache[ id ] : cache[ id ].data;

			if ( thisCache ) {

				// Support array or space separated string names for data keys
				if ( !jQuery.isArray( name ) ) {

					// try the string as a key before any manipulation
					if ( name in thisCache ) {
						name = [ name ];
					} else {

						// split the camel cased version by spaces unless a key with the spaces exists
						name = jQuery.camelCase( name );
						if ( name in thisCache ) {
							name = [ name ];
						} else {
							name = name.split(" ");
						}
					}
				}

				for ( i = 0, l = name.length; i < l; i++ ) {
					delete thisCache[ name[i] ];
				}

				// If there is no data left in the cache, we want to continue
				// and let the cache object itself get destroyed
				if ( !( pvt ? isEmptyDataObject : jQuery.isEmptyObject )( thisCache ) ) {
					return;
				}
			}
		}

		// See jQuery.data for more information
		if ( !pvt ) {
			delete cache[ id ].data;

			// Don't destroy the parent cache unless the internal data object
			// had been the only thing left in it
			if ( !isEmptyDataObject( cache[ id ] ) ) {
				return;
			}
		}

		// Destroy the cache
		if ( isNode ) {
			jQuery.cleanData( [ elem ], true );

		// Use delete when supported for expandos or `cache` is not a window per isWindow (#10080)
		} else if ( jQuery.support.deleteExpando || cache != cache.window ) {
			delete cache[ id ];

		// When all else fails, null
		} else {
			cache[ id ] = null;
		}
	},

	// For internal use only.
	_data: function( elem, name, data ) {
		return jQuery.data( elem, name, data, true );
	},

	// A method for determining if a DOM node can handle the data expando
	acceptData: function( elem ) {
		var noData = elem.nodeName && jQuery.noData[ elem.nodeName.toLowerCase() ];

		// nodes accept data unless otherwise specified; rejection can be conditional
		return !noData || noData !== true && elem.getAttribute("classid") === noData;
	}
});

jQuery.fn.extend({
	data: function( key, value ) {
		var parts, part, attr, name, l,
			elem = this[0],
			i = 0,
			data = null;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = jQuery.data( elem );

				if ( elem.nodeType === 1 && !jQuery._data( elem, "parsedAttrs" ) ) {
					attr = elem.attributes;
					for ( l = attr.length; i < l; i++ ) {
						name = attr[i].name;

						if ( !name.indexOf( "data-" ) ) {
							name = jQuery.camelCase( name.substring(5) );

							dataAttr( elem, name, data[ name ] );
						}
					}
					jQuery._data( elem, "parsedAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each(function() {
				jQuery.data( this, key );
			});
		}

		parts = key.split( ".", 2 );
		parts[1] = parts[1] ? "." + parts[1] : "";
		part = parts[1] + "!";

		return jQuery.access( this, function( value ) {

			if ( value === undefined ) {
				data = this.triggerHandler( "getData" + part, [ parts[0] ] );

				// Try to fetch any internally stored data first
				if ( data === undefined && elem ) {
					data = jQuery.data( elem, key );
					data = dataAttr( elem, key, data );
				}

				return data === undefined && parts[1] ?
					this.data( parts[0] ) :
					data;
			}

			parts[1] = value;
			this.each(function() {
				var self = jQuery( this );

				self.triggerHandler( "setData" + part, parts );
				jQuery.data( this, key, value );
				self.triggerHandler( "changeData" + part, parts );
			});
		}, null, value, arguments.length > 1, null, false );
	},

	removeData: function( key ) {
		return this.each(function() {
			jQuery.removeData( this, key );
		});
	}
});

function dataAttr( elem, key, data ) {
	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {

		var name = "data-" + key.replace( rmultiDash, "-$1" ).toLowerCase();

		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = data === "true" ? true :
				data === "false" ? false :
				data === "null" ? null :
				// Only convert to a number if it doesn't change the string
				+data + "" === data ? +data :
				rbrace.test( data ) ? jQuery.parseJSON( data ) :
					data;
			} catch( e ) {}

			// Make sure we set the data so it isn't changed later
			jQuery.data( elem, key, data );

		} else {
			data = undefined;
		}
	}

	return data;
}

// checks a cache object for emptiness
function isEmptyDataObject( obj ) {
	var name;
	for ( name in obj ) {

		// if the public data object is empty, the private is still empty
		if ( name === "data" && jQuery.isEmptyObject( obj[name] ) ) {
			continue;
		}
		if ( name !== "toJSON" ) {
			return false;
		}
	}

	return true;
}
jQuery.extend({
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = jQuery._data( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || jQuery.isArray(data) ) {
					queue = jQuery._data( elem, type, jQuery.makeArray(data) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// not intended for public consumption - generates a queueHooks object, or returns the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return jQuery._data( elem, key ) || jQuery._data( elem, key, {
			empty: jQuery.Callbacks("once memory").add(function() {
				jQuery.removeData( elem, type + "queue", true );
				jQuery.removeData( elem, key, true );
			})
		});
	}
});

jQuery.fn.extend({
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[0], type );
		}

		return data === undefined ?
			this :
			this.each(function() {
				var queue = jQuery.queue( this, type, data );

				// ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[0] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			});
	},
	dequeue: function( type ) {
		return this.each(function() {
			jQuery.dequeue( this, type );
		});
	},
	// Based off of the plugin by Clint Helfers, with permission.
	// http://blindsignals.com/index.php/2009/07/jquery-delay/
	delay: function( time, type ) {
		time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
		type = type || "fx";

		return this.queue( type, function( next, hooks ) {
			var timeout = setTimeout( next, time );
			hooks.stop = function() {
				clearTimeout( timeout );
			};
		});
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},
	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while( i-- ) {
			tmp = jQuery._data( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
});
var nodeHook, boolHook, fixSpecified,
	rclass = /[\t\r\n]/g,
	rreturn = /\r/g,
	rtype = /^(?:button|input)$/i,
	rfocusable = /^(?:button|input|object|select|textarea)$/i,
	rclickable = /^a(?:rea|)$/i,
	rboolean = /^(?:autofocus|autoplay|async|checked|controls|defer|disabled|hidden|loop|multiple|open|readonly|required|scoped|selected)$/i,
	getSetAttribute = jQuery.support.getSetAttribute;

jQuery.fn.extend({
	attr: function( name, value ) {
		return jQuery.access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each(function() {
			jQuery.removeAttr( this, name );
		});
	},

	prop: function( name, value ) {
		return jQuery.access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		name = jQuery.propFix[ name ] || name;
		return this.each(function() {
			// try/catch handles cases where IE balks (such as removing a property on window)
			try {
				this[ name ] = undefined;
				delete this[ name ];
			} catch( e ) {}
		});
	},

	addClass: function( value ) {
		var classNames, i, l, elem,
			setClass, c, cl;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).addClass( value.call(this, j, this.className) );
			});
		}

		if ( value && typeof value === "string" ) {
			classNames = value.split( core_rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];

				if ( elem.nodeType === 1 ) {
					if ( !elem.className && classNames.length === 1 ) {
						elem.className = value;

					} else {
						setClass = " " + elem.className + " ";

						for ( c = 0, cl = classNames.length; c < cl; c++ ) {
							if ( setClass.indexOf( " " + classNames[ c ] + " " ) < 0 ) {
								setClass += classNames[ c ] + " ";
							}
						}
						elem.className = jQuery.trim( setClass );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var removes, className, elem, c, cl, i, l;

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( j ) {
				jQuery( this ).removeClass( value.call(this, j, this.className) );
			});
		}
		if ( (value && typeof value === "string") || value === undefined ) {
			removes = ( value || "" ).split( core_rspace );

			for ( i = 0, l = this.length; i < l; i++ ) {
				elem = this[ i ];
				if ( elem.nodeType === 1 && elem.className ) {

					className = (" " + elem.className + " ").replace( rclass, " " );

					// loop over each item in the removal list
					for ( c = 0, cl = removes.length; c < cl; c++ ) {
						// Remove until there is nothing to remove,
						while ( className.indexOf(" " + removes[ c ] + " ") >= 0 ) {
							className = className.replace( " " + removes[ c ] + " " , " " );
						}
					}
					elem.className = value ? jQuery.trim( className ) : "";
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isBool = typeof stateVal === "boolean";

		if ( jQuery.isFunction( value ) ) {
			return this.each(function( i ) {
				jQuery( this ).toggleClass( value.call(this, i, this.className, stateVal), stateVal );
			});
		}

		return this.each(function() {
			if ( type === "string" ) {
				// toggle individual class names
				var className,
					i = 0,
					self = jQuery( this ),
					state = stateVal,
					classNames = value.split( core_rspace );

				while ( (className = classNames[ i++ ]) ) {
					// check each className given, space separated list
					state = isBool ? state : !self.hasClass( className );
					self[ state ? "addClass" : "removeClass" ]( className );
				}

			} else if ( type === "undefined" || type === "boolean" ) {
				if ( this.className ) {
					// store className if set
					jQuery._data( this, "__className__", this.className );
				}

				// toggle whole className
				this.className = this.className || value === false ? "" : jQuery._data( this, "__className__" ) || "";
			}
		});
	},

	hasClass: function( selector ) {
		var className = " " + selector + " ",
			i = 0,
			l = this.length;
		for ( ; i < l; i++ ) {
			if ( this[i].nodeType === 1 && (" " + this[i].className + " ").replace(rclass, " ").indexOf( className ) >= 0 ) {
				return true;
			}
		}

		return false;
	},

	val: function( value ) {
		var hooks, ret, isFunction,
			elem = this[0];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] || jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks && "get" in hooks && (ret = hooks.get( elem, "value" )) !== undefined ) {
					return ret;
				}

				ret = elem.value;

				return typeof ret === "string" ?
					// handle most common string cases
					ret.replace(rreturn, "") :
					// handle cases where value is null/undef or number
					ret == null ? "" : ret;
			}

			return;
		}

		isFunction = jQuery.isFunction( value );

		return this.each(function( i ) {
			var val,
				self = jQuery(this);

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( isFunction ) {
				val = value.call( this, i, self.val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";
			} else if ( typeof val === "number" ) {
				val += "";
			} else if ( jQuery.isArray( val ) ) {
				val = jQuery.map(val, function ( value ) {
					return value == null ? "" : value + "";
				});
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !("set" in hooks) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		});
	}
});

jQuery.extend({
	valHooks: {
		option: {
			get: function( elem ) {
				// attributes.value is undefined in Blackberry 4.7 but
				// uses .value. See #6932
				var val = elem.attributes.value;
				return !val || val.specified ? elem.value : elem.text;
			}
		},
		select: {
			get: function( elem ) {
				var value, option,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one" || index < 0,
					values = one ? null : [],
					max = one ? index + 1 : options.length,
					i = index < 0 ?
						max :
						one ? index : 0;

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// oldIE doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&
							// Don't return options that are disabled or in a disabled optgroup
							( jQuery.support.optDisabled ? !option.disabled : option.getAttribute("disabled") === null ) &&
							( !option.parentNode.disabled || !jQuery.nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var values = jQuery.makeArray( value );

				jQuery(elem).find("option").each(function() {
					this.selected = jQuery.inArray( jQuery(this).val(), values ) >= 0;
				});

				if ( !values.length ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	},

	// Unused in 1.8, left in so attrFn-stabbers won't die; remove in 1.9
	attrFn: {},

	attr: function( elem, name, value, pass ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set attributes on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( pass && jQuery.isFunction( jQuery.fn[ name ] ) ) {
			return jQuery( elem )[ name ]( value );
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		// All attributes are lowercase
		// Grab necessary hook if one is defined
		if ( notxml ) {
			name = name.toLowerCase();
			hooks = jQuery.attrHooks[ name ] || ( rboolean.test( name ) ? boolHook : nodeHook );
		}

		if ( value !== undefined ) {

			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;

			} else if ( hooks && "set" in hooks && notxml && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				elem.setAttribute( name, value + "" );
				return value;
			}

		} else if ( hooks && "get" in hooks && notxml && (ret = hooks.get( elem, name )) !== null ) {
			return ret;

		} else {

			ret = elem.getAttribute( name );

			// Non-existent attributes return null, we normalize to undefined
			return ret === null ?
				undefined :
				ret;
		}
	},

	removeAttr: function( elem, value ) {
		var propName, attrNames, name, isBool,
			i = 0;

		if ( value && elem.nodeType === 1 ) {

			attrNames = value.split( core_rspace );

			for ( ; i < attrNames.length; i++ ) {
				name = attrNames[ i ];

				if ( name ) {
					propName = jQuery.propFix[ name ] || name;
					isBool = rboolean.test( name );

					// See #9699 for explanation of this approach (setting first, then removal)
					// Do not do this for boolean attributes (see #10870)
					if ( !isBool ) {
						jQuery.attr( elem, name, "" );
					}
					elem.removeAttribute( getSetAttribute ? name : propName );

					// Set corresponding property to false for boolean attributes
					if ( isBool && propName in elem ) {
						elem[ propName ] = false;
					}
				}
			}
		}
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				// We can't allow the type property to be changed (since it causes problems in IE)
				if ( rtype.test( elem.nodeName ) && elem.parentNode ) {
					jQuery.error( "type property can't be changed" );
				} else if ( !jQuery.support.radioValue && value === "radio" && jQuery.nodeName(elem, "input") ) {
					// Setting the type on a radio button after the value resets the value in IE6-9
					// Reset value to it's default in case type is set after value
					// This is for element creation
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		},
		// Use the value property for back compat
		// Use the nodeHook for button elements in IE6/7 (#1954)
		value: {
			get: function( elem, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.get( elem, name );
				}
				return name in elem ?
					elem.value :
					null;
			},
			set: function( elem, value, name ) {
				if ( nodeHook && jQuery.nodeName( elem, "button" ) ) {
					return nodeHook.set( elem, value, name );
				}
				// Does not return so that setAttribute is also used
				elem.value = value;
			}
		}
	},

	propFix: {
		tabindex: "tabIndex",
		readonly: "readOnly",
		"for": "htmlFor",
		"class": "className",
		maxlength: "maxLength",
		cellspacing: "cellSpacing",
		cellpadding: "cellPadding",
		rowspan: "rowSpan",
		colspan: "colSpan",
		usemap: "useMap",
		frameborder: "frameBorder",
		contenteditable: "contentEditable"
	},

	prop: function( elem, name, value ) {
		var ret, hooks, notxml,
			nType = elem.nodeType;

		// don't get/set properties on text, comment and attribute nodes
		if ( !elem || nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		notxml = nType !== 1 || !jQuery.isXMLDoc( elem );

		if ( notxml ) {
			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks && (ret = hooks.set( elem, value, name )) !== undefined ) {
				return ret;

			} else {
				return ( elem[ name ] = value );
			}

		} else {
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, name )) !== null ) {
				return ret;

			} else {
				return elem[ name ];
			}
		}
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {
				// elem.tabIndex doesn't always return the correct value when it hasn't been explicitly set
				// http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				var attributeNode = elem.getAttributeNode("tabindex");

				return attributeNode && attributeNode.specified ?
					parseInt( attributeNode.value, 10 ) :
					rfocusable.test( elem.nodeName ) || rclickable.test( elem.nodeName ) && elem.href ?
						0 :
						undefined;
			}
		}
	}
});

// Hook for boolean attributes
boolHook = {
	get: function( elem, name ) {
		// Align boolean attributes with corresponding properties
		// Fall back to attribute presence where some booleans are not supported
		var attrNode,
			property = jQuery.prop( elem, name );
		return property === true || typeof property !== "boolean" && ( attrNode = elem.getAttributeNode(name) ) && attrNode.nodeValue !== false ?
			name.toLowerCase() :
			undefined;
	},
	set: function( elem, value, name ) {
		var propName;
		if ( value === false ) {
			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			// value is true since we know at this point it's type boolean and not false
			// Set boolean attributes to the same name and set the DOM property
			propName = jQuery.propFix[ name ] || name;
			if ( propName in elem ) {
				// Only set the IDL specifically if it already exists on the element
				elem[ propName ] = true;
			}

			elem.setAttribute( name, name.toLowerCase() );
		}
		return name;
	}
};

// IE6/7 do not support getting/setting some attributes with get/setAttribute
if ( !getSetAttribute ) {

	fixSpecified = {
		name: true,
		id: true,
		coords: true
	};

	// Use this for any attribute in IE6/7
	// This fixes almost every IE6/7 issue
	nodeHook = jQuery.valHooks.button = {
		get: function( elem, name ) {
			var ret;
			ret = elem.getAttributeNode( name );
			return ret && ( fixSpecified[ name ] ? ret.value !== "" : ret.specified ) ?
				ret.value :
				undefined;
		},
		set: function( elem, value, name ) {
			// Set the existing or create a new attribute node
			var ret = elem.getAttributeNode( name );
			if ( !ret ) {
				ret = document.createAttribute( name );
				elem.setAttributeNode( ret );
			}
			return ( ret.value = value + "" );
		}
	};

	// Set width and height to auto instead of 0 on empty string( Bug #8150 )
	// This is for removals
	jQuery.each([ "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			set: function( elem, value ) {
				if ( value === "" ) {
					elem.setAttribute( name, "auto" );
					return value;
				}
			}
		});
	});

	// Set contenteditable to false on removals(#10429)
	// Setting to empty string throws an error as an invalid value
	jQuery.attrHooks.contenteditable = {
		get: nodeHook.get,
		set: function( elem, value, name ) {
			if ( value === "" ) {
				value = "false";
			}
			nodeHook.set( elem, value, name );
		}
	};
}


// Some attributes require a special call on IE
if ( !jQuery.support.hrefNormalized ) {
	jQuery.each([ "href", "src", "width", "height" ], function( i, name ) {
		jQuery.attrHooks[ name ] = jQuery.extend( jQuery.attrHooks[ name ], {
			get: function( elem ) {
				var ret = elem.getAttribute( name, 2 );
				return ret === null ? undefined : ret;
			}
		});
	});
}

if ( !jQuery.support.style ) {
	jQuery.attrHooks.style = {
		get: function( elem ) {
			// Return undefined in the case of empty string
			// Normalize to lowercase since IE uppercases css property names
			return elem.style.cssText.toLowerCase() || undefined;
		},
		set: function( elem, value ) {
			return ( elem.style.cssText = value + "" );
		}
	};
}

// Safari mis-reports the default selected property of an option
// Accessing the parent's selectedIndex property fixes it
if ( !jQuery.support.optSelected ) {
	jQuery.propHooks.selected = jQuery.extend( jQuery.propHooks.selected, {
		get: function( elem ) {
			var parent = elem.parentNode;

			if ( parent ) {
				parent.selectedIndex;

				// Make sure that it also works with optgroups, see #5701
				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
			return null;
		}
	});
}

// IE6/7 call enctype encoding
if ( !jQuery.support.enctype ) {
	jQuery.propFix.enctype = "encoding";
}

// Radios and checkboxes getter/setter
if ( !jQuery.support.checkOn ) {
	jQuery.each([ "radio", "checkbox" ], function() {
		jQuery.valHooks[ this ] = {
			get: function( elem ) {
				// Handle the case where in Webkit "" is returned instead of "on" if a value isn't specified
				return elem.getAttribute("value") === null ? "on" : elem.value;
			}
		};
	});
}
jQuery.each([ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = jQuery.extend( jQuery.valHooks[ this ], {
		set: function( elem, value ) {
			if ( jQuery.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery(elem).val(), value ) >= 0 );
			}
		}
	});
});
var rformElems = /^(?:textarea|input|select)$/i,
	rtypenamespace = /^([^\.]*|)(?:\.(.+)|)$/,
	rhoverHack = /(?:^|\s)hover(\.\S+|)\b/,
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|contextmenu)|click/,
	rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	hoverHack = function( events ) {
		return jQuery.event.special.hover ? events : events.replace( rhoverHack, "mouseenter$1 mouseleave$1" );
	};

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	add: function( elem, types, handler, data, selector ) {

		var elemData, eventHandle, events,
			t, tns, type, namespaces, handleObj,
			handleObjIn, handlers, special;

		// Don't attach events to noData or text/comment nodes (allow plain objects tho)
		if ( elem.nodeType === 3 || elem.nodeType === 8 || !types || !handler || !(elemData = jQuery._data( elem )) ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		events = elemData.events;
		if ( !events ) {
			elemData.events = events = {};
		}
		eventHandle = elemData.handle;
		if ( !eventHandle ) {
			elemData.handle = eventHandle = function( e ) {
				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && (!e || jQuery.event.triggered !== e.type) ?
					jQuery.event.dispatch.apply( eventHandle.elem, arguments ) :
					undefined;
			};
			// Add elem as a property of the handle fn to prevent a memory leak with IE non-native events
			eventHandle.elem = elem;
		}

		// Handle multiple events separated by a space
		// jQuery(...).bind("mouseover mouseout", fn);
		types = jQuery.trim( hoverHack(types) ).split( " " );
		for ( t = 0; t < types.length; t++ ) {

			tns = rtypenamespace.exec( types[t] ) || [];
			type = tns[1];
			namespaces = ( tns[2] || "" ).split( "." ).sort();

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend({
				type: type,
				origType: tns[1],
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join(".")
			}, handleObjIn );

			// Init the event handler queue if we're the first
			handlers = events[ type ];
			if ( !handlers ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener/attachEvent if the special events handler returns false
				if ( !special.setup || special.setup.call( elem, data, namespaces, eventHandle ) === false ) {
					// Bind the global event handler to the element
					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle, false );

					} else if ( elem.attachEvent ) {
						elem.attachEvent( "on" + type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

		// Nullify elem to prevent memory leaks in IE
		elem = null;
	},

	global: {},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var t, tns, type, origType, namespaces, origCount,
			j, events, special, eventType, handleObj,
			elemData = jQuery.hasData( elem ) && jQuery._data( elem );

		if ( !elemData || !(events = elemData.events) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = jQuery.trim( hoverHack( types || "" ) ).split(" ");
		for ( t = 0; t < types.length; t++ ) {
			tns = rtypenamespace.exec( types[t] ) || [];
			type = origType = tns[1];
			namespaces = tns[2];

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector? special.delegateType : special.bindType ) || type;
			eventType = events[ type ] || [];
			origCount = eventType.length;
			namespaces = namespaces ? new RegExp("(^|\\.)" + namespaces.split(".").sort().join("\\.(?:.*\\.|)") + "(\\.|$)") : null;

			// Remove matching events
			for ( j = 0; j < eventType.length; j++ ) {
				handleObj = eventType[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					 ( !handler || handler.guid === handleObj.guid ) &&
					 ( !namespaces || namespaces.test( handleObj.namespace ) ) &&
					 ( !selector || selector === handleObj.selector || selector === "**" && handleObj.selector ) ) {
					eventType.splice( j--, 1 );

					if ( handleObj.selector ) {
						eventType.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( eventType.length === 0 && origCount !== eventType.length ) {
				if ( !special.teardown || special.teardown.call( elem, namespaces, elemData.handle ) === false ) {
					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			delete elemData.handle;

			// removeData also checks for emptiness and clears the expando if empty
			// so use it instead of delete
			jQuery.removeData( elem, "events", true );
		}
	},

	// Events that are safe to short-circuit if no handlers are attached.
	// Native DOM events should not be added, they may have inline handlers.
	customEvent: {
		"getData": true,
		"setData": true,
		"changeData": true
	},

	trigger: function( event, data, elem, onlyHandlers ) {
		// Don't do events on text and comment nodes
		if ( elem && (elem.nodeType === 3 || elem.nodeType === 8) ) {
			return;
		}

		// Event object or event type
		var cache, exclusive, i, cur, old, ontype, special, handle, eventPath, bubbleType,
			type = event.type || event,
			namespaces = [];

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "!" ) >= 0 ) {
			// Exclusive events trigger only for the exact event (no namespaces)
			type = type.slice(0, -1);
			exclusive = true;
		}

		if ( type.indexOf( "." ) >= 0 ) {
			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split(".");
			type = namespaces.shift();
			namespaces.sort();
		}

		if ( (!elem || jQuery.event.customEvent[ type ]) && !jQuery.event.global[ type ] ) {
			// No jQuery handlers for this event type, and it can't have inline handlers
			return;
		}

		// Caller can pass in an Event, Object, or just an event type string
		event = typeof event === "object" ?
			// jQuery.Event object
			event[ jQuery.expando ] ? event :
			// Object literal
			new jQuery.Event( type, event ) :
			// Just the event type (string)
			new jQuery.Event( type );

		event.type = type;
		event.isTrigger = true;
		event.exclusive = exclusive;
		event.namespace = namespaces.join( "." );
		event.namespace_re = event.namespace? new RegExp("(^|\\.)" + namespaces.join("\\.(?:.*\\.|)") + "(\\.|$)") : null;
		ontype = type.indexOf( ":" ) < 0 ? "on" + type : "";

		// Handle a global trigger
		if ( !elem ) {

			// TODO: Stop taunting the data cache; remove global events and always attach to document
			cache = jQuery.cache;
			for ( i in cache ) {
				if ( cache[ i ].events && cache[ i ].events[ type ] ) {
					jQuery.event.trigger( event, data, cache[ i ].handle.elem, true );
				}
			}
			return;
		}

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data != null ? jQuery.makeArray( data ) : [];
		data.unshift( event );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		eventPath = [[ elem, special.bindType || type ]];
		if ( !onlyHandlers && !special.noBubble && !jQuery.isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			cur = rfocusMorph.test( bubbleType + type ) ? elem : elem.parentNode;
			for ( old = elem; cur; cur = cur.parentNode ) {
				eventPath.push([ cur, bubbleType ]);
				old = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( old === (elem.ownerDocument || document) ) {
				eventPath.push([ old.defaultView || old.parentWindow || window, bubbleType ]);
			}
		}

		// Fire handlers on the event path
		for ( i = 0; i < eventPath.length && !event.isPropagationStopped(); i++ ) {

			cur = eventPath[i][0];
			event.type = eventPath[i][1];

			handle = ( jQuery._data( cur, "events" ) || {} )[ event.type ] && jQuery._data( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}
			// Note that this is a bare JS function and not a jQuery handler
			handle = ontype && cur[ ontype ];
			if ( handle && jQuery.acceptData( cur ) && handle.apply && handle.apply( cur, data ) === false ) {
				event.preventDefault();
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( (!special._default || special._default.apply( elem.ownerDocument, data ) === false) &&
				!(type === "click" && jQuery.nodeName( elem, "a" )) && jQuery.acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name name as the event.
				// Can't use an .isFunction() check here because IE6/7 fails that test.
				// Don't do default actions on window, that's where global variables be (#6170)
				// IE<9 dies on focus/blur to hidden element (#1486)
				if ( ontype && elem[ type ] && ((type !== "focus" && type !== "blur") || event.target.offsetWidth !== 0) && !jQuery.isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					old = elem[ ontype ];

					if ( old ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;
					elem[ type ]();
					jQuery.event.triggered = undefined;

					if ( old ) {
						elem[ ontype ] = old;
					}
				}
			}
		}

		return event.result;
	},

	dispatch: function( event ) {

		// Make a writable jQuery.Event from the native event object
		event = jQuery.event.fix( event || window.event );

		var i, j, cur, ret, selMatch, matched, matches, handleObj, sel, related,
			handlers = ( (jQuery._data( this, "events" ) || {} )[ event.type ] || []),
			delegateCount = handlers.delegateCount,
			args = core_slice.call( arguments ),
			run_all = !event.exclusive && !event.namespace,
			special = jQuery.event.special[ event.type ] || {},
			handlerQueue = [];

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[0] = event;
		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers that should run if there are delegated events
		// Avoid non-left-click bubbling in Firefox (#3861)
		if ( delegateCount && !(event.button && event.type === "click") ) {

			for ( cur = event.target; cur != this; cur = cur.parentNode || this ) {

				// Don't process clicks (ONLY) on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.disabled !== true || event.type !== "click" ) {
					selMatch = {};
					matches = [];
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];
						sel = handleObj.selector;

						if ( selMatch[ sel ] === undefined ) {
							selMatch[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) >= 0 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( selMatch[ sel ] ) {
							matches.push( handleObj );
						}
					}
					if ( matches.length ) {
						handlerQueue.push({ elem: cur, matches: matches });
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		if ( handlers.length > delegateCount ) {
			handlerQueue.push({ elem: this, matches: handlers.slice( delegateCount ) });
		}

		// Run delegates first; they may want to stop propagation beneath us
		for ( i = 0; i < handlerQueue.length && !event.isPropagationStopped(); i++ ) {
			matched = handlerQueue[ i ];
			event.currentTarget = matched.elem;

			for ( j = 0; j < matched.matches.length && !event.isImmediatePropagationStopped(); j++ ) {
				handleObj = matched.matches[ j ];

				// Triggered event must either 1) be non-exclusive and have no namespace, or
				// 2) have namespace(s) a subset or equal to those in the bound event (both can have no namespace).
				if ( run_all || (!event.namespace && !handleObj.namespace) || event.namespace_re && event.namespace_re.test( handleObj.namespace ) ) {

					event.data = handleObj.data;
					event.handleObj = handleObj;

					ret = ( (jQuery.event.special[ handleObj.origType ] || {}).handle || handleObj.handler )
							.apply( matched.elem, args );

					if ( ret !== undefined ) {
						event.result = ret;
						if ( ret === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	// Includes some event props shared by KeyEvent and MouseEvent
	// *** attrChange attrName relatedNode srcElement  are not normalized, non-W3C, deprecated, will be removed in 1.8 ***
	props: "attrChange attrName relatedNode srcElement altKey bubbles cancelable ctrlKey currentTarget eventPhase metaKey relatedTarget shiftKey target timeStamp view which".split(" "),

	fixHooks: {},

	keyHooks: {
		props: "char charCode key keyCode".split(" "),
		filter: function( event, original ) {

			// Add which for key events
			if ( event.which == null ) {
				event.which = original.charCode != null ? original.charCode : original.keyCode;
			}

			return event;
		}
	},

	mouseHooks: {
		props: "button buttons clientX clientY fromElement offsetX offsetY pageX pageY screenX screenY toElement".split(" "),
		filter: function( event, original ) {
			var eventDoc, doc, body,
				button = original.button,
				fromElement = original.fromElement;

			// Calculate pageX/Y if missing and clientX/Y available
			if ( event.pageX == null && original.clientX != null ) {
				eventDoc = event.target.ownerDocument || document;
				doc = eventDoc.documentElement;
				body = eventDoc.body;

				event.pageX = original.clientX + ( doc && doc.scrollLeft || body && body.scrollLeft || 0 ) - ( doc && doc.clientLeft || body && body.clientLeft || 0 );
				event.pageY = original.clientY + ( doc && doc.scrollTop  || body && body.scrollTop  || 0 ) - ( doc && doc.clientTop  || body && body.clientTop  || 0 );
			}

			// Add relatedTarget, if necessary
			if ( !event.relatedTarget && fromElement ) {
				event.relatedTarget = fromElement === event.target ? original.toElement : fromElement;
			}

			// Add which for click: 1 === left; 2 === middle; 3 === right
			// Note: button is not normalized, so don't use it
			if ( !event.which && button !== undefined ) {
				event.which = ( button & 1 ? 1 : ( button & 2 ? 3 : ( button & 4 ? 2 : 0 ) ) );
			}

			return event;
		}
	},

	fix: function( event ) {
		if ( event[ jQuery.expando ] ) {
			return event;
		}

		// Create a writable copy of the event object and normalize some properties
		var i, prop,
			originalEvent = event,
			fixHook = jQuery.event.fixHooks[ event.type ] || {},
			copy = fixHook.props ? this.props.concat( fixHook.props ) : this.props;

		event = jQuery.Event( originalEvent );

		for ( i = copy.length; i; ) {
			prop = copy[ --i ];
			event[ prop ] = originalEvent[ prop ];
		}

		// Fix target property, if necessary (#1925, IE 6/7/8 & Safari2)
		if ( !event.target ) {
			event.target = originalEvent.srcElement || document;
		}

		// Target should not be a text node (#504, Safari)
		if ( event.target.nodeType === 3 ) {
			event.target = event.target.parentNode;
		}

		// For mouse/key events, metaKey==false if it's undefined (#3368, #11328; IE6/7/8)
		event.metaKey = !!event.metaKey;

		return fixHook.filter? fixHook.filter( event, originalEvent ) : event;
	},

	special: {
		load: {
			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},

		focus: {
			delegateType: "focusin"
		},
		blur: {
			delegateType: "focusout"
		},

		beforeunload: {
			setup: function( data, namespaces, eventHandle ) {
				// We only want to do this special case on windows
				if ( jQuery.isWindow( this ) ) {
					this.onbeforeunload = eventHandle;
				}
			},

			teardown: function( namespaces, eventHandle ) {
				if ( this.onbeforeunload === eventHandle ) {
					this.onbeforeunload = null;
				}
			}
		}
	},

	simulate: function( type, elem, event, bubble ) {
		// Piggyback on a donor event to simulate a different one.
		// Fake originalEvent to avoid donor's stopPropagation, but if the
		// simulated event prevents default then we do the same on the donor.
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{ type: type,
				isSimulated: true,
				originalEvent: {}
			}
		);
		if ( bubble ) {
			jQuery.event.trigger( e, null, elem );
		} else {
			jQuery.event.dispatch.call( elem, e );
		}
		if ( e.isDefaultPrevented() ) {
			event.preventDefault();
		}
	}
};

// Some plugins are using, but it's undocumented/deprecated and will be removed.
// The 1.7 special event interface should provide all the hooks needed now.
jQuery.event.handle = jQuery.event.dispatch;

jQuery.removeEvent = document.removeEventListener ?
	function( elem, type, handle ) {
		if ( elem.removeEventListener ) {
			elem.removeEventListener( type, handle, false );
		}
	} :
	function( elem, type, handle ) {
		var name = "on" + type;

		if ( elem.detachEvent ) {

			// #8545, #7054, preventing memory leaks for custom events in IE6-8
			// detachEvent needed property on element, by name of that event, to properly expose it to GC
			if ( typeof elem[ name ] === "undefined" ) {
				elem[ name ] = null;
			}

			elem.detachEvent( name, handle );
		}
	};

jQuery.Event = function( src, props ) {
	// Allow instantiation without the 'new' keyword
	if ( !(this instanceof jQuery.Event) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = ( src.defaultPrevented || src.returnValue === false ||
			src.getPreventDefault && src.getPreventDefault() ) ? returnTrue : returnFalse;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || jQuery.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

function returnFalse() {
	return false;
}
function returnTrue() {
	return true;
}

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// http://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	preventDefault: function() {
		this.isDefaultPrevented = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}

		// if preventDefault exists run it on the original event
		if ( e.preventDefault ) {
			e.preventDefault();

		// otherwise set the returnValue property of the original event to false (IE)
		} else {
			e.returnValue = false;
		}
	},
	stopPropagation: function() {
		this.isPropagationStopped = returnTrue;

		var e = this.originalEvent;
		if ( !e ) {
			return;
		}
		// if stopPropagation exists run it on the original event
		if ( e.stopPropagation ) {
			e.stopPropagation();
		}
		// otherwise set the cancelBubble property of the original event to true (IE)
		e.cancelBubble = true;
	},
	stopImmediatePropagation: function() {
		this.isImmediatePropagationStopped = returnTrue;
		this.stopPropagation();
	},
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse
};

// Create mouseenter/leave events using mouseover/out and event-time checks
jQuery.each({
	mouseenter: "mouseover",
	mouseleave: "mouseout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj,
				selector = handleObj.selector;

			// For mousenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || (related !== target && !jQuery.contains( target, related )) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
});

// IE submit delegation
if ( !jQuery.support.submitBubbles ) {

	jQuery.event.special.submit = {
		setup: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Lazy-add a submit handler when a descendant form may potentially be submitted
			jQuery.event.add( this, "click._submit keypress._submit", function( e ) {
				// Node name check avoids a VML-related crash in IE (#9807)
				var elem = e.target,
					form = jQuery.nodeName( elem, "input" ) || jQuery.nodeName( elem, "button" ) ? elem.form : undefined;
				if ( form && !jQuery._data( form, "_submit_attached" ) ) {
					jQuery.event.add( form, "submit._submit", function( event ) {
						event._submit_bubble = true;
					});
					jQuery._data( form, "_submit_attached", true );
				}
			});
			// return undefined since we don't need an event listener
		},

		postDispatch: function( event ) {
			// If form was submitted by the user, bubble the event up the tree
			if ( event._submit_bubble ) {
				delete event._submit_bubble;
				if ( this.parentNode && !event.isTrigger ) {
					jQuery.event.simulate( "submit", this.parentNode, event, true );
				}
			}
		},

		teardown: function() {
			// Only need this for delegated form submit events
			if ( jQuery.nodeName( this, "form" ) ) {
				return false;
			}

			// Remove delegated handlers; cleanData eventually reaps submit handlers attached above
			jQuery.event.remove( this, "._submit" );
		}
	};
}

// IE change delegation and checkbox/radio fix
if ( !jQuery.support.changeBubbles ) {

	jQuery.event.special.change = {

		setup: function() {

			if ( rformElems.test( this.nodeName ) ) {
				// IE doesn't fire change on a check/radio until blur; trigger it on click
				// after a propertychange. Eat the blur-change in special.change.handle.
				// This still fires onchange a second time for check/radio after blur.
				if ( this.type === "checkbox" || this.type === "radio" ) {
					jQuery.event.add( this, "propertychange._change", function( event ) {
						if ( event.originalEvent.propertyName === "checked" ) {
							this._just_changed = true;
						}
					});
					jQuery.event.add( this, "click._change", function( event ) {
						if ( this._just_changed && !event.isTrigger ) {
							this._just_changed = false;
						}
						// Allow triggered, simulated change events (#11500)
						jQuery.event.simulate( "change", this, event, true );
					});
				}
				return false;
			}
			// Delegated event; lazy-add a change handler on descendant inputs
			jQuery.event.add( this, "beforeactivate._change", function( e ) {
				var elem = e.target;

				if ( rformElems.test( elem.nodeName ) && !jQuery._data( elem, "_change_attached" ) ) {
					jQuery.event.add( elem, "change._change", function( event ) {
						if ( this.parentNode && !event.isSimulated && !event.isTrigger ) {
							jQuery.event.simulate( "change", this.parentNode, event, true );
						}
					});
					jQuery._data( elem, "_change_attached", true );
				}
			});
		},

		handle: function( event ) {
			var elem = event.target;

			// Swallow native change events from checkbox/radio, we already triggered them above
			if ( this !== elem || event.isSimulated || event.isTrigger || (elem.type !== "radio" && elem.type !== "checkbox") ) {
				return event.handleObj.handler.apply( this, arguments );
			}
		},

		teardown: function() {
			jQuery.event.remove( this, "._change" );

			return !rformElems.test( this.nodeName );
		}
	};
}

// Create "bubbling" focus and blur events
if ( !jQuery.support.focusinBubbles ) {
	jQuery.each({ focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler while someone wants focusin/focusout
		var attaches = 0,
			handler = function( event ) {
				jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ), true );
			};

		jQuery.event.special[ fix ] = {
			setup: function() {
				if ( attaches++ === 0 ) {
					document.addEventListener( orig, handler, true );
				}
			},
			teardown: function() {
				if ( --attaches === 0 ) {
					document.removeEventListener( orig, handler, true );
				}
			}
		};
	});
}

jQuery.fn.extend({

	on: function( types, selector, data, fn, /*INTERNAL*/ one ) {
		var origFn, type;

		// Types can be a map of types/handlers
		if ( typeof types === "object" ) {
			// ( types-Object, selector, data )
			if ( typeof selector !== "string" ) { // && selector != null
				// ( types-Object, data )
				data = data || selector;
				selector = undefined;
			}
			for ( type in types ) {
				this.on( type, selector, data, types[ type ], one );
			}
			return this;
		}

		if ( data == null && fn == null ) {
			// ( types, fn )
			fn = selector;
			data = selector = undefined;
		} else if ( fn == null ) {
			if ( typeof selector === "string" ) {
				// ( types, selector, fn )
				fn = data;
				data = undefined;
			} else {
				// ( types, data, fn )
				fn = data;
				data = selector;
				selector = undefined;
			}
		}
		if ( fn === false ) {
			fn = returnFalse;
		} else if ( !fn ) {
			return this;
		}

		if ( one === 1 ) {
			origFn = fn;
			fn = function( event ) {
				// Can use an empty set, since event contains the info
				jQuery().off( event );
				return origFn.apply( this, arguments );
			};
			// Use same guid so caller can remove using origFn
			fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
		}
		return this.each( function() {
			jQuery.event.add( this, types, fn, data, selector );
		});
	},
	one: function( types, selector, data, fn ) {
		return this.on( types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {
			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ? handleObj.origType + "." + handleObj.namespace : handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {
			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {
			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each(function() {
			jQuery.event.remove( this, types, fn, selector );
		});
	},

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	live: function( types, data, fn ) {
		jQuery( this.context ).on( types, this.selector, data, fn );
		return this;
	},
	die: function( types, fn ) {
		jQuery( this.context ).off( types, this.selector || "**", fn );
		return this;
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {
		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ? this.off( selector, "**" ) : this.off( types, selector || "**", fn );
	},

	trigger: function( type, data ) {
		return this.each(function() {
			jQuery.event.trigger( type, data, this );
		});
	},
	triggerHandler: function( type, data ) {
		if ( this[0] ) {
			return jQuery.event.trigger( type, data, this[0], true );
		}
	},

	toggle: function( fn ) {
		// Save reference to arguments for access in closure
		var args = arguments,
			guid = fn.guid || jQuery.guid++,
			i = 0,
			toggler = function( event ) {
				// Figure out which function to execute
				var lastToggle = ( jQuery._data( this, "lastToggle" + fn.guid ) || 0 ) % i;
				jQuery._data( this, "lastToggle" + fn.guid, lastToggle + 1 );

				// Make sure that clicks stop
				event.preventDefault();

				// and execute the function
				return args[ lastToggle ].apply( this, arguments ) || false;
			};

		// link all the functions, so any of them can unbind this click handler
		toggler.guid = guid;
		while ( i < args.length ) {
			args[ i++ ].guid = guid;
		}

		return this.click( toggler );
	},

	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
});

jQuery.each( ("blur focus focusin focusout load resize scroll unload click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup error contextmenu").split(" "), function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		if ( fn == null ) {
			fn = data;
			data = null;
		}

		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};

	if ( rkeyEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.keyHooks;
	}

	if ( rmouseEvent.test( name ) ) {
		jQuery.event.fixHooks[ name ] = jQuery.event.mouseHooks;
	}
});
/*!
 * Sizzle CSS Selector Engine
 * Copyright 2012 jQuery Foundation and other contributors
 * Released under the MIT license
 * http://sizzlejs.com/
 */
(function( window, undefined ) {

var cachedruns,
	assertGetIdNotName,
	Expr,
	getText,
	isXML,
	contains,
	compile,
	sortOrder,
	hasDuplicate,
	outermostContext,

	baseHasDuplicate = true,
	strundefined = "undefined",

	expando = ( "sizcache" + Math.random() ).replace( ".", "" ),

	Token = String,
	document = window.document,
	docElem = document.documentElement,
	dirruns = 0,
	done = 0,
	pop = [].pop,
	push = [].push,
	slice = [].slice,
	// Use a stripped-down indexOf if a native one is unavailable
	indexOf = [].indexOf || function( elem ) {
		var i = 0,
			len = this.length;
		for ( ; i < len; i++ ) {
			if ( this[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	// Augment a function for special use by Sizzle
	markFunction = function( fn, value ) {
		fn[ expando ] = value == null || value;
		return fn;
	},

	createCache = function() {
		var cache = {},
			keys = [];

		return markFunction(function( key, value ) {
			// Only keep the most recent entries
			if ( keys.push( key ) > Expr.cacheLength ) {
				delete cache[ keys.shift() ];
			}

			// Retrieve with (key + " ") to avoid collision with native Object.prototype properties (see Issue #157)
			return (cache[ key + " " ] = value);
		}, cache );
	},

	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),

	// Regex

	// Whitespace characters http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",
	// http://www.w3.org/TR/css3-syntax/#characters
	characterEncoding = "(?:\\\\.|[-\\w]|[^\\x00-\\xa0])+",

	// Loosely modeled on CSS identifier characters
	// An unquoted value should be a CSS identifier (http://www.w3.org/TR/css3-selectors/#attribute-selectors)
	// Proper syntax: http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = characterEncoding.replace( "w", "w#" ),

	// Acceptable operators http://www.w3.org/TR/selectors/#attribute-selectors
	operators = "([*^$|!~]?=)",
	attributes = "\\[" + whitespace + "*(" + characterEncoding + ")" + whitespace +
		"*(?:" + operators + whitespace + "*(?:(['\"])((?:\\\\.|[^\\\\])*?)\\3|(" + identifier + ")|)|)" + whitespace + "*\\]",

	// Prefer arguments not in parens/brackets,
	//   then attribute selectors and non-pseudos (denoted by :),
	//   then anything else
	// These preferences are here to reduce the number of selectors
	//   needing tokenize in the PSEUDO preFilter
	pseudos = ":(" + characterEncoding + ")(?:\\((?:(['\"])((?:\\\\.|[^\\\\])*?)\\2|([^()[\\]]*|(?:(?:" + attributes + ")|[^:]|\\\\.)*|.*))\\)|)",

	// For matchExpr.POS and matchExpr.needsContext
	pos = ":(even|odd|eq|gt|lt|nth|first|last)(?:\\(" + whitespace +
		"*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([\\x20\\t\\r\\n\\f>+~])" + whitespace + "*" ),
	rpseudo = new RegExp( pseudos ),

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w\-]+)|(\w+)|\.([\w\-]+))$/,

	rnot = /^:not/,
	rsibling = /[\x20\t\r\n\f]*[+~]/,
	rendsWithNot = /:not\($/,

	rheader = /h\d/i,
	rinputs = /input|select|textarea|button/i,

	rbackslash = /\\(?!\\)/g,

	matchExpr = {
		"ID": new RegExp( "^#(" + characterEncoding + ")" ),
		"CLASS": new RegExp( "^\\.(" + characterEncoding + ")" ),
		"NAME": new RegExp( "^\\[name=['\"]?(" + characterEncoding + ")['\"]?\\]" ),
		"TAG": new RegExp( "^(" + characterEncoding.replace( "w", "w*" ) + ")" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"POS": new RegExp( pos, "i" ),
		"CHILD": new RegExp( "^:(only|nth|first|last)-child(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		// For use in libraries implementing .is()
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|" + pos, "i" )
	},

	// Support

	// Used for testing something on an element
	assert = function( fn ) {
		var div = document.createElement("div");

		try {
			return fn( div );
		} catch (e) {
			return false;
		} finally {
			// release memory in IE
			div = null;
		}
	},

	// Check if getElementsByTagName("*") returns only elements
	assertTagNameNoComments = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	}),

	// Check if getAttribute returns normalized href attributes
	assertHrefNotNormalized = assert(function( div ) {
		div.innerHTML = "<a href='#'></a>";
		return div.firstChild && typeof div.firstChild.getAttribute !== strundefined &&
			div.firstChild.getAttribute("href") === "#";
	}),

	// Check if attributes should be retrieved by attribute nodes
	assertAttributes = assert(function( div ) {
		div.innerHTML = "<select></select>";
		var type = typeof div.lastChild.getAttribute("multiple");
		// IE8 returns a string for some attributes even when not present
		return type !== "boolean" && type !== "string";
	}),

	// Check if getElementsByClassName can be trusted
	assertUsableClassName = assert(function( div ) {
		// Opera can't find a second classname (in 9.6)
		div.innerHTML = "<div class='hidden e'></div><div class='hidden'></div>";
		if ( !div.getElementsByClassName || !div.getElementsByClassName("e").length ) {
			return false;
		}

		// Safari 3.2 caches class attributes and doesn't catch changes
		div.lastChild.className = "e";
		return div.getElementsByClassName("e").length === 2;
	}),

	// Check if getElementById returns elements by name
	// Check if getElementsByName privileges form controls or returns elements by ID
	assertUsableName = assert(function( div ) {
		// Inject content
		div.id = expando + 0;
		div.innerHTML = "<a name='" + expando + "'></a><div name='" + expando + "'></div>";
		docElem.insertBefore( div, docElem.firstChild );

		// Test
		var pass = document.getElementsByName &&
			// buggy browsers will return fewer than the correct 2
			document.getElementsByName( expando ).length === 2 +
			// buggy browsers will return more than the correct 0
			document.getElementsByName( expando + 0 ).length;
		assertGetIdNotName = !document.getElementById( expando );

		// Cleanup
		docElem.removeChild( div );

		return pass;
	});

// If slice is not available, provide a backup
try {
	slice.call( docElem.childNodes, 0 )[0].nodeType;
} catch ( e ) {
	slice = function( i ) {
		var elem,
			results = [];
		for ( ; (elem = this[i]); i++ ) {
			results.push( elem );
		}
		return results;
	};
}

function Sizzle( selector, context, results, seed ) {
	results = results || [];
	context = context || document;
	var match, elem, xml, m,
		nodeType = context.nodeType;

	if ( !selector || typeof selector !== "string" ) {
		return results;
	}

	if ( nodeType !== 1 && nodeType !== 9 ) {
		return [];
	}

	xml = isXML( context );

	if ( !xml && !seed ) {
		if ( (match = rquickExpr.exec( selector )) ) {
			// Speed-up: Sizzle("#ID")
			if ( (m = match[1]) ) {
				if ( nodeType === 9 ) {
					elem = context.getElementById( m );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					if ( elem && elem.parentNode ) {
						// Handle the case where IE, Opera, and Webkit return items
						// by name instead of ID
						if ( elem.id === m ) {
							results.push( elem );
							return results;
						}
					} else {
						return results;
					}
				} else {
					// Context is not a document
					if ( context.ownerDocument && (elem = context.ownerDocument.getElementById( m )) &&
						contains( context, elem ) && elem.id === m ) {
						results.push( elem );
						return results;
					}
				}

			// Speed-up: Sizzle("TAG")
			} else if ( match[2] ) {
				push.apply( results, slice.call(context.getElementsByTagName( selector ), 0) );
				return results;

			// Speed-up: Sizzle(".CLASS")
			} else if ( (m = match[3]) && assertUsableClassName && context.getElementsByClassName ) {
				push.apply( results, slice.call(context.getElementsByClassName( m ), 0) );
				return results;
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed, xml );
}

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	return Sizzle( expr, null, null, [ elem ] ).length > 0;
};

// Returns a function to use in pseudos for input types
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

// Returns a function to use in pseudos for buttons
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

// Returns a function to use in pseudos for positionals
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( nodeType ) {
		if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
			// Use textContent for elements
			// innerText usage removed for consistency of new lines (see #11153)
			if ( typeof elem.textContent === "string" ) {
				return elem.textContent;
			} else {
				// Traverse its children
				for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
					ret += getText( elem );
				}
			}
		} else if ( nodeType === 3 || nodeType === 4 ) {
			return elem.nodeValue;
		}
		// Do not include comment or processing instruction nodes
	} else {

		// If no nodeType, this is expected to be an array
		for ( ; (node = elem[i]); i++ ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	}
	return ret;
};

isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

// Element contains another
contains = Sizzle.contains = docElem.contains ?
	function( a, b ) {
		var adown = a.nodeType === 9 ? a.documentElement : a,
			bup = b && b.parentNode;
		return a === bup || !!( bup && bup.nodeType === 1 && adown.contains && adown.contains(bup) );
	} :
	docElem.compareDocumentPosition ?
	function( a, b ) {
		return b && !!( a.compareDocumentPosition( b ) & 16 );
	} :
	function( a, b ) {
		while ( (b = b.parentNode) ) {
			if ( b === a ) {
				return true;
			}
		}
		return false;
	};

Sizzle.attr = function( elem, name ) {
	var val,
		xml = isXML( elem );

	if ( !xml ) {
		name = name.toLowerCase();
	}
	if ( (val = Expr.attrHandle[ name ]) ) {
		return val( elem );
	}
	if ( xml || assertAttributes ) {
		return elem.getAttribute( name );
	}
	val = elem.getAttributeNode( name );
	return val ?
		typeof elem[ name ] === "boolean" ?
			elem[ name ] ? name : null :
			val.specified ? val.value : null :
		null;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	// IE6/7 return a modified href
	attrHandle: assertHrefNotNormalized ?
		{} :
		{
			"href": function( elem ) {
				return elem.getAttribute( "href", 2 );
			},
			"type": function( elem ) {
				return elem.getAttribute("type");
			}
		},

	find: {
		"ID": assertGetIdNotName ?
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined && !xml ) {
					var m = context.getElementById( id );
					// Check parentNode to catch when Blackberry 4.6 returns
					// nodes that are no longer in the document #6963
					return m && m.parentNode ? [m] : [];
				}
			} :
			function( id, context, xml ) {
				if ( typeof context.getElementById !== strundefined && !xml ) {
					var m = context.getElementById( id );

					return m ?
						m.id === id || typeof m.getAttributeNode !== strundefined && m.getAttributeNode("id").value === id ?
							[m] :
							undefined :
						[];
				}
			},

		"TAG": assertTagNameNoComments ?
			function( tag, context ) {
				if ( typeof context.getElementsByTagName !== strundefined ) {
					return context.getElementsByTagName( tag );
				}
			} :
			function( tag, context ) {
				var results = context.getElementsByTagName( tag );

				// Filter out possible comments
				if ( tag === "*" ) {
					var elem,
						tmp = [],
						i = 0;

					for ( ; (elem = results[i]); i++ ) {
						if ( elem.nodeType === 1 ) {
							tmp.push( elem );
						}
					}

					return tmp;
				}
				return results;
			},

		"NAME": assertUsableName && function( tag, context ) {
			if ( typeof context.getElementsByName !== strundefined ) {
				return context.getElementsByName( name );
			}
		},

		"CLASS": assertUsableClassName && function( className, context, xml ) {
			if ( typeof context.getElementsByClassName !== strundefined && !xml ) {
				return context.getElementsByClassName( className );
			}
		}
	},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( rbackslash, "" );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[4] || match[5] || "" ).replace( rbackslash, "" );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				3 xn-component of xn+y argument ([+-]?\d*n|)
				4 sign of xn-component
				5 x of xn-component
				6 sign of y-component
				7 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1] === "nth" ) {
				// nth-child requires argument
				if ( !match[2] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[3] = +( match[3] ? match[4] + (match[5] || 1) : 2 * ( match[2] === "even" || match[2] === "odd" ) );
				match[4] = +( ( match[6] + match[7] ) || match[2] === "odd" );

			// other types prohibit arguments
			} else if ( match[2] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var unquoted, excess;
			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			if ( match[3] ) {
				match[2] = match[3];
			} else if ( (unquoted = match[4]) ) {
				// Only check arguments that contain a pseudo
				if ( rpseudo.test(unquoted) &&
					// Get excess from tokenize (recursively)
					(excess = tokenize( unquoted, true )) &&
					// advance to the next closing parenthesis
					(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

					// excess is a negative index
					unquoted = unquoted.slice( 0, excess );
					match[0] = match[0].slice( 0, excess );
				}
				match[2] = unquoted;
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {
		"ID": assertGetIdNotName ?
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					return elem.getAttribute("id") === id;
				};
			} :
			function( id ) {
				id = id.replace( rbackslash, "" );
				return function( elem ) {
					var node = typeof elem.getAttributeNode !== strundefined && elem.getAttributeNode("id");
					return node && node.value === id;
				};
			},

		"TAG": function( nodeName ) {
			if ( nodeName === "*" ) {
				return function() { return true; };
			}
			nodeName = nodeName.replace( rbackslash, "" ).toLowerCase();

			return function( elem ) {
				return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
			};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ expando ][ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( elem.className || (typeof elem.getAttribute !== strundefined && elem.getAttribute("class")) || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem, context ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.substr( result.length - check.length ) === check :
					operator === "~=" ? ( " " + result + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.substr( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, argument, first, last ) {

			if ( type === "nth" ) {
				return function( elem ) {
					var node, diff,
						parent = elem.parentNode;

					if ( first === 1 && last === 0 ) {
						return true;
					}

					if ( parent ) {
						diff = 0;
						for ( node = parent.firstChild; node; node = node.nextSibling ) {
							if ( node.nodeType === 1 ) {
								diff++;
								if ( elem === node ) {
									break;
								}
							}
						}
					}

					// Incorporate the offset (or cast to NaN), then check against cycle size
					diff -= last;
					return diff === first || ( diff % first === 0 && diff / first >= 0 );
				};
			}

			return function( elem ) {
				var node = elem;

				switch ( type ) {
					case "only":
					case "first":
						while ( (node = node.previousSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						if ( type === "first" ) {
							return true;
						}

						node = elem;

						/* falls through */
					case "last":
						while ( (node = node.nextSibling) ) {
							if ( node.nodeType === 1 ) {
								return false;
							}
						}

						return true;
				}
			};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf.call( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is only affected by element nodes and content nodes(including text(3), cdata(4)),
			//   not comment, processing instructions, or others
			// Thanks to Diego Perini for the nodeName shortcut
			//   Greater than "@" means alpha characters (specifically not starting with "#" or "?")
			var nodeType;
			elem = elem.firstChild;
			while ( elem ) {
				if ( elem.nodeName > "@" || (nodeType = elem.nodeType) === 3 || nodeType === 4 ) {
					return false;
				}
				elem = elem.nextSibling;
			}
			return true;
		},

		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"text": function( elem ) {
			var type, attr;
			// IE6 and 7 will map elem.type to 'text' for new HTML5 types (search, etc)
			// use getAttribute instead to test this case
			return elem.nodeName.toLowerCase() === "input" &&
				(type = elem.type) === "text" &&
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === type );
		},

		// Input types
		"radio": createInputPseudo("radio"),
		"checkbox": createInputPseudo("checkbox"),
		"file": createInputPseudo("file"),
		"password": createInputPseudo("password"),
		"image": createInputPseudo("image"),

		"submit": createButtonPseudo("submit"),
		"reset": createButtonPseudo("reset"),

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"focus": function( elem ) {
			var doc = elem.ownerDocument;
			return elem === doc.activeElement && (!doc.hasFocus || doc.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		"active": function( elem ) {
			return elem === elem.ownerDocument.activeElement;
		},

		// Positional types
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			for ( var i = 0; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			for ( var i = 1; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument < 0 ? argument + length : argument; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			for ( var i = argument < 0 ? argument + length : argument; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

function siblingCheck( a, b, ret ) {
	if ( a === b ) {
		return ret;
	}

	var cur = a.nextSibling;

	while ( cur ) {
		if ( cur === b ) {
			return -1;
		}

		cur = cur.nextSibling;
	}

	return 1;
}

sortOrder = docElem.compareDocumentPosition ?
	function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		return ( !a.compareDocumentPosition || !b.compareDocumentPosition ?
			a.compareDocumentPosition :
			a.compareDocumentPosition(b) & 4
		) ? -1 : 1;
	} :
	function( a, b ) {
		// The nodes are identical, we can exit early
		if ( a === b ) {
			hasDuplicate = true;
			return 0;

		// Fallback to using sourceIndex (in IE) if it's available on both nodes
		} else if ( a.sourceIndex && b.sourceIndex ) {
			return a.sourceIndex - b.sourceIndex;
		}

		var al, bl,
			ap = [],
			bp = [],
			aup = a.parentNode,
			bup = b.parentNode,
			cur = aup;

		// If the nodes are siblings (or identical) we can do a quick check
		if ( aup === bup ) {
			return siblingCheck( a, b );

		// If no parents were found then the nodes are disconnected
		} else if ( !aup ) {
			return -1;

		} else if ( !bup ) {
			return 1;
		}

		// Otherwise they're somewhere else in the tree so we need
		// to build up a full list of the parentNodes for comparison
		while ( cur ) {
			ap.unshift( cur );
			cur = cur.parentNode;
		}

		cur = bup;

		while ( cur ) {
			bp.unshift( cur );
			cur = cur.parentNode;
		}

		al = ap.length;
		bl = bp.length;

		// Start walking down the tree looking for a discrepancy
		for ( var i = 0; i < al && i < bl; i++ ) {
			if ( ap[i] !== bp[i] ) {
				return siblingCheck( ap[i], bp[i] );
			}
		}

		// We ended someplace up the tree so do a sibling check
		return i === al ?
			siblingCheck( a, bp[i], -1 ) :
			siblingCheck( ap[i], b, 1 );
	};

// Always assume the presence of duplicates if sort doesn't
// pass them to our comparison function (as in Google Chrome).
[0, 0].sort( sortOrder );
baseHasDuplicate = !hasDuplicate;

// Document sorting and removing duplicates
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		i = 1,
		j = 0;

	hasDuplicate = baseHasDuplicate;
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		for ( ; (elem = results[i]); i++ ) {
			if ( elem === results[ i - 1 ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	return results;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

function tokenize( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ expando ][ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( tokens = [] );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			tokens.push( matched = new Token( match.shift() ) );
			soFar = soFar.slice( matched.length );

			// Cast descendant combinators to space
			matched.type = match[0].replace( rtrim, " " );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {

				tokens.push( matched = new Token( match.shift() ) );
				soFar = soFar.slice( matched.length );
				matched.type = type;
				matched.matches = match;
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && combinator.dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( checkNonElements || elem.nodeType === 1  ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			// We can't set arbitrary data on XML nodes, so they don't benefit from dir caching
			if ( !xml ) {
				var cache,
					dirkey = dirruns + " " + doneName + " ",
					cachedkey = dirkey + cachedruns;
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( (cache = elem[ expando ]) === cachedkey ) {
							return elem.sizset;
						} else if ( typeof cache === "string" && cache.indexOf(dirkey) === 0 ) {
							if ( elem.sizset ) {
								return elem;
							}
						} else {
							elem[ expando ] = cachedkey;
							if ( matcher( elem, context, xml ) ) {
								elem.sizset = true;
								return elem;
							}
							elem.sizset = false;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( checkNonElements || elem.nodeType === 1 ) {
						if ( matcher( elem, context, xml ) ) {
							return elem;
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf.call( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf.call( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			return ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator( elementMatcher( matchers ), matcher ) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && tokens.slice( 0, i - 1 ).join("").replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && tokens.join("")
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, expandContext ) {
			var elem, j, matcher,
				setMatched = [],
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				outermost = expandContext != null,
				contextBackup = outermostContext,
				// We must always have either seed elements or context
				elems = seed || byElement && Expr.find["TAG"]( "*", expandContext && context.parentNode || context ),
				// Nested matchers should use non-integer dirruns
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.E);

			if ( outermost ) {
				outermostContext = context !== document && context;
				cachedruns = superMatcher.el;
			}

			// Add elements passing elementMatchers directly to results
			for ( ; (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					for ( j = 0; (matcher = elementMatchers[j]); j++ ) {
						if ( matcher( elem, context, xml ) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
						cachedruns = ++superMatcher.el;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// Apply set filters to unmatched elements
			matchedCount += i;
			if ( bySet && i !== matchedCount ) {
				for ( j = 0; (matcher = setMatchers[j]); j++ ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	superMatcher.el = 0;
	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, group /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ expando ][ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !group ) {
			group = tokenize( selector );
		}
		i = group.length;
		while ( i-- ) {
			cached = matcherFromTokens( group[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );
	}
	return cached;
};

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function select( selector, context, results, seed, xml ) {
	var i, tokens, token, type, find,
		match = tokenize( selector ),
		j = match.length;

	if ( !seed ) {
		// Try to minimize operations if there is only one group
		if ( match.length === 1 ) {

			// Take a shortcut and set the context if the root selector is an ID
			tokens = match[0] = match[0].slice( 0 );
			if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
					context.nodeType === 9 && !xml &&
					Expr.relative[ tokens[1].type ] ) {

				context = Expr.find["ID"]( token.matches[0].replace( rbackslash, "" ), context, xml )[0];
				if ( !context ) {
					return results;
				}

				selector = selector.slice( tokens.shift().length );
			}

			// Fetch a seed set for right-to-left matching
			for ( i = matchExpr["POS"].test( selector ) ? -1 : tokens.length - 1; i >= 0; i-- ) {
				token = tokens[i];

				// Abort if we hit a combinator
				if ( Expr.relative[ (type = token.type) ] ) {
					break;
				}
				if ( (find = Expr.find[ type ]) ) {
					// Search, expanding context for leading sibling combinators
					if ( (seed = find(
						token.matches[0].replace( rbackslash, "" ),
						rsibling.test( tokens[0].type ) && context.parentNode || context,
						xml
					)) ) {

						// If seed is empty or no tokens remain, we can return early
						tokens.splice( i, 1 );
						selector = seed.length && tokens.join("");
						if ( !selector ) {
							push.apply( results, slice.call( seed, 0 ) );
							return results;
						}

						break;
					}
				}
			}
		}
	}

	// Compile and execute a filtering function
	// Provide `match` to avoid retokenization if we modified the selector above
	compile( selector, match )(
		seed,
		context,
		xml,
		results,
		rsibling.test( selector )
	);
	return results;
}

if ( document.querySelectorAll ) {
	(function() {
		var disconnectedMatch,
			oldSelect = select,
			rescape = /'|\\/g,
			rattributeQuotes = /\=[\x20\t\r\n\f]*([^'"\]]*)[\x20\t\r\n\f]*\]/g,

			// qSa(:focus) reports false when true (Chrome 21), no need to also add to buggyMatches since matches checks buggyQSA
			// A support test would require too much code (would include document ready)
			rbuggyQSA = [ ":focus" ],

			// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
			// A support test would require too much code (would include document ready)
			// just skip matchesSelector for :active
			rbuggyMatches = [ ":active" ],
			matches = docElem.matchesSelector ||
				docElem.mozMatchesSelector ||
				docElem.webkitMatchesSelector ||
				docElem.oMatchesSelector ||
				docElem.msMatchesSelector;

		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explictly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			div.innerHTML = "<select><option selected=''></option></select>";

			// IE8 - Some boolean attributes are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:checked|disabled|ismap|multiple|readonly|selected|value)" );
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here (do not put tests after this one)
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}
		});

		assert(function( div ) {

			// Opera 10-12/IE9 - ^= $= *= and empty values
			// Should not select anything
			div.innerHTML = "<p test=''></p>";
			if ( div.querySelectorAll("[test^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:\"\"|'')" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here (do not put tests after this one)
			div.innerHTML = "<input type='hidden'/>";
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push(":enabled", ":disabled");
			}
		});

		// rbuggyQSA always contains :focus, so no need for a length check
		rbuggyQSA = /* rbuggyQSA.length && */ new RegExp( rbuggyQSA.join("|") );

		select = function( selector, context, results, seed, xml ) {
			// Only use querySelectorAll when not filtering,
			// when this is not xml,
			// and when no QSA bugs apply
			if ( !seed && !xml && !rbuggyQSA.test( selector ) ) {
				var groups, i,
					old = true,
					nid = expando,
					newContext = context,
					newSelector = context.nodeType === 9 && selector;

				// qSA works strangely on Element-rooted queries
				// We can work around this by specifying an extra ID on the root
				// and working up from there (Thanks to Andrew Dupont for the technique)
				// IE 8 doesn't work on object elements
				if ( context.nodeType === 1 && context.nodeName.toLowerCase() !== "object" ) {
					groups = tokenize( selector );

					if ( (old = context.getAttribute("id")) ) {
						nid = old.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", nid );
					}
					nid = "[id='" + nid + "'] ";

					i = groups.length;
					while ( i-- ) {
						groups[i] = nid + groups[i].join("");
					}
					newContext = rsibling.test( selector ) && context.parentNode || context;
					newSelector = groups.join(",");
				}

				if ( newSelector ) {
					try {
						push.apply( results, slice.call( newContext.querySelectorAll(
							newSelector
						), 0 ) );
						return results;
					} catch(qsaError) {
					} finally {
						if ( !old ) {
							context.removeAttribute("id");
						}
					}
				}
			}

			return oldSelect( selector, context, results, seed, xml );
		};

		if ( matches ) {
			assert(function( div ) {
				// Check to see if it's possible to do matchesSelector
				// on a disconnected node (IE 9)
				disconnectedMatch = matches.call( div, "div" );

				// This should fail with an exception
				// Gecko does not error, returns false instead
				try {
					matches.call( div, "[test!='']:sizzle" );
					rbuggyMatches.push( "!=", pseudos );
				} catch ( e ) {}
			});

			// rbuggyMatches always contains :active and :focus, so no need for a length check
			rbuggyMatches = /* rbuggyMatches.length && */ new RegExp( rbuggyMatches.join("|") );

			Sizzle.matchesSelector = function( elem, expr ) {
				// Make sure that attribute selectors are quoted
				expr = expr.replace( rattributeQuotes, "='$1']" );

				// rbuggyMatches always contains :active, so no need for an existence check
				if ( !isXML( elem ) && !rbuggyMatches.test( expr ) && !rbuggyQSA.test( expr ) ) {
					try {
						var ret = matches.call( elem, expr );

						// IE 9's matchesSelector returns false on disconnected nodes
						if ( ret || disconnectedMatch ||
								// As well, disconnected nodes are said to be in a document
								// fragment in IE 9
								elem.document && elem.document.nodeType !== 11 ) {
							return ret;
						}
					} catch(e) {}
				}

				return Sizzle( expr, null, null, [ elem ] ).length > 0;
			};
		}
	})();
}

// Deprecated
Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Back-compat
function setFilters() {}
Expr.filters = setFilters.prototype = Expr.pseudos;
Expr.setFilters = new setFilters();

// Override sizzle attribute retrieval
Sizzle.attr = jQuery.attr;
jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;
jQuery.expr[":"] = jQuery.expr.pseudos;
jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;


})( window );
var runtil = /Until$/,
	rparentsprev = /^(?:parents|prev(?:Until|All))/,
	isSimple = /^.[^:#\[\.,]*$/,
	rneedsContext = jQuery.expr.match.needsContext,
	// methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend({
	find: function( selector ) {
		var i, l, length, n, r, ret,
			self = this;

		if ( typeof selector !== "string" ) {
			return jQuery( selector ).filter(function() {
				for ( i = 0, l = self.length; i < l; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			});
		}

		ret = this.pushStack( "", "find", selector );

		for ( i = 0, l = this.length; i < l; i++ ) {
			length = ret.length;
			jQuery.find( selector, this[i], ret );

			if ( i > 0 ) {
				// Make sure that the results are unique
				for ( n = length; n < ret.length; n++ ) {
					for ( r = 0; r < length; r++ ) {
						if ( ret[r] === ret[n] ) {
							ret.splice(n--, 1);
							break;
						}
					}
				}
			}
		}

		return ret;
	},

	has: function( target ) {
		var i,
			targets = jQuery( target, this ),
			len = targets.length;

		return this.filter(function() {
			for ( i = 0; i < len; i++ ) {
				if ( jQuery.contains( this, targets[i] ) ) {
					return true;
				}
			}
		});
	},

	not: function( selector ) {
		return this.pushStack( winnow(this, selector, false), "not", selector);
	},

	filter: function( selector ) {
		return this.pushStack( winnow(this, selector, true), "filter", selector );
	},

	is: function( selector ) {
		return !!selector && (
			typeof selector === "string" ?
				// If this is a positional/relative selector, check membership in the returned set
				// so $("p:first").is("p:last") won't return true for a doc with two "p".
				rneedsContext.test( selector ) ?
					jQuery( selector, this.context ).index( this[0] ) >= 0 :
					jQuery.filter( selector, this ).length > 0 :
				this.filter( selector ).length > 0 );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			ret = [],
			pos = rneedsContext.test( selectors ) || typeof selectors !== "string" ?
				jQuery( selectors, context || this.context ) :
				0;

		for ( ; i < l; i++ ) {
			cur = this[i];

			while ( cur && cur.ownerDocument && cur !== context && cur.nodeType !== 11 ) {
				if ( pos ? pos.index(cur) > -1 : jQuery.find.matchesSelector(cur, selectors) ) {
					ret.push( cur );
					break;
				}
				cur = cur.parentNode;
			}
		}

		ret = ret.length > 1 ? jQuery.unique( ret ) : ret;

		return this.pushStack( ret, "closest", selectors );
	},

	// Determine the position of an element within
	// the matched set of elements
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[0] && this[0].parentNode ) ? this.prevAll().length : -1;
		}

		// index in selector
		if ( typeof elem === "string" ) {
			return jQuery.inArray( this[0], jQuery( elem ) );
		}

		// Locate the position of the desired element
		return jQuery.inArray(
			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[0] : elem, this );
	},

	add: function( selector, context ) {
		var set = typeof selector === "string" ?
				jQuery( selector, context ) :
				jQuery.makeArray( selector && selector.nodeType ? [ selector ] : selector ),
			all = jQuery.merge( this.get(), set );

		return this.pushStack( isDisconnected( set[0] ) || isDisconnected( all[0] ) ?
			all :
			jQuery.unique( all ) );
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter(selector)
		);
	}
});

jQuery.fn.andSelf = jQuery.fn.addBack;

// A painfully simple check to see if an element is disconnected
// from a document (should be improved, where feasible).
function isDisconnected( node ) {
	return !node || !node.parentNode || node.parentNode.nodeType === 11;
}

function sibling( cur, dir ) {
	do {
		cur = cur[ dir ];
	} while ( cur && cur.nodeType !== 1 );

	return cur;
}

jQuery.each({
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return jQuery.dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return jQuery.dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return jQuery.dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return jQuery.dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return jQuery.sibling( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return jQuery.sibling( elem.firstChild );
	},
	contents: function( elem ) {
		return jQuery.nodeName( elem, "iframe" ) ?
			elem.contentDocument || elem.contentWindow.document :
			jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var ret = jQuery.map( this, fn, until );

		if ( !runtil.test( name ) ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			ret = jQuery.filter( selector, ret );
		}

		ret = this.length > 1 && !guaranteedUnique[ name ] ? jQuery.unique( ret ) : ret;

		if ( this.length > 1 && rparentsprev.test( name ) ) {
			ret = ret.reverse();
		}

		return this.pushStack( ret, name, core_slice.call( arguments ).join(",") );
	};
});

jQuery.extend({
	filter: function( expr, elems, not ) {
		if ( not ) {
			expr = ":not(" + expr + ")";
		}

		return elems.length === 1 ?
			jQuery.find.matchesSelector(elems[0], expr) ? [ elems[0] ] : [] :
			jQuery.find.matches(expr, elems);
	},

	dir: function( elem, dir, until ) {
		var matched = [],
			cur = elem[ dir ];

		while ( cur && cur.nodeType !== 9 && (until === undefined || cur.nodeType !== 1 || !jQuery( cur ).is( until )) ) {
			if ( cur.nodeType === 1 ) {
				matched.push( cur );
			}
			cur = cur[dir];
		}
		return matched;
	},

	sibling: function( n, elem ) {
		var r = [];

		for ( ; n; n = n.nextSibling ) {
			if ( n.nodeType === 1 && n !== elem ) {
				r.push( n );
			}
		}

		return r;
	}
});

// Implement the identical functionality for filter and not
function winnow( elements, qualifier, keep ) {

	// Can't pass null or undefined to indexOf in Firefox 4
	// Set to 0 to skip string check
	qualifier = qualifier || 0;

	if ( jQuery.isFunction( qualifier ) ) {
		return jQuery.grep(elements, function( elem, i ) {
			var retVal = !!qualifier.call( elem, i, elem );
			return retVal === keep;
		});

	} else if ( qualifier.nodeType ) {
		return jQuery.grep(elements, function( elem, i ) {
			return ( elem === qualifier ) === keep;
		});

	} else if ( typeof qualifier === "string" ) {
		var filtered = jQuery.grep(elements, function( elem ) {
			return elem.nodeType === 1;
		});

		if ( isSimple.test( qualifier ) ) {
			return jQuery.filter(qualifier, filtered, !keep);
		} else {
			qualifier = jQuery.filter( qualifier, filtered );
		}
	}

	return jQuery.grep(elements, function( elem, i ) {
		return ( jQuery.inArray( elem, qualifier ) >= 0 ) === keep;
	});
}
function createSafeFragment( document ) {
	var list = nodeNames.split( "|" ),
	safeFrag = document.createDocumentFragment();

	if ( safeFrag.createElement ) {
		while ( list.length ) {
			safeFrag.createElement(
				list.pop()
			);
		}
	}
	return safeFrag;
}

var nodeNames = "abbr|article|aside|audio|bdi|canvas|data|datalist|details|figcaption|figure|footer|" +
		"header|hgroup|mark|meter|nav|output|progress|section|summary|time|video",
	rinlinejQuery = / jQuery\d+="(?:null|\d+)"/g,
	rleadingWhitespace = /^\s+/,
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([\w:]+)[^>]*)\/>/gi,
	rtagName = /<([\w:]+)/,
	rtbody = /<tbody/i,
	rhtml = /<|&#?\w+;/,
	rnoInnerhtml = /<(?:script|style|link)/i,
	rnocache = /<(?:script|object|embed|option|style)/i,
	rnoshimcache = new RegExp("<(?:" + nodeNames + ")[\\s/>]", "i"),
	rcheckableType = /^(?:checkbox|radio)$/,
	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rscriptType = /\/(java|ecma)script/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|\-\-)|[\]\-]{2}>\s*$/g,
	wrapMap = {
		option: [ 1, "<select multiple='multiple'>", "</select>" ],
		legend: [ 1, "<fieldset>", "</fieldset>" ],
		thead: [ 1, "<table>", "</table>" ],
		tr: [ 2, "<table><tbody>", "</tbody></table>" ],
		td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],
		col: [ 2, "<table><tbody></tbody><colgroup>", "</colgroup></table>" ],
		area: [ 1, "<map>", "</map>" ],
		_default: [ 0, "", "" ]
	},
	safeFragment = createSafeFragment( document ),
	fragmentDiv = safeFragment.appendChild( document.createElement("div") );

wrapMap.optgroup = wrapMap.option;
wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;

// IE6-8 can't serialize link, script, style, or any html5 (NoScope) tags,
// unless wrapped in a div with non-breaking characters in front of it.
if ( !jQuery.support.htmlSerialize ) {
	wrapMap._default = [ 1, "X<div>", "</div>" ];
}

jQuery.fn.extend({
	text: function( value ) {
		return jQuery.access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().append( ( this[0] && this[0].ownerDocument || document ).createTextNode( value ) );
		}, null, value, arguments.length );
	},

	wrapAll: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapAll( html.call(this, i) );
			});
		}

		if ( this[0] ) {
			// The elements to wrap the target around
			var wrap = jQuery( html, this[0].ownerDocument ).eq(0).clone(true);

			if ( this[0].parentNode ) {
				wrap.insertBefore( this[0] );
			}

			wrap.map(function() {
				var elem = this;

				while ( elem.firstChild && elem.firstChild.nodeType === 1 ) {
					elem = elem.firstChild;
				}

				return elem;
			}).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( jQuery.isFunction( html ) ) {
			return this.each(function(i) {
				jQuery(this).wrapInner( html.call(this, i) );
			});
		}

		return this.each(function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		});
	},

	wrap: function( html ) {
		var isFunction = jQuery.isFunction( html );

		return this.each(function(i) {
			jQuery( this ).wrapAll( isFunction ? html.call(this, i) : html );
		});
	},

	unwrap: function() {
		return this.parent().each(function() {
			if ( !jQuery.nodeName( this, "body" ) ) {
				jQuery( this ).replaceWith( this.childNodes );
			}
		}).end();
	},

	append: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.appendChild( elem );
			}
		});
	},

	prepend: function() {
		return this.domManip(arguments, true, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 ) {
				this.insertBefore( elem, this.firstChild );
			}
		});
	},

	before: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( set, this ), "before", this.selector );
		}
	},

	after: function() {
		if ( !isDisconnected( this[0] ) ) {
			return this.domManip(arguments, false, function( elem ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			});
		}

		if ( arguments.length ) {
			var set = jQuery.clean( arguments );
			return this.pushStack( jQuery.merge( this, set ), "after", this.selector );
		}
	},

	// keepData is for internal use only--do not document
	remove: function( selector, keepData ) {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			if ( !selector || jQuery.filter( selector, [ elem ] ).length ) {
				if ( !keepData && elem.nodeType === 1 ) {
					jQuery.cleanData( elem.getElementsByTagName("*") );
					jQuery.cleanData( [ elem ] );
				}

				if ( elem.parentNode ) {
					elem.parentNode.removeChild( elem );
				}
			}
		}

		return this;
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; (elem = this[i]) != null; i++ ) {
			// Remove element nodes and prevent memory leaks
			if ( elem.nodeType === 1 ) {
				jQuery.cleanData( elem.getElementsByTagName("*") );
			}

			// Remove any remaining nodes
			while ( elem.firstChild ) {
				elem.removeChild( elem.firstChild );
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function () {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		});
	},

	html: function( value ) {
		return jQuery.access( this, function( value ) {
			var elem = this[0] || {},
				i = 0,
				l = this.length;

			if ( value === undefined ) {
				return elem.nodeType === 1 ?
					elem.innerHTML.replace( rinlinejQuery, "" ) :
					undefined;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				( jQuery.support.htmlSerialize || !rnoshimcache.test( value )  ) &&
				( jQuery.support.leadingWhitespace || !rleadingWhitespace.test( value ) ) &&
				!wrapMap[ ( rtagName.exec( value ) || ["", ""] )[1].toLowerCase() ] ) {

				value = value.replace( rxhtmlTag, "<$1></$2>" );

				try {
					for (; i < l; i++ ) {
						// Remove element nodes and prevent memory leaks
						elem = this[i] || {};
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( elem.getElementsByTagName( "*" ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch(e) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function( value ) {
		if ( !isDisconnected( this[0] ) ) {
			// Make sure that the elements are removed from the DOM before they are inserted
			// this can help fix replacing a parent with child elements
			if ( jQuery.isFunction( value ) ) {
				return this.each(function(i) {
					var self = jQuery(this), old = self.html();
					self.replaceWith( value.call( this, i, old ) );
				});
			}

			if ( typeof value !== "string" ) {
				value = jQuery( value ).detach();
			}

			return this.each(function() {
				var next = this.nextSibling,
					parent = this.parentNode;

				jQuery( this ).remove();

				if ( next ) {
					jQuery(next).before( value );
				} else {
					jQuery(parent).append( value );
				}
			});
		}

		return this.length ?
			this.pushStack( jQuery(jQuery.isFunction(value) ? value() : value), "replaceWith", value ) :
			this;
	},

	detach: function( selector ) {
		return this.remove( selector, true );
	},

	domManip: function( args, table, callback ) {

		// Flatten any nested arrays
		args = [].concat.apply( [], args );

		var results, first, fragment, iNoClone,
			i = 0,
			value = args[0],
			scripts = [],
			l = this.length;

		// We can't cloneNode fragments that contain checked, in WebKit
		if ( !jQuery.support.checkClone && l > 1 && typeof value === "string" && rchecked.test( value ) ) {
			return this.each(function() {
				jQuery(this).domManip( args, table, callback );
			});
		}

		if ( jQuery.isFunction(value) ) {
			return this.each(function(i) {
				var self = jQuery(this);
				args[0] = value.call( this, i, table ? self.html() : undefined );
				self.domManip( args, table, callback );
			});
		}

		if ( this[0] ) {
			results = jQuery.buildFragment( args, this, scripts );
			fragment = results.fragment;
			first = fragment.firstChild;

			if ( fragment.childNodes.length === 1 ) {
				fragment = first;
			}

			if ( first ) {
				table = table && jQuery.nodeName( first, "tr" );

				// Use the original fragment for the last item instead of the first because it can end up
				// being emptied incorrectly in certain situations (#8070).
				// Fragments from the fragment cache must always be cloned and never used in place.
				for ( iNoClone = results.cacheable || l - 1; i < l; i++ ) {
					callback.call(
						table && jQuery.nodeName( this[i], "table" ) ?
							findOrAppend( this[i], "tbody" ) :
							this[i],
						i === iNoClone ?
							fragment :
							jQuery.clone( fragment, true, true )
					);
				}
			}

			// Fix #11809: Avoid leaking memory
			fragment = first = null;

			if ( scripts.length ) {
				jQuery.each( scripts, function( i, elem ) {
					if ( elem.src ) {
						if ( jQuery.ajax ) {
							jQuery.ajax({
								url: elem.src,
								type: "GET",
								dataType: "script",
								async: false,
								global: false,
								"throws": true
							});
						} else {
							jQuery.error("no ajax");
						}
					} else {
						jQuery.globalEval( ( elem.text || elem.textContent || elem.innerHTML || "" ).replace( rcleanScript, "" ) );
					}

					if ( elem.parentNode ) {
						elem.parentNode.removeChild( elem );
					}
				});
			}
		}

		return this;
	}
});

function findOrAppend( elem, tag ) {
	return elem.getElementsByTagName( tag )[0] || elem.appendChild( elem.ownerDocument.createElement( tag ) );
}

function cloneCopyEvent( src, dest ) {

	if ( dest.nodeType !== 1 || !jQuery.hasData( src ) ) {
		return;
	}

	var type, i, l,
		oldData = jQuery._data( src ),
		curData = jQuery._data( dest, oldData ),
		events = oldData.events;

	if ( events ) {
		delete curData.handle;
		curData.events = {};

		for ( type in events ) {
			for ( i = 0, l = events[ type ].length; i < l; i++ ) {
				jQuery.event.add( dest, type, events[ type ][ i ] );
			}
		}
	}

	// make the cloned public data object a copy from the original
	if ( curData.data ) {
		curData.data = jQuery.extend( {}, curData.data );
	}
}

function cloneFixAttributes( src, dest ) {
	var nodeName;

	// We do not need to do anything for non-Elements
	if ( dest.nodeType !== 1 ) {
		return;
	}

	// clearAttributes removes the attributes, which we don't want,
	// but also removes the attachEvent events, which we *do* want
	if ( dest.clearAttributes ) {
		dest.clearAttributes();
	}

	// mergeAttributes, in contrast, only merges back on the
	// original attributes, not the events
	if ( dest.mergeAttributes ) {
		dest.mergeAttributes( src );
	}

	nodeName = dest.nodeName.toLowerCase();

	if ( nodeName === "object" ) {
		// IE6-10 improperly clones children of object elements using classid.
		// IE10 throws NoModificationAllowedError if parent is null, #12132.
		if ( dest.parentNode ) {
			dest.outerHTML = src.outerHTML;
		}

		// This path appears unavoidable for IE9. When cloning an object
		// element in IE9, the outerHTML strategy above is not sufficient.
		// If the src has innerHTML and the destination does not,
		// copy the src.innerHTML into the dest.innerHTML. #10324
		if ( jQuery.support.html5Clone && (src.innerHTML && !jQuery.trim(dest.innerHTML)) ) {
			dest.innerHTML = src.innerHTML;
		}

	} else if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		// IE6-8 fails to persist the checked state of a cloned checkbox
		// or radio button. Worse, IE6-7 fail to give the cloned element
		// a checked appearance if the defaultChecked value isn't also set

		dest.defaultChecked = dest.checked = src.checked;

		// IE6-7 get confused and end up setting the value of a cloned
		// checkbox/radio button to an empty string instead of "on"
		if ( dest.value !== src.value ) {
			dest.value = src.value;
		}

	// IE6-8 fails to return the selected option to the default selected
	// state when cloning options
	} else if ( nodeName === "option" ) {
		dest.selected = src.defaultSelected;

	// IE6-8 fails to set the defaultValue to the correct value when
	// cloning other types of input fields
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;

	// IE blanks contents when cloning scripts
	} else if ( nodeName === "script" && dest.text !== src.text ) {
		dest.text = src.text;
	}

	// Event data gets referenced instead of copied if the expando
	// gets copied too
	dest.removeAttribute( jQuery.expando );
}

jQuery.buildFragment = function( args, context, scripts ) {
	var fragment, cacheable, cachehit,
		first = args[ 0 ];

	// Set context from what may come in as undefined or a jQuery collection or a node
	// Updated to fix #12266 where accessing context[0] could throw an exception in IE9/10 &
	// also doubles as fix for #8950 where plain objects caused createDocumentFragment exception
	context = context || document;
	context = !context.nodeType && context[0] || context;
	context = context.ownerDocument || context;

	// Only cache "small" (1/2 KB) HTML strings that are associated with the main document
	// Cloning options loses the selected state, so don't cache them
	// IE 6 doesn't like it when you put <object> or <embed> elements in a fragment
	// Also, WebKit does not clone 'checked' attributes on cloneNode, so don't cache
	// Lastly, IE6,7,8 will not correctly reuse cached fragments that were created from unknown elems #10501
	if ( args.length === 1 && typeof first === "string" && first.length < 512 && context === document &&
		first.charAt(0) === "<" && !rnocache.test( first ) &&
		(jQuery.support.checkClone || !rchecked.test( first )) &&
		(jQuery.support.html5Clone || !rnoshimcache.test( first )) ) {

		// Mark cacheable and look for a hit
		cacheable = true;
		fragment = jQuery.fragments[ first ];
		cachehit = fragment !== undefined;
	}

	if ( !fragment ) {
		fragment = context.createDocumentFragment();
		jQuery.clean( args, context, fragment, scripts );

		// Update the cache, but only store false
		// unless this is a second parsing of the same content
		if ( cacheable ) {
			jQuery.fragments[ first ] = cachehit && fragment;
		}
	}

	return { fragment: fragment, cacheable: cacheable };
};

jQuery.fragments = {};

jQuery.each({
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			i = 0,
			ret = [],
			insert = jQuery( selector ),
			l = insert.length,
			parent = this.length === 1 && this[0].parentNode;

		if ( (parent == null || parent && parent.nodeType === 11 && parent.childNodes.length === 1) && l === 1 ) {
			insert[ original ]( this[0] );
			return this;
		} else {
			for ( ; i < l; i++ ) {
				elems = ( i > 0 ? this.clone(true) : this ).get();
				jQuery( insert[i] )[ original ]( elems );
				ret = ret.concat( elems );
			}

			return this.pushStack( ret, name, insert.selector );
		}
	};
});

function getAll( elem ) {
	if ( typeof elem.getElementsByTagName !== "undefined" ) {
		return elem.getElementsByTagName( "*" );

	} else if ( typeof elem.querySelectorAll !== "undefined" ) {
		return elem.querySelectorAll( "*" );

	} else {
		return [];
	}
}

// Used in clean, fixes the defaultChecked property
function fixDefaultChecked( elem ) {
	if ( rcheckableType.test( elem.type ) ) {
		elem.defaultChecked = elem.checked;
	}
}

jQuery.extend({
	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var srcElements,
			destElements,
			i,
			clone;

		if ( jQuery.support.html5Clone || jQuery.isXMLDoc(elem) || !rnoshimcache.test( "<" + elem.nodeName + ">" ) ) {
			clone = elem.cloneNode( true );

		// IE<=8 does not properly clone detached, unknown element nodes
		} else {
			fragmentDiv.innerHTML = elem.outerHTML;
			fragmentDiv.removeChild( clone = fragmentDiv.firstChild );
		}

		if ( (!jQuery.support.noCloneEvent || !jQuery.support.noCloneChecked) &&
				(elem.nodeType === 1 || elem.nodeType === 11) && !jQuery.isXMLDoc(elem) ) {
			// IE copies events bound via attachEvent when using cloneNode.
			// Calling detachEvent on the clone will also remove the events
			// from the original. In order to get around this, we use some
			// proprietary methods to clear the events. Thanks to MooTools
			// guys for this hotness.

			cloneFixAttributes( elem, clone );

			// Using Sizzle here is crazy slow, so we use getElementsByTagName instead
			srcElements = getAll( elem );
			destElements = getAll( clone );

			// Weird iteration because IE will replace the length property
			// with an element if you are cloning the body and one of the
			// elements on the page has a name or id of "length"
			for ( i = 0; srcElements[i]; ++i ) {
				// Ensure that the destination node is not null; Fixes #9587
				if ( destElements[i] ) {
					cloneFixAttributes( srcElements[i], destElements[i] );
				}
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			cloneCopyEvent( elem, clone );

			if ( deepDataAndEvents ) {
				srcElements = getAll( elem );
				destElements = getAll( clone );

				for ( i = 0; srcElements[i]; ++i ) {
					cloneCopyEvent( srcElements[i], destElements[i] );
				}
			}
		}

		srcElements = destElements = null;

		// Return the cloned set
		return clone;
	},

	clean: function( elems, context, fragment, scripts ) {
		var i, j, elem, tag, wrap, depth, div, hasBody, tbody, len, handleScript, jsTags,
			safe = context === document && safeFragment,
			ret = [];

		// Ensure that context is a document
		if ( !context || typeof context.createDocumentFragment === "undefined" ) {
			context = document;
		}

		// Use the already-created safe fragment if context permits
		for ( i = 0; (elem = elems[i]) != null; i++ ) {
			if ( typeof elem === "number" ) {
				elem += "";
			}

			if ( !elem ) {
				continue;
			}

			// Convert html string into DOM nodes
			if ( typeof elem === "string" ) {
				if ( !rhtml.test( elem ) ) {
					elem = context.createTextNode( elem );
				} else {
					// Ensure a safe container in which to render the html
					safe = safe || createSafeFragment( context );
					div = context.createElement("div");
					safe.appendChild( div );

					// Fix "XHTML"-style tags in all browsers
					elem = elem.replace(rxhtmlTag, "<$1></$2>");

					// Go to html and back, then peel off extra wrappers
					tag = ( rtagName.exec( elem ) || ["", ""] )[1].toLowerCase();
					wrap = wrapMap[ tag ] || wrapMap._default;
					depth = wrap[0];
					div.innerHTML = wrap[1] + elem + wrap[2];

					// Move to the right depth
					while ( depth-- ) {
						div = div.lastChild;
					}

					// Remove IE's autoinserted <tbody> from table fragments
					if ( !jQuery.support.tbody ) {

						// String was a <table>, *may* have spurious <tbody>
						hasBody = rtbody.test(elem);
							tbody = tag === "table" && !hasBody ?
								div.firstChild && div.firstChild.childNodes :

								// String was a bare <thead> or <tfoot>
								wrap[1] === "<table>" && !hasBody ?
									div.childNodes :
									[];

						for ( j = tbody.length - 1; j >= 0 ; --j ) {
							if ( jQuery.nodeName( tbody[ j ], "tbody" ) && !tbody[ j ].childNodes.length ) {
								tbody[ j ].parentNode.removeChild( tbody[ j ] );
							}
						}
					}

					// IE completely kills leading whitespace when innerHTML is used
					if ( !jQuery.support.leadingWhitespace && rleadingWhitespace.test( elem ) ) {
						div.insertBefore( context.createTextNode( rleadingWhitespace.exec(elem)[0] ), div.firstChild );
					}

					elem = div.childNodes;

					// Take out of fragment container (we need a fresh div each time)
					div.parentNode.removeChild( div );
				}
			}

			if ( elem.nodeType ) {
				ret.push( elem );
			} else {
				jQuery.merge( ret, elem );
			}
		}

		// Fix #11356: Clear elements from safeFragment
		if ( div ) {
			elem = div = safe = null;
		}

		// Reset defaultChecked for any radios and checkboxes
		// about to be appended to the DOM in IE 6/7 (#8060)
		if ( !jQuery.support.appendChecked ) {
			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				if ( jQuery.nodeName( elem, "input" ) ) {
					fixDefaultChecked( elem );
				} else if ( typeof elem.getElementsByTagName !== "undefined" ) {
					jQuery.grep( elem.getElementsByTagName("input"), fixDefaultChecked );
				}
			}
		}

		// Append elements to a provided document fragment
		if ( fragment ) {
			// Special handling of each script element
			handleScript = function( elem ) {
				// Check if we consider it executable
				if ( !elem.type || rscriptType.test( elem.type ) ) {
					// Detach the script and store it in the scripts array (if provided) or the fragment
					// Return truthy to indicate that it has been handled
					return scripts ?
						scripts.push( elem.parentNode ? elem.parentNode.removeChild( elem ) : elem ) :
						fragment.appendChild( elem );
				}
			};

			for ( i = 0; (elem = ret[i]) != null; i++ ) {
				// Check if we're done after handling an executable script
				if ( !( jQuery.nodeName( elem, "script" ) && handleScript( elem ) ) ) {
					// Append to fragment and handle embedded scripts
					fragment.appendChild( elem );
					if ( typeof elem.getElementsByTagName !== "undefined" ) {
						// handleScript alters the DOM, so use jQuery.merge to ensure snapshot iteration
						jsTags = jQuery.grep( jQuery.merge( [], elem.getElementsByTagName("script") ), handleScript );

						// Splice the scripts into ret after their former ancestor and advance our index beyond them
						ret.splice.apply( ret, [i + 1, 0].concat( jsTags ) );
						i += jsTags.length;
					}
				}
			}
		}

		return ret;
	},

	cleanData: function( elems, /* internal */ acceptData ) {
		var data, id, elem, type,
			i = 0,
			internalKey = jQuery.expando,
			cache = jQuery.cache,
			deleteExpando = jQuery.support.deleteExpando,
			special = jQuery.event.special;

		for ( ; (elem = elems[i]) != null; i++ ) {

			if ( acceptData || jQuery.acceptData( elem ) ) {

				id = elem[ internalKey ];
				data = id && cache[ id ];

				if ( data ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Remove cache only if it was not already removed by jQuery.event.remove
					if ( cache[ id ] ) {

						delete cache[ id ];

						// IE does not allow us to delete expando properties from nodes,
						// nor does it have a removeAttribute function on Document nodes;
						// we must handle all of these cases
						if ( deleteExpando ) {
							delete elem[ internalKey ];

						} else if ( elem.removeAttribute ) {
							elem.removeAttribute( internalKey );

						} else {
							elem[ internalKey ] = null;
						}

						jQuery.deletedIds.push( id );
					}
				}
			}
		}
	}
});
// Limit scope pollution from any deprecated API
(function() {

var matched, browser;

// Use of jQuery.browser is frowned upon.
// More details: http://api.jquery.com/jQuery.browser
// jQuery.uaMatch maintained for back-compat
jQuery.uaMatch = function( ua ) {
	ua = ua.toLowerCase();

	var match = /(chrome)[ \/]([\w.]+)/.exec( ua ) ||
		/(webkit)[ \/]([\w.]+)/.exec( ua ) ||
		/(opera)(?:.*version|)[ \/]([\w.]+)/.exec( ua ) ||
		/(msie) ([\w.]+)/.exec( ua ) ||
		ua.indexOf("compatible") < 0 && /(mozilla)(?:.*? rv:([\w.]+)|)/.exec( ua ) ||
		[];

	return {
		browser: match[ 1 ] || "",
		version: match[ 2 ] || "0"
	};
};

matched = jQuery.uaMatch( navigator.userAgent );
browser = {};

if ( matched.browser ) {
	browser[ matched.browser ] = true;
	browser.version = matched.version;
}

// Chrome is Webkit, but Webkit is also Safari.
if ( browser.chrome ) {
	browser.webkit = true;
} else if ( browser.webkit ) {
	browser.safari = true;
}

jQuery.browser = browser;

jQuery.sub = function() {
	function jQuerySub( selector, context ) {
		return new jQuerySub.fn.init( selector, context );
	}
	jQuery.extend( true, jQuerySub, this );
	jQuerySub.superclass = this;
	jQuerySub.fn = jQuerySub.prototype = this();
	jQuerySub.fn.constructor = jQuerySub;
	jQuerySub.sub = this.sub;
	jQuerySub.fn.init = function init( selector, context ) {
		if ( context && context instanceof jQuery && !(context instanceof jQuerySub) ) {
			context = jQuerySub( context );
		}

		return jQuery.fn.init.call( this, selector, context, rootjQuerySub );
	};
	jQuerySub.fn.init.prototype = jQuerySub.fn;
	var rootjQuerySub = jQuerySub(document);
	return jQuerySub;
};

})();
var curCSS, iframe, iframeDoc,
	ralpha = /alpha\([^)]*\)/i,
	ropacity = /opacity=([^)]*)/,
	rposition = /^(top|right|bottom|left)$/,
	// swappable if display is none or starts with table except "table", "table-cell", or "table-caption"
	// see here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rmargin = /^margin/,
	rnumsplit = new RegExp( "^(" + core_pnum + ")(.*)$", "i" ),
	rnumnonpx = new RegExp( "^(" + core_pnum + ")(?!px)[a-z%]+$", "i" ),
	rrelNum = new RegExp( "^([-+])=(" + core_pnum + ")", "i" ),
	elemdisplay = { BODY: "block" },

	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: 0,
		fontWeight: 400
	},

	cssExpand = [ "Top", "Right", "Bottom", "Left" ],
	cssPrefixes = [ "Webkit", "O", "Moz", "ms" ],

	eventsToggle = jQuery.fn.toggle;

// return a css property mapped to a potentially vendor prefixed property
function vendorPropName( style, name ) {

	// shortcut for names that are not vendor prefixed
	if ( name in style ) {
		return name;
	}

	// check for vendor prefixed names
	var capName = name.charAt(0).toUpperCase() + name.slice(1),
		origName = name,
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in style ) {
			return name;
		}
	}

	return origName;
}

function isHidden( elem, el ) {
	elem = el || elem;
	return jQuery.css( elem, "display" ) === "none" || !jQuery.contains( elem.ownerDocument, elem );
}

function showHide( elements, show ) {
	var elem, display,
		values = [],
		index = 0,
		length = elements.length;

	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		values[ index ] = jQuery._data( elem, "olddisplay" );
		if ( show ) {
			// Reset the inline display of this element to learn if it is
			// being hidden by cascaded rules or not
			if ( !values[ index ] && elem.style.display === "none" ) {
				elem.style.display = "";
			}

			// Set elements which have been overridden with display: none
			// in a stylesheet to whatever the default browser style is
			// for such an element
			if ( elem.style.display === "" && isHidden( elem ) ) {
				values[ index ] = jQuery._data( elem, "olddisplay", css_defaultDisplay(elem.nodeName) );
			}
		} else {
			display = curCSS( elem, "display" );

			if ( !values[ index ] && display !== "none" ) {
				jQuery._data( elem, "olddisplay", display );
			}
		}
	}

	// Set the display of most of the elements in a second loop
	// to avoid the constant reflow
	for ( index = 0; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}
		if ( !show || elem.style.display === "none" || elem.style.display === "" ) {
			elem.style.display = show ? values[ index ] || "" : "none";
		}
	}

	return elements;
}

jQuery.fn.extend({
	css: function( name, value ) {
		return jQuery.access( this, function( elem, name, value ) {
			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	},
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state, fn2 ) {
		var bool = typeof state === "boolean";

		if ( jQuery.isFunction( state ) && jQuery.isFunction( fn2 ) ) {
			return eventsToggle.apply( this, arguments );
		}

		return this.each(function() {
			if ( bool ? state : isHidden( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		});
	}
});

jQuery.extend({
	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {
					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;

				}
			}
		}
	},

	// Exclude the following css properties to add px
	cssNumber: {
		"fillOpacity": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {
		// normalize float css property
		"float": jQuery.support.cssFloat ? "cssFloat" : "styleFloat"
	},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {
		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = jQuery.camelCase( name ),
			style = elem.style;

		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// convert relative number strings (+= or -=) to relative numbers. #7345
			if ( type === "string" && (ret = rrelNum.exec( value )) ) {
				value = ( ret[1] + 1 ) * ret[2] + parseFloat( jQuery.css( elem, name ) );
				// Fixes bug #9237
				type = "number";
			}

			// Make sure that NaN and null values aren't set. See: #7116
			if ( value == null || type === "number" && isNaN( value ) ) {
				return;
			}

			// If a number was passed in, add 'px' to the (except for certain CSS properties)
			if ( type === "number" && !jQuery.cssNumber[ origName ] ) {
				value += "px";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !("set" in hooks) || (value = hooks.set( elem, value, extra )) !== undefined ) {
				// Wrapped to prevent IE from throwing errors when 'invalid' values are provided
				// Fixes bug #5509
				try {
					style[ name ] = value;
				} catch(e) {}
			}

		} else {
			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks && (ret = hooks.get( elem, false, extra )) !== undefined ) {
				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, numeric, extra ) {
		var val, num, hooks,
			origName = jQuery.camelCase( name );

		// Make sure that we're working with the right name
		name = jQuery.cssProps[ origName ] || ( jQuery.cssProps[ origName ] = vendorPropName( elem.style, origName ) );

		// gets hook for the prefixed version
		// followed by the unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name );
		}

		//convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Return, converting to number if forced or a qualifier was provided and val looks numeric
		if ( numeric || extra !== undefined ) {
			num = parseFloat( val );
			return numeric || jQuery.isNumeric( num ) ? num || 0 : val;
		}
		return val;
	},

	// A method for quickly swapping in/out CSS properties to get correct calculations
	swap: function( elem, options, callback ) {
		var ret, name,
			old = {};

		// Remember the old values, and insert the new ones
		for ( name in options ) {
			old[ name ] = elem.style[ name ];
			elem.style[ name ] = options[ name ];
		}

		ret = callback.call( elem );

		// Revert the old values
		for ( name in options ) {
			elem.style[ name ] = old[ name ];
		}

		return ret;
	}
});

// NOTE: To any future maintainer, we've window.getComputedStyle
// because jsdom on node.js will break without it.
if ( window.getComputedStyle ) {
	curCSS = function( elem, name ) {
		var ret, width, minWidth, maxWidth,
			computed = window.getComputedStyle( elem, null ),
			style = elem.style;

		if ( computed ) {

			// getPropertyValue is only needed for .css('filter') in IE9, see #12537
			ret = computed.getPropertyValue( name ) || computed[ name ];

			if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
				ret = jQuery.style( elem, name );
			}

			// A tribute to the "awesome hack by Dean Edwards"
			// Chrome < 17 and Safari 5.0 uses "computed value" instead of "used value" for margin-right
			// Safari 5.1.7 (at least) returns percentage for a larger set of values, but width seems to be reliably pixels
			// this is against the CSSOM draft spec: http://dev.w3.org/csswg/cssom/#resolved-values
			if ( rnumnonpx.test( ret ) && rmargin.test( name ) ) {
				width = style.width;
				minWidth = style.minWidth;
				maxWidth = style.maxWidth;

				style.minWidth = style.maxWidth = style.width = ret;
				ret = computed.width;

				style.width = width;
				style.minWidth = minWidth;
				style.maxWidth = maxWidth;
			}
		}

		return ret;
	};
} else if ( document.documentElement.currentStyle ) {
	curCSS = function( elem, name ) {
		var left, rsLeft,
			ret = elem.currentStyle && elem.currentStyle[ name ],
			style = elem.style;

		// Avoid setting ret to empty string here
		// so we don't default to auto
		if ( ret == null && style && style[ name ] ) {
			ret = style[ name ];
		}

		// From the awesome hack by Dean Edwards
		// http://erik.eae.net/archives/2007/07/27/18.54.15/#comment-102291

		// If we're not dealing with a regular pixel number
		// but a number that has a weird ending, we need to convert it to pixels
		// but not position css attributes, as those are proportional to the parent element instead
		// and we can't measure the parent instead because it might trigger a "stacking dolls" problem
		if ( rnumnonpx.test( ret ) && !rposition.test( name ) ) {

			// Remember the original values
			left = style.left;
			rsLeft = elem.runtimeStyle && elem.runtimeStyle.left;

			// Put in the new values to get a computed value out
			if ( rsLeft ) {
				elem.runtimeStyle.left = elem.currentStyle.left;
			}
			style.left = name === "fontSize" ? "1em" : ret;
			ret = style.pixelLeft + "px";

			// Revert the changed values
			style.left = left;
			if ( rsLeft ) {
				elem.runtimeStyle.left = rsLeft;
			}
		}

		return ret === "" ? "auto" : ret;
	};
}

function setPositiveNumber( elem, value, subtract ) {
	var matches = rnumsplit.exec( value );
	return matches ?
			Math.max( 0, matches[ 1 ] - ( subtract || 0 ) ) + ( matches[ 2 ] || "px" ) :
			value;
}

function augmentWidthOrHeight( elem, name, extra, isBorderBox ) {
	var i = extra === ( isBorderBox ? "border" : "content" ) ?
		// If we already have the right measurement, avoid augmentation
		4 :
		// Otherwise initialize for horizontal or vertical properties
		name === "width" ? 1 : 0,

		val = 0;

	for ( ; i < 4; i += 2 ) {
		// both box models exclude margin, so add it if we want it
		if ( extra === "margin" ) {
			// we use jQuery.css instead of curCSS here
			// because of the reliableMarginRight CSS hook!
			val += jQuery.css( elem, extra + cssExpand[ i ], true );
		}

		// From this point on we use curCSS for maximum performance (relevant in animations)
		if ( isBorderBox ) {
			// border-box includes padding, so remove it if we want content
			if ( extra === "content" ) {
				val -= parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;
			}

			// at this point, extra isn't border nor margin, so remove border
			if ( extra !== "margin" ) {
				val -= parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		} else {
			// at this point, extra isn't content, so add padding
			val += parseFloat( curCSS( elem, "padding" + cssExpand[ i ] ) ) || 0;

			// at this point, extra isn't content nor padding, so add border
			if ( extra !== "padding" ) {
				val += parseFloat( curCSS( elem, "border" + cssExpand[ i ] + "Width" ) ) || 0;
			}
		}
	}

	return val;
}

function getWidthOrHeight( elem, name, extra ) {

	// Start with offset property, which is equivalent to the border-box value
	var val = name === "width" ? elem.offsetWidth : elem.offsetHeight,
		valueIsBorderBox = true,
		isBorderBox = jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box";

	// some non-html elements return undefined for offsetWidth, so check for null/undefined
	// svg - https://bugzilla.mozilla.org/show_bug.cgi?id=649285
	// MathML - https://bugzilla.mozilla.org/show_bug.cgi?id=491668
	if ( val <= 0 || val == null ) {
		// Fall back to computed then uncomputed css if necessary
		val = curCSS( elem, name );
		if ( val < 0 || val == null ) {
			val = elem.style[ name ];
		}

		// Computed unit is not pixels. Stop here and return.
		if ( rnumnonpx.test(val) ) {
			return val;
		}

		// we need the check for style in case a browser which returns unreliable values
		// for getComputedStyle silently falls back to the reliable elem.style
		valueIsBorderBox = isBorderBox && ( jQuery.support.boxSizingReliable || val === elem.style[ name ] );

		// Normalize "", auto, and prepare for extra
		val = parseFloat( val ) || 0;
	}

	// use the active box-sizing model to add/subtract irrelevant styles
	return ( val +
		augmentWidthOrHeight(
			elem,
			name,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox
		)
	) + "px";
}


// Try to determine the default display value of an element
function css_defaultDisplay( nodeName ) {
	if ( elemdisplay[ nodeName ] ) {
		return elemdisplay[ nodeName ];
	}

	var elem = jQuery( "<" + nodeName + ">" ).appendTo( document.body ),
		display = elem.css("display");
	elem.remove();

	// If the simple way fails,
	// get element's real default display by attaching it to a temp iframe
	if ( display === "none" || display === "" ) {
		// Use the already-created iframe if possible
		iframe = document.body.appendChild(
			iframe || jQuery.extend( document.createElement("iframe"), {
				frameBorder: 0,
				width: 0,
				height: 0
			})
		);

		// Create a cacheable copy of the iframe document on first call.
		// IE and Opera will allow us to reuse the iframeDoc without re-writing the fake HTML
		// document to it; WebKit & Firefox won't allow reusing the iframe document.
		if ( !iframeDoc || !iframe.createElement ) {
			iframeDoc = ( iframe.contentWindow || iframe.contentDocument ).document;
			iframeDoc.write("<!doctype html><html><body>");
			iframeDoc.close();
		}

		elem = iframeDoc.body.appendChild( iframeDoc.createElement(nodeName) );

		display = curCSS( elem, "display" );
		document.body.removeChild( iframe );
	}

	// Store the correct default display
	elemdisplay[ nodeName ] = display;

	return display;
}

jQuery.each([ "height", "width" ], function( i, name ) {
	jQuery.cssHooks[ name ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {
				// certain elements can have dimension info if we invisibly show them
				// however, it must have a current display style that would benefit from this
				if ( elem.offsetWidth === 0 && rdisplayswap.test( curCSS( elem, "display" ) ) ) {
					return jQuery.swap( elem, cssShow, function() {
						return getWidthOrHeight( elem, name, extra );
					});
				} else {
					return getWidthOrHeight( elem, name, extra );
				}
			}
		},

		set: function( elem, value, extra ) {
			return setPositiveNumber( elem, value, extra ?
				augmentWidthOrHeight(
					elem,
					name,
					extra,
					jQuery.support.boxSizing && jQuery.css( elem, "boxSizing" ) === "border-box"
				) : 0
			);
		}
	};
});

if ( !jQuery.support.opacity ) {
	jQuery.cssHooks.opacity = {
		get: function( elem, computed ) {
			// IE uses filters for opacity
			return ropacity.test( (computed && elem.currentStyle ? elem.currentStyle.filter : elem.style.filter) || "" ) ?
				( 0.01 * parseFloat( RegExp.$1 ) ) + "" :
				computed ? "1" : "";
		},

		set: function( elem, value ) {
			var style = elem.style,
				currentStyle = elem.currentStyle,
				opacity = jQuery.isNumeric( value ) ? "alpha(opacity=" + value * 100 + ")" : "",
				filter = currentStyle && currentStyle.filter || style.filter || "";

			// IE has trouble with opacity if it does not have layout
			// Force it by setting the zoom level
			style.zoom = 1;

			// if setting opacity to 1, and no other filters exist - attempt to remove filter attribute #6652
			if ( value >= 1 && jQuery.trim( filter.replace( ralpha, "" ) ) === "" &&
				style.removeAttribute ) {

				// Setting style.filter to null, "" & " " still leave "filter:" in the cssText
				// if "filter:" is present at all, clearType is disabled, we want to avoid this
				// style.removeAttribute is IE Only, but so apparently is this code path...
				style.removeAttribute( "filter" );

				// if there there is no filter style applied in a css rule, we are done
				if ( currentStyle && !currentStyle.filter ) {
					return;
				}
			}

			// otherwise, set new filter values
			style.filter = ralpha.test( filter ) ?
				filter.replace( ralpha, opacity ) :
				filter + " " + opacity;
		}
	};
}

// These hooks cannot be added until DOM ready because the support test
// for it is not run until after DOM ready
jQuery(function() {
	if ( !jQuery.support.reliableMarginRight ) {
		jQuery.cssHooks.marginRight = {
			get: function( elem, computed ) {
				// WebKit Bug 13343 - getComputedStyle returns wrong value for margin-right
				// Work around by temporarily setting element display to inline-block
				return jQuery.swap( elem, { "display": "inline-block" }, function() {
					if ( computed ) {
						return curCSS( elem, "marginRight" );
					}
				});
			}
		};
	}

	// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
	// getComputedStyle returns percent when specified for top/left/bottom/right
	// rather than make the css module depend on the offset module, we just check for it here
	if ( !jQuery.support.pixelPosition && jQuery.fn.position ) {
		jQuery.each( [ "top", "left" ], function( i, prop ) {
			jQuery.cssHooks[ prop ] = {
				get: function( elem, computed ) {
					if ( computed ) {
						var ret = curCSS( elem, prop );
						// if curCSS returns percentage, fallback to offset
						return rnumnonpx.test( ret ) ? jQuery( elem ).position()[ prop ] + "px" : ret;
					}
				}
			};
		});
	}

});

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.hidden = function( elem ) {
		return ( elem.offsetWidth === 0 && elem.offsetHeight === 0 ) || (!jQuery.support.reliableHiddenOffsets && ((elem.style && elem.style.display) || curCSS( elem, "display" )) === "none");
	};

	jQuery.expr.filters.visible = function( elem ) {
		return !jQuery.expr.filters.hidden( elem );
	};
}

// These hooks are used by animate to expand properties
jQuery.each({
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i,

				// assumes a single number if not a string
				parts = typeof value === "string" ? value.split(" ") : [ value ],
				expanded = {};

			for ( i = 0; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( !rmargin.test( prefix ) ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
});
var r20 = /%20/g,
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rinput = /^(?:color|date|datetime|datetime-local|email|hidden|month|number|password|range|search|tel|text|time|url|week)$/i,
	rselectTextarea = /^(?:select|textarea)/i;

jQuery.fn.extend({
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map(function(){
			return this.elements ? jQuery.makeArray( this.elements ) : this;
		})
		.filter(function(){
			return this.name && !this.disabled &&
				( this.checked || rselectTextarea.test( this.nodeName ) ||
					rinput.test( this.type ) );
		})
		.map(function( i, elem ){
			var val = jQuery( this ).val();

			return val == null ?
				null :
				jQuery.isArray( val ) ?
					jQuery.map( val, function( val, i ){
						return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
					}) :
					{ name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		}).get();
	}
});

//Serialize an array of form elements or a set of
//key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, value ) {
			// If value is a function, invoke it and return its value
			value = jQuery.isFunction( value ) ? value() : ( value == null ? "" : value );
			s[ s.length ] = encodeURIComponent( key ) + "=" + encodeURIComponent( value );
		};

	// Set traditional to true for jQuery <= 1.3.2 behavior.
	if ( traditional === undefined ) {
		traditional = jQuery.ajaxSettings && jQuery.ajaxSettings.traditional;
	}

	// If an array was passed in, assume that it is an array of form elements.
	if ( jQuery.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {
		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		});

	} else {
		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" ).replace( r20, "+" );
};

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( jQuery.isArray( obj ) ) {
		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {
				// Treat each array item as a scalar.
				add( prefix, v );

			} else {
				// If array item is non-scalar (array or object), encode its
				// numeric index to resolve deserialization ambiguity issues.
				// Note that rack (as of 1.0.0) can't currently deserialize
				// nested arrays properly, and attempting to do so may cause
				// a server error. Possible fixes are to modify rack's
				// deserialization algorithm or to provide an option or flag
				// to force array serialization to be shallow.
				buildParams( prefix + "[" + ( typeof v === "object" ? i : "" ) + "]", v, traditional, add );
			}
		});

	} else if ( !traditional && jQuery.type( obj ) === "object" ) {
		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {
		// Serialize scalar item.
		add( prefix, obj );
	}
}
var
	// Document location
	ajaxLocParts,
	ajaxLocation,

	rhash = /#.*$/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)\r?$/mg, // IE leaves an \r character at EOL
	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app\-storage|.+\-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,
	rquery = /\?/,
	rscript = /<script\b[^<]*(?:(?!<\/script>)<[^<]*)*<\/script>/gi,
	rts = /([?&])_=[^&]*/,
	rurl = /^([\w\+\.\-]+:)(?:\/\/([^\/?#:]*)(?::(\d+)|)|)/,

	// Keep a copy of the old load method
	_load = jQuery.fn.load,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = ["*/"] + ["*"];

// #8138, IE may throw an exception when accessing
// a field from window.location if document.domain has been set
try {
	ajaxLocation = location.href;
} catch( e ) {
	// Use the href attribute of an A element
	// since IE will modify it given document.location
	ajaxLocation = document.createElement( "a" );
	ajaxLocation.href = "";
	ajaxLocation = ajaxLocation.href;
}

// Segment location into parts
ajaxLocParts = rurl.exec( ajaxLocation.toLowerCase() ) || [];

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType, list, placeBefore,
			dataTypes = dataTypeExpression.toLowerCase().split( core_rspace ),
			i = 0,
			length = dataTypes.length;

		if ( jQuery.isFunction( func ) ) {
			// For each dataType in the dataTypeExpression
			for ( ; i < length; i++ ) {
				dataType = dataTypes[ i ];
				// We control if we're asked to add before
				// any existing element
				placeBefore = /^\+/.test( dataType );
				if ( placeBefore ) {
					dataType = dataType.substr( 1 ) || "*";
				}
				list = structure[ dataType ] = structure[ dataType ] || [];
				// then we add to the structure accordingly
				list[ placeBefore ? "unshift" : "push" ]( func );
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR,
		dataType /* internal */, inspected /* internal */ ) {

	dataType = dataType || options.dataTypes[ 0 ];
	inspected = inspected || {};

	inspected[ dataType ] = true;

	var selection,
		list = structure[ dataType ],
		i = 0,
		length = list ? list.length : 0,
		executeOnly = ( structure === prefilters );

	for ( ; i < length && ( executeOnly || !selection ); i++ ) {
		selection = list[ i ]( options, originalOptions, jqXHR );
		// If we got redirected to another dataType
		// we try there if executing only and not done already
		if ( typeof selection === "string" ) {
			if ( !executeOnly || inspected[ selection ] ) {
				selection = undefined;
			} else {
				options.dataTypes.unshift( selection );
				selection = inspectPrefiltersOrTransports(
						structure, options, originalOptions, jqXHR, selection, inspected );
			}
		}
	}
	// If we're only executing or nothing was selected
	// we try the catchall dataType if not done already
	if ( ( executeOnly || !selection ) && !inspected[ "*" ] ) {
		selection = inspectPrefiltersOrTransports(
				structure, options, originalOptions, jqXHR, "*", inspected );
	}
	// unnecessary when only executing (prefilters)
	// but it'll be ignored by the caller in that case
	return selection;
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};
	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}
}

jQuery.fn.load = function( url, params, callback ) {
	if ( typeof url !== "string" && _load ) {
		return _load.apply( this, arguments );
	}

	// Don't do a request if no elements are being requested
	if ( !this.length ) {
		return this;
	}

	var selector, type, response,
		self = this,
		off = url.indexOf(" ");

	if ( off >= 0 ) {
		selector = url.slice( off, url.length );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( jQuery.isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// Request the remote document
	jQuery.ajax({
		url: url,

		// if "type" variable is undefined, then "GET" method will be used
		type: type,
		dataType: "html",
		data: params,
		complete: function( jqXHR, status ) {
			if ( callback ) {
				self.each( callback, response || [ jqXHR.responseText, status, jqXHR ] );
			}
		}
	}).done(function( responseText ) {

		// Save response for use in complete callback
		response = arguments;

		// See if a selector was specified
		self.html( selector ?

			// Create a dummy div to hold the results
			jQuery("<div>")

				// inject the contents of the document in, removing the scripts
				// to avoid any 'Permission Denied' errors in IE
				.append( responseText.replace( rscript, "" ) )

				// Locate the specified elements
				.find( selector ) :

			// If not, just inject the full result
			responseText );

	});

	return this;
};

// Attach a bunch of functions for handling common AJAX events
jQuery.each( "ajaxStart ajaxStop ajaxComplete ajaxError ajaxSuccess ajaxSend".split( " " ), function( i, o ){
	jQuery.fn[ o ] = function( f ){
		return this.on( o, f );
	};
});

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {
		// shift arguments if data argument was omitted
		if ( jQuery.isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		return jQuery.ajax({
			type: method,
			url: url,
			data: data,
			success: callback,
			dataType: type
		});
	};
});

jQuery.extend({

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		if ( settings ) {
			// Building a settings object
			ajaxExtend( target, jQuery.ajaxSettings );
		} else {
			// Extending ajaxSettings
			settings = target;
			target = jQuery.ajaxSettings;
		}
		ajaxExtend( target, settings );
		return target;
	},

	ajaxSettings: {
		url: ajaxLocation,
		isLocal: rlocalProtocol.test( ajaxLocParts[ 1 ] ),
		global: true,
		type: "GET",
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",
		processData: true,
		async: true,
		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			xml: "application/xml, text/xml",
			html: "text/html",
			text: "text/plain",
			json: "application/json, text/javascript",
			"*": allTypes
		},

		contents: {
			xml: /xml/,
			html: /html/,
			json: /json/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText"
		},

		// List of data converters
		// 1) key format is "source_type destination_type" (a single space in-between)
		// 2) the catchall symbol "*" can be used for source_type
		converters: {

			// Convert anything to text
			"* text": window.String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": jQuery.parseJSON,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			context: true,
			url: true
		}
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var // ifModified key
			ifModifiedKey,
			// Response headers
			responseHeadersString,
			responseHeaders,
			// transport
			transport,
			// timeout handle
			timeoutTimer,
			// Cross-domain detection vars
			parts,
			// To know if global events are to be dispatched
			fireGlobals,
			// Loop variable
			i,
			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),
			// Callbacks context
			callbackContext = s.context || s,
			// Context for global events
			// It's the callbackContext if one was provided in the options
			// and if it's a DOM node or a jQuery collection
			globalEventContext = callbackContext !== s &&
				( callbackContext.nodeType || callbackContext instanceof jQuery ) ?
						jQuery( callbackContext ) : jQuery.event,
			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),
			// Status-dependent callbacks
			statusCode = s.statusCode || {},
			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},
			// The jqXHR state
			state = 0,
			// Default abort message
			strAbort = "canceled",
			// Fake xhr
			jqXHR = {

				readyState: 0,

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( !state ) {
						var lname = name.toLowerCase();
						name = requestHeadersNames[ lname ] = requestHeadersNames[ lname ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return state === 2 ? responseHeadersString : null;
				},

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( state === 2 ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[1].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match === undefined ? null : match;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( !state ) {
						s.mimeType = type;
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					statusText = statusText || strAbort;
					if ( transport ) {
						transport.abort( statusText );
					}
					done( 0, statusText );
					return this;
				}
			};

		// Callback for when everything is done
		// It is defined here because jslint complains if it is declared
		// at the end of the function (which would be more logical and readable)
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Called once
			if ( state === 2 ) {
				return;
			}

			// State is "done" now
			state = 2;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// If successful, handle type chaining
			if ( status >= 200 && status < 300 || status === 304 ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {

					modified = jqXHR.getResponseHeader("Last-Modified");
					if ( modified ) {
						jQuery.lastModified[ ifModifiedKey ] = modified;
					}
					modified = jqXHR.getResponseHeader("Etag");
					if ( modified ) {
						jQuery.etag[ ifModifiedKey ] = modified;
					}
				}

				// If not modified
				if ( status === 304 ) {

					statusText = "notmodified";
					isSuccess = true;

				// If we have data
				} else {

					isSuccess = ajaxConvert( s, response );
					statusText = isSuccess.state;
					success = isSuccess.data;
					error = isSuccess.error;
					isSuccess = !error;
				}
			} else {
				// We extract error from statusText
				// then normalize statusText and status for non-aborts
				error = statusText;
				if ( !statusText || status ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajax" + ( isSuccess ? "Success" : "Error" ),
						[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );
				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		// Attach deferreds
		deferred.promise( jqXHR );
		jqXHR.success = jqXHR.done;
		jqXHR.error = jqXHR.fail;
		jqXHR.complete = completeDeferred.add;

		// Status-dependent callbacks
		jqXHR.statusCode = function( map ) {
			if ( map ) {
				var tmp;
				if ( state < 2 ) {
					for ( tmp in map ) {
						statusCode[ tmp ] = [ statusCode[tmp], map[tmp] ];
					}
				} else {
					tmp = map[ jqXHR.status ];
					jqXHR.always( tmp );
				}
			}
			return this;
		};

		// Remove hash character (#7531: and string promotion)
		// Add protocol if not provided (#5866: IE7 issue with protocol-less urls)
		// We also use the url parameter if available
		s.url = ( ( url || s.url ) + "" ).replace( rhash, "" ).replace( rprotocol, ajaxLocParts[ 1 ] + "//" );

		// Extract dataTypes list
		s.dataTypes = jQuery.trim( s.dataType || "*" ).toLowerCase().split( core_rspace );

		// A cross-domain request is in order when we have a protocol:host:port mismatch
		if ( s.crossDomain == null ) {
			parts = rurl.exec( s.url.toLowerCase() );
			s.crossDomain = !!( parts &&
				( parts[ 1 ] !== ajaxLocParts[ 1 ] || parts[ 2 ] !== ajaxLocParts[ 2 ] ||
					( parts[ 3 ] || ( parts[ 1 ] === "http:" ? 80 : 443 ) ) !=
						( ajaxLocParts[ 3 ] || ( ajaxLocParts[ 1 ] === "http:" ? 80 : 443 ) ) )
			);
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( state === 2 ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		fireGlobals = s.global;

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// If data is available, append data to url
			if ( s.data ) {
				s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.data;
				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Get ifModifiedKey before adding the anti-cache parameter
			ifModifiedKey = s.url;

			// Add anti-cache in url if needed
			if ( s.cache === false ) {

				var ts = jQuery.now(),
					// try replacing _= if it is there
					ret = s.url.replace( rts, "$1_=" + ts );

				// if nothing was replaced, add timestamp to the end
				s.url = ret + ( ( ret === s.url ) ? ( rquery.test( s.url ) ? "&" : "?" ) + "_=" + ts : "" );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			ifModifiedKey = ifModifiedKey || s.url;
			if ( jQuery.lastModified[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ ifModifiedKey ] );
			}
			if ( jQuery.etag[ ifModifiedKey ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ ifModifiedKey ] );
			}
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[0] ] ?
				s.accepts[ s.dataTypes[0] ] + ( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend && ( s.beforeSend.call( callbackContext, jqXHR, s ) === false || state === 2 ) ) {
				// Abort if not done already and return
				return jqXHR.abort();

		}

		// aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		for ( i in { success: 1, error: 1, complete: 1 } ) {
			jqXHR[ i ]( s[ i ] );
		}

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;
			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}
			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = setTimeout( function(){
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				state = 1;
				transport.send( requestHeaders, done );
			} catch (e) {
				// Propagate exception as error if not done
				if ( state < 2 ) {
					done( -1, e );
				// Simply rethrow otherwise
				} else {
					throw e;
				}
			}
		}

		return jqXHR;
	},

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {}

});

/* Handles responses to an ajax request:
 * - sets all responseXXX fields accordingly
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes,
		responseFields = s.responseFields;

	// Fill responseXXX fields
	for ( type in responseFields ) {
		if ( type in responses ) {
			jqXHR[ responseFields[type] ] = responses[ type ];
		}
	}

	// Remove auto dataType and get content-type in the process
	while( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "content-type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {
		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[0] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}
		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

// Chain conversions given the request and the original response
function ajaxConvert( s, response ) {

	var conv, conv2, current, tmp,
		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice(),
		prev = dataTypes[ 0 ],
		converters = {},
		i = 0;

	// Apply the dataFilter if provided
	if ( s.dataFilter ) {
		response = s.dataFilter( response, s.dataType );
	}

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	// Convert to each sequential dataType, tolerating list modification
	for ( ; (current = dataTypes[++i]); ) {

		// There's only work to do if current dataType is non-auto
		if ( current !== "*" ) {

			// Convert response if prev dataType is non-auto and differs from current
			if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split(" ");
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {
								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.splice( i--, 0, current );
								}

								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s["throws"] ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return { state: "parsererror", error: conv ? e : "No conversion from " + prev + " to " + current };
						}
					}
				}
			}

			// Update prev for next iteration
			prev = current;
		}
	}

	return { state: "success", data: response };
}
var oldCallbacks = [],
	rquestion = /\?/,
	rjsonp = /(=)\?(?=&|$)|\?\?/,
	nonce = jQuery.now();

// Default jsonp settings
jQuery.ajaxSetup({
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
});

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		data = s.data,
		url = s.url,
		hasCallback = s.jsonp !== false,
		replaceInUrl = hasCallback && rjsonp.test( url ),
		replaceInData = hasCallback && !replaceInUrl && typeof data === "string" &&
			!( s.contentType || "" ).indexOf("application/x-www-form-urlencoded") &&
			rjsonp.test( data );

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( s.dataTypes[ 0 ] === "jsonp" || replaceInUrl || replaceInData ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = jQuery.isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;
		overwritten = window[ callbackName ];

		// Insert callback into url or form data
		if ( replaceInUrl ) {
			s.url = url.replace( rjsonp, "$1" + callbackName );
		} else if ( replaceInData ) {
			s.data = data.replace( rjsonp, "$1" + callbackName );
		} else if ( hasCallback ) {
			s.url += ( rquestion.test( url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters["script json"] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always(function() {
			// Restore preexisting value
			window[ callbackName ] = overwritten;

			// Save back as free
			if ( s[ callbackName ] ) {
				// make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && jQuery.isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		});

		// Delegate to script
		return "script";
	}
});
// Install script dataType
jQuery.ajaxSetup({
	accepts: {
		script: "text/javascript, application/javascript, application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /javascript|ecmascript/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
});

// Handle cache's special case and global
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
		s.global = false;
	}
});

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function(s) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {

		var script,
			head = document.head || document.getElementsByTagName( "head" )[0] || document.documentElement;

		return {

			send: function( _, callback ) {

				script = document.createElement( "script" );

				script.async = "async";

				if ( s.scriptCharset ) {
					script.charset = s.scriptCharset;
				}

				script.src = s.url;

				// Attach handlers for all browsers
				script.onload = script.onreadystatechange = function( _, isAbort ) {

					if ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {

						// Handle memory leak in IE
						script.onload = script.onreadystatechange = null;

						// Remove the script
						if ( head && script.parentNode ) {
							head.removeChild( script );
						}

						// Dereference the script
						script = undefined;

						// Callback if not abort
						if ( !isAbort ) {
							callback( 200, "success" );
						}
					}
				};
				// Use insertBefore instead of appendChild  to circumvent an IE6 bug.
				// This arises when a base node is used (#2709 and #4378).
				head.insertBefore( script, head.firstChild );
			},

			abort: function() {
				if ( script ) {
					script.onload( 0, 1 );
				}
			}
		};
	}
});
var xhrCallbacks,
	// #5280: Internet Explorer will keep connections alive if we don't abort on unload
	xhrOnUnloadAbort = window.ActiveXObject ? function() {
		// Abort all pending requests
		for ( var key in xhrCallbacks ) {
			xhrCallbacks[ key ]( 0, 1 );
		}
	} : false,
	xhrId = 0;

// Functions to create xhrs
function createStandardXHR() {
	try {
		return new window.XMLHttpRequest();
	} catch( e ) {}
}

function createActiveXHR() {
	try {
		return new window.ActiveXObject( "Microsoft.XMLHTTP" );
	} catch( e ) {}
}

// Create the request object
// (This is still attached to ajaxSettings for backward compatibility)
jQuery.ajaxSettings.xhr = window.ActiveXObject ?
	/* Microsoft failed to properly
	 * implement the XMLHttpRequest in IE7 (can't request local files),
	 * so we use the ActiveXObject when it is available
	 * Additionally XMLHttpRequest can be disabled in IE7/IE8 so
	 * we need a fallback.
	 */
	function() {
		return !this.isLocal && createStandardXHR() || createActiveXHR();
	} :
	// For all other browsers, use the standard XMLHttpRequest object
	createStandardXHR;

// Determine support properties
(function( xhr ) {
	jQuery.extend( jQuery.support, {
		ajax: !!xhr,
		cors: !!xhr && ( "withCredentials" in xhr )
	});
})( jQuery.ajaxSettings.xhr() );

// Create transport if the browser can provide an xhr
if ( jQuery.support.ajax ) {

	jQuery.ajaxTransport(function( s ) {
		// Cross domain only allowed if supported through XMLHttpRequest
		if ( !s.crossDomain || jQuery.support.cors ) {

			var callback;

			return {
				send: function( headers, complete ) {

					// Get a new xhr
					var handle, i,
						xhr = s.xhr();

					// Open the socket
					// Passing null username, generates a login popup on Opera (#2865)
					if ( s.username ) {
						xhr.open( s.type, s.url, s.async, s.username, s.password );
					} else {
						xhr.open( s.type, s.url, s.async );
					}

					// Apply custom fields if provided
					if ( s.xhrFields ) {
						for ( i in s.xhrFields ) {
							xhr[ i ] = s.xhrFields[ i ];
						}
					}

					// Override mime type if needed
					if ( s.mimeType && xhr.overrideMimeType ) {
						xhr.overrideMimeType( s.mimeType );
					}

					// X-Requested-With header
					// For cross-domain requests, seeing as conditions for a preflight are
					// akin to a jigsaw puzzle, we simply never set it to be sure.
					// (it can always be set on a per-request basis or even using ajaxSetup)
					// For same-domain requests, won't change header if already provided.
					if ( !s.crossDomain && !headers["X-Requested-With"] ) {
						headers[ "X-Requested-With" ] = "XMLHttpRequest";
					}

					// Need an extra try/catch for cross domain requests in Firefox 3
					try {
						for ( i in headers ) {
							xhr.setRequestHeader( i, headers[ i ] );
						}
					} catch( _ ) {}

					// Do send the request
					// This may raise an exception which is actually
					// handled in jQuery.ajax (so no try/catch here)
					xhr.send( ( s.hasContent && s.data ) || null );

					// Listener
					callback = function( _, isAbort ) {

						var status,
							statusText,
							responseHeaders,
							responses,
							xml;

						// Firefox throws exceptions when accessing properties
						// of an xhr when a network error occurred
						// http://helpful.knobs-dials.com/index.php/Component_returned_failure_code:_0x80040111_(NS_ERROR_NOT_AVAILABLE)
						try {

							// Was never called and is aborted or complete
							if ( callback && ( isAbort || xhr.readyState === 4 ) ) {

								// Only called once
								callback = undefined;

								// Do not keep as active anymore
								if ( handle ) {
									xhr.onreadystatechange = jQuery.noop;
									if ( xhrOnUnloadAbort ) {
										delete xhrCallbacks[ handle ];
									}
								}

								// If it's an abort
								if ( isAbort ) {
									// Abort it manually if needed
									if ( xhr.readyState !== 4 ) {
										xhr.abort();
									}
								} else {
									status = xhr.status;
									responseHeaders = xhr.getAllResponseHeaders();
									responses = {};
									xml = xhr.responseXML;

									// Construct response list
									if ( xml && xml.documentElement /* #4958 */ ) {
										responses.xml = xml;
									}

									// When requesting binary data, IE6-9 will throw an exception
									// on any attempt to access responseText (#11426)
									try {
										responses.text = xhr.responseText;
									} catch( e ) {
									}

									// Firefox throws an exception when accessing
									// statusText for faulty cross-domain requests
									try {
										statusText = xhr.statusText;
									} catch( e ) {
										// We normalize with Webkit giving an empty statusText
										statusText = "";
									}

									// Filter status for non standard behaviors

									// If the request is local and we have data: assume a success
									// (success with no data won't get notified, that's the best we
									// can do given current implementations)
									if ( !status && s.isLocal && !s.crossDomain ) {
										status = responses.text ? 200 : 404;
									// IE - #1450: sometimes returns 1223 when it should be 204
									} else if ( status === 1223 ) {
										status = 204;
									}
								}
							}
						} catch( firefoxAccessException ) {
							if ( !isAbort ) {
								complete( -1, firefoxAccessException );
							}
						}

						// Call complete if needed
						if ( responses ) {
							complete( status, statusText, responses, responseHeaders );
						}
					};

					if ( !s.async ) {
						// if we're in sync mode we fire the callback
						callback();
					} else if ( xhr.readyState === 4 ) {
						// (IE6 & IE7) if it's in cache and has been
						// retrieved directly we need to fire the callback
						setTimeout( callback, 0 );
					} else {
						handle = ++xhrId;
						if ( xhrOnUnloadAbort ) {
							// Create the active xhrs callbacks list if needed
							// and attach the unload handler
							if ( !xhrCallbacks ) {
								xhrCallbacks = {};
								jQuery( window ).unload( xhrOnUnloadAbort );
							}
							// Add to list of active xhrs callbacks
							xhrCallbacks[ handle ] = callback;
						}
						xhr.onreadystatechange = callback;
					}
				},

				abort: function() {
					if ( callback ) {
						callback(0,1);
					}
				}
			};
		}
	});
}
var fxNow, timerId,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rfxnum = new RegExp( "^(?:([-+])=|)(" + core_pnum + ")([a-z%]*)$", "i" ),
	rrun = /queueHooks$/,
	animationPrefilters = [ defaultPrefilter ],
	tweeners = {
		"*": [function( prop, value ) {
			var end, unit,
				tween = this.createTween( prop, value ),
				parts = rfxnum.exec( value ),
				target = tween.cur(),
				start = +target || 0,
				scale = 1,
				maxIterations = 20;

			if ( parts ) {
				end = +parts[2];
				unit = parts[3] || ( jQuery.cssNumber[ prop ] ? "" : "px" );

				// We need to compute starting value
				if ( unit !== "px" && start ) {
					// Iteratively approximate from a nonzero starting point
					// Prefer the current property, because this process will be trivial if it uses the same units
					// Fallback to end or a simple constant
					start = jQuery.css( tween.elem, prop, true ) || end || 1;

					do {
						// If previous iteration zeroed out, double until we get *something*
						// Use a string for doubling factor so we don't accidentally see scale as unchanged below
						scale = scale || ".5";

						// Adjust and apply
						start = start / scale;
						jQuery.style( tween.elem, prop, start + unit );

					// Update scale, tolerating zero or NaN from tween.cur()
					// And breaking the loop if scale is unchanged or perfect, or if we've just had enough
					} while ( scale !== (scale = tween.cur() / target) && scale !== 1 && --maxIterations );
				}

				tween.unit = unit;
				tween.start = start;
				// If a +=/-= token was provided, we're doing a relative animation
				tween.end = parts[1] ? start + ( parts[1] + 1 ) * end : end;
			}
			return tween;
		}]
	};

// Animations created synchronously will run synchronously
function createFxNow() {
	setTimeout(function() {
		fxNow = undefined;
	}, 0 );
	return ( fxNow = jQuery.now() );
}

function createTweens( animation, props ) {
	jQuery.each( props, function( prop, value ) {
		var collection = ( tweeners[ prop ] || [] ).concat( tweeners[ "*" ] ),
			index = 0,
			length = collection.length;
		for ( ; index < length; index++ ) {
			if ( collection[ index ].call( animation, prop, value ) ) {

				// we're done with this property
				return;
			}
		}
	});
}

function Animation( elem, properties, options ) {
	var result,
		index = 0,
		tweenerIndex = 0,
		length = animationPrefilters.length,
		deferred = jQuery.Deferred().always( function() {
			// don't match elem in the :animated selector
			delete tick.elem;
		}),
		tick = function() {
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),
				// archaic crash bug won't allow us to use 1 - ( 0.5 || 0 ) (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length ; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ]);

			if ( percent < 1 && length ) {
				return remaining;
			} else {
				deferred.resolveWith( elem, [ animation ] );
				return false;
			}
		},
		animation = deferred.promise({
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, { specialEasing: {} }, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end, easing ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,
					// if we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;

				for ( ; index < length ; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// resolve when we played the last frame
				// otherwise, reject
				if ( gotoEnd ) {
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		}),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length ; index++ ) {
		result = animationPrefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			return result;
		}
	}

	createTweens( animation, props );

	if ( jQuery.isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	jQuery.fx.timer(
		jQuery.extend( tick, {
			anim: animation,
			queue: animation.opts.queue,
			elem: elem
		})
	);

	// attach callbacks from options
	return animation.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = jQuery.camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( jQuery.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// not quite $.extend, this wont overwrite keys already present.
			// also - reusing 'index' from above because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

jQuery.Animation = jQuery.extend( Animation, {

	tweener: function( props, callback ) {
		if ( jQuery.isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.split(" ");
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length ; index++ ) {
			prop = props[ index ];
			tweeners[ prop ] = tweeners[ prop ] || [];
			tweeners[ prop ].unshift( callback );
		}
	},

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			animationPrefilters.unshift( callback );
		} else {
			animationPrefilters.push( callback );
		}
	}
});

function defaultPrefilter( elem, props, opts ) {
	var index, prop, value, length, dataShow, toggle, tween, hooks, oldfire,
		anim = this,
		style = elem.style,
		orig = {},
		handled = [],
		hidden = elem.nodeType && isHidden( elem );

	// handle queue: false promises
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always(function() {
			// doing this makes sure that the complete handler will be called
			// before this completes
			anim.always(function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			});
		});
	}

	// height/width overflow pass
	if ( elem.nodeType === 1 && ( "height" in props || "width" in props ) ) {
		// Make sure that nothing sneaks out
		// Record all 3 overflow attributes because IE does not
		// change the overflow attribute when overflowX and
		// overflowY are set to the same value
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Set display property to inline-block for height/width
		// animations on inline elements that are having width/height animated
		if ( jQuery.css( elem, "display" ) === "inline" &&
				jQuery.css( elem, "float" ) === "none" ) {

			// inline-level elements accept inline-block;
			// block-level elements need to be inline with layout
			if ( !jQuery.support.inlineBlockNeedsLayout || css_defaultDisplay( elem.nodeName ) === "inline" ) {
				style.display = "inline-block";

			} else {
				style.zoom = 1;
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		if ( !jQuery.support.shrinkWrapBlocks ) {
			anim.done(function() {
				style.overflow = opts.overflow[ 0 ];
				style.overflowX = opts.overflow[ 1 ];
				style.overflowY = opts.overflow[ 2 ];
			});
		}
	}


	// show/hide pass
	for ( index in props ) {
		value = props[ index ];
		if ( rfxtypes.exec( value ) ) {
			delete props[ index ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {
				continue;
			}
			handled.push( index );
		}
	}

	length = handled.length;
	if ( length ) {
		dataShow = jQuery._data( elem, "fxshow" ) || jQuery._data( elem, "fxshow", {} );
		if ( "hidden" in dataShow ) {
			hidden = dataShow.hidden;
		}

		// store state if its toggle - enables .stop().toggle() to "reverse"
		if ( toggle ) {
			dataShow.hidden = !hidden;
		}
		if ( hidden ) {
			jQuery( elem ).show();
		} else {
			anim.done(function() {
				jQuery( elem ).hide();
			});
		}
		anim.done(function() {
			var prop;
			jQuery.removeData( elem, "fxshow", true );
			for ( prop in orig ) {
				jQuery.style( elem, prop, orig[ prop ] );
			}
		});
		for ( index = 0 ; index < length ; index++ ) {
			prop = handled[ index ];
			tween = anim.createTween( prop, hidden ? dataShow[ prop ] : 0 );
			orig[ prop ] = dataShow[ prop ] || jQuery.style( elem, prop );

			if ( !( prop in dataShow ) ) {
				dataShow[ prop ] = tween.start;
				if ( hidden ) {
					tween.end = tween.start;
					tween.start = prop === "width" || prop === "height" ? 1 : 0;
				}
			}
		}
	}
}

function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || "swing";
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			if ( tween.elem[ tween.prop ] != null &&
				(!tween.elem.style || tween.elem.style[ tween.prop ] == null) ) {
				return tween.elem[ tween.prop ];
			}

			// passing any value as a 4th parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails
			// so, simple values such as "10px" are parsed to Float.
			// complex values such as "rotate(1rad)" are returned as is.
			result = jQuery.css( tween.elem, tween.prop, false, "" );
			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {
			// use step hook for back compat - use cssHook if its there - use .style if its
			// available and use plain properties where available
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.style && ( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null || jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Remove in 2.0 - this supports IE8's panic based approach
// to setting things on disconnected nodes

Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.each([ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ||
			// special check for .toggle( handler, handler, ... )
			( !i && jQuery.isFunction( speed ) && jQuery.isFunction( easing ) ) ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
});

jQuery.fn.extend({
	fadeTo: function( speed, to, easing, callback ) {

		// show any hidden elements after setting opacity to 0
		return this.filter( isHidden ).css( "opacity", 0 ).show()

			// animate to the value specified
			.end().animate({ opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {
				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations resolve immediately
				if ( empty ) {
					anim.stop( true );
				}
			};

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each(function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = jQuery._data( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && (type == null || timers[ index ].queue === type) ) {
					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// start the next in the queue if the last step wasn't forced
			// timers currently will call their complete callbacks, which will dequeue
			// but only if they were gotoEnd
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		});
	}
});

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		attrs = { height: type },
		i = 0;

	// if we include width, step value is 1 to do all cssExpand values,
	// if we don't include width, step value is 2 to skip over Left and Right
	includeWidth = includeWidth? 1 : 0;
	for( ; i < 4 ; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

// Generate shortcuts for custom animations
jQuery.each({
	slideDown: genFx("show"),
	slideUp: genFx("hide"),
	slideToggle: genFx("toggle"),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
});

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			jQuery.isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !jQuery.isFunction( easing ) && easing
	};

	opt.duration = jQuery.fx.off ? 0 : typeof opt.duration === "number" ? opt.duration :
		opt.duration in jQuery.fx.speeds ? jQuery.fx.speeds[ opt.duration ] : jQuery.fx.speeds._default;

	// normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( jQuery.isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p*Math.PI ) / 2;
	}
};

jQuery.timers = [];
jQuery.fx = Tween.prototype.init;
jQuery.fx.tick = function() {
	var timer,
		timers = jQuery.timers,
		i = 0;

	fxNow = jQuery.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];
		// Checks the timer has not already been removed
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	if ( timer() && jQuery.timers.push( timer ) && !timerId ) {
		timerId = setInterval( jQuery.fx.tick, jQuery.fx.interval );
	}
};

jQuery.fx.interval = 13;

jQuery.fx.stop = function() {
	clearInterval( timerId );
	timerId = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,
	// Default speed
	_default: 400
};

// Back Compat <1.8 extension point
jQuery.fx.step = {};

if ( jQuery.expr && jQuery.expr.filters ) {
	jQuery.expr.filters.animated = function( elem ) {
		return jQuery.grep(jQuery.timers, function( fn ) {
			return elem === fn.elem;
		}).length;
	};
}
var rroot = /^(?:body|html)$/i;

jQuery.fn.offset = function( options ) {
	if ( arguments.length ) {
		return options === undefined ?
			this :
			this.each(function( i ) {
				jQuery.offset.setOffset( this, options, i );
			});
	}

	var docElem, body, win, clientTop, clientLeft, scrollTop, scrollLeft,
		box = { top: 0, left: 0 },
		elem = this[ 0 ],
		doc = elem && elem.ownerDocument;

	if ( !doc ) {
		return;
	}

	if ( (body = doc.body) === elem ) {
		return jQuery.offset.bodyOffset( elem );
	}

	docElem = doc.documentElement;

	// Make sure it's not a disconnected DOM node
	if ( !jQuery.contains( docElem, elem ) ) {
		return box;
	}

	// If we don't have gBCR, just use 0,0 rather than error
	// BlackBerry 5, iOS 3 (original iPhone)
	if ( typeof elem.getBoundingClientRect !== "undefined" ) {
		box = elem.getBoundingClientRect();
	}
	win = getWindow( doc );
	clientTop  = docElem.clientTop  || body.clientTop  || 0;
	clientLeft = docElem.clientLeft || body.clientLeft || 0;
	scrollTop  = win.pageYOffset || docElem.scrollTop;
	scrollLeft = win.pageXOffset || docElem.scrollLeft;
	return {
		top: box.top  + scrollTop  - clientTop,
		left: box.left + scrollLeft - clientLeft
	};
};

jQuery.offset = {

	bodyOffset: function( body ) {
		var top = body.offsetTop,
			left = body.offsetLeft;

		if ( jQuery.support.doesNotIncludeMarginInBodyOffset ) {
			top  += parseFloat( jQuery.css(body, "marginTop") ) || 0;
			left += parseFloat( jQuery.css(body, "marginLeft") ) || 0;
		}

		return { top: top, left: left };
	},

	setOffset: function( elem, options, i ) {
		var position = jQuery.css( elem, "position" );

		// set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		var curElem = jQuery( elem ),
			curOffset = curElem.offset(),
			curCSSTop = jQuery.css( elem, "top" ),
			curCSSLeft = jQuery.css( elem, "left" ),
			calculatePosition = ( position === "absolute" || position === "fixed" ) && jQuery.inArray("auto", [curCSSTop, curCSSLeft]) > -1,
			props = {}, curPosition = {}, curTop, curLeft;

		// need to be able to calculate position if either top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;
		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( jQuery.isFunction( options ) ) {
			options = options.call( elem, i, curOffset );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );
		} else {
			curElem.css( props );
		}
	}
};


jQuery.fn.extend({

	position: function() {
		if ( !this[0] ) {
			return;
		}

		var elem = this[0],

		// Get *real* offsetParent
		offsetParent = this.offsetParent(),

		// Get correct offsets
		offset       = this.offset(),
		parentOffset = rroot.test(offsetParent[0].nodeName) ? { top: 0, left: 0 } : offsetParent.offset();

		// Subtract element margins
		// note: when an element has margin: auto the offsetLeft and marginLeft
		// are the same in Safari causing offset.left to incorrectly be 0
		offset.top  -= parseFloat( jQuery.css(elem, "marginTop") ) || 0;
		offset.left -= parseFloat( jQuery.css(elem, "marginLeft") ) || 0;

		// Add offsetParent borders
		parentOffset.top  += parseFloat( jQuery.css(offsetParent[0], "borderTopWidth") ) || 0;
		parentOffset.left += parseFloat( jQuery.css(offsetParent[0], "borderLeftWidth") ) || 0;

		// Subtract the two offsets
		return {
			top:  offset.top  - parentOffset.top,
			left: offset.left - parentOffset.left
		};
	},

	offsetParent: function() {
		return this.map(function() {
			var offsetParent = this.offsetParent || document.body;
			while ( offsetParent && (!rroot.test(offsetParent.nodeName) && jQuery.css(offsetParent, "position") === "static") ) {
				offsetParent = offsetParent.offsetParent;
			}
			return offsetParent || document.body;
		});
	}
});


// Create scrollLeft and scrollTop methods
jQuery.each( {scrollLeft: "pageXOffset", scrollTop: "pageYOffset"}, function( method, prop ) {
	var top = /Y/.test( prop );

	jQuery.fn[ method ] = function( val ) {
		return jQuery.access( this, function( elem, method, val ) {
			var win = getWindow( elem );

			if ( val === undefined ) {
				return win ? (prop in win) ? win[ prop ] :
					win.document.documentElement[ method ] :
					elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : jQuery( win ).scrollLeft(),
					 top ? val : jQuery( win ).scrollTop()
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length, null );
	};
});

function getWindow( elem ) {
	return jQuery.isWindow( elem ) ?
		elem :
		elem.nodeType === 9 ?
			elem.defaultView || elem.parentWindow :
			false;
}
// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name }, function( defaultExtra, funcName ) {
		// margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return jQuery.access( this, function( elem, type, value ) {
				var doc;

				if ( jQuery.isWindow( elem ) ) {
					// As of 5/8/2012 this will yield incorrect results for Mobile Safari, but there
					// isn't a whole lot we can do. See pull request at this URL for discussion:
					// https://github.com/jquery/jquery/pull/764
					return elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height], whichever is greatest
					// unfortunately, this causes bug #3838 in IE6/8 only, but there is currently no good, small way to fix it.
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?
					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, value, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable, null );
		};
	});
});
// Expose jQuery to the global object
window.jQuery = window.$ = jQuery;

// Expose jQuery as an AMD module, but only for AMD loaders that
// understand the issues with loading multiple versions of jQuery
// in a page that all might call define(). The loader will indicate
// they have special allowances for multiple jQuery versions by
// specifying define.amd.jQuery = true. Register as a named module,
// since jQuery can be concatenated with other files that may use define,
// but not use a proper concatenation script that understands anonymous
// AMD modules. A named AMD is safest and most robust way to register.
// Lowercase jquery is used because AMD module names are derived from
// file names, and jQuery is normally delivered in a lowercase file name.
// Do this after creating the global so that if an AMD module wants to call
// noConflict to hide this version of jQuery, it will work.
if ( typeof define === "function" && define.amd && define.amd.jQuery ) {
	define( "jquery", [], function () { return jQuery; } );
}

})( window );

define('lib/clone',['require'],function(require){
  var clone = function (json) {
    return JSON.parse(JSON.stringify(json));
  };
  return clone;
});

// There are a few ways we can define the configuration.
define('main/config',['require','lib/clone'],function(require) {
  /*global Graph*/
  var clone = require('lib/clone');
  
  var config = {};
  
  // 1) Read from Graph.config if it exists
  if (typeof Graph !== 'undefined' && Graph.config) {
    config = clone(Graph.config);
  }
  
  // 2) Read from url if it specifies a graph_config
  var re = new RegExp('graph_config=([^&]+)');
  var match = location.search.match(re);
  if (match !== null) {
    config = JSON.parse(decodeURIComponent(match[1]));
  }
  
  return {
    
    get: function (prop) {
      return config[prop];
    },
    
    use: function (props, func) {
      // save a copy of the config
      var configOriginal = clone(config);
      
      // copy over the temporary changes
      for (var prop in props) {
        config[prop] = props[prop];
      }
      
      // run the function and reset config afterwards
      try {
        func();
      } finally {
        config = configOriginal;
      }
    },
    
    all: function () {
      return clone(config);
    }
    
  };
});

define('pjs',[], function() {
var P = (function(prototype, ownProperty, undefined) {
  // helper functions that also help minification
  function isObject(o) { return typeof o === 'object'; }
  function isFunction(f) { return typeof f === 'function'; }

  // used to extend the prototypes of superclasses (which might not
  // have `.Bare`s)
  function SuperclassBare() {}

  function P(_superclass /* = Object */, definition) {
    // handle the case where no superclass is given
    if (definition === undefined) {
      definition = _superclass;
      _superclass = Object;
    }

    // C is the class to be returned.
    //
    // It delegates to instantiating an instance of `Bare`, so that it
    // will always return a new instance regardless of the calling
    // context.
    //
    //  TODO: the Chrome inspector shows all created objects as `C`
    //        rather than `Object`.  Setting the .name property seems to
    //        have no effect.  Is there a way to override this behavior?
    function C() {
      var self = new Bare;
      if (isFunction(self.init)) self.init.apply(self, arguments);
      return self;
    }

    // C.Bare is a class with a noop constructor.  Its prototype is the
    // same as C, so that instances of C.Bare are also instances of C.
    // New objects can be allocated without initialization by calling
    // `new MyClass.Bare`.
    function Bare() {}
    C.Bare = Bare;

    // Set up the prototype of the new class.
    var _super = SuperclassBare[prototype] = _superclass[prototype];
    var proto = Bare[prototype] = C[prototype] = new SuperclassBare;

    // other variables, as a minifier optimization
    var extensions;


    // set the constructor property on the prototype, for convenience
    proto.constructor = C;

    C.mixin = function(def) {
      Bare[prototype] = C[prototype] = P(C, def)[prototype];
      return C;
    }

    return (C.open = function(def) {
      extensions = {};

      if (isFunction(def)) {
        // call the defining function with all the arguments you need
        // extensions captures the return value.
        extensions = def.call(C, proto, _super, C, _superclass);
      }
      else if (isObject(def)) {
        // if you passed an object instead, we'll take it
        extensions = def;
      }

      // ...and extend it
      if (isObject(extensions)) {
        for (var ext in extensions) {
          if (ownProperty.call(extensions, ext)) {
            proto[ext] = extensions[ext];
          }
        }
      }

      // if there's no init, we assume we're inheriting a non-pjs class, so
      // we default to applying the superclass's constructor.
      if (!isFunction(proto.init)) {
        proto.init = _superclass;
      }

      return C;
    })(definition);
  }

  // ship it
  return P;

  // as a minifier optimization, we've closured in a few helper functions
  // and the string 'prototype' (C[p] is much shorter than C.prototype)
})('prototype', ({}).hasOwnProperty);
return P;
});

//Definition of built-in functions and variables

define('math/builtin',['require'],function(require){

var BuiltIn = {};

BuiltIn.mod = function(a, b){
  return a - b * Math.floor(a/b);
};

BuiltIn.min = function(a, b){
  return (a < b) ? a : b;
};

BuiltIn.max = function(a, b){
  return (a > b) ? a : b;
};

BuiltIn.sign = function(x){
  if(x === 0) return 0;
  if(x > 0) return 1;
  if(x < 0) return -1;
  return NaN;
};

BuiltIn.lcm = function(a, b){
  a = BuiltIn.smartTruncate(a);
  b = BuiltIn.smartTruncate(b);
  var gcd = BuiltIn.getGCD(a, b);
  return Math.abs(a * b / gcd);
};

BuiltIn.gcd = function(a, b){
  return BuiltIn.getGCD(a, b);
};

BuiltIn.nCr = function(n, r){
  n = BuiltIn.smartTruncate(n);
  r = BuiltIn.smartTruncate(r);
  
  //Error conditions
  if(r > n || n < 0 || r < 0){
    return 0;
  }

  var total = 1;
  for(var i = 0; i < r; i++)
  {
    total *= (n - i) / (i + 1);
  }
  return total;
};

BuiltIn.nPr = function(n, r){
  n = BuiltIn.smartTruncate(n);
  r = BuiltIn.smartTruncate(r);

  //Error conditions
  if(r > n || n < 0 || r < 0){
    return 0;
  }

  var total = 1;
  for(var i = 0; i < r; i++){
    total *= (n-i);
  }
  return total;
};

BuiltIn.factorial = function (x) {
  return BuiltIn.gamma(x + 1);
};

BuiltIn._integerFactorial = function (n) {
  if (n !== Math.floor(n)) return NaN;
  if (n < 0) return NaN;
  if (n > 170) return NaN; // Overflows double point floats
  if (n === 0 || n === 1) return 1;

  var output = 1;
  for (var i = 2; i <= n; i++) output *= i;

  return output;
};

BuiltIn.gamma = function (x) {
  if (x === Math.floor(x)) return BuiltIn._integerFactorial(x - 1);
  // Euler's reflection formula
  if (x < 0) return Math.PI/(Math.sin(Math.PI*x)*BuiltIn.gamma(1-x));
  return Math.exp(BuiltIn.lnGamma(x));
};

BuiltIn.lnGamma = function (x) {
  if (x < 0) return NaN; // Alternates between real and complex on integers.

  // 15 term rational approximation of lnGamma, valid for positive numbers.
  // Original source not known, but verified by JM using Mathematica to give
  // at least 14 correct digits of gamma = Math.exp(Math.lnGamma(x)) for
  // integers and half integers between 0 and 60, and at least 12 correct
  // digits up to 170.
  var cof = [
    57.1562356658629235,
    -59.5979603554754912,
    14.1360979747417471,
    -0.491913816097620199,
    0.339946499848118887e-4,
    0.465236289270485756e-4,
    -0.983744753048795646e-4,
    0.158088703224912494e-3,
    -0.210264441724104883e-3,
    0.217439618115212643e-3,
    -0.164318106536763890e-3,
    0.844182239838527433e-4,
    -0.261908384015814087e-4,
    0.368991826595316234e-5
  ];

  var s = 0.999999999999997092;
  for (var i=0; i < 14; i++) s += cof[i]/(x + i + 1);

  var t = x + 5.24218750000000000;

  return (x + 0.5)*Math.log(t) - t + Math.log(2.5066282746310005*s/x);
};

// BernoulliB_{2k} for k=1..14
BuiltIn.bernoulliTable = [
  1/6, -1/30, 1/42, -1/30, 5/66, -691/2730, 7/6, -3617/510,
  43867/798, -174611/330, 854513/138, -236364091/2730, 8553103/6,
  -23749461029/870
];

// mth derivative of cot(x)
//
// Used in evaluating reflection formula for polygamma
//
// Uses fact that (d/dx)^m cot(x) = p_m(cos(x))/sin(x)^{m+1} where p_m(x) is a
// polynomial with coefficents that obey the following recursion relation:
//
// a_{m+1, n} = -((m - n + 2) a_{m, n-1} + (n+1) a_{m, n+1})
//            = -(            t1         +        t2       )
// a_{0, 0} = 0, a_{0, 1} = 1
//
// Could improve performance by taking advantage of fact that p is even/odd
// when m is odd/even. Didn't feel worth the added trickiness.
BuiltIn.cotDerivative = function(m, x) {
  if (m !== Math.floor(m)) return NaN;
  if (m < 0) return NaN;

  if (m === 0) return 1/BuiltIn.tan(x);

  var sinx = BuiltIn.sin(x);
  if (m === 1) return -1/(sinx*sinx);

  var cosx = BuiltIn.cos(x);
  if (m === 2) return 2*cosx/(sinx*sinx*sinx);

  var aprev = [0, 2];
  var a;
  var mp, n;
  var t1, t2;
  for (mp = 3; mp <= m; mp++) {
    a = [];
    for (n = 0; n < mp; n++) {
      t1 = 0;
      t2 = 0;
      if (n > 0) t1 = (mp - n + 1)*aprev[n - 1];
      if (n + 2 < mp) t2 = (n + 1)*aprev[n + 1];
      a.push(-(t1 + t2));
    }
    aprev = a;
  }

  var s = 0;
  // Horner's method for polynomial evaluation
  for (n = m - 1; n >= 0; n--) s = a[n] + cosx*s;

  return s/Math.pow(sinx, m + 1);
};

// polyGamma(m, n) is the (m+1)th derivative of lnGamma(n)
//
// Implemented by differentiating Stirling's approximation:
//
// d/dn ln(Gamma(n)) = -\left(
//         ln(n) + 1/2n + \sum_{k=1}^{\infty} B_{2k}/(2k n^{2k})
//       /right)
//
// d^{m+1}/dn^{m+1} ln(Gamma(n)) =
//      m! (-1)^{m + 1} \left(
//        1/(m n^m) - 1/(2 n^{1+m}) +
//        \sum_{k=1}^{\infty} B_{2k} (2k + m - 1)!/(m!(2k)!n^{2k+m})
//      \right)
//
// B_{2k} are the Bernoulli numbers.
//
// Uses recurrence relation to bring arguments above 10, and reflection
// formula for negative n. In this case, 14 term sum gives results accurate to
// machine precision for values of m between 0 and at least 8.
//
// Only get 8 digits for polyGamma(100, 30)
//
// Recurrence relation:
//
// polyGamma(m, n) = polyGamma(m, n + 1) + (-1)^m m!/n^{m+1}
//
// Reflection formula:
//
// polyGamma(m, n) = (-1)^{m}polyGamma(m, 1 - n) - pi d^m/dn^m cot(pi*n)
//
// Can lose some accuracy in reflection formula for large m because of large
// powers of trig functions.
BuiltIn.polyGamma = function (m, n) {
  if (m < 0) return NaN;
  if (m !== Math.floor(m)) return NaN;
  var sign = (m % 2 === 0) ? -1 : 1;
  // Use reflection formula for negative n
  if (n < 0) {
    return -sign*BuiltIn.polyGamma(m, 1 - n) -
      Math.pow(Math.PI, m + 1)*BuiltIn.cotDerivative(m, Math.PI*n);
  }

  var mfac = BuiltIn.factorial(m);

  // Use recurrence relation to bring n above 10
  var s = 0;
  var npmm = Math.pow(n, -(m + 1));
  while (n < 10) {
    s += npmm;
    n++;
    npmm = Math.pow(n, -(m + 1));
  }

  s += (m === 0) ? -Math.log(n) : npmm*n/m;
  s += 0.5*npmm;

  var bt = BuiltIn.bernoulliTable;
  var num = m + 1;
  var denom = 2;
  var pre = npmm*n*num/denom;
  var nsqinv = 1/(n*n);
  for (var k = 1; k <= 14; k++) {
    pre *= nsqinv;
    s += pre*bt[k-1];
    num++; denom++;
    pre *= num/denom;
    num++; denom++;
    pre *= num/denom;
  }
  return mfac*sign*s;
};

BuiltIn.getGCD = function(x,y)
{
    //Only defined over integers
    var a = BuiltIn.smartTruncate(x);
    var b = BuiltIn.smartTruncate(y);

    // Positive values only
    if (a < 0)
        a = -a;
    if (b < 0)
        b = -b;

    // Reverse order if necessary.
    // b should be smaller than a
    if (b > a)
    {
        var temp = b;
        b = a;
        a = temp;
    }

    //GCD(0, x) = x
    if(b === 0){
      return a;
    }
    
    var m = a % b;
    
    while (m > 0)
    {
        a = b;
        b = m;
        m = a % b;
    }
    
    return b;
};

// Returns a reduced fraction approximation of x with denominator less than
// maxDenominator. maxDenominator defaults to 1e6.
BuiltIn.toFraction = function (x, maxDenominator) {
  
  if (x === Infinity) return { n: Infinity, d: 1 };
  if (x === -Infinity) return { n: -Infinity, d: 1};
  if (!isFinite(x)) return { n: NaN, d: 1};
  
  var whole, n0 = 0, n1 = 1, d0 = 1, d1 = 0, n, d;
  if (!maxDenominator) maxDenominator = 1e6;
  while (true) {
    whole = Math.floor(x);
    n = whole*n1 + n0;
    d = whole*d1 + d0;
    if (d > maxDenominator) break;
    n0 = n1;
    d0 = d1;
    n1 = n;
    d1 = d;
    if (x === whole) break;
    x = 1/(x - whole);
  }
  return { n: n1, d: d1 };
};

// Check if two values are equal to within the given number of bits of
// precision. For numbers smaller than one, compares the difference in the
// numbers to 1 instead of the larger of the numbers. This makes calculations like
// BuiltIn.approx(Math.sin(Math.Pi), 0) work out.
BuiltIn.approx = function (x1, x2, bits) {
  var m = Math.max(Math.max(Math.abs(x1), Math.abs(x2)), 1);
  var d = (bits === undefined) ? 0.5 : Math.pow(0.5, bits);
  return m === m + d*Math.abs(x2 - x1);
};

BuiltIn.smartTruncate = function(x){
  if (x < 0){
    return Math.ceil(x);
  } else {
    return Math.floor(x);
  }
};

BuiltIn.log_base = function(n, base){return Math.log(n) / Math.log(base)};

BuiltIn.pow = function (x, n) {
  if (x >= 0 || n === Math.floor(n)) return Math.pow(x, n);
  var frac = BuiltIn.toFraction(n, 100);
  if (frac.n/frac.d === n && frac.d % 2 === 1) return (frac.n % 2 === 0 ? 1 : -1) * Math.pow(-x, n);
  return NaN;
};
BuiltIn.nthroot = function(x, n) { return BuiltIn.pow(x, 1/n) };

var PI_INV = 1/Math.PI;

//Trig functions
BuiltIn.sin = function (x) {
  if (2*PI_INV*x % 2 === 0) return 0;
  return Math.sin(x);
};

BuiltIn.cos = function (x) {
  if (Math.abs(2*PI_INV*x % 2) === 1) return 0;
  return Math.cos(x);
};

BuiltIn.tan = function (x) {
  if (2*PI_INV*x % 2 === 0) return 0;
  if (Math.abs(2*PI_INV*x % 2) === 1) return Infinity;
  return Math.tan(x);
};

BuiltIn.sec = function (x) {
  if (Math.abs(2*PI_INV*x % 2) === 1) return Infinity;
  return 1/Math.cos(x);
};

BuiltIn.csc = function(x) {
  if (2*PI_INV*x % 2 === 0) return Infinity;
  return 1/Math.sin(x);
};

BuiltIn.cot = function(x) {
  if (2*PI_INV*x % 2 === 0) return Infinity;
  if (Math.abs(2*PI_INV*x % 2) === 1) return 0;
  return 1/Math.tan(x);
};

//Inverse trig functions
BuiltIn.acot = function(x){return Math.PI / 2 - Math.atan(x)};
BuiltIn.acsc = function(x){return Math.asin(1/x)};
BuiltIn.asec = function(x){return Math.acos(1/x)};

//Hyperbolic trig functions
BuiltIn.sinh = function(x){return (Math.exp(x) - Math.exp(-x)) / 2};
BuiltIn.cosh = function(x){return (Math.exp(x) + Math.exp(-x)) / 2};
BuiltIn.tanh = function(x) {
  // This definition avoids overflow of sinh and cosh for large x
  if (x > 0) {
    return (1 - Math.exp(-2*x))/(1 + Math.exp(-2*x));
  } else {
    return (Math.exp(2*x) - 1)/(Math.exp(2*x) + 1);
  }
};

BuiltIn.sech = function(x){return 1 / BuiltIn.cosh(x)};
BuiltIn.csch = function(x){return 1 / BuiltIn.sinh(x)};
BuiltIn.coth = function(x){return 1 / BuiltIn.tanh(x)};

//Inverse hyperbolic trig functions
BuiltIn.asinh = function(x){return Math.log(x+Math.sqrt(x*x+1))};
BuiltIn.acosh = function(x){return Math.log(x+Math.sqrt(x+1)*Math.sqrt(x-1))};
BuiltIn.atanh = function(x){return 0.5 * Math.log((1+x)/(1-x))};

BuiltIn.asech = function(x){return Math.log(1/x + Math.sqrt((1/x + 1)) * Math.sqrt((1/x - 1)))};
BuiltIn.acsch = function(x){return Math.log(1/x + Math.sqrt((1/(x*x)+1)))};
BuiltIn.acoth = function(x){return 0.5 * Math.log((x+1)/(x-1))};

return BuiltIn;
});

define('math/evalframe',['require','pjs'],function(require){
  var P = require('pjs');

var EvalFrame = P(function(frame){
  frame.init = function(parentFrame){
    if(parentFrame instanceof EvalFrame){
      this.parentFrame = parentFrame;
    }
    else{
      this.parentFrame = null;
    }
    this.variables = {};
    this.functions = {};
    this.evalStrings = {};
    this.definitionIds = {};
    if(this.parentFrame){
      for(var variable in this.parentFrame.evalStrings){
        this.evalStrings[variable] = this.parentFrame.getEvalStrings(variable);
      }
    }
  };

  frame.setVariable = function(name, value){
    this.variables[name] = value;
  };

  frame.getVariable = function(name){
    if(this.variables.hasOwnProperty(name)){
      return this.variables[name];
    }

    if(this.parentFrame){
      return this.parentFrame.getVariable(name);
    }

    throw("Variable '"+name+"' not defined");
  };

  frame.setDefinitionId = function (name, id) {
    this.definitionIds[name] = id;
  };

  frame.getDefinitionId = function (name) {
    return this.definitionIds[name];
  };

  frame.setFunction = function(name, arity, body, tree, args, source){
    this.functions[name] = {arity: arity, body:body, tree:tree, source:source, args:args};
  };

  frame.hasFunction = function(name){
    if(this.functions.hasOwnProperty(name)){
      return true;
    }
    if(this.parentFrame){
      return this.parentFrame.hasFunction(name);
    }
    return false;
  };

  frame.hasFunctionWithArity = function(name, arity){
    if(this.functions.hasOwnProperty(name) && this.functions[name].arity == arity){
      return true;
    }
    if(this.parentFrame){
      return this.parentFrame.hasFunction(name);
    }
    return false;
  };

  frame.hasVariable = function(name){
    if (this.variables.hasOwnProperty(name)){
      return true;
    }
    if(this.parentFrame){
      return this.parentFrame.hasVariable(name);
    }
    return false;
  };

  frame.getFunctionTree = function(name){
    if(this.functions.hasOwnProperty(name)){
      var f = this.functions[name];
      return f.tree;
    }

    if(this.parentFrame) return this.parentFrame.getFunctionTree(name);
    
    throw("Function '"+name+"' not defined");
  };

  frame.callFunction = function(name, args){
    if(this.functions.hasOwnProperty(name)){
      var f = this.functions[name];
      if(f.arity == args.length){
        return f.body.apply(null, args);
      }
      throw("Function " + name + " expects " + f.arity + " arguments, but was called with " + args.length);
    }
    
    if (this.parentFrame){
      return this.parentFrame.callFunction(name, args);
    }

    throw("Function '"+name+"' not defined");
  };

  frame.defines = function(name){
    return this.hasVariable(name) || this.hasFunction(name);
  };

  frame.arity = function(name){
    if(this.hasVariable(name)) return 0;
    if(this.hasFunction(name)) return this.functions[name].arity;
    if(this.parentFrame){
      return this.parentFrame.arity(name);
    }
  };

  //Needed for compilation.  Have different semantics (don't go up scope chain) for now.  Don't know if that's right
  frame.setEvalStrings = function(name, s){
    this.evalStrings[name] = s;
  };

  frame.getEvalStrings = function(name){
    if(this.evalStrings.hasOwnProperty(name)){
      return this.evalStrings[name];
    }
    else{
      return {expression:name, statements:''};
    }
  };

  frame.functionMap = function(leafOnly){
    var allFunctions = {};
    if(this.parentFrame && !leafOnly){
      allFunctions = this.parentFrame.functionMap();
    }
    for(var name in this.functions){
      if(this.functions.hasOwnProperty(name)){
        allFunctions[name] = this.functions[name].body;
      }
    }
    return allFunctions;
  };

  frame.leafFunctionMap = function(){
    return this.functionMap(true);
  };

  frame.functionSourceMap = function(leafOnly){
    var compiledFunctions = {};
    if(this.parentFrame && !leafOnly){
      compiledFunctions = this.parentFrame.functionSourceMap();
    }
    for(var name in this.functions){
      if(this.functions.hasOwnProperty(name) && this.functions[name].source){
        compiledFunctions[name] = {
          args: this.functions[name].args,
          source: this.functions[name].source
        };
      }
    }
    return compiledFunctions;
  };

  frame.leafFunctionSourceMap = function(){
    return this.functionSourceMap(true);
  };
});

return EvalFrame;

});

//Use this table to get rid of all the string comparisons used to interpret comparators
define('math/comparators',['require'],function(require){

var ComparatorTable = {
   '<': {inclusive: false, direction: -1},
  '!=': {inclusive: false, direction:  0},
   '>': {inclusive: false, direction:  1},
  '<=': {inclusive: true,  direction: -1},
  '=': {inclusive: true,  direction:  0},
  '>=': {inclusive: true,  direction:  1}
};

var getComparator = function(inclusive, direction){
  switch(direction){
    case -1:
      return (inclusive ? '<=' : '<');
    case 0:
      return (inclusive ? '=' : '!=');
    case 1:
      return (inclusive ? '>=' : '>');
    default:
      throw "Programming error.  Comparators must have a direction of -1, 0, or 1";
  }
};

return{
  table: ComparatorTable,
  get: getComparator
};

});

define('parser',[], function(){
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"sentence":3,"expr":4,"EOF":5,"assignment":6,"equation":7,"function_declaration":8,"ordered_pair_list":9,"double_inequality":10,"boolean":11,"identifier":12,"=":13,"FUNCTION_PROTOTYPE":14,",":15,"comparator":16,"IDENTIFIER_BASE":17,"ordered_pair_list_elements":18,"ordered_pair":19,"[":20,"]":21,"(":22,")":23,"expr_sum":24,"<":25,">":26,">=":27,"<=":28,"+":29,"expr_product":30,"-":31,"expr_atom_impmul":32,"*":33,"expr_atom":34,"/":35,"exponent":36,"^N":37,"^I":38,"^":39,"{":40,"}":41,"function_call":42,"function_call_unary":43,"trig_function_call":44,"log_function_call":45,"left|":46,"right|":47,"FRAC":48,"SQRT":49,"!":50,"repeated_operator":51,"DERIVATIVE":52,"expr_piecewise":53,"constant":54,"NUMBER":55,"repeated_operator_symbol":56,"SUM":57,"PROD":58,"_":59,"{_visible":60,"piecewise_list":61,"}_visible":62,"incomplete_piecewise_list":63,"piecewise_element":64,":":65,"trig_function":66,"TRIG_FUNCTION":67,"log_prefix":68,"LN":69,"LOG":70,"LOG_BASE_N":71,"function_argument_list":72,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",13:"=",14:"FUNCTION_PROTOTYPE",15:",",17:"IDENTIFIER_BASE",20:"[",21:"]",22:"(",23:")",25:"<",26:">",27:">=",28:"<=",29:"+",31:"-",33:"*",35:"/",37:"^N",38:"^I",39:"^",40:"{",41:"}",46:"left|",47:"right|",48:"FRAC",49:"SQRT",50:"!",52:"DERIVATIVE",55:"NUMBER",57:"SUM",58:"PROD",59:"_",60:"{_visible",62:"}_visible",65:":",67:"TRIG_FUNCTION",69:"LN",70:"LOG",71:"LOG_BASE_N"},
productions_: [0,[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,2],[3,3],[3,2],[3,4],[3,1],[6,3],[6,3],[7,3],[10,5],[12,1],[9,1],[18,1],[18,3],[19,5],[19,5],[4,1],[16,1],[16,1],[16,1],[16,1],[11,3],[11,3],[11,5],[24,3],[24,3],[24,1],[30,2],[30,3],[30,3],[30,1],[36,1],[36,1],[36,4],[32,1],[32,1],[32,1],[32,1],[32,1],[32,3],[32,3],[32,3],[32,2],[32,7],[32,4],[32,7],[32,2],[32,1],[32,2],[32,1],[34,1],[34,3],[34,2],[34,2],[34,2],[34,1],[56,1],[56,1],[51,9],[53,3],[53,2],[61,3],[61,1],[63,3],[63,1],[64,3],[64,1],[54,1],[54,2],[43,5],[43,4],[66,1],[44,4],[44,2],[44,7],[44,9],[44,3],[44,5],[68,1],[68,1],[68,1],[68,3],[68,5],[45,4],[45,2],[45,5],[45,3],[42,4],[72,3],[72,3],[8,2]],
performAction: function anonymous(yytext,yyleng,yylineno,yy,yystate,$$,_$) {

var $0 = $$.length - 1;
switch (yystate) {
case 1: return $$[$0-1]; 
break;
case 2: return $$[$0-1]; 
break;
case 3: return $$[$0-1]; 
break;
case 4: return $$[$0-1]; 
break;
case 5: return $$[$0-1]; 
break;
case 6: return $$[$0-1]; 
break;
case 7: return $$[$0-1]; 
break;
case 8: return yy.ErrorNode("What do you want variable \'" + $$[$0-2].identifier + "\' to equal?");
break;
case 9: var val = yy.parseFunctionDeclaration($$[$0-1]);
          return yy.ErrorNode("What do you want function \'" + val.identifier.identifier + "\' to equal?");
        
break;
case 10: return yy.ErrorNode("Points are written like this: (1, 2)"); 
break;
case 11: return yy.ErrorNode("You haven't written anything yet"); 
break;
case 12: this.$ = yy.AssignmentNode($$[$0-2], $$[$0]);
break;
case 13: this.$ = yy.AssignmentNode($$[$0-2], yy.ErrorNode);
break;
case 14: this.$ = yy.EquationNode($$[$0-2], $$[$0]);
break;
case 15:this.$ = yy.DoubleInequalityNode($$[$0-4], $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 16:this.$ = yy.IdentifierNode(yytext);
        yy.setInput(this.$, this._$);
      
break;
case 17: this.$ = yy.OrderedPairListNode($$[$0]);
break;
case 18: this.$ = [($$[$0])]; 
break;
case 19: $$[$0-2].push($$[$0]); this.$ = $$[$0-2] 
break;
case 20: this.$ = yy.OrderedPairNode($$[$0-3], $$[$0-1]); 
break;
case 21: this.$ = yy.OrderedPairNode($$[$0-3], $$[$0-1]); 
break;
case 22:this.$ = $$[$0]; 
      yy.setInput(this.$, this._$);
    
break;
case 23:this.$ = '<'
break;
case 24:this.$ = '>'
break;
case 25:this.$ = '>='
break;
case 26:this.$ = '<='
break;
case 27:this.$ = yy.ComparatorNode($$[$0-1], $$[$0-2], $$[$0]); 
break;
case 28:this.$ = yy.ComparatorNode('===', $$[$0-2], $$[$0]); 
break;
case 29:this.$ = yy.ChainedComparatorNode([$$[$0-3], $$[$0-1]], [$$[$0-4], $$[$0-2], $$[$0]]); 
break;
case 30:this.$ = yy.BinaryOperatorNode('+', $$[$0-2], $$[$0]);
break;
case 31:this.$ = yy.BinaryOperatorNode('-', $$[$0-2], $$[$0]);
break;
case 32:this.$ = $$[$0]
break;
case 33:this.$ = yy.BinaryOperatorNode('*', $$[$0-1], $$[$0]);
break;
case 34:this.$ = yy.BinaryOperatorNode('*', $$[$0-2], $$[$0]);
break;
case 35:this.$ = yy.BinaryOperatorNode('/', $$[$0-2], $$[$0]);
break;
case 36:this.$ = $$[$0];
break;
case 37:this.$ = yy.ConstantNode(Number($$[$0]));
break;
case 38:this.$ = yy.IdentifierNode($$[$0]);
break;
case 39:this.$ = $$[$0-1];
break;
case 40:this.$ = $$[$0];
break;
case 41:this.$ = $$[$0];
break;
case 42:this.$ = $$[$0];
break;
case 43:this.$ = $$[$0];
break;
case 44:this.$ = $$[$0];
break;
case 45:this.$ = $$[$0-1];
break;
case 46:this.$ = $$[$0-1];
break;
case 47:this.$ = yy.FunctionNode(yy.IdentifierNode('\\abs'), [$$[$0-1]]);
break;
case 48:this.$ = yy.BinaryOperatorNode('^', $$[$0-1], $$[$0]);
break;
case 49:this.$ = yy.BinaryOperatorNode('/', $$[$0-4], $$[$0-1]);
break;
case 50:this.$ = yy.FunctionNode(yy.IdentifierNode('\\sqrt'), [$$[$0-1]]);
break;
case 51:this.$ = yy.FunctionNode(yy.IdentifierNode('\\nthroot'), [$$[$0-1], $$[$0-4]]);
break;
case 52:this.$ = yy.FunctionNode(yy.IdentifierNode('\\factorial'), [$$[$0-1]])
break;
case 53:this.$ = $$[$0];
break;
case 54:this.$ = yy.DerivativeNode(yy.IdentifierNode($$[$0-1]), $$[$0]);
break;
case 55:this.$ = $$[$0]
break;
case 56:this.$ = $$[$0];
break;
case 57:this.$ = yy.NegationNode(yy.BinaryOperatorNode('^', yy.ConstantNode(Number($$[$0-1])), $$[$0]));
break;
case 58:this.$ = yy.BinaryOperatorNode('^', $$[$0-1], $$[$0]);
break;
case 59:this.$ = yy.FunctionNode(yy.IdentifierNode('\\factorial'), [$$[$0-1]])
break;
case 60:this.$ = yy.NegationNode($$[$0])
break;
case 61:this.$ = $$[$0]
break;
case 62:this.$ = yy.SummationNode;
break;
case 63:this.$ =  yy.ProductNode;
break;
case 64:this.$ = $$[$0-8]($$[$0-5], $$[$0-3], $$[$0-1], $$[$0]);
break;
case 65:this.$ = $$[$0-1];
break;
case 66:this.$ = yy.ConstantNode(1);
break;
case 67:this.$ = $$[$0-2].append_else(yy.PiecewiseNode(yy.ConstantNode(true), $$[$0]));
break;
case 68:this.$ = $$[$0];
break;
case 69:this.$ = $$[$0-2].append_else($$[$0]);
break;
case 70:this.$ = $$[$0];
break;
case 71: this.$ = yy.PiecewiseNode($$[$0-2], $$[$0]); 
break;
case 72: this.$ = yy.PiecewiseNode($$[$0], yy.ConstantNode(1)); 
break;
case 73:this.$ = yy.ConstantNode(Number(yytext));
break;
case 74:this.$ = yy.ConstantNode(-$$[$0])
break;
case 75:this.$ = yy.FunctionCallExponentNode($$[$0-4], $$[$0-2], $$[$0]);
break;
case 76:this.$ = yy.FunctionNode($$[$0-3], [$$[$0-1]]);
break;
case 77:this.$ = yy.IdentifierNode(yytext);
break;
case 78:this.$ = yy.FunctionNode($$[$0-3], [$$[$0-1]]);
break;
case 79:
          if(!$$[$0].okForImplicitFunction()) {throw 'Too complicated.  Use parens'};
          this.$ = yy.FunctionNode($$[$0-1], [$$[$0]]);
        
break;
case 80: 
          if(!$$[$0].okForImplicitFunction()) {throw 'Too complicated.  Use parens'};
          if($$[$0-2].value != 1) {throw 'Only sin^2 and sin^-1 are supported.  Otherwise, use parens'};
          this.$ = yy.FunctionNode(yy.IdentifierNode(yy.inverses[$$[$0-6].identifier]), [$$[$0]]);
        
break;
case 81:
          if($$[$0-4].value != 1) {throw 'Only sin^2 and sin^-1 are supported.  Otherwise, use parens'};
          this.$ = yy.FunctionNode(yy.IdentifierNode(yy.inverses[$$[$0-8].identifier]), [$$[$0-1]]); 
        
break;
case 82:
          if(!$$[$0].okForImplicitFunction()) {throw 'Too complicated.  Use parens'};
          if($$[$0-1] != "2") {throw 'Only sin^2 and sin^-1 are supported.  Otherwise, use parens'};
          this.$ = yy.BinaryOperatorNode('^', yy.FunctionNode($$[$0-2], [$$[$0]]), yy.ConstantNode(2));
        
break;
case 83:
          if($$[$0-3] != "2") {throw 'Only sin^2 and sin^-1 are supported.  Otherwise, use parens'};
          this.$ = yy.BinaryOperatorNode('^', yy.FunctionNode($$[$0-4], [$$[$0-1]]), yy.ConstantNode(2)); 
        
break;
case 84: this.$ = yy.ConstantNode(Math.E) 
break;
case 85: this.$ = yy.ConstantNode(10) 
break;
case 86: this.$ = yy.ConstantNode(Number(yytext)); 
break;
case 87: this.$ = $$[$0]
break;
case 88: this.$ = $$[$0-1]
break;
case 89:this.$ = yy.FunctionNode(yy.IdentifierNode('log'), [$$[$0-1], $$[$0-3]])
break;
case 90:
      if(!$$[$0].okForImplicitFunction()) {throw 'Too complicated.  Use parens'};
      this.$ = yy.FunctionNode(yy.IdentifierNode('log'), [$$[$0], $$[$0-1]])
    
break;
case 91:
      if($$[$0-3] != "2") {throw 'Only log^2 is supported.  Use parens'}
      this.$ = yy.BinaryOperatorNode('^', yy.FunctionNode(yy.IdentifierNode('log'), [$$[$0-1], $$[$0-4]]), yy.ConstantNode(2))
    
break;
case 92:
      if(!$$[$0].okForImplicitFunction()) {throw 'Too complicated.  Use parens'};
      if($$[$0-1] != "2") {throw 'Only log^2 is supported.  Use parens'}
      this.$ = yy.BinaryOperatorNode('^', yy.FunctionNode(yy.IdentifierNode('log'), [$$[$0], $$[$0-2]]), yy.ConstantNode(2))
    
break;
case 93:this.$ = yy.FunctionNode($$[$0-3], $$[$0-1]);
break;
case 94:this.$ = $$[$0-2].concat([$$[$0]]);
break;
case 95:this.$ = [$$[$0-2], $$[$0]];
break;
case 96:var val = yy.parseFunctionDeclaration($$[$0-1]); this.$ = yy.FunctionDeclarationNode(val.identifier, val.args, $$[$0]);
        this.$.setInputString(val.input_string);
      
break;
}
},
table: [{3:1,4:2,5:[1,11],6:3,7:4,8:5,9:6,10:7,11:8,12:9,14:[1,10],17:[1,14],18:13,19:16,20:[1,18],22:[1,19],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{1:[3]},{5:[1,45],13:[1,47],15:[1,46],16:48,25:[1,49],26:[1,50],27:[1,51],28:[1,52]},{5:[1,53]},{5:[1,54]},{5:[1,55]},{5:[1,56]},{5:[1,57]},{5:[1,58]},{5:[2,40],13:[1,59],15:[2,40],17:[2,40],22:[1,60],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],31:[2,40],33:[2,40],35:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],46:[2,40],48:[2,40],49:[2,40],50:[2,40],52:[2,40],57:[2,40],58:[2,40],60:[2,40],67:[2,40],69:[2,40],70:[2,40],71:[2,40]},{4:62,5:[1,61],12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{1:[2,11]},{5:[2,22],13:[2,22],15:[2,22],17:[2,22],21:[2,22],22:[2,22],23:[2,22],25:[2,22],26:[2,22],27:[2,22],28:[2,22],29:[1,65],31:[1,66],33:[2,22],35:[2,22],37:[2,22],38:[2,22],39:[2,22],40:[2,22],41:[2,22],46:[2,22],47:[2,22],48:[2,22],49:[2,22],50:[2,22],52:[2,22],57:[2,22],58:[2,22],60:[2,22],62:[2,22],65:[2,22],67:[2,22],69:[2,22],70:[2,22],71:[2,22]},{5:[2,17],15:[1,67]},{5:[2,16],13:[2,16],15:[2,16],17:[2,16],21:[2,16],22:[2,16],23:[2,16],25:[2,16],26:[2,16],27:[2,16],28:[2,16],29:[2,16],31:[2,16],33:[2,16],35:[2,16],37:[2,16],38:[2,16],39:[2,16],40:[2,16],41:[2,16],46:[2,16],47:[2,16],48:[2,16],49:[2,16],50:[2,16],52:[2,16],55:[2,16],57:[2,16],58:[2,16],60:[2,16],62:[2,16],65:[2,16],67:[2,16],69:[2,16],70:[2,16],71:[2,16]},{5:[2,32],12:63,13:[2,32],15:[2,32],17:[1,14],21:[2,32],22:[1,64],23:[2,32],25:[2,32],26:[2,32],27:[2,32],28:[2,32],29:[2,32],31:[2,32],32:68,33:[1,69],35:[1,70],37:[2,32],38:[2,32],39:[2,32],40:[1,28],41:[2,32],42:24,43:25,44:26,45:27,46:[1,29],47:[2,32],48:[1,30],49:[1,31],50:[2,32],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,32],65:[2,32],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,18],15:[2,18]},{5:[2,36],13:[2,36],15:[2,36],17:[2,36],21:[2,36],22:[2,36],23:[2,36],25:[2,36],26:[2,36],27:[2,36],28:[2,36],29:[2,36],31:[2,36],33:[2,36],35:[2,36],36:71,37:[1,73],38:[1,74],39:[1,75],40:[2,36],41:[2,36],46:[2,36],47:[2,36],48:[2,36],49:[2,36],50:[1,72],52:[2,36],57:[2,36],58:[2,36],60:[2,36],62:[2,36],65:[2,36],67:[2,36],69:[2,36],70:[2,36],71:[2,36]},{4:76,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:77,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,56],13:[2,56],15:[2,56],17:[2,56],21:[2,56],22:[2,56],23:[2,56],25:[2,56],26:[2,56],27:[2,56],28:[2,56],29:[2,56],31:[2,56],33:[2,56],35:[2,56],37:[2,56],38:[2,56],39:[2,56],40:[2,56],41:[2,56],46:[2,56],47:[2,56],48:[2,56],49:[2,56],50:[2,56],52:[2,56],57:[2,56],58:[2,56],60:[2,56],62:[2,56],65:[2,56],67:[2,56],69:[2,56],70:[2,56],71:[2,56]},{12:63,17:[1,14],22:[1,64],31:[1,21],32:22,34:79,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,78],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,61],13:[2,61],15:[2,61],17:[2,61],21:[2,61],22:[2,61],23:[2,61],25:[2,61],26:[2,61],27:[2,61],28:[2,61],29:[2,61],31:[2,61],33:[2,61],35:[2,61],36:80,37:[1,73],38:[1,74],39:[1,75],40:[2,61],41:[2,61],46:[2,61],47:[2,61],48:[2,61],49:[2,61],50:[1,81],52:[2,61],57:[2,61],58:[2,61],60:[2,61],62:[2,61],65:[2,61],67:[2,61],69:[2,61],70:[2,61],71:[2,61]},{5:[2,73],13:[2,73],15:[2,73],17:[2,73],21:[2,73],22:[2,73],23:[2,73],25:[2,73],26:[2,73],27:[2,73],28:[2,73],29:[2,73],31:[2,73],33:[2,73],35:[2,73],37:[2,73],38:[2,73],39:[2,73],40:[2,73],41:[2,73],46:[2,73],47:[2,73],48:[2,73],49:[2,73],50:[2,73],52:[2,73],57:[2,73],58:[2,73],60:[2,73],62:[2,73],65:[2,73],67:[2,73],69:[2,73],70:[2,73],71:[2,73]},{5:[2,41],13:[2,41],15:[2,41],17:[2,41],21:[2,41],22:[2,41],23:[2,41],25:[2,41],26:[2,41],27:[2,41],28:[2,41],29:[2,41],31:[2,41],33:[2,41],35:[2,41],37:[2,41],38:[2,41],39:[2,41],40:[2,41],41:[2,41],46:[2,41],47:[2,41],48:[2,41],49:[2,41],50:[2,41],52:[2,41],57:[2,41],58:[2,41],60:[2,41],62:[2,41],65:[2,41],67:[2,41],69:[2,41],70:[2,41],71:[2,41]},{5:[2,42],13:[2,42],15:[2,42],17:[2,42],21:[2,42],22:[2,42],23:[2,42],25:[2,42],26:[2,42],27:[2,42],28:[2,42],29:[2,42],31:[2,42],33:[2,42],35:[2,42],37:[2,42],38:[2,42],39:[2,42],40:[2,42],41:[2,42],46:[2,42],47:[2,42],48:[2,42],49:[2,42],50:[2,42],52:[2,42],57:[2,42],58:[2,42],60:[2,42],62:[2,42],65:[2,42],67:[2,42],69:[2,42],70:[2,42],71:[2,42]},{5:[2,43],13:[2,43],15:[2,43],17:[2,43],21:[2,43],22:[2,43],23:[2,43],25:[2,43],26:[2,43],27:[2,43],28:[2,43],29:[2,43],31:[2,43],33:[2,43],35:[2,43],37:[2,43],38:[2,43],39:[2,43],40:[2,43],41:[2,43],46:[2,43],47:[2,43],48:[2,43],49:[2,43],50:[2,43],52:[2,43],57:[2,43],58:[2,43],60:[2,43],62:[2,43],65:[2,43],67:[2,43],69:[2,43],70:[2,43],71:[2,43]},{5:[2,44],13:[2,44],15:[2,44],17:[2,44],21:[2,44],22:[2,44],23:[2,44],25:[2,44],26:[2,44],27:[2,44],28:[2,44],29:[2,44],31:[2,44],33:[2,44],35:[2,44],37:[2,44],38:[2,44],39:[2,44],40:[2,44],41:[2,44],46:[2,44],47:[2,44],48:[2,44],49:[2,44],50:[2,44],52:[2,44],57:[2,44],58:[2,44],60:[2,44],62:[2,44],65:[2,44],67:[2,44],69:[2,44],70:[2,44],71:[2,44]},{4:82,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:83,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{40:[1,84]},{20:[1,86],40:[1,85]},{5:[2,53],13:[2,53],15:[2,53],17:[2,53],21:[2,53],22:[2,53],23:[2,53],25:[2,53],26:[2,53],27:[2,53],28:[2,53],29:[2,53],31:[2,53],33:[2,53],35:[2,53],37:[2,53],38:[2,53],39:[2,53],40:[2,53],41:[2,53],46:[2,53],47:[2,53],48:[2,53],49:[2,53],50:[2,53],52:[2,53],57:[2,53],58:[2,53],60:[2,53],62:[2,53],65:[2,53],67:[2,53],69:[2,53],70:[2,53],71:[2,53]},{12:63,17:[1,14],22:[1,64],30:87,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,55],13:[2,55],15:[2,55],17:[2,55],21:[2,55],22:[2,55],23:[2,55],25:[2,55],26:[2,55],27:[2,55],28:[2,55],29:[2,55],31:[2,55],33:[2,55],35:[2,55],37:[2,55],38:[2,55],39:[2,55],40:[2,55],41:[2,55],46:[2,55],47:[2,55],48:[2,55],49:[2,55],50:[2,55],52:[2,55],57:[2,55],58:[2,55],60:[2,55],62:[2,55],65:[2,55],67:[2,55],69:[2,55],70:[2,55],71:[2,55]},{12:63,17:[1,14],22:[1,88],30:89,31:[1,21],32:22,34:17,37:[1,91],39:[1,90],40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{12:63,17:[1,14],22:[1,92],30:93,31:[1,21],32:22,34:17,37:[1,94],40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{59:[1,95]},{4:101,11:100,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],61:96,62:[1,97],63:98,64:99,66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{17:[2,77],22:[2,77],31:[2,77],37:[2,77],39:[2,77],40:[2,77],46:[2,77],48:[2,77],49:[2,77],52:[2,77],55:[2,77],57:[2,77],58:[2,77],60:[2,77],67:[2,77],69:[2,77],70:[2,77],71:[2,77]},{17:[2,84],22:[2,84],31:[2,84],37:[2,84],40:[2,84],46:[2,84],48:[2,84],49:[2,84],52:[2,84],55:[2,84],57:[2,84],58:[2,84],60:[2,84],67:[2,84],69:[2,84],70:[2,84],71:[2,84]},{17:[2,85],22:[2,85],31:[2,85],37:[2,85],40:[2,85],46:[2,85],48:[2,85],49:[2,85],52:[2,85],55:[2,85],57:[2,85],58:[2,85],59:[1,102],60:[2,85],67:[2,85],69:[2,85],70:[2,85],71:[2,85]},{17:[2,86],22:[2,86],31:[2,86],37:[2,86],40:[2,86],46:[2,86],48:[2,86],49:[2,86],52:[2,86],55:[2,86],57:[2,86],58:[2,86],60:[2,86],67:[2,86],69:[2,86],70:[2,86],71:[2,86]},{59:[2,62]},{59:[2,63]},{1:[2,1]},{4:103,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:104,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:106,12:105,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{17:[2,23],22:[2,23],31:[2,23],40:[2,23],46:[2,23],48:[2,23],49:[2,23],52:[2,23],55:[2,23],57:[2,23],58:[2,23],60:[2,23],67:[2,23],69:[2,23],70:[2,23],71:[2,23]},{17:[2,24],22:[2,24],31:[2,24],40:[2,24],46:[2,24],48:[2,24],49:[2,24],52:[2,24],55:[2,24],57:[2,24],58:[2,24],60:[2,24],67:[2,24],69:[2,24],70:[2,24],71:[2,24]},{17:[2,25],22:[2,25],31:[2,25],40:[2,25],46:[2,25],48:[2,25],49:[2,25],52:[2,25],55:[2,25],57:[2,25],58:[2,25],60:[2,25],67:[2,25],69:[2,25],70:[2,25],71:[2,25]},{17:[2,26],22:[2,26],31:[2,26],40:[2,26],46:[2,26],48:[2,26],49:[2,26],52:[2,26],55:[2,26],57:[2,26],58:[2,26],60:[2,26],67:[2,26],69:[2,26],70:[2,26],71:[2,26]},{1:[2,2]},{1:[2,3]},{1:[2,4]},{1:[2,5]},{1:[2,6]},{1:[2,7]},{2:[1,109],4:108,5:[1,107],12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:111,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42],72:110},{1:[2,9]},{5:[2,96]},{5:[2,40],13:[2,40],15:[2,40],17:[2,40],21:[2,40],22:[1,60],23:[2,40],25:[2,40],26:[2,40],27:[2,40],28:[2,40],29:[2,40],31:[2,40],33:[2,40],35:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],41:[2,40],46:[2,40],47:[2,40],48:[2,40],49:[2,40],50:[2,40],52:[2,40],57:[2,40],58:[2,40],60:[2,40],62:[2,40],65:[2,40],67:[2,40],69:[2,40],70:[2,40],71:[2,40]},{4:112,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{12:63,17:[1,14],22:[1,64],30:113,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{12:63,17:[1,14],22:[1,64],30:114,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{19:115,20:[1,18],22:[1,116]},{5:[2,33],13:[2,33],15:[2,33],17:[2,33],21:[2,33],22:[2,33],23:[2,33],25:[2,33],26:[2,33],27:[2,33],28:[2,33],29:[2,33],31:[2,33],33:[2,33],35:[2,33],36:80,37:[1,73],38:[1,74],39:[1,75],40:[2,33],41:[2,33],46:[2,33],47:[2,33],48:[2,33],49:[2,33],50:[1,81],52:[2,33],57:[2,33],58:[2,33],60:[2,33],62:[2,33],65:[2,33],67:[2,33],69:[2,33],70:[2,33],71:[2,33]},{12:63,17:[1,14],22:[1,64],31:[1,21],32:22,34:117,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{12:63,17:[1,14],22:[1,64],31:[1,21],32:22,34:118,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,58],13:[2,58],15:[2,58],17:[2,58],21:[2,58],22:[2,58],23:[2,58],25:[2,58],26:[2,58],27:[2,58],28:[2,58],29:[2,58],31:[2,58],33:[2,58],35:[2,58],37:[2,58],38:[2,58],39:[2,58],40:[2,58],41:[2,58],46:[2,58],47:[2,58],48:[2,58],49:[2,58],50:[2,58],52:[2,58],57:[2,58],58:[2,58],60:[2,58],62:[2,58],65:[2,58],67:[2,58],69:[2,58],70:[2,58],71:[2,58]},{5:[2,59],13:[2,59],15:[2,59],17:[2,59],21:[2,59],22:[2,59],23:[2,59],25:[2,59],26:[2,59],27:[2,59],28:[2,59],29:[2,59],31:[2,59],33:[2,59],35:[2,59],37:[2,59],38:[2,59],39:[2,59],40:[2,59],41:[2,59],46:[2,59],47:[2,59],48:[2,59],49:[2,59],50:[2,59],52:[2,59],57:[2,59],58:[2,59],60:[2,59],62:[2,59],65:[2,59],67:[2,59],69:[2,59],70:[2,59],71:[2,59]},{5:[2,37],13:[2,37],15:[2,37],17:[2,37],21:[2,37],22:[2,37],23:[2,37],25:[2,37],26:[2,37],27:[2,37],28:[2,37],29:[2,37],31:[2,37],33:[2,37],35:[2,37],37:[2,37],38:[2,37],39:[2,37],40:[2,37],41:[2,37],46:[2,37],47:[2,37],48:[2,37],49:[2,37],50:[2,37],52:[2,37],55:[2,37],57:[2,37],58:[2,37],60:[2,37],62:[2,37],65:[2,37],67:[2,37],69:[2,37],70:[2,37],71:[2,37]},{5:[2,38],13:[2,38],15:[2,38],17:[2,38],21:[2,38],22:[2,38],23:[2,38],25:[2,38],26:[2,38],27:[2,38],28:[2,38],29:[2,38],31:[2,38],33:[2,38],35:[2,38],37:[2,38],38:[2,38],39:[2,38],40:[2,38],41:[2,38],46:[2,38],47:[2,38],48:[2,38],49:[2,38],50:[2,38],52:[2,38],55:[2,38],57:[2,38],58:[2,38],60:[2,38],62:[2,38],65:[2,38],67:[2,38],69:[2,38],70:[2,38],71:[2,38]},{40:[1,119]},{15:[1,120]},{15:[1,121],23:[1,122]},{5:[2,74],13:[2,74],15:[2,74],17:[2,74],21:[2,74],22:[2,74],23:[2,74],25:[2,74],26:[2,74],27:[2,74],28:[2,74],29:[2,74],31:[2,74],33:[2,74],35:[2,74],36:123,37:[1,73],38:[1,74],39:[1,75],40:[2,74],41:[2,74],46:[2,74],47:[2,74],48:[2,74],49:[2,74],50:[2,74],52:[2,74],57:[2,74],58:[2,74],60:[2,74],62:[2,74],65:[2,74],67:[2,74],69:[2,74],70:[2,74],71:[2,74]},{5:[2,60],13:[2,60],15:[2,60],17:[2,60],21:[2,60],22:[2,60],23:[2,60],25:[2,60],26:[2,60],27:[2,60],28:[2,60],29:[2,60],31:[2,60],33:[2,60],35:[2,60],36:71,37:[1,73],38:[1,74],39:[1,75],40:[2,60],41:[2,60],46:[2,60],47:[2,60],48:[2,60],49:[2,60],50:[1,72],52:[2,60],57:[2,60],58:[2,60],60:[2,60],62:[2,60],65:[2,60],67:[2,60],69:[2,60],70:[2,60],71:[2,60]},{5:[2,48],13:[2,48],15:[2,48],17:[2,48],21:[2,48],22:[2,48],23:[2,48],25:[2,48],26:[2,48],27:[2,48],28:[2,48],29:[2,48],31:[2,48],33:[2,48],35:[2,48],37:[2,48],38:[2,48],39:[2,48],40:[2,48],41:[2,48],46:[2,48],47:[2,48],48:[2,48],49:[2,48],50:[2,48],52:[2,48],57:[2,48],58:[2,48],60:[2,48],62:[2,48],65:[2,48],67:[2,48],69:[2,48],70:[2,48],71:[2,48]},{5:[2,52],13:[2,52],15:[2,52],17:[2,52],21:[2,52],22:[2,52],23:[2,52],25:[2,52],26:[2,52],27:[2,52],28:[2,52],29:[2,52],31:[2,52],33:[2,52],35:[2,52],37:[2,52],38:[2,52],39:[2,52],40:[2,52],41:[2,52],46:[2,52],47:[2,52],48:[2,52],49:[2,52],50:[2,52],52:[2,52],57:[2,52],58:[2,52],60:[2,52],62:[2,52],65:[2,52],67:[2,52],69:[2,52],70:[2,52],71:[2,52]},{41:[1,124]},{47:[1,125]},{4:126,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:127,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:128,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,54],12:63,13:[2,54],15:[2,54],17:[1,14],21:[2,54],22:[1,64],23:[2,54],25:[2,54],26:[2,54],27:[2,54],28:[2,54],29:[2,54],31:[2,54],32:68,33:[1,69],35:[1,70],37:[2,54],38:[2,54],39:[2,54],40:[1,28],41:[2,54],42:24,43:25,44:26,45:27,46:[1,29],47:[2,54],48:[1,30],49:[1,31],50:[2,54],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,54],65:[2,54],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:129,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,79],12:63,13:[2,79],15:[2,79],17:[1,14],21:[2,79],22:[1,64],23:[2,79],25:[2,79],26:[2,79],27:[2,79],28:[2,79],29:[2,79],31:[2,79],32:68,33:[1,69],35:[1,70],37:[2,79],38:[2,79],39:[2,79],40:[1,28],41:[2,79],42:24,43:25,44:26,45:27,46:[1,29],47:[2,79],48:[1,30],49:[1,31],50:[2,79],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,79],65:[2,79],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{40:[1,130]},{12:63,17:[1,14],22:[1,132],30:131,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:133,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,90],12:63,13:[2,90],15:[2,90],17:[1,14],21:[2,90],22:[1,64],23:[2,90],25:[2,90],26:[2,90],27:[2,90],28:[2,90],29:[2,90],31:[2,90],32:68,33:[1,69],35:[1,70],37:[2,90],38:[2,90],39:[2,90],40:[1,28],41:[2,90],42:24,43:25,44:26,45:27,46:[1,29],47:[2,90],48:[1,30],49:[1,31],50:[2,90],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,90],65:[2,90],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{12:63,17:[1,14],22:[1,134],30:135,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{40:[1,136]},{62:[1,137]},{5:[2,66],13:[2,66],15:[2,66],17:[2,66],21:[2,66],22:[2,66],23:[2,66],25:[2,66],26:[2,66],27:[2,66],28:[2,66],29:[2,66],31:[2,66],33:[2,66],35:[2,66],37:[2,66],38:[2,66],39:[2,66],40:[2,66],41:[2,66],46:[2,66],47:[2,66],48:[2,66],49:[2,66],50:[2,66],52:[2,66],57:[2,66],58:[2,66],60:[2,66],62:[2,66],65:[2,66],67:[2,66],69:[2,66],70:[2,66],71:[2,66]},{15:[1,138],62:[2,68]},{15:[2,70],62:[2,70]},{15:[2,72],62:[2,72],65:[1,139]},{13:[1,141],16:140,25:[1,49],26:[1,50],27:[1,51],28:[1,52]},{12:142,17:[1,14],40:[1,143]},{5:[1,144]},{5:[2,14]},{5:[2,40],16:145,17:[2,40],22:[1,60],25:[1,49],26:[1,50],27:[1,51],28:[1,52],29:[2,40],31:[2,40],33:[2,40],35:[2,40],37:[2,40],38:[2,40],39:[2,40],40:[2,40],46:[2,40],48:[2,40],49:[2,40],50:[2,40],52:[2,40],57:[2,40],58:[2,40],60:[2,40],67:[2,40],69:[2,40],70:[2,40],71:[2,40]},{5:[2,27],15:[2,27],16:146,25:[1,49],26:[1,50],27:[1,51],28:[1,52],62:[2,27],65:[2,27]},{1:[2,8]},{5:[2,12]},{5:[2,13]},{15:[1,148],23:[1,147]},{15:[1,150],23:[1,149]},{23:[1,122]},{5:[2,30],12:63,13:[2,30],15:[2,30],17:[1,14],21:[2,30],22:[1,64],23:[2,30],25:[2,30],26:[2,30],27:[2,30],28:[2,30],29:[2,30],31:[2,30],32:68,33:[1,69],35:[1,70],37:[2,30],38:[2,30],39:[2,30],40:[1,28],41:[2,30],42:24,43:25,44:26,45:27,46:[1,29],47:[2,30],48:[1,30],49:[1,31],50:[2,30],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,30],65:[2,30],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,31],12:63,13:[2,31],15:[2,31],17:[1,14],21:[2,31],22:[1,64],23:[2,31],25:[2,31],26:[2,31],27:[2,31],28:[2,31],29:[2,31],31:[2,31],32:68,33:[1,69],35:[1,70],37:[2,31],38:[2,31],39:[2,31],40:[1,28],41:[2,31],42:24,43:25,44:26,45:27,46:[1,29],47:[2,31],48:[1,30],49:[1,31],50:[2,31],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,31],65:[2,31],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,19],15:[2,19]},{4:151,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,34],13:[2,34],15:[2,34],17:[2,34],21:[2,34],22:[2,34],23:[2,34],25:[2,34],26:[2,34],27:[2,34],28:[2,34],29:[2,34],31:[2,34],33:[2,34],35:[2,34],36:71,37:[1,73],38:[1,74],39:[1,75],40:[2,34],41:[2,34],46:[2,34],47:[2,34],48:[2,34],49:[2,34],50:[1,72],52:[2,34],57:[2,34],58:[2,34],60:[2,34],62:[2,34],65:[2,34],67:[2,34],69:[2,34],70:[2,34],71:[2,34]},{5:[2,35],13:[2,35],15:[2,35],17:[2,35],21:[2,35],22:[2,35],23:[2,35],25:[2,35],26:[2,35],27:[2,35],28:[2,35],29:[2,35],31:[2,35],33:[2,35],35:[2,35],36:71,37:[1,73],38:[1,74],39:[1,75],40:[2,35],41:[2,35],46:[2,35],47:[2,35],48:[2,35],49:[2,35],50:[1,72],52:[2,35],57:[2,35],58:[2,35],60:[2,35],62:[2,35],65:[2,35],67:[2,35],69:[2,35],70:[2,35],71:[2,35]},{4:152,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:153,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:154,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,45],13:[2,45],15:[2,45],17:[2,45],21:[2,45],22:[2,45],23:[2,45],25:[2,45],26:[2,45],27:[2,45],28:[2,45],29:[2,45],31:[2,45],33:[2,45],35:[2,45],37:[2,45],38:[2,45],39:[2,45],40:[2,45],41:[2,45],46:[2,45],47:[2,45],48:[2,45],49:[2,45],50:[2,45],52:[2,45],57:[2,45],58:[2,45],60:[2,45],62:[2,45],65:[2,45],67:[2,45],69:[2,45],70:[2,45],71:[2,45]},{5:[2,57],13:[2,57],15:[2,57],17:[2,57],21:[2,57],22:[2,57],23:[2,57],25:[2,57],26:[2,57],27:[2,57],28:[2,57],29:[2,57],31:[2,57],33:[2,57],35:[2,57],37:[2,57],38:[2,57],39:[2,57],40:[2,57],41:[2,57],46:[2,57],47:[2,57],48:[2,57],49:[2,57],50:[2,57],52:[2,57],57:[2,57],58:[2,57],60:[2,57],62:[2,57],65:[2,57],67:[2,57],69:[2,57],70:[2,57],71:[2,57]},{5:[2,46],13:[2,46],15:[2,46],17:[2,46],21:[2,46],22:[2,46],23:[2,46],25:[2,46],26:[2,46],27:[2,46],28:[2,46],29:[2,46],31:[2,46],33:[2,46],35:[2,46],37:[2,46],38:[2,46],39:[2,46],40:[2,46],41:[2,46],46:[2,46],47:[2,46],48:[2,46],49:[2,46],50:[2,46],52:[2,46],57:[2,46],58:[2,46],60:[2,46],62:[2,46],65:[2,46],67:[2,46],69:[2,46],70:[2,46],71:[2,46]},{5:[2,47],13:[2,47],15:[2,47],17:[2,47],21:[2,47],22:[2,47],23:[2,47],25:[2,47],26:[2,47],27:[2,47],28:[2,47],29:[2,47],31:[2,47],33:[2,47],35:[2,47],37:[2,47],38:[2,47],39:[2,47],40:[2,47],41:[2,47],46:[2,47],47:[2,47],48:[2,47],49:[2,47],50:[2,47],52:[2,47],57:[2,47],58:[2,47],60:[2,47],62:[2,47],65:[2,47],67:[2,47],69:[2,47],70:[2,47],71:[2,47]},{41:[1,155]},{41:[1,156]},{21:[1,157]},{23:[1,158]},{31:[1,159]},{5:[2,82],12:63,13:[2,82],15:[2,82],17:[1,14],21:[2,82],22:[1,64],23:[2,82],25:[2,82],26:[2,82],27:[2,82],28:[2,82],29:[2,82],31:[2,82],32:68,33:[1,69],35:[1,70],37:[2,82],38:[2,82],39:[2,82],40:[1,28],41:[2,82],42:24,43:25,44:26,45:27,46:[1,29],47:[2,82],48:[1,30],49:[1,31],50:[2,82],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,82],65:[2,82],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:160,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{23:[1,161]},{4:162,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,92],12:63,13:[2,92],15:[2,92],17:[1,14],21:[2,92],22:[1,64],23:[2,92],25:[2,92],26:[2,92],27:[2,92],28:[2,92],29:[2,92],31:[2,92],32:68,33:[1,69],35:[1,70],37:[2,92],38:[2,92],39:[2,92],40:[1,28],41:[2,92],42:24,43:25,44:26,45:27,46:[1,29],47:[2,92],48:[1,30],49:[1,31],50:[2,92],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,92],65:[2,92],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{12:163,17:[1,14]},{5:[2,65],13:[2,65],15:[2,65],17:[2,65],21:[2,65],22:[2,65],23:[2,65],25:[2,65],26:[2,65],27:[2,65],28:[2,65],29:[2,65],31:[2,65],33:[2,65],35:[2,65],37:[2,65],38:[2,65],39:[2,65],40:[2,65],41:[2,65],46:[2,65],47:[2,65],48:[2,65],49:[2,65],50:[2,65],52:[2,65],57:[2,65],58:[2,65],60:[2,65],62:[2,65],65:[2,65],67:[2,65],69:[2,65],70:[2,65],71:[2,65]},{4:164,11:100,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],64:165,66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:166,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:106,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:167,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{17:[2,87],22:[2,87],31:[2,87],37:[2,87],40:[2,87],46:[2,87],48:[2,87],49:[2,87],52:[2,87],55:[2,87],57:[2,87],58:[2,87],60:[2,87],67:[2,87],69:[2,87],70:[2,87],71:[2,87]},{4:168,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{1:[2,10]},{4:169,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:170,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,93],13:[2,93],15:[2,93],17:[2,93],21:[2,93],22:[2,93],23:[2,93],25:[2,93],26:[2,93],27:[2,93],28:[2,93],29:[2,93],31:[2,93],33:[2,93],35:[2,93],37:[2,93],38:[2,93],39:[2,93],40:[2,93],41:[2,93],46:[2,93],47:[2,93],48:[2,93],49:[2,93],50:[2,93],52:[2,93],57:[2,93],58:[2,93],60:[2,93],62:[2,93],65:[2,93],67:[2,93],69:[2,93],70:[2,93],71:[2,93]},{4:171,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,76],13:[2,76],15:[2,76],17:[2,76],21:[2,76],22:[2,76],23:[2,76],25:[2,76],26:[2,76],27:[2,76],28:[2,76],29:[2,76],31:[2,76],33:[2,76],35:[2,76],36:172,37:[1,73],38:[1,74],39:[1,75],40:[2,76],41:[2,76],46:[2,76],47:[2,76],48:[2,76],49:[2,76],50:[2,76],52:[2,76],57:[2,76],58:[2,76],60:[2,76],62:[2,76],65:[2,76],67:[2,76],69:[2,76],70:[2,76],71:[2,76]},{4:173,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{15:[1,121]},{41:[1,174]},{21:[1,175]},{23:[1,176]},{40:[1,177]},{5:[2,50],13:[2,50],15:[2,50],17:[2,50],21:[2,50],22:[2,50],23:[2,50],25:[2,50],26:[2,50],27:[2,50],28:[2,50],29:[2,50],31:[2,50],33:[2,50],35:[2,50],37:[2,50],38:[2,50],39:[2,50],40:[2,50],41:[2,50],46:[2,50],47:[2,50],48:[2,50],49:[2,50],50:[2,50],52:[2,50],57:[2,50],58:[2,50],60:[2,50],62:[2,50],65:[2,50],67:[2,50],69:[2,50],70:[2,50],71:[2,50]},{40:[1,178]},{5:[2,78],13:[2,78],15:[2,78],17:[2,78],21:[2,78],22:[2,78],23:[2,78],25:[2,78],26:[2,78],27:[2,78],28:[2,78],29:[2,78],31:[2,78],33:[2,78],35:[2,78],37:[2,78],38:[2,78],39:[2,78],40:[2,78],41:[2,78],46:[2,78],47:[2,78],48:[2,78],49:[2,78],50:[2,78],52:[2,78],57:[2,78],58:[2,78],60:[2,78],62:[2,78],65:[2,78],67:[2,78],69:[2,78],70:[2,78],71:[2,78]},{31:[1,180],54:179,55:[1,23]},{23:[1,181]},{5:[2,89],13:[2,89],15:[2,89],17:[2,89],21:[2,89],22:[2,89],23:[2,89],25:[2,89],26:[2,89],27:[2,89],28:[2,89],29:[2,89],31:[2,89],33:[2,89],35:[2,89],37:[2,89],38:[2,89],39:[2,89],40:[2,89],41:[2,89],46:[2,89],47:[2,89],48:[2,89],49:[2,89],50:[2,89],52:[2,89],57:[2,89],58:[2,89],60:[2,89],62:[2,89],65:[2,89],67:[2,89],69:[2,89],70:[2,89],71:[2,89]},{23:[1,182]},{13:[1,183]},{13:[1,141],16:140,25:[1,49],26:[1,50],27:[1,51],28:[1,52],62:[2,67]},{15:[2,69],62:[2,69]},{15:[2,71],62:[2,71]},{15:[2,28],62:[2,28],65:[2,28]},{41:[1,184]},{5:[2,15]},{5:[2,29],15:[2,29],62:[2,29],65:[2,29]},{15:[2,94],23:[2,94]},{5:[2,75],13:[2,75],15:[2,75],17:[2,75],21:[2,75],22:[2,75],23:[2,75],25:[2,75],26:[2,75],27:[2,75],28:[2,75],29:[2,75],31:[2,75],33:[2,75],35:[2,75],37:[2,75],38:[2,75],39:[2,75],40:[2,75],41:[2,75],46:[2,75],47:[2,75],48:[2,75],49:[2,75],50:[2,75],52:[2,75],57:[2,75],58:[2,75],60:[2,75],62:[2,75],65:[2,75],67:[2,75],69:[2,75],70:[2,75],71:[2,75]},{15:[2,95],23:[2,95]},{5:[2,39],13:[2,39],15:[2,39],17:[2,39],21:[2,39],22:[2,39],23:[2,39],25:[2,39],26:[2,39],27:[2,39],28:[2,39],29:[2,39],31:[2,39],33:[2,39],35:[2,39],37:[2,39],38:[2,39],39:[2,39],40:[2,39],41:[2,39],46:[2,39],47:[2,39],48:[2,39],49:[2,39],50:[2,39],52:[2,39],55:[2,39],57:[2,39],58:[2,39],60:[2,39],62:[2,39],65:[2,39],67:[2,39],69:[2,39],70:[2,39],71:[2,39]},{5:[2,20],15:[2,20]},{5:[2,21],15:[2,21]},{4:185,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:186,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{41:[1,187]},{55:[1,188]},{5:[2,83],13:[2,83],15:[2,83],17:[2,83],21:[2,83],22:[2,83],23:[2,83],25:[2,83],26:[2,83],27:[2,83],28:[2,83],29:[2,83],31:[2,83],33:[2,83],35:[2,83],37:[2,83],38:[2,83],39:[2,83],40:[2,83],41:[2,83],46:[2,83],47:[2,83],48:[2,83],49:[2,83],50:[2,83],52:[2,83],57:[2,83],58:[2,83],60:[2,83],62:[2,83],65:[2,83],67:[2,83],69:[2,83],70:[2,83],71:[2,83]},{5:[2,91],13:[2,91],15:[2,91],17:[2,91],21:[2,91],22:[2,91],23:[2,91],25:[2,91],26:[2,91],27:[2,91],28:[2,91],29:[2,91],31:[2,91],33:[2,91],35:[2,91],37:[2,91],38:[2,91],39:[2,91],40:[2,91],41:[2,91],46:[2,91],47:[2,91],48:[2,91],49:[2,91],50:[2,91],52:[2,91],57:[2,91],58:[2,91],60:[2,91],62:[2,91],65:[2,91],67:[2,91],69:[2,91],70:[2,91],71:[2,91]},{4:189,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{17:[2,88],22:[2,88],31:[2,88],37:[2,88],40:[2,88],46:[2,88],48:[2,88],49:[2,88],52:[2,88],55:[2,88],57:[2,88],58:[2,88],60:[2,88],67:[2,88],69:[2,88],70:[2,88],71:[2,88]},{41:[1,190]},{41:[1,191]},{12:63,17:[1,14],22:[1,193],30:192,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{41:[2,74]},{41:[1,194]},{5:[2,49],13:[2,49],15:[2,49],17:[2,49],21:[2,49],22:[2,49],23:[2,49],25:[2,49],26:[2,49],27:[2,49],28:[2,49],29:[2,49],31:[2,49],33:[2,49],35:[2,49],37:[2,49],38:[2,49],39:[2,49],40:[2,49],41:[2,49],46:[2,49],47:[2,49],48:[2,49],49:[2,49],50:[2,49],52:[2,49],57:[2,49],58:[2,49],60:[2,49],62:[2,49],65:[2,49],67:[2,49],69:[2,49],70:[2,49],71:[2,49]},{5:[2,51],13:[2,51],15:[2,51],17:[2,51],21:[2,51],22:[2,51],23:[2,51],25:[2,51],26:[2,51],27:[2,51],28:[2,51],29:[2,51],31:[2,51],33:[2,51],35:[2,51],37:[2,51],38:[2,51],39:[2,51],40:[2,51],41:[2,51],46:[2,51],47:[2,51],48:[2,51],49:[2,51],50:[2,51],52:[2,51],57:[2,51],58:[2,51],60:[2,51],62:[2,51],65:[2,51],67:[2,51],69:[2,51],70:[2,51],71:[2,51]},{5:[2,80],12:63,13:[2,80],15:[2,80],17:[1,14],21:[2,80],22:[1,64],23:[2,80],25:[2,80],26:[2,80],27:[2,80],28:[2,80],29:[2,80],31:[2,80],32:68,33:[1,69],35:[1,70],37:[2,80],38:[2,80],39:[2,80],40:[1,28],41:[2,80],42:24,43:25,44:26,45:27,46:[1,29],47:[2,80],48:[1,30],49:[1,31],50:[2,80],51:32,52:[1,33],53:34,56:37,57:[1,43],58:[1,44],60:[1,38],62:[2,80],65:[2,80],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{4:195,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{36:196,37:[1,73],38:[1,74],39:[1,75]},{23:[1,197]},{4:198,12:63,17:[1,14],22:[1,64],24:12,30:15,31:[1,21],32:22,34:17,40:[1,28],42:24,43:25,44:26,45:27,46:[1,29],48:[1,30],49:[1,31],51:32,52:[1,33],53:34,54:20,55:[1,23],56:37,57:[1,43],58:[1,44],60:[1,38],66:35,67:[1,39],68:36,69:[1,40],70:[1,41],71:[1,42]},{5:[2,81],13:[2,81],15:[2,81],17:[2,81],21:[2,81],22:[2,81],23:[2,81],25:[2,81],26:[2,81],27:[2,81],28:[2,81],29:[2,81],31:[2,81],33:[2,81],35:[2,81],37:[2,81],38:[2,81],39:[2,81],40:[2,81],41:[2,81],46:[2,81],47:[2,81],48:[2,81],49:[2,81],50:[2,81],52:[2,81],57:[2,81],58:[2,81],60:[2,81],62:[2,81],65:[2,81],67:[2,81],69:[2,81],70:[2,81],71:[2,81]},{5:[2,64],13:[2,64],15:[2,64],17:[2,64],21:[2,64],22:[2,64],23:[2,64],25:[2,64],26:[2,64],27:[2,64],28:[2,64],29:[2,64],31:[2,64],33:[2,64],35:[2,64],37:[2,64],38:[2,64],39:[2,64],40:[2,64],41:[2,64],46:[2,64],47:[2,64],48:[2,64],49:[2,64],50:[2,64],52:[2,64],57:[2,64],58:[2,64],60:[2,64],62:[2,64],65:[2,64],67:[2,64],69:[2,64],70:[2,64],71:[2,64]}],
defaultActions: {11:[2,11],43:[2,62],44:[2,63],45:[2,1],53:[2,2],54:[2,3],55:[2,4],56:[2,5],57:[2,6],58:[2,7],61:[2,9],62:[2,96],104:[2,14],107:[2,8],108:[2,12],109:[2,13],144:[2,10],169:[2,15],188:[2,74]},
parseError: function parseError(str, hash) {
    throw new Error(str);
},
parse: function parse(input) {
    var self = this,
        stack = [0],
        vstack = [null], // semantic value stack
        lstack = [], // location stack
        table = this.table,
        yytext = '',
        yylineno = 0,
        yyleng = 0,
        recovering = 0,
        TERROR = 2,
        EOF = 1;

    //this.reductionCount = this.shiftCount = 0;

    this.lexer.setInput(input);
    this.lexer.yy = this.yy;
    this.yy.lexer = this.lexer;
    this.yy.parser = this;
    if (typeof this.lexer.yylloc == 'undefined')
        this.lexer.yylloc = {};
    var yyloc = this.lexer.yylloc;
    lstack.push(yyloc);

    var ranges = this.lexer.options && this.lexer.options.ranges;

    if (typeof this.yy.parseError === 'function')
        this.parseError = this.yy.parseError;

    function popStack (n) {
        stack.length = stack.length - 2*n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }

    function lex() {
        var token;
        token = self.lexer.lex() || 1; // $end = 1
        // if token isn't its numeric value, convert
        if (typeof token !== 'number') {
            token = self.symbols_[token] || token;
        }
        return token;
    }

    var symbol, preErrorSymbol, state, action, a, r, yyval={},p,len,newState, expected;
    while (true) {
        // retreive state number from top of stack
        state = stack[stack.length-1];

        // use default actions if available
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            // read action for current state and first input
            action = table[state] && table[state][symbol];
        }

        // handle parse error
        _handle_error:
        if (typeof action === 'undefined' || !action.length || !action[0]) {

            var errStr = '';
            if (!recovering) {
                // Report error
                expected = [];
                for (p in table[state]) if (this.terminals_[p] && p > 2) {
                    expected.push("'"+this.terminals_[p]+"'");
                }
                if (this.lexer.showPosition) {
                    errStr = 'Parse error on line '+(yylineno+1)+":\n"+this.lexer.showPosition()+"\nExpecting "+expected.join(', ') + ", got '" + (this.terminals_[symbol] || symbol)+ "'";
                } else {
                    errStr = 'Parse error on line '+(yylineno+1)+": Unexpected " +
                                  (symbol == 1 /*EOF*/ ? "end of input" :
                                              ("'"+(this.terminals_[symbol] || symbol)+"'"));
                }
                this.parseError(errStr,
                    {text: this.lexer.match, token: this.terminals_[symbol] || symbol, line: this.lexer.yylineno, loc: yyloc, expected: expected});
            }

            // just recovered from another error
            if (recovering == 3) {
                if (symbol == EOF) {
                    throw new Error(errStr || 'Parsing halted.');
                }

                // discard current lookahead and grab another
                yyleng = this.lexer.yyleng;
                yytext = this.lexer.yytext;
                yylineno = this.lexer.yylineno;
                yyloc = this.lexer.yylloc;
                symbol = lex();
            }

            // try to recover from error
            while (1) {
                // check for error recovery rule in this state
                if ((TERROR.toString()) in table[state]) {
                    break;
                }
                if (state === 0) {
                    throw new Error(errStr || 'Parsing halted.');
                }
                popStack(1);
                state = stack[stack.length-1];
            }

            preErrorSymbol = symbol == 2 ? null : symbol; // save the lookahead token
            symbol = TERROR;         // insert generic error symbol as new lookahead
            state = stack[stack.length-1];
            action = table[state] && table[state][TERROR];
            recovering = 3; // allow 3 real symbols to be shifted before reporting a new error
        }

        // this shouldn't happen, unless resolve defaults are off
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: '+state+', token: '+symbol);
        }

        switch (action[0]) {

            case 1: // shift
                //this.shiftCount++;

                stack.push(symbol);
                vstack.push(this.lexer.yytext);
                lstack.push(this.lexer.yylloc);
                stack.push(action[1]); // push state
                symbol = null;
                if (!preErrorSymbol) { // normal execution/no error
                    yyleng = this.lexer.yyleng;
                    yytext = this.lexer.yytext;
                    yylineno = this.lexer.yylineno;
                    yyloc = this.lexer.yylloc;
                    if (recovering > 0)
                        recovering--;
                } else { // error just occurred, resume old lookahead f/ before error
                    symbol = preErrorSymbol;
                    preErrorSymbol = null;
                }
                break;

            case 2: // reduce
                //this.reductionCount++;

                len = this.productions_[action[1]][1];

                // perform semantic action
                yyval.$ = vstack[vstack.length-len]; // default to $$ = $1
                // default location, uses first token for firsts, last for lasts
                yyval._$ = {
                    first_line: lstack[lstack.length-(len||1)].first_line,
                    last_line: lstack[lstack.length-1].last_line,
                    first_column: lstack[lstack.length-(len||1)].first_column,
                    last_column: lstack[lstack.length-1].last_column
                };
                if (ranges) {
                  yyval._$.range = [lstack[lstack.length-(len||1)].range[0], lstack[lstack.length-1].range[1]];
                }
                r = this.performAction.call(yyval, yytext, yyleng, yylineno, this.yy, action[1], vstack, lstack);

                if (typeof r !== 'undefined') {
                    return r;
                }

                // pop off stack
                if (len) {
                    stack = stack.slice(0,-1*len*2);
                    vstack = vstack.slice(0, -1*len);
                    lstack = lstack.slice(0, -1*len);
                }

                stack.push(this.productions_[action[1]][0]);    // push nonterminal (reduce)
                vstack.push(yyval.$);
                lstack.push(yyval._$);
                // goto new state = table[STATE][NONTERMINAL]
                newState = table[stack[stack.length-2]][stack[stack.length-1]];
                stack.push(newState);
                break;

            case 3: // accept
                return true;
        }

    }

    return true;
}};
/* Jison generated lexer */
var lexer = (function(){
var lexer = ({EOF:1,
parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },
setInput:function (input) {
        this._input = input;
        this._more = this._less = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {first_line:1,first_column:0,last_line:1,last_column:0};
        if (this.options.ranges) this.yylloc.range = [0,0];
        this.offset = 0;
        return this;
    },
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) this.yylloc.range[1]++;

        this._input = this._input.slice(1);
        return ch;
    },
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length-len-1);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length-1);
        this.matched = this.matched.substr(0, this.matched.length-1);

        if (lines.length-1) this.yylineno -= lines.length-1;
        var r = this.yylloc.range;

        this.yylloc = {first_line: this.yylloc.first_line,
          last_line: this.yylineno+1,
          first_column: this.yylloc.first_column,
          last_column: lines ?
              (lines.length === oldLines.length ? this.yylloc.first_column : 0) + oldLines[oldLines.length - lines.length].length - lines[0].length:
              this.yylloc.first_column - len
          };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        return this;
    },
more:function () {
        this._more = true;
        return this;
    },
less:function (n) {
        this.unput(this.match.slice(n));
    },
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20)+(next.length > 20 ? '...':'')).replace(/\n/g, "");
    },
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c+"^";
    },
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) this.done = true;

        var token,
            match,
            tempMatch,
            index,
            col,
            lines;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i=0;i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (!this.options.flex) break;
            }
        }
        if (match) {
            lines = match[0].match(/(?:\r\n?|\n).*/g);
            if (lines) this.yylineno += lines.length;
            this.yylloc = {first_line: this.yylloc.last_line,
                           last_line: this.yylineno+1,
                           first_column: this.yylloc.last_column,
                           last_column: lines ? lines[lines.length-1].length-lines[lines.length-1].match(/\r?\n?/)[0].length : this.yylloc.last_column + match[0].length};
            this.yytext += match[0];
            this.match += match[0];
            this.matches = match;
            this.yyleng = this.yytext.length;
            if (this.options.ranges) {
                this.yylloc.range = [this.offset, this.offset += this.yyleng];
            }
            this._more = false;
            this._input = this._input.slice(match[0].length);
            this.matched += match[0];
            token = this.performAction.call(this, this.yy, this, rules[index],this.conditionStack[this.conditionStack.length-1]);
            if (this.done && this._input) this.done = false;
            if (token) return token;
            else return;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line '+(this.yylineno+1)+'. Unrecognized text.\n'+this.showPosition(),
                    {text: "", token: null, line: this.yylineno});
        }
    },
lex:function lex() {
        var r = this.next();
        if (typeof r !== 'undefined') {
            return r;
        } else {
            return this.lex();
        }
    },
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },
popState:function popState() {
        return this.conditionStack.pop();
    },
_currentRules:function _currentRules() {
        return this.conditions[this.conditionStack[this.conditionStack.length-1]].rules;
    },
topState:function () {
        return this.conditionStack[this.conditionStack.length-2];
    },
pushState:function begin(condition) {
        this.begin(condition);
    }});
lexer.options = {};
lexer.performAction = function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {

var YYSTATE=YY_START
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:return 40
break;
case 2:return 41
break;
case 3:return 'MATH_SHIFT'
break;
case 4:yy_.yytext = this.matches[this.matches.length - 1]; return 37
break;
case 5:yy_.yytext = this.matches[this.matches.length - 1]; return 38
break;
case 6:return 39
break;
case 7:return 55
break;
case 8:return 33
break;
case 9:return 35
break;
case 10:yy_.yytext = this.matches[3]; return 52
break;
case 11:yy_.yytext = this.matches[this.matches.length - 1]; return 71
break;
case 12:return 69
break;
case 13:return 70
break;
case 14:return 48
break;
case 15:return 49
break;
case 16:return 57
break;
case 17:return 58
break;
case 18:return 46  /* rely on mathquill */
break;
case 19:return 47 /* for pairing */
break;
case 20:return 31
break;
case 21:return 29
break;
case 22:return 13
break;
case 23:return 59
break;
case 24:return 50
break;
case 25:return 5
break;
case 26:return 22
break;
case 27:return 23
break;
case 28:return 20
break;
case 29:return 21
break;
case 30:return 60
break;
case 31:return 62
break;
case 32:return 65
break;
case 33:return 27
break;
case 34:return 28
break;
case 35:return 26
break;
case 36:return 25
break;
case 37:return 15
break;
case 38:return 14 
break;
case 39:return 67        /* sin, cos, sinh, ln*/
break;
case 40:return 17          /* Predefined functions, as well as user-defined variables.  Doesn't include subscripts */
break;
case 41:/* skip LINE_START if it's not needed for something else */
break;
case 42:return 'UNRECOGNIZED'
break;
}
};
lexer.rules = [/^(?:(\\space|\\:|\s)+)/,/^(?:\{)/,/^(?:\})/,/^(?:\$)/,/^(?:\^([0-9]))/,/^(?:\^([a-zA-Z]))/,/^(?:\^)/,/^(?:[0-9]+(\.[0-9]+)?|(\.[0-9]+))/,/^(?:\*|(\\cdot))/,/^(?:\/)/,/^(?:(\\frac((?:\s|\\space|\\:)*)\{d\}\{d(((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?))\}))/,/^(?:(\\log)((?:\s|\\space|\\:)*)*_([0-9]))/,/^(?:(\\ln))/,/^(?:(\\log))/,/^(?:(\\frac))/,/^(?:(\\sqrt))/,/^(?:(\\sum))/,/^(?:(\\prod))/,/^(?:\\left\|)/,/^(?:\\right\|)/,/^(?:-)/,/^(?:\+)/,/^(?:=)/,/^(?:[_])/,/^(?:!)/,/^(?:$)/,/^(?:(\()|\\left\()/,/^(?:(\))|\\right\))/,/^(?:(\[)|\\left\[)/,/^(?:(\])|\\right\])/,/^(?:(\\\{)|\\left\\\{)/,/^(?:(\\\})|\\right\\\})/,/^(?::)/,/^(?:(\\ge|>=))/,/^(?:(\\le|<=))/,/^(?:(\\gt|>))/,/^(?:(\\lt|<))/,/^(?:,)/,/^(?:(###)(((?:\s|\\space|\\:)*)((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)((?:\s|\\space|\\:)*)(\\left\(|\()((?:\s|\\space|\\:)*)((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)(((?:\s|\\space|\\:)*),((?:\s|\\space|\\:)*)((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?)((?:\s|\\space|\\:)*))*((?:\s|\\space|\\:)*)(\\right\)|\))((?:\s|\\space|\\:)*)=))/,/^(?:(\\(arc)?(sin|cos|tan|cot|sec|csc)h?))/,/^(?:((\\[a-zA-Z]+|[a-zA-Z])(_[a-zA-Z0-9]|_\{[a-zA-Z0-9]+\})?))/,/^(?:(###))/,/^(?:.)/];
lexer.conditions = {"conditional":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42],"inclusive":true}};
return lexer;})()
parser.lexer = lexer;
return parser;
});
define('math/inverses',[],function () {
  var inverses = {};

  // Functions with an inverse spelled arcname
  var arcNames = [
    'sin',
    'cos',
    'tan',
    'cot',
    'sec',
    'csc',
    'sinh',
    'cosh',
    'tanh',
    'coth',
    'sech',
    'csch'
  ];

  arcNames.forEach(function (name) {
    inverses[name] = 'arc' + name;
    inverses['arc' + name] = name;
  });

  return inverses;
});
var define_enum_constant;
var enum_strings = {};
var debuggable_enums = true;

if(debuggable_enums){
  define_enum_constant = function(s){
    this[s] = s;
  };
}
else{
  var next_enum = 1000;
  define_enum_constant = function(s){
    enum_strings[next_enum] = s;
    this[s] = next_enum++;
  };
}

//Statement types (determined entirely from the root element of the parse tree)
define_enum_constant("EXPRESSION");              //a+1 or 1+1
define_enum_constant("FUNCTION_DEFINITION");     //f(x)=???
define_enum_constant("VARIABLE_DEFINITION");     //a=???
define_enum_constant("ORDERED_PAIR_LIST");     // (?, ?), (?, ?).  Support lists of points, but only single parametrics
define_enum_constant("DOUBLE_INEQUALITY");       // expr < y < expr, shade-between
define_enum_constant("COMPARATOR");       // expr < expr - unsolved inequality
define_enum_constant("CHAINED_COMPARATOR");       // a < ??? - not a conditional as an expression
define_enum_constant("EQUATION");         // expr = expr
define_enum_constant("CONSTANT");
define_enum_constant("IDENTIFIER");

define("math/enums", function(){});

define('math/parser_util',['require','pjs','./evalframe','./comparators','parser','./inverses','./builtin','./enums'],function(require){
  /* jshint maxlen: false */
  var P = require('pjs');
  var EvalFrame = require('./evalframe');
  var Comparators = require('./comparators');
  var latex = require('parser');
  var inverses = require('./inverses');
  var BuiltIn = require('./builtin');
  require('./enums');

var exports = {};

latex.yy.inverses = inverses;

var ParseNode = exports.ParseNode = P(function (node) {
  node.init = function () {
    this._dependencies = {};
    this._referencedSymbols = {};
  };
  //TODO - consider just storing ranges, and linking them to the latex string at request time
  node.setInputString = function (s) {
    this._inputString = s;
  };
  node.getInputString = function () {
    return this._inputString;
  };
  node.statementType = EXPRESSION;
  node.assigns = null;
  node.valid = true;
  node.exportDefinitionsTo = function (frame, compiler) {};
  node.evaluateOnce = function (frame) {return "Unable to evaluate"};
  node.addDependency = function (identifier, arity) {
    //_dependency stores the identifiers which are depended on, as well as their required arity/type
    //0 => variable
    //1 => ambiguous between unary function and implicit multiplication
    //n>1 => function of arity n
    this.referenceSymbol(identifier);
  
    if(!this._dependencies.hasOwnProperty(identifier)) { //New dependency
      this._dependencies[identifier] = arity;
      return;
    }

    //We already depend on this, need to make sure new and old dependencies are consistent
    var prior_arity = this._dependencies[identifier];

    if (arity === prior_arity) { return } //Consistent - no change to dependency structure

    if (arity === 1 && prior_arity === 0) { return } //New ambiguous entry is consistent with prior variable definition

    if (arity === 0 && prior_arity === 1) {
      this._dependencies[identifier] = arity;  //Dependency on identifier as a variable resolves previous ambiguity
      return;
    }

    if (arity === 0 || prior_arity === 0) {
      throw("You're referencing '" + identifier + "' as both a function and a variable. Make up your mind!");
    } else {
      throw("You're referencing '" + identifier + "' as both a " + prior_arity + "-variable and a " + arity + "-variable function. Make up your mind!");
    }
  };

  node.referenceSymbol = function (identifier) {
    this._referencedSymbols[identifier] = true;
  };

  node.shadowVariable = function (identifier) {
    this.referenceSymbol(identifier);
    if(!this._dependencies.hasOwnProperty(identifier)) return;

    var prior_arity = this._dependencies[identifier];
    if(prior_arity <= 1) {
      delete this._dependencies[identifier];
      return;
    }
    throw("Cannot redefine function "+identifier+" as a variable");
  };

  node.addDependencies = function (dependencies) {
    for (var identifier in dependencies) {
      if(!dependencies.hasOwnProperty(identifier)) continue;

      var arity = dependencies[identifier];
      this.addDependency(identifier, arity);
    }
  };

  //Used to determine re-computation dependencies
  //Needs to be different than dependencies, because f(a)=a doesn't depend on a, but throws an error when a is defined
  node.references = function (identifier) {
    if(this._referencedSymbols[identifier]) return true; //For shadowed varibles, etc.
  };

  node.dependencies = function () {
    return this._dependencies;
  };

  node.getEvalStrings = function () {
    throw("Cannot call getEvalStrings on base ParseNode");
  };

  node.polynomialOrder = function () {
    return Infinity;
  };

  //Generate non-colliding names
  //To play it safe, we want to never re-use temp variables;
  //This shouldn't wrap around until 2^52.  2^52 microseconds is 142 years.
  //All variables will be of the form tmp123, which we don't allow as a real variable name
  node.uid_counter = [0]; //Same reference for everyone
  node.tmp = function () {
    return 'tmp'+this.uid_counter[0]++;
  };

  node.okForImplicitFunction = function () {
    return false;
  };
 
});

exports.AssignmentNode = P(ParseNode, function (node, _super) {
  node.init = function (identifier, expression) {
    _super.init.call(this);
    this.assigns = identifier;
    this.referenceSymbol(this.assigns.identifier);
    this.arity = 0;
    this.expression = expression;
    this.addDependencies(expression.dependencies());
    this.lhs = identifier; //masquerade as equation
    this.rhs = expression; //masquerade as equation
    //Decide if we should act as an assignment or an equation
    //TODO - may want this policy to live somewhere else
    //Current policy is just whether we have a circular dependency
    if(this.dependencies().hasOwnProperty(this.assigns.identifier)) {
      this.statementType = EQUATION;
    }
  };
  node.statementType = VARIABLE_DEFINITION;
  node.evaluateOnce = function (frame) {
    return this.expression.evaluateOnce(frame);
  };
  node.exportDefinitionsTo = function (frame, compiler) {  //Uses the same frame as evaluation context
    if(this.statementType === EQUATION) return;
    try{
      var constant_value = this.expression.evaluateOnce(frame);
      var constant_node = ConstantNode(constant_value);
      frame.setVariable(this.assigns.identifier, constant_node);
      frame.setEvalStrings(this.assigns.identifier, constant_node.getEvalStrings(frame));
    }
    catch(e) {
      frame.setVariable(this.assigns.identifier, this.expression);
      frame.setEvalStrings(this.assigns.identifier, this.expression.getEvalStrings(frame));
    }
  };
  node.getEvalStrings = function (frame) {
    if(this.statementType === EQUATION) return _super.getEvalStrings(frame);
    return this.expression.getEvalStrings(frame);
  };
  
  node.toString = function () {
    return this.assigns + ' = ' + this.expression;
  };
});

exports.DoubleInequalityNode = P(ParseNode, function (node, _super) {
  node.init = function (expression1, comparator1, expressionm, comparator2, expression2) {
    _super.init.call(this);
    this._inequalities = [];

    if(Comparators.table[comparator1].direction != Comparators.table[comparator2].direction) {
      throw "Double inequalities must both go the same way, e.g. 1 < y < 2"; //TODO - need better error message
    }

    this.direction = Comparators.table[comparator1].direction;
    this.inclusive = (
        Comparators.table[comparator1].inclusive &&
        Comparators.table[comparator2].inclusive
    );
    var validity_comparator = Comparators.get(this.inclusive, this.direction);

    var valid_predicate = ComparatorNode(validity_comparator, expression1, expression2);
    var expression1_valid = PiecewiseNode(valid_predicate, expression1);
    var expression2_valid = PiecewiseNode(valid_predicate, expression2);

    this._inequalities.push(ComparatorNode(comparator1, expressionm,  expression1_valid)); //TODO - invert comparator
    this._inequalities.push(ComparatorNode(comparator2, expressionm, expression2_valid));


    this.addDependencies(expressionm.dependencies());
    this.addDependencies(expression1.dependencies());
    this.addDependencies(expression2.dependencies());

    node.statementType = DOUBLE_INEQUALITY;
  };

  node.getInequality = function (i) {
    return this._inequalities[i];
  };
});

exports.EquationNode = P(ParseNode, function (node, _super) {
  node.init = function (lhs, rhs) {
    _super.init.call(this);
    this.lhs = lhs;
    this.rhs = rhs;
    this.addDependencies(lhs.dependencies());
    this.addDependencies(rhs.dependencies());
  };

  node.statementType = EQUATION;

  node.toString = function () { return this.lhs + ' = ' + this.rhs; };
});

//Represents if-else
var PiecewiseNode = exports.PiecewiseNode = P(ParseNode, function (node, _super) {
  node.init = function (condition, if_expr, else_expr) {
    _super.init.call(this);
    this.condition = condition;
    this.if_expr = if_expr;
    this.frozen = false;
    if(else_expr) {
      this.else_expr = else_expr;
      this.addDependencies(this.else_expr._partial_dependencies());
    }
    this.addDependencies(condition.dependencies());
    this.addDependencies(if_expr.dependencies());
    //TODO - add dependencies
  };

  //Don't want to freeze dependencies while building the if-else chain
  //Only want to freeze once someone else asks about our dependencies, since they won't update in response to changes
  node._partial_dependencies = function () {
    return _super.dependencies;
  };

  //Chained if-else nodes (from {a:b, c:d, e} notation) are created by passing each subsequent clause down the parse tree, updating dependencies as it goes.
  //This is only valid when used "correctly" (e.g. start passing in the from the top node, and only pass during construction, not after use)
  node.append_else = function (else_expr) {
    if(this.frozen) throw("Programming Error - please treat me as immutable.  Cannot change PiecewiseNode after getting dependencies");
    if(this.else_expr) {
      this.else_expr.append_else(else_expr);
    }
    else{
      this.else_expr = else_expr;
    }
    this.addDependencies(else_expr.dependencies());  //Needs to be added to everyone all the way down the if-else chain to have correct dependencies for the whole tree.
    return this;
  };

  node.evaluateOnce = function (frame) {
    this.frozen = true;
    if(this.condition.evaluateOnce(frame)) {
      return this.if_expr.evaluateOnce(frame);
    }
    else if (this.else_expr) {
      return this.else_expr.evaluateOnce(frame);
    }
    return undefined;
  };

  node.getEvalStrings = function (frame) {
    var condition_strings = this.condition.getEvalStrings(frame);
    var if_strings = this.if_expr.getEvalStrings(frame);
    var else_strings;

    if(this.else_expr) {
      else_strings = this.else_expr.getEvalStrings(frame);
    }
    else{
      else_strings = {statements:'', expression:'undefined'};
    }

    var result = this.tmp();
    var statements = 'var '+result+';'+condition_strings.statements+
                     'if('+condition_strings.expression+') {'+
                      if_strings.statements+result+'='+if_strings.expression+
                     ';}else{'+
                      else_strings.statements+result+'='+else_strings.expression+';}';
    return { expression: result, statements: statements };
  };

  node.polynomialOrder = function (frame, variable) {
    if(this.dependencies().hasOwnProperty(variable)) {
      return Infinity;
    }
    else{
      return 0;
    }
  };

  node.quadraticCoefficients = function (frame, variable) {
    return [0, 0, this.evaluateOnce(frame)];
  };

  node.polynomialEvalStrings = function (frame, variable, arg) {
    var eval_strings = this.getEvalStrings(frame);
    return {statements:eval_strings.statements, expressions:[eval_strings.expression]};
  };

  node.toString = function () {

    if (!this.else_expr) {
      return '\\left\\{' +
        this.condition + ': ' + this.if_expr +
        '\\right\\}';
    }

    // Can't reparse literal true, so use special form.
    var elseString;
    if (this.else_expr.condition && this.else_expr.condition.value === true) {
      elseString = String(this.else_expr.if_expr);
    } else {
      // Unwind elses
      elseString = String(this.else_expr).replace(/^\\left\\\{(.*)\\right\\\}$/, '$1');
    }

    return '\\left\\{' +
      this.condition + ': ' + this.if_expr + ', ' + elseString +
      '\\right\\}';
  };

});

exports.OrderedPairNode = P(ParseNode, function (node, _super) {
  node.init = function (first, second) {
    _super.init.call(this);
    this.children = [first, second];
    this.addDependencies(first.dependencies());
    this.addDependencies(second.dependencies());
  };

  node.getEvalStrings = function (frame) {
    var first_strings = this.children[0].getEvalStrings(frame);
    var second_strings = this.children[1].getEvalStrings(frame);
    var statements = first_strings.statements + second_strings.statements;
    var expression = '['+first_strings.expression+','+second_strings.expression+']';
    return {statements: statements, expression:expression};
  };

  node.evaluateOnce = function (frame) {
    return [this.children[0].evaluateOnce(frame), this.children[1].evaluateOnce(frame)];
  };
  
  this.toString = function () {
    return '\\left(' +
      this.children[0] + ', ' +
      this.children[1] +
    '\\right)';
  };
});

var ErrorNode = exports.ErrorNode = P(ParseNode, function (node, _super) {
  node.init = function (msg) {
    _super.init.call(this);
    this.error_msg = msg;
  };
  node.valid = false;

  this.evaluateOnce = function (frame) {
    return this.error_msg;
  };
});

var ConstantNode = exports.ConstantNode = P(ParseNode, function (node, _super) {
  node.init = function (value) {
    _super.init.call(this);
    this.value = value;
  };
  node.evaluateOnce = function (frame) {
    return this.value;
  };
  node.getEvalStrings = function () {
    var statements = '';
    var expression = (this.value < 0 ? '('+String(this.value)+')' : String(this.value));
    return {expression:expression, statements:statements};
  };
  node.quadraticCoefficients = function (frame, variable) {
    return [0, 0, this.value];
  };
  node.polynomialEvalStrings = function (frame, variable, arg) {
    return {statements:'', expressions:['('+String(this.value)+')']};
  };

  node.polynomialOrder = function (frame, variable) {
    return 0;
  };

  node.okForImplicitFunction = function () {
    return true;
  };
  
  node.toString = function () { return String(this.value); };
  
  node.statementType = CONSTANT;
});

var NegationNode = exports.NegationNode = P(ParseNode, function (node, _super) {
    node.init = function (expression) {
      _super.init.call(this);
      this.expression = expression;
      this.addDependencies(this.expression.dependencies());
    };
    node.evaluateOnce = function (frame) {
      return -(this.expression.evaluateOnce(frame));
    };
    node.quadraticCoefficients = function (frame, variable) {
      var coeffs = this.expression.quadraticCoefficients(frame, variable);
      return [-coeffs[0], -coeffs[1], -coeffs[2]];
    };
    node.polynomialEvalStrings = function (frame, variable, arg) {
      var strings = this.expression.polynomialEvalStrings(frame, variable, arg);
      for (var i = 0; i < strings.expressions.length; i++) {
        strings.expressions[i] = '(-'+strings.expressions[i]+')';
      }
      return strings;
    };
    node.polynomialOrder = function (frame, variable) {
      return this.expression.polynomialOrder(frame, variable);
    };
    node.getEvalStrings = function (frame) {
      var evalStrings = this.expression.getEvalStrings(frame);
      return {expression:'(-'+evalStrings.expression+')', statements:evalStrings.statements};
    };
    node.toString = function () { return '-' + this.expression; };
    
});

var IdentifierNode = exports.IdentifierNode = P(ParseNode, function (node, _super) {
  node.init = function (identifier) {
    _super.init.call(this);
    identifier = identifier.replace('\\', ''); //TODO - want to verify this remapping
    identifier = identifier.replace('{', '');
    identifier = identifier.replace('}', '');
    this.identifier = identifier;
    this.addDependency(this.identifier, 0);
  };
  node.evaluateOnce = function (frame) {
    return frame.getVariable(this.identifier).evaluateOnce(frame);
  };
  node.getEvalStrings = function (frame) {
    return frame.getEvalStrings(this.identifier);
  };
  node.quadraticCoefficients = function (frame, variable) {
    if (variable === this.identifier) {
      return [0, 1, 0];
    }
    else{
      var tree = frame.getVariable(this.identifier);
      return tree.quadraticCoefficients(frame, variable);
    }
  };
  node.polynomialEvalStrings = function (frame, variable, arg) {
    if(variable === this.identifier) {
      return {statements:'', expressions:['0', '1']};
    }
    else if(arg === this.identifier) {
      return {statements:'', expressions:[this.identifier]};
    }
    else{
      var tree = frame.getVariable(this.identifier);
      return tree.polynomialEvalStrings(frame, variable, arg);
    }
  };
  node.polynomialOrder = function (frame, variable) {
    if(variable === this.identifier) return 1;
    if(!frame.hasVariable(this.identifier)) return 0;
    var tree = frame.getVariable(this.identifier);
    return tree.polynomialOrder(frame, variable);
  };
  node.okForImplicitFunction = function () {
    return true;
  };

  node.toString = function () {
    var m = this.identifier.match(/^([^_]+)(_(.*))?$/);
    var base = m[1];
    var subscript = m[3];

    if (base.length > 1) base = '\\' + base;
    if (!subscript) return base;
    return base + '_{' + subscript + '}';
  };
  
  node.statementType = IDENTIFIER;
});

exports.ChainedComparatorNode = P(ParseNode, function (node, _super) {
  node.init = function (comparators, args) {
    _super.init.call(this);
    if(!(comparators.length === 2 && args.length === 3)) throw "Can't chain more than 2 comparators";

    this.comparators = comparators;
    this.args = args;
    

    for (var i = 0; i  < 3; i++) {
      this.addDependencies(args[i].dependencies());
    }

    this.node1 = ComparatorNode(this.comparators[0], this.args[0], this.args[1]);
    this.node2 = ComparatorNode(this.comparators[1], this.args[1], this.args[2]);
  };

  node.evaluateOnce = function (frame) {
    return this.node1.evaluateOnce(frame) && this.node2.evaluateOnce(frame);
  };

  //TODO - stop double-evaluating middle value
  node.getEvalStrings = function (frame) {
    var s1 = this.node1.getEvalStrings(frame);
    var s2 = this.node2.getEvalStrings(frame);
    var statements = s1.statements + s2.statements;
    var expression =  "(" + s1.expression + "&&" + s2.expression + ")";
    return {expression:expression, statements:statements};
  };
  
  node.toString = function () {
    return [
      this.args[0],
      this.comparators[0],
      this.args[1],
      this.comparators[1],
      this.args[2]
    ].join(' ');
  };
  
  node.statementType = CHAINED_COMPARATOR;
});

var BinaryOperatorTable = {
  '+': 'arg1+arg2',
  '-': 'arg1-arg2',
  '*': 'arg1*arg2',
  '/': 'arg1/arg2',
  '>' : 'arg1>arg2',
  '<' : 'arg1<arg2',
  '>=': 'arg1>=arg2',
  '<=': 'arg1<=arg2',
  '===': 'arg1===arg2',
  '^': 'this.pow(arg1, arg2)' //Function not compiled from this text
};


var BinaryOperatorFunctionTable = {};
for (var operator in BinaryOperatorTable) {
  /*jshint evil:true*/
  if(BinaryOperatorTable.hasOwnProperty(operator)) {
    var fn;
    if(operator === '^')
      fn = BuiltIn.pow;
    else
      fn = new Function(['arg1', 'arg2'], 'return ' + BinaryOperatorTable[operator]);
    BinaryOperatorFunctionTable[operator] = fn;
  }
}

var BinaryOperatorNode = exports.BinaryOperatorNode = P(ParseNode, function (node, _super) {
  node.init = function (operator, x1, x2) {
    _super.init.call(this);
    this.args = [x1, x2];
    this.operator = operator;
    this.evaluator = BinaryOperatorFunctionTable[operator];
    this.addDependencies(this.args[0].dependencies());
    this.addDependencies(this.args[1].dependencies());
  };

  node.evaluateOnce = function (frame) {
    return this.evaluator(this.args[0].evaluateOnce(frame), this.args[1].evaluateOnce(frame));
  };

  node.getEvalStrings = function (frame) {
    var s0 = this.args[0].getEvalStrings(frame);
    var s1 = this.args[1].getEvalStrings(frame);
    var template = BinaryOperatorTable[this.operator];
    var expression = '(' +
      template.replace('arg1', s0.expression)
      .replace('arg2', s1.expression) +
    ')';
    var statements = s0.statements + s1.statements;
    return { expression: expression, statements: statements };
  };

  node.quadraticCoefficients = function (frame, variable) {
    var coeffs0 = this.args[0].quadraticCoefficients(frame, variable);
    var coeffs1 = this.args[1].quadraticCoefficients(frame, variable);

    switch(this.operator) {
    case '+':
      return [coeffs0[0] + coeffs1[0], coeffs0[1] + coeffs1[1], coeffs0[2] + coeffs1[2]];

    case '-':
      return [coeffs0[0] - coeffs1[0], coeffs0[1] - coeffs1[1], coeffs0[2] - coeffs1[2]];

    case '*':
      var new_coeffs = [0, 0, 0, 0, 0];
      for (var i = 0; i <= 2; i++) {
        for (var j = 0; j <= 2; j++) {
          new_coeffs[i+j] += coeffs0[i] * coeffs1[j];
        }
      }
      var invalid_coeffs = new_coeffs.splice(0, 2);  //invalid_coeffs gets first 2 coeffs.  Last 3 stay in new_coeffs.
      if (invalid_coeffs[0] !== 0 || invalid_coeffs[1] !== 0) return [NaN, NaN, NaN]; //throw "Greater than quadratic";
      return new_coeffs;

    case '/':
      if(coeffs1[0] !== 0 || coeffs1[1] !== 0) return [NaN, NaN, NaN]; //throw "Can't solve with x in the denominator";
      return [coeffs0[0] / coeffs1[2], coeffs0[1] / coeffs1[2], coeffs0[2] / coeffs1[2]];

    case '^':
      // Exponent can't depend on variable
      if(coeffs1[0] !== 0 || coeffs1[1] !== 0) return [NaN, NaN, NaN];//throw "Can't solve with x in the exponent";

      //If we don't depend on x, return [0, 0, evalOnce];
      if(coeffs0[0] === 0 && coeffs0[1] === 0) {
        return [0, 0, this.evaluator(coeffs0[2], coeffs1[2])]; //optimization for this.evaluateOnce(frame), since we already have our arguments.
      }
      
      //Otherwise, only return if exponent is small constant positive integer
      if (coeffs1[2] === 1) return coeffs0;
      if (coeffs1[2] === 2) {
        if(coeffs0[0] !== 0) return [NaN, NaN, NaN];//throw "Greater than quadratic";
        return [coeffs0[1] * coeffs0[1], 2 * coeffs0[1] * coeffs0[2], coeffs0[2] * coeffs0[2]];
      }
    }
    return [NaN, NaN, NaN];
  };

  node.polynomialEvalStrings = function (frame, variable, arg) {
    var coeffs0 = this.args[0].polynomialEvalStrings(frame, variable, arg);
    var coeffs1 = this.args[1].polynomialEvalStrings(frame, variable, arg);
    var order0 = coeffs0.expressions.length - 1;
    var order1 = coeffs1.expressions.length - 1;
    var statements = coeffs0.statements+coeffs1.statements;
    var expressions = [];
    var i, j, term;

    switch(this.operator) {
    case '+':
    case '-':
      for (i = 0; i <= Math.min(order0, order1); i++) {
        expressions[i] = '('+coeffs0.expressions[i]+this.operator+coeffs1.expressions[i]+')';
      }
      for (i = Math.min(order0, order1) + 1; i <= Math.max(order0, order1); i++) {
        if(this.operator === '+') {
          expressions[i] = (order0 > order1 ? coeffs0.expressions[i] : coeffs1.expressions[i]);
        }
        if(this.operator === '-') {
          expressions[i] = (order0 > order1 ? coeffs0.expressions[i] : '(-'+coeffs1.expressions[i]+')');
        }
      }
      return {statements: statements, expressions:expressions};

    case '*':
      for (i = 0; i <= order0; i++) {
        for (j = 0; j <= order1; j++) {
          term = '('+coeffs0.expressions[i]+'*'+coeffs1.expressions[j]+')';
          if(expressions[i+j] === undefined) {
            expressions[i+j] = term;
          }
          else{
            expressions[i+j] += '+'+term;
          }
        }
      }
      for (i = 0; i < expressions.length; i++) {
        expressions[i] = '(' + expressions[i] + ')';
      }
      return {statements:statements, expressions:expressions};
    case '/':
      if(order1 >= 1) throw "can't solve for variable in denominator";
      for (i=0; i <= order0; i++) {
        expressions[i] = '((' + coeffs0.expressions[i] + ')' + '/' + '(' + coeffs1.expressions[0] + '))';
      }
      return {statements:statements, expressions:expressions};
    case '^':
      if(order1 >= 1) throw "can't solve for variable in exponent";
      //Compute it if the base doesn't depend on the variable
      if(order0 === 0) return {statements:statements, expressions:['this.pow('+coeffs0.expressions[0]+','+coeffs1.expressions[0]+')']};
      //Only continue if the exponent is a small, constant, integer.  Figure this out with tree.evaluateOnce(frame).
      //If we can't evaluate, this will throw and solving will fail
      var exponent = this.args[1].evaluateOnce(frame);
      switch(exponent) {
      case 0:
        return {statements:'', expressions:['1']};
      case 1:
        return coeffs1;
      case 2:
        for (i = 0; i <= order0; i++) {
          for (j = 0; j <= order0; j++) {
            term = '('+coeffs0.expressions[i]+'*'+coeffs0.expressions[j]+')';
            if(expressions[i+j] === undefined) {
              expressions[i+j] = term;
            }
            else{
              expressions[i+j] += '+'+term;
            }
          }
        }
        for (i = 0; i < expressions.length; i++) {
          expressions[i] = '(' + expressions[i] + ')';
        }
        return {statements:statements, expressions:expressions};
      }
    }
    throw "Unable to compile polyomial representation of BinaryOperatorNode";
  };

  node.polynomialOrder = function (frame, variable) {
    var order0 = this.args[0].polynomialOrder(frame, variable);
    var order1 = this.args[1].polynomialOrder(frame, variable);
    switch(this.operator) {
    case '+':
    case '-':
      return Math.max(order0, order1);
    case '*':
      return order0 + order1;
    case '/':
      if (order1 > 0) return Infinity;
      return order0;
    case '^':
      if(order0 === 0 && order1 === 0) return 0;
      try{
        var exponent = this.args[1].evaluateOnce(frame);
        if (exponent !== Math.round(exponent)) return Infinity;
        if (exponent < 0) return Infinity;
        return exponent * order0;
      }
      catch(e) {
        return Infinity; //Exponent depends on free variables
      }
    }
    return Infinity;
  };

  node.okForImplicitFunction = function () {
    return this.args[0].okForImplicitFunction() && this.args[1].okForImplicitFunction();
  };

  var powString = function (base, exponent) {
    var baseString = base.toString();
    var exponentString = exponent.toString();
    if (base instanceof BinaryOperatorNode) {
      baseString = '(' + baseString + ')';
    }
    if (exponent instanceof BinaryOperatorNode) {
      exponentString = '{' + exponentString + '}';
    }
    return baseString + '^' + exponentString;
  };

  var timesString = function (arg1, arg2) {
    var s1 = String(arg1);
    var s2 = String(arg2);
    if (
      (
        arg1 instanceof BinaryOperatorNode &&
        (arg1.operator === '+' || arg1.operator === '-')
      ) ||
      arg1 instanceof NegationNode
    ) {
      s1 = '(' + s1 + ')';
    }
    if (
      (
        arg2 instanceof BinaryOperatorNode &&
        (arg2.operator === '+' || arg2.operator === '-')
      ) ||
      arg2 instanceof NegationNode
    ) {
      s2 = '(' + s2 + ')';
    }
    return s1 + '*' + s2;
  };

  node.toString = function () {
    if (this.operator === '^') return powString(this.args[0], this.args[1]);
    if (this.operator === '/') {
      return '\\frac{' + this.args[0] + '}{' + this.args[1] + '}';
    }
    if (this.operator === '*') return timesString(this.args[0], this.args[1]);
    return this.args[0] + ' ' + this.operator + ' ' + this.args[1];
  };

});

var ComparatorNode = exports.ComparatorNode = P(BinaryOperatorNode, function (node, _super) {
  node.init = function (operator, x1, x2) {
    _super.init.call(this, operator, x1, x2);
  };
  
  node.polynomialOrder = function (frame, variable) {
    var order0 = this.args[0].polynomialOrder(frame, variable);
    var order1 = this.args[1].polynomialOrder(frame, variable);
    return Math.max(order0, order1);
  };
  
  node.quadraticCoefficients = function (frame, variable) {
    return [NaN, NaN, NaN]; //TODO Not implemented
  };
  
  node.statementType = COMPARATOR;
  
});

var FunctionNode = exports.FunctionNode = P(ParseNode, function (node, _super) {
  node.init = function (identifier, args) {
    _super.init.call(this);
    this.identifier = identifier;
    this.args = args;
    this.arity = this.args.length;
    this.addDependency(this.identifier.identifier, this.arity);
    for (var i = 0; i < args.length; i++) {
      this.addDependencies(args[i].dependencies());
    }
  };

  node.evaluateOnce = function (frame) {
    if(this.arity > 1 || frame.hasFunction(this.identifier.identifier)) {
      return frame.callFunction(this.identifier.identifier,
                                this.args.map(function (arg) {return arg.evaluateOnce(frame)}));
    }
    //We don't have a function.  This could be implicit multiplication instead.
    if(this.args.length === 1 && frame.hasVariable(this.identifier.identifier)) {
      return this.args[0].evaluateOnce(frame) * frame.getVariable(this.identifier.identifier).evaluateOnce(frame);
    }
  };

  node.getEvalStrings = function (frame) {
    if(this.arity > 1 || frame.hasFunction(this.identifier.identifier)) {
      var arg_eval_strings = this.args.map(function (a) {return a.getEvalStrings(frame)});
      var arg_expressions = arg_eval_strings.map(function (a) {return a.expression});
      var arg_statements = arg_eval_strings.map(function (a) {return a.statements});
      var statements = arg_statements.join('');
      var expression = 'this.'+this.identifier.identifier + '(' + arg_expressions.join(',') + ')';
      return {expression:expression, statements:statements};
    }
    else{
      var variable_node = IdentifierNode(this.identifier.identifier);
      var multiplication_node = BinaryOperatorNode('*', variable_node, this.args[0]);
      return multiplication_node.getEvalStrings(frame);
    }
  };

  node.quadraticCoefficients = function (frame, variable) {
    if(this.arity > 1 || frame.hasFunction(this.identifier.identifier)) {
      /*Find polynomial order for each function argument*/
      var arg_orders = this.args.map(function (a) {return a.polynomialOrder(frame, variable)});
      var max_order = Math.max.apply(null, arg_orders);

      //Return static value if no arguments depend on X
      if(max_order === 0) {
        return [0, 0, this.evaluateOnce(frame)];
      }

      //Return infinity if arguments depend on X, and can't be analyzed
      var fn = frame.getFunctionTree(this.identifier.identifier);
      if(!fn) throw ("Can't solve equations with " + this.identifier.identifier);

      //Create local frame and ask function expression for polynomial order
      var local_frame = EvalFrame(frame);
      for (var i = 0; i < fn.arity; i++) {
        local_frame.setVariable(fn.args[i].identifier, this.args[i]);
      }
      return fn.expression.quadraticCoefficients(local_frame, variable);
    }
    else{ //Implicit multiplication
      var variable_node = IdentifierNode(this.identifier.identifier);
      var multiplication_node = BinaryOperatorNode('*', variable_node, this.args[0]);
      return multiplication_node.quadraticCoefficients(frame, variable);
    }
  };

  node.polynomialEvalStrings = function (frame, variable, arg) {
    if(this.arity > 1 || frame.hasFunction(this.identifier.identifier)) {
      var arg_strings = this.args.map(function (a) {return a.polynomialEvalStrings(frame, variable, arg)});
      var arg_orders = arg_strings.map(function (x) {return x.expressions.length - 1;});
      var max_order = Math.max.apply(null, arg_orders);

      if(max_order === 0) {
        var eval_strings = this.getEvalStrings(frame);
        return {statements:eval_strings.statements, expressions:[eval_strings.expression]};
      }
      //If order is infinity, this shouldn't get called?
      //TODO - deal wih "create local frame" logic from polynomialOrder
    }
    else{ //Implicit multiplication
      var variable_node = IdentifierNode(this.identifier.identifier);
      var multiplication_node = BinaryOperatorNode('*', variable_node, this.args[0]);
      return multiplication_node.polynomialEvalStrings(frame, variable, arg);
    }
  };

  node.polynomialOrder = function (frame, variable) {
    if(this.arity > 1 || frame.hasFunction(this.identifier.identifier)) {
      /*Find polynomial order for each function argument*/
      var arg_orders = this.args.map(function (a) {return a.polynomialOrder(frame, variable)});
      var max_order = Math.max.apply(null, arg_orders);

      //Return 0 if no arguments depend on X
      if(max_order === 0) {
        return 0;
      }

      //Return infinity if arguments depend on X, and can't be analyzed
      var fn = frame.getFunctionTree(this.identifier.identifier);
      if(!fn) return Infinity;

      //Create local frame and ask function expression for polynomial order
      //TODO - may not actually support this well yet
      var local_frame = EvalFrame(frame);
      for (var i = 0; i < fn.arity; i++) {
        local_frame.setVariable(fn.args[i].identifier, this.args[i]);
      }
      return fn.expression.polynomialOrder(local_frame, variable);
    }
    else{ //Implicit multiplication
      var variable_node = IdentifierNode(this.identifier.identifier);
      var multiplication_node = BinaryOperatorNode('*', variable_node, this.args[0]);
      return multiplication_node.polynomialOrder(frame, variable);
    }
  };

  node.toString = function () {
    if (this.identifier.identifier === 'sqrt') {
      return this.identifier + '{' + this.args[0] + '}';
    }
    return this.identifier + '(' + this.args.join(', ') + ')';
  };
});

exports.FunctionCallExponentNode = P(ParseNode, function (node, _super) {
  node.init = function (identifier, arg, exponent) {
    _super.init.call(this);
    this.identifier = identifier;
    this.arg = arg;
    this.exponent = exponent;
    this.as_function_node = BinaryOperatorNode('^', FunctionNode(this.identifier, [this.arg]), this.exponent);
    this.as_multiplication_node = BinaryOperatorNode('*', this.identifier, BinaryOperatorNode('^', this.arg, this.exponent));

    this.addDependency(this.identifier.identifier, 1);  //Ambiguous (see note in addDependency)
    this.addDependencies(this.arg.dependencies());
    this.addDependencies(this.exponent.dependencies());
  };

  node.getEquivalentNode = function (frame) {
    if(frame.hasFunction(this.identifier.identifier)) return this.as_function_node;
    return this.as_multiplication_node;
  };

  node.evaluateOnce = function (frame) {
    return this.getEquivalentNode(frame).evaluateOnce(frame);
  };

  node.getEvalStrings = function (frame) {
    return this.getEquivalentNode(frame).getEvalStrings(frame);
  };

  node.polynomialOrder = function (frame, variable) {
    return this.getEquivalentNode(frame).polynomialOrder(frame, variable);
  };

  node.quadraticCoefficients = function (frame, variable) {
    return this.getEquivalentNode(frame).quadraticCoefficients(frame, variable);
  };

  node.polynomialEvalStrings = function (frame, variable, arg) {
    return this.getEquivalentNode(frame).polynomialEvalStrings(frame, variable, arg);
  };

  node.toString = function () {
    return this.as_function_node.toString();
  };
});

exports.FunctionDeclarationNode = P(ParseNode, function (node, _super) {
  node.init = function (identifier, args, expression) {
    _super.init.call(this);
    this.assigns = identifier;
    this.referenceSymbol(this.assigns.identifier);
    this.args = args;
    this.arity = this.args.length;
    this.expression = expression;
    this.passed_variables = this.args.map(function (arg) {return arg.identifier});
    var possible_dependencies = this.expression.dependencies();
    for (var id in possible_dependencies) {
      if(!possible_dependencies.hasOwnProperty(id)) {continue;}

      var arity = possible_dependencies[id];
      if(this.passed_variables.indexOf(id) >= 0) {
        //Identifier is shadowed by arguments.  Make sure it's ok being a variable
        if(arity > 1) {throw("Cannot call argument " + id + " as a function")}
        //Otherwise, don't need to do anything.  It's shadowed, so it's not a dependency
      }
      else{
        //Not shadowed - becomes a dependency
        this.addDependency(id, arity);
      }
    }
  };
  node.statementType = FUNCTION_DEFINITION;
  node.exportDefinitionsTo = function (frame, compiler) {
    var self = this;
    /*
    frame.setFunction(self.assigns.identifier, self.args.length, function (args, f) {
        var shadow_frame = EvalFrame(frame)
        for (var i = 0; i < self.args.length; i++) {
          shadow_frame.setVariable(self.args[i].identifier, ConstantNode(args[i]));
        }
        return self.expression.evaluateOnce(shadow_frame);
      });
    */
    var evalStrings = self.expression.getEvalStrings(frame);
    var function_source = evalStrings.statements + "return " + evalStrings.expression;
    var function_args = self.args.map(function (a) {return a.identifier});
    var fn = compiler.compile(function_args, function_source);
    frame.setFunction(self.assigns.identifier, self.args.length, fn, self, function_args, function_source);
  };

  node.passedVariables = function () {
    return this.passed_variables; //TODO - deleteme
  };

  node.evaluateOnce = function (frame) {
    return "Defines function " + this.assigns.identifier;
  };

  node.getEvalStrings = function (frame) {
    return this.expression.getEvalStrings(frame);
  };

  node.toString = function () {
    return this.assigns + '\\left(' + this.args.join(', ') + '\\right)' +
      ' = ' + this.expression;
  };
});

var DerivativeNode = exports.DerivativeNode = P(ParseNode, function (node, _super) {
  node.init = function (variable, expression) {
    _super.init.call(this);
    this.derivative_variable = variable;
    this.expression = expression;
    this.addDependencies(expression.dependencies());
    this.addDependency(variable.identifier, 0);
  };

  node.evaluateOnce = function (frame) {
    var variable = this.derivative_variable;
    var dtree = this.expression.takeDerivative(frame, variable);

    if (!(dtree instanceof DerivativeNode)) {
      return dtree.evaluateOnce(frame);
    }

    var center_point = frame.getVariable(variable.identifier).evaluateOnce(frame);
    var local_frame = EvalFrame(frame);
    var epsilon = 5e-5;

    //Evaluate slightly below
    local_frame.setVariable(variable.identifier, ConstantNode(center_point - epsilon));
    var val0 = this.expression.evaluateOnce(local_frame);
    //Evaluate slightly above
    local_frame.setVariable(variable.identifier, ConstantNode(center_point + epsilon));
    var val1 = this.expression.evaluateOnce(local_frame);
    //Divide by dx and return
    return (val1 - val0) / (2 * epsilon);
  };

  node.getEvalStrings = function (frame) {
    var variable = this.derivative_variable;
    var dtree = this.expression.takeDerivative(frame, variable);

    if (!(dtree instanceof DerivativeNode)) {
      return dtree.getEvalStrings(frame);
    }

    var derivative = this.tmp();
    var variable_value = this.tmp();
    var epsilon = '(5e-5)';
    var high_value = this.tmp();
    var low_value = this.tmp();

    //Get and store value of the differentiation variable
    var variable_value_strings = variable.getEvalStrings(frame);
    var initialize = variable_value_strings.statements + 'var '+variable_value+'='+variable_value_strings.expression+';';

    //Compile expression
    var expression_strings = this.expression.getEvalStrings(frame);

    var sample_low  = variable.identifier+'='+variable_value+'-'+epsilon+';'+
                      expression_strings.statements+
                      'var '+low_value+'='+expression_strings.expression+';';

    var sample_high = variable.identifier+'='+variable_value+'+'+epsilon+';'+
                      expression_strings.statements+
                      'var '+high_value+'='+expression_strings.expression+';';

    //Compute the derivative from that
    var divide = 'var '+derivative+'=('+high_value+'-'+low_value+')/(2*'+epsilon+');';

    //Reset the value of the initial variable, in case someone was using it
    var cleanup = variable.identifier+'='+variable_value+';';

    var statements = initialize + sample_low + sample_high + divide + cleanup;
    return {expression:derivative, statements:statements};
  };

  node.toString = function () {
    return '\\frac{d}{d' + this.derivative_variable +  '}' +
      '\\left(' + this.expression + '\\right)';
  };
});

var RepeatedOperatorNode = exports.RepeatedOperatorNode = P(ParseNode, function (node, _super) {
  node.init = function (index, lower_bound, upper_bound, summand) {
    _super.init.call(this);
    this.index = index;
    this.lower_bound = lower_bound;
    this.upper_bound = upper_bound;
    this.summand = summand;
    this.addDependencies(this.lower_bound.dependencies());
    this.addDependencies(this.upper_bound.dependencies());
    this.addDependencies(this.summand.dependencies());
    this.shadowVariable(this.index.identifier); //TODO - make sure we're tracking this the same we we track assignments
  };

  node.evaluateOnce = function (frame) {
    var local_frame = EvalFrame(frame);
    var lower = Math.round(this.lower_bound.evaluateOnce(frame));
    var upper = Math.round(this.upper_bound.evaluateOnce(frame));
    var total = this.starting_value;
    if(!isFinite(upper - lower)) {
      total = (upper < lower ? this.starting_value : NaN);
    }
    else{
      for (var i = lower; i <= upper; i++) {
        local_frame.setVariable(this.index.identifier, ConstantNode(i));
        total = this.fn(total, this.summand.evaluateOnce(local_frame)); //Addition or multiplication
      }
    }
    return total;
  };

  node.getEvalStrings = function (frame) {
    var sum = this.tmp();
    var index = this.index.identifier;
    var lower_bound = this.tmp();
    var upper_bound = this.tmp();

    var lower_bound_strings = this.lower_bound.getEvalStrings(frame);
    var upper_bound_strings = this.upper_bound.getEvalStrings(frame);
    var summand_strings = this.summand.getEvalStrings(frame);

    var set_lower_bound = lower_bound_strings.statements + 'var '+lower_bound+' = Math.round(' + lower_bound_strings.expression + ');';
    var set_upper_bound = upper_bound_strings.statements + 'var '+upper_bound+' = Math.round(' + upper_bound_strings.expression + ');';
    var initialize_sum = 'var '+sum+'='+this.starting_value+';';
    var loop = 'for (var '+index+'='+lower_bound+';'+index+'<='+upper_bound+';'+index+'++) {'+summand_strings.statements+sum+this.in_place_operator+summand_strings.expression+'};';
   
    var protected_loop = 'if(!isFinite('+upper_bound+'-'+lower_bound+')) {'+sum+'=('+upper_bound+'<'+lower_bound+'?'+this.starting_value+':NaN);}else{'+loop+'}';

    return {expression:sum, statements:set_lower_bound + set_upper_bound + initialize_sum + protected_loop};
  };

});

exports.SummationNode = P(RepeatedOperatorNode, function (node, _super) {
  node.init = function (index, lower_bound, upper_bound, summand) {
    _super.init.call(this, index, lower_bound, upper_bound, summand);
  };

  node.starting_value = 0;
  node.in_place_operator = '+=';
  node.fn = function (a, b) {return a + b;};
  
  node.toString = function () {
    return '\\sum_{' + this.index + '=' + this.lower_bound + '}' +
      '^{' + this.upper_bound + '} ' + this.summand;
  };
});

exports.ProductNode = P(RepeatedOperatorNode, function (node, _super) {
  node.init = function (index, lower_bound, upper_bound, summand) {
    _super.init.call(this, index, lower_bound, upper_bound, summand);
  };

  node.starting_value = 1;
  node.in_place_operator = '*=';
  node.fn = function (a, b) {return a * b;};
  
  node.toString = function () {
    return '\\prod_{' + this.index + '=' + this.lower_bound + '}' +
      '^{' + this.upper_bound + '} ' + this.summand;
  };
});

exports.OrderedPairListNode = P(ParseNode, function (node, _super) {
  node.init = function (elements) {
    _super.init.call(this);
    this.elements = elements;

    for (var i = 0; i < elements.length; i++) {
      this.addDependencies(elements[i].dependencies());
    }
  };

  node.evaluateOnce = function (frame) {
    return this.elements.map(function (x) {return x.evaluateOnce(frame)});
  };

  node.getEvalStrings = function (frame) {
    var statements = '';
    var expression = '[';
    for (var i = 0; i < this.elements.length; i++) {
      var element_strings = this.elements[i].getEvalStrings(frame);
      statements += element_strings.statements;
      expression += element_strings.expression;
      if(i < this.elements.length - 1) this.expression += ',';
    }
    expression += ']';
    return {statements: statements, expression:expression};
  };

  node.toString = function () {
    return '\\left(' + this.elements.join(', ') + '\\right)';
  };

  node.statementType = ORDERED_PAIR_LIST;
});

//Copy all ParseNodes from exports onto yy.latex
for (var node in exports) {
  if(exports.hasOwnProperty(node)) latex.yy[node] = exports[node];
}

/* This function takes the entire function declaration as a single lexed token and parses with a regexp,
 * to keep the overall grammar context-free and LALR(1)-parseable.
 * TODO - generate this once, not every time we parse a function declaration */
latex.yy.parseFunctionDeclaration = function (declaration_string) {
  declaration_string = declaration_string.replace('###', '');  //Strip off start-of-line marker
  var whitespace_pattern =  //Non-capturing latex whitespace pattern
     "(?:\\s|\\\\space|\\\\\\:)*";
     //   \s   \\space  \\ \ :
  var id_body_pattern = //Non-capturing latex identifier pattern
     "(?:[a-zA-Z]|\\\\[a-zA-Z]+)";
  var id_subscript_pattern = //Non-capturing latex subscript pattern
     "(?:_[a-zA-Z0-9]|_{[a-zA-Z0-9]+})?";
  var id_pattern = id_body_pattern+id_subscript_pattern;

  var arglist_pattern = //Non-capturing comma-separated list of identifiers in whitespace-free string
    "(?:" + id_pattern + "(?:\\," + id_pattern + ")*)";

  var declaration_pattern = //Captures function name as first group, and arglist as second group
    "(" + id_pattern + ")" + "(?:\\\\left)?\\((" + arglist_pattern + ")(?:\\\\right)?\\)=";

  var declaration_regexp = new RegExp(declaration_pattern);
  var whitespace_regexp = new RegExp(whitespace_pattern, "g"); //Want "g" flag to ensure global capturing of whitespace
  declaration_string = declaration_string.replace(whitespace_regexp, '');
  var match = declaration_regexp.exec(declaration_string);

  return {
    identifier: IdentifierNode(match[1]),
    args: match[2].split(',').map(IdentifierNode), //match[1] is the argument list.  Split it on commas, and create an IdentifierNode from each one
    input_string: declaration_string.split('=')[0]        //input_string is used for constructing function tables.  We want to strip the equality off the end
  };
};

//This code over-rides latex.parse with a version that prepends a line-start marker
exports.parse = function (input) {
  return latex.parse("###"+input);
};

exports.tryParse = function (input) {
  try{
    var tree = exports.parse(input);
    return tree;
  }
  catch(e) {
    return ErrorNode(e);
  }
};

latex.yy.setInput = function (node, range) {
  node.setInputString(latex.yy.lexer.matched.slice(Math.max(3, range.first_column), range.last_column)); //Don't ever show the '###' mark we insert to mark the start of the string
};

latex.yy.parseError = function (err, hash) {
  throw("Sorry - I don't understand this");
};

return exports;
});

define('math/quadratic',['require'],function(require){

var Quadratic = {
  formula: function(coeffs, rootNumber){
    if (coeffs.length != 3) throw 'Where did you learn the quadratic formula?';
    var a = coeffs[0];
    var b = coeffs[1];
    var c = coeffs[2];

    if(a === 0){
      return [-c/b, -c/b];  //Linear case
    }

    var radical = Math.sqrt(b * b - 4 * a * c);
    var root0 = (-b + radical) / (2 * a);
    var root1 = (-b - radical) / (2 * a);

    //Optional argument rootNumber specifies which root to return.  If not specified, returns list of all roots
    if(rootNumber === 0) return root0;
    if(rootNumber === 1) return root1;
    return [root0, root1];
  },

  // For a quadratic inequality of the form a*x^2 + b*x + c > 0, returns
  // regions for which the inequality is satisfied in the form [ lower, mid0,
  // mid1, upper ]. The inequality is satisfied for:
  //
  //   x < lower ||
  //   (x > mid0 && x < mid1) ||
  //   x > upper
  //
  // Values can be NaN to signal that no inequality of the given type is
  // satisfied. At least two of the return values will always be NaN.
  inequalityRegions: function (coeffs) {
    // Would ideally like large === Infinity, but it's convenient to feed
    // these results through the line coalescing/jump detection/poi finding
    // pipeline, and none of that is set up to deal with Infinity correctly.
    var large = 1e305;

    var a = coeffs[0];
    var b = coeffs[1];
    var c = coeffs[2];

    if (a === 0 && b === 0) {
      return (c > 0) ?
        [ NaN, -large, large, NaN ] :
        [ NaN, NaN, NaN, NaN ]
      ;
    }
    if (a === 0) {
      return (b > 0) ?
        [ NaN, NaN, NaN, -c/b ] :
        [ -c/b, NaN, NaN, NaN ]
      ;
    }
    var discriminant = Math.sqrt(b*b - 4*a*c);
    if (!isFinite(discriminant)) {
      return (a > 0) ?
        [ NaN, -large, large, NaN ] :
        [ NaN, NaN, NaN, NaN ];
  
    }
    var upper = (-b + discriminant)/(2*a);
    var lower = (-b - discriminant)/(2*a);
    return (a > 0) ?
      [ lower, NaN, NaN, upper ] :
      [ NaN, upper, lower, NaN ] // upper/lower switched because a < 0
    ;
  },

  formulaEvalStrings: function(strings){
    var function_1, function_2;
    switch(strings.expressions.length){
    case 2:
      function_1 = strings.statements + 'return ' + '-' +strings.expressions[0] + '/' + strings.expressions[1];
      return [function_1];
    case 3:
      var statements =
        strings.statements +
        'var coeffs = [' + strings.expressions[2] + ',' +
                           strings.expressions[1] + ',' +
                           strings.expressions[0] + '];';
      function_1 = statements + 'return this.quadraticFormula(coeffs, 0);';
      function_2 = statements + 'return this.quadraticFormula(coeffs, 1);';
      return [function_1, function_2];
    }
  },

  inequalityRegionEvalStrings: function (strings) {
    // Prepend zeros onto coefficient strings that are too short.
    var expressions = strings.expressions.slice();
    while (expressions.length < 3) expressions.push('0');
    
    var statements = strings.statements +
      'var coeffs = [' + expressions[2] + ',' +
                         expressions[1] + ',' +
                         expressions[0] + '];';
    // TODO, send in correct operator
    return [
      statements + 'return this.quadraticInequalityRegions(coeffs)[0]',
      statements + 'return this.quadraticInequalityRegions(coeffs)[1]',
      statements + 'return this.quadraticInequalityRegions(coeffs)[2]',
      statements + 'return this.quadraticInequalityRegions(coeffs)[3]'
    ];
  }
};

return Quadratic;
});

//Definition of built-in functions and variables

define('math/builtinframe',['require','./builtin','./evalframe','./parser_util','./inverses','math/quadratic'],function(require){
  var BuiltIn = require('./builtin');
  var EvalFrame = require('./evalframe');
  var Parser = require('./parser_util');
  var inverses = require('./inverses');
  var Quadratic = require('math/quadratic');

  var ConstantNode = Parser.ConstantNode;

  var frame = EvalFrame();

  frame.setVariable('pi', ConstantNode(Math.PI));
  frame.setEvalStrings('pi', {expression:String(Math.PI), statements:''});
  frame.setVariable('tau', ConstantNode(2*Math.PI));
  frame.setEvalStrings('tau', {expression:String(2*Math.PI), statements:''});
  frame.setVariable('e', ConstantNode(Math.E));
  frame.setEvalStrings('e', {expression:String(Math.E), statements:''});

  // angleMultiplier function is defined for use in trig derivatives. It would
  // be nice to just make this a constant, but making it a function allows us
  // to avoid the possibility of conflicting with a user symbol. We don't have
  // arity 0 functions, so make it an arity 1 function that ignores its 
  // argument.
  frame.setDegreeMode = function (on) {
    frame._angleMultiplier = (on ? Math.PI/180 : 1);
  };

  frame.setDegreeMode(false);

  frame.setFunction('angleMultiplier', 1, function () {
    return frame._angleMultiplier;
  });

  //Trig functions
  //
  //Helper function
  var registerTrig = function(name, fn, fn_inverse) {
    frame.setFunction(name, 1, function (x) {
      return fn(x*frame._angleMultiplier);
    });
    frame.setFunction(inverses[name], 1, function (x) {
      return fn_inverse(x)/frame._angleMultiplier;
    });
  };
  //Use helper to register forward and inverse
  registerTrig('sin', BuiltIn.sin, Math.asin);
  registerTrig('cos', BuiltIn.cos, Math.acos);
  registerTrig('tan', BuiltIn.tan, Math.atan);
  registerTrig('cot', BuiltIn.cot, BuiltIn.acot);
  registerTrig('sec', BuiltIn.sec, BuiltIn.asec);
  registerTrig('csc', BuiltIn.csc, BuiltIn.acsc);

  //Hyperbolic trig functions
  //
  //Helper function
  var registerHyperbolicTrig = function(name, fn, fn_inverse){
    frame.setFunction(name, 1, fn);
    frame.setFunction(inverses[name], 1, fn_inverse);
  };
  //Use helper to register forward and inverse
  registerHyperbolicTrig('sinh', BuiltIn.sinh, BuiltIn.asinh);
  registerHyperbolicTrig('cosh', BuiltIn.cosh, BuiltIn.acosh);
  registerHyperbolicTrig('tanh', BuiltIn.tanh, BuiltIn.atanh);
  registerHyperbolicTrig('coth', BuiltIn.coth, BuiltIn.acoth);
  registerHyperbolicTrig('sech', BuiltIn.sech, BuiltIn.asech);
  registerHyperbolicTrig('csch', BuiltIn.csch, BuiltIn.acsch);

  frame.setFunction('pow', 2, BuiltIn.pow);
  frame.setFunction('sqrt', 1, Math.sqrt);
  frame.setFunction('nthroot', 2, BuiltIn.nthroot);
  frame.setFunction('log', 2, BuiltIn.log_base);
  frame.setFunction('exp', 1, Math.exp);
 
  frame.setFunction('floor', 1, Math.floor);
  frame.setFunction('ceil', 1, Math.ceil);
  frame.setFunction('round', 1, Math.round);
  frame.setFunction('abs', 1, Math.abs);
  frame.setFunction('mod', 2, BuiltIn.mod);
  frame.setFunction('max', 2, BuiltIn.max);
  frame.setFunction('min', 2, BuiltIn.min);
  frame.setFunction('sign', 1, BuiltIn.sign);

  frame.setFunction('lcm', 2, BuiltIn.lcm);
  frame.setFunction('gcd', 2, BuiltIn.gcd);
  //spanish lcm & gcd
  frame.setFunction('mcm', 2, BuiltIn.lcm);
  frame.setFunction('mcd', 2, BuiltIn.gcd);

  frame.setFunction('nCr', 2, BuiltIn.nCr);
  frame.setFunction('nPr', 2, BuiltIn.nPr);
  frame.setFunction('factorial', 1, BuiltIn.factorial);
  frame.setFunction('polyGamma', 2, BuiltIn.polyGamma);

  frame.setFunction('quadraticFormula', 2, Quadratic.formula);
  frame.setFunction('quadraticInequalityRegions', 1, Quadratic.inequalityRegions);

  return frame;
});

//     Underscore.js 1.3.3
//     (c) 2009-2012 Jeremy Ashkenas, DocumentCloud Inc.
//     Underscore may be freely distributed under the MIT license.
//     Portions of Underscore are inspired or borrowed from Prototype,
//     Oliver Steele's Functional, and John Resig's Micro-Templating.
//     For all details and documentation:
//     http://documentcloud.github.com/underscore

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `global` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Establish the object that gets returned to break out of a loop iteration.
  var breaker = {};

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var slice            = ArrayProto.slice,
      unshift          = ArrayProto.unshift,
      toString         = ObjProto.toString,
      hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeForEach      = ArrayProto.forEach,
    nativeMap          = ArrayProto.map,
    nativeReduce       = ArrayProto.reduce,
    nativeReduceRight  = ArrayProto.reduceRight,
    nativeFilter       = ArrayProto.filter,
    nativeEvery        = ArrayProto.every,
    nativeSome         = ArrayProto.some,
    nativeIndexOf      = ArrayProto.indexOf,
    nativeLastIndexOf  = ArrayProto.lastIndexOf,
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind;

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) { return new wrapper(obj); };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object via a string identifier,
  // for Closure Compiler "advanced" mode.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root['_'] = _;
  }

  // Current version.
  _.VERSION = '1.3.3';

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles objects with the built-in `forEach`, arrays, and raw objects.
  // Delegates to **ECMAScript 5**'s native `forEach` if available.
  var each = _.each = _.forEach = function(obj, iterator, context) {
    if (obj == null) return;
    if (nativeForEach && obj.forEach === nativeForEach) {
      obj.forEach(iterator, context);
    } else if (obj.length === +obj.length) {
      for (var i = 0, l = obj.length; i < l; i++) {
        if (i in obj && iterator.call(context, obj[i], i, obj) === breaker) return;
      }
    } else {
      for (var key in obj) {
        if (_.has(obj, key)) {
          if (iterator.call(context, obj[key], key, obj) === breaker) return;
        }
      }
    }
  };

  // Return the results of applying the iterator to each element.
  // Delegates to **ECMAScript 5**'s native `map` if available.
  _.map = _.collect = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeMap && obj.map === nativeMap) return obj.map(iterator, context);
    each(obj, function(value, index, list) {
      results[results.length] = iterator.call(context, value, index, list);
    });
    if (obj.length === +obj.length) results.length = obj.length;
    return results;
  };

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`. Delegates to **ECMAScript 5**'s native `reduce` if available.
  _.reduce = _.foldl = _.inject = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduce && obj.reduce === nativeReduce) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduce(iterator, memo) : obj.reduce(iterator);
    }
    each(obj, function(value, index, list) {
      if (!initial) {
        memo = value;
        initial = true;
      } else {
        memo = iterator.call(context, memo, value, index, list);
      }
    });
    if (!initial) throw new TypeError('Reduce of empty array with no initial value');
    return memo;
  };

  // The right-associative version of reduce, also known as `foldr`.
  // Delegates to **ECMAScript 5**'s native `reduceRight` if available.
  _.reduceRight = _.foldr = function(obj, iterator, memo, context) {
    var initial = arguments.length > 2;
    if (obj == null) obj = [];
    if (nativeReduceRight && obj.reduceRight === nativeReduceRight) {
      if (context) iterator = _.bind(iterator, context);
      return initial ? obj.reduceRight(iterator, memo) : obj.reduceRight(iterator);
    }
    var reversed = _.toArray(obj).reverse();
    if (context && !initial) iterator = _.bind(iterator, context);
    return initial ? _.reduce(reversed, iterator, memo, context) : _.reduce(reversed, iterator);
  };

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, iterator, context) {
    var result;
    any(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) {
        result = value;
        return true;
      }
    });
    return result;
  };

  // Return all the elements that pass a truth test.
  // Delegates to **ECMAScript 5**'s native `filter` if available.
  // Aliased as `select`.
  _.filter = _.select = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    if (nativeFilter && obj.filter === nativeFilter) return obj.filter(iterator, context);
    each(obj, function(value, index, list) {
      if (iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, iterator, context) {
    var results = [];
    if (obj == null) return results;
    each(obj, function(value, index, list) {
      if (!iterator.call(context, value, index, list)) results[results.length] = value;
    });
    return results;
  };

  // Determine whether all of the elements match a truth test.
  // Delegates to **ECMAScript 5**'s native `every` if available.
  // Aliased as `all`.
  _.every = _.all = function(obj, iterator, context) {
    var result = true;
    if (obj == null) return result;
    if (nativeEvery && obj.every === nativeEvery) return obj.every(iterator, context);
    each(obj, function(value, index, list) {
      if (!(result = result && iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if at least one element in the object matches a truth test.
  // Delegates to **ECMAScript 5**'s native `some` if available.
  // Aliased as `any`.
  var any = _.some = _.any = function(obj, iterator, context) {
    iterator || (iterator = _.identity);
    var result = false;
    if (obj == null) return result;
    if (nativeSome && obj.some === nativeSome) return obj.some(iterator, context);
    each(obj, function(value, index, list) {
      if (result || (result = iterator.call(context, value, index, list))) return breaker;
    });
    return !!result;
  };

  // Determine if a given value is included in the array or object using `===`.
  // Aliased as `contains`.
  _.include = _.contains = function(obj, target) {
    var found = false;
    if (obj == null) return found;
    if (nativeIndexOf && obj.indexOf === nativeIndexOf) return obj.indexOf(target) != -1;
    found = any(obj, function(value) {
      return value === target;
    });
    return found;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    return _.map(obj, function(value) {
      return (_.isFunction(method) ? method || value : value[method]).apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, function(value){ return value[key]; });
  };

  // Return the maximum element or (element-based computation).
  _.max = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.max.apply(Math, obj);
    if (!iterator && _.isEmpty(obj)) return -Infinity;
    var result = {computed : -Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed >= result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iterator, context) {
    if (!iterator && _.isArray(obj) && obj[0] === +obj[0]) return Math.min.apply(Math, obj);
    if (!iterator && _.isEmpty(obj)) return Infinity;
    var result = {computed : Infinity};
    each(obj, function(value, index, list) {
      var computed = iterator ? iterator.call(context, value, index, list) : value;
      computed < result.computed && (result = {value : value, computed : computed});
    });
    return result.value;
  };

  // Shuffle an array.
  _.shuffle = function(obj) {
    var shuffled = [], rand;
    each(obj, function(value, index, list) {
      rand = Math.floor(Math.random() * (index + 1));
      shuffled[index] = shuffled[rand];
      shuffled[rand] = value;
    });
    return shuffled;
  };

  // Sort the object's values by a criterion produced by an iterator.
  _.sortBy = function(obj, val, context) {
    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value : value,
        criteria : iterator.call(context, value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria, b = right.criteria;
      if (a === void 0) return 1;
      if (b === void 0) return -1;
      return a < b ? -1 : a > b ? 1 : 0;
    }), 'value');
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = function(obj, val) {
    var result = {};
    var iterator = _.isFunction(val) ? val : function(obj) { return obj[val]; };
    each(obj, function(value, index) {
      var key = iterator(value, index);
      (result[key] || (result[key] = [])).push(value);
    });
    return result;
  };

  // Use a comparator function to figure out at what index an object should
  // be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iterator) {
    iterator || (iterator = _.identity);
    var low = 0, high = array.length;
    while (low < high) {
      var mid = (low + high) >> 1;
      iterator(array[mid]) < iterator(obj) ? low = mid + 1 : high = mid;
    }
    return low;
  };

  // Safely convert anything iterable into a real, live array.
  _.toArray = function(obj) {
    if (!obj)                                     return [];
    if (_.isArray(obj))                           return slice.call(obj);
    if (_.isArguments(obj))                       return slice.call(obj);
    if (obj.toArray && _.isFunction(obj.toArray)) return obj.toArray();
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    return _.isArray(obj) ? obj.length : _.keys(obj).length;
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    return (n != null) && !guard ? slice.call(array, 0, n) : array[0];
  };

  // Returns everything but the last entry of the array. Especcialy useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N. The **guard** check allows it to work with
  // `_.map`.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, array.length - ((n == null) || guard ? 1 : n));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array. The **guard** check allows it to work with `_.map`.
  _.last = function(array, n, guard) {
    if ((n != null) && !guard) {
      return slice.call(array, Math.max(array.length - n, 0));
    } else {
      return array[array.length - 1];
    }
  };

  // Returns everything but the first entry of the array. Aliased as `tail`.
  // Especially useful on the arguments object. Passing an **index** will return
  // the rest of the values in the array from that index onward. The **guard**
  // check allows it to work with `_.map`.
  _.rest = _.tail = function(array, index, guard) {
    return slice.call(array, (index == null) || guard ? 1 : index);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, function(value){ return !!value; });
  };

  // Return a completely flattened version of an array.
  _.flatten = function(array, shallow) {
    return _.reduce(array, function(memo, value) {
      if (_.isArray(value)) return memo.concat(shallow ? value : _.flatten(value));
      memo[memo.length] = value;
      return memo;
    }, []);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iterator) {
    var initial = iterator ? _.map(array, iterator) : array;
    var results = [];
    // The `isSorted` flag is irrelevant if the array only contains two elements.
    if (array.length < 3) isSorted = true;
    _.reduce(initial, function (memo, value, index) {
      if (isSorted ? _.last(memo) !== value || !memo.length : !_.include(memo, value)) {
        memo.push(value);
        results.push(array[index]);
      }
      return memo;
    }, []);
    return results;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(_.flatten(arguments, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays. (Aliased as "intersect" for back-compat.)
  _.intersection = _.intersect = function(array) {
    var rest = slice.call(arguments, 1);
    return _.filter(_.uniq(array), function(item) {
      return _.every(rest, function(other) {
        return _.indexOf(other, item) >= 0;
      });
    });
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = _.flatten(slice.call(arguments, 1), true);
    return _.filter(array, function(value){ return !_.include(rest, value); });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    var args = slice.call(arguments);
    var length = _.max(_.pluck(args, 'length'));
    var results = new Array(length);
    for (var i = 0; i < length; i++) results[i] = _.pluck(args, "" + i);
    return results;
  };

  // If the browser doesn't supply us with indexOf (I'm looking at you, **MSIE**),
  // we need this function. Return the position of the first occurrence of an
  // item in an array, or -1 if the item is not included in the array.
  // Delegates to **ECMAScript 5**'s native `indexOf` if available.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = function(array, item, isSorted) {
    if (array == null) return -1;
    var i, l;
    if (isSorted) {
      i = _.sortedIndex(array, item);
      return array[i] === item ? i : -1;
    }
    if (nativeIndexOf && array.indexOf === nativeIndexOf) return array.indexOf(item);
    for (i = 0, l = array.length; i < l; i++) if (i in array && array[i] === item) return i;
    return -1;
  };

  // Delegates to **ECMAScript 5**'s native `lastIndexOf` if available.
  _.lastIndexOf = function(array, item) {
    if (array == null) return -1;
    if (nativeLastIndexOf && array.lastIndexOf === nativeLastIndexOf) return array.lastIndexOf(item);
    var i = array.length;
    while (i--) if (i in array && array[i] === item) return i;
    return -1;
  };

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (arguments.length <= 1) {
      stop = start || 0;
      start = 0;
    }
    step = arguments[2] || 1;

    var len = Math.max(Math.ceil((stop - start) / step), 0);
    var idx = 0;
    var range = new Array(len);

    while(idx < len) {
      range[idx++] = start;
      start += step;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Reusable constructor function for prototype setting.
  var ctor = function(){};

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Binding with arguments is also known as `curry`.
  // Delegates to **ECMAScript 5**'s native `Function.bind` if available.
  // We check for `func.bind` first, to fail fast when `func` is undefined.
  _.bind = function bind(func, context) {
    var bound, args;
    if (func.bind === nativeBind && nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError;
    args = slice.call(arguments, 2);
    return bound = function() {
      if (!(this instanceof bound)) return func.apply(context, args.concat(slice.call(arguments)));
      ctor.prototype = func.prototype;
      var self = new ctor;
      var result = func.apply(self, args.concat(slice.call(arguments)));
      if (Object(result) === result) return result;
      return self;
    };
  };

  // Bind all of an object's methods to that object. Useful for ensuring that
  // all callbacks defined on an object belong to it.
  _.bindAll = function(obj) {
    var funcs = slice.call(arguments, 1);
    if (funcs.length == 0) funcs = _.functions(obj);
    each(funcs, function(f) { obj[f] = _.bind(obj[f], obj); });
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memo = {};
    hasher || (hasher = _.identity);
    return function() {
      var key = hasher.apply(this, arguments);
      return _.has(memo, key) ? memo[key] : (memo[key] = func.apply(this, arguments));
    };
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){ return func.apply(null, args); }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = function(func) {
    return _.delay.apply(_, [func, 1].concat(slice.call(arguments, 1)));
  };

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time.
  _.throttle = function(func, wait) {
    var context, args, timeout, throttling, more, result;
    var whenDone = _.debounce(function(){ more = throttling = false; }, wait);
    return function() {
      context = this; args = arguments;
      var later = function() {
        timeout = null;
        if (more) func.apply(context, args);
        whenDone();
      };
      if (!timeout) timeout = setTimeout(later, wait);
      if (throttling) {
        more = true;
      } else {
        result = func.apply(context, args);
      }
      whenDone();
      throttling = true;
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout;
    return function() {
      var context = this, args = arguments;
      var later = function() {
        timeout = null;
        if (!immediate) func.apply(context, args);
      };
      if (immediate && !timeout) func.apply(context, args);
      clearTimeout(timeout);
      timeout = setTimeout(later, wait);
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = function(func) {
    var ran = false, memo;
    return function() {
      if (ran) return memo;
      ran = true;
      return memo = func.apply(this, arguments);
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return function() {
      var args = [func].concat(slice.call(arguments, 0));
      return wrapper.apply(this, args);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var funcs = arguments;
    return function() {
      var args = arguments;
      for (var i = funcs.length - 1; i >= 0; i--) {
        args = [funcs[i].apply(this, args)];
      }
      return args[0];
    };
  };

  // Returns a function that will only be executed after being called N times.
  _.after = function(times, func) {
    if (times <= 0) return func();
    return function() {
      if (--times < 1) { return func.apply(this, arguments); }
    };
  };

  // Object Functions
  // ----------------

  // Retrieve the names of an object's properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = nativeKeys || function(obj) {
    if (obj !== Object(obj)) throw new TypeError('Invalid object');
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys[keys.length] = key;
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    return _.map(obj, _.identity);
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(obj) {
    var result = {};
    each(_.flatten(slice.call(arguments, 1)), function(key) {
      if (key in obj) result[key] = obj[key];
    });
    return result;
  };

  // Fill in a given object with default properties.
  _.defaults = function(obj) {
    each(slice.call(arguments, 1), function(source) {
      for (var prop in source) {
        if (obj[prop] == null) obj[prop] = source[prop];
      }
    });
    return obj;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Internal recursive comparison function.
  function eq(a, b, stack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the Harmony `egal` proposal: http://wiki.ecmascript.org/doku.php?id=harmony:egal.
    if (a === b) return a !== 0 || 1 / a == 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a._chain) a = a._wrapped;
    if (b._chain) b = b._wrapped;
    // Invoke a custom `isEqual` method if one is provided.
    if (a.isEqual && _.isFunction(a.isEqual)) return a.isEqual(b);
    if (b.isEqual && _.isFunction(b.isEqual)) return b.isEqual(a);
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className != toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, dates, and booleans are compared by value.
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return a == String(b);
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive. An `egal` comparison is performed for
        // other numeric values.
        return a != +a ? b != +b : (a == 0 ? 1 / a == 1 / b : a == +b);
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a == +b;
      // RegExps are compared by their source patterns and flags.
      case '[object RegExp]':
        return a.source == b.source &&
               a.global == b.global &&
               a.multiline == b.multiline &&
               a.ignoreCase == b.ignoreCase;
    }
    if (typeof a != 'object' || typeof b != 'object') return false;
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.
    var length = stack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (stack[length] == a) return true;
    }
    // Add the first object to the stack of traversed objects.
    stack.push(a);
    var size = 0, result = true;
    // Recursively compare objects and arrays.
    if (className == '[object Array]') {
      // Compare array lengths to determine if a deep comparison is necessary.
      size = a.length;
      result = size == b.length;
      if (result) {
        // Deep compare the contents, ignoring non-numeric properties.
        while (size--) {
          // Ensure commutative equality for sparse arrays.
          if (!(result = size in a == size in b && eq(a[size], b[size], stack))) break;
        }
      }
    } else {
      // Objects with different constructors are not equivalent.
      if ('constructor' in a != 'constructor' in b || a.constructor != b.constructor) return false;
      // Deep compare objects.
      for (var key in a) {
        if (_.has(a, key)) {
          // Count the expected number of properties.
          size++;
          // Deep compare each member.
          if (!(result = _.has(b, key) && eq(a[key], b[key], stack))) break;
        }
      }
      // Ensure that both objects contain the same number of properties.
      if (result) {
        for (key in b) {
          if (_.has(b, key) && !(size--)) break;
        }
        result = !size;
      }
    }
    // Remove the first object from the stack of traversed objects.
    stack.pop();
    return result;
  }

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b, []);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (_.isArray(obj) || _.isString(obj)) return obj.length === 0;
    for (var key in obj) if (_.has(obj, key)) return false;
    return true;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType == 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) == '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    return obj === Object(obj);
  };

  // Is a given variable an arguments object?
  _.isArguments = function(obj) {
    return toString.call(obj) == '[object Arguments]';
  };
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return !!(obj && _.has(obj, 'callee'));
    };
  }

  // Is a given value a function?
  _.isFunction = function(obj) {
    return toString.call(obj) == '[object Function]';
  };

  // Is a given value a string?
  _.isString = function(obj) {
    return toString.call(obj) == '[object String]';
  };

  // Is a given value a number?
  _.isNumber = function(obj) {
    return toString.call(obj) == '[object Number]';
  };

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return _.isNumber(obj) && isFinite(obj);
  };

  // Is the given value `NaN`?
  _.isNaN = function(obj) {
    // `NaN` is the only value for which `===` is not reflexive.
    return obj !== obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) == '[object Boolean]';
  };

  // Is a given value a date?
  _.isDate = function(obj) {
    return toString.call(obj) == '[object Date]';
  };

  // Is the given value a regular expression?
  _.isRegExp = function(obj) {
    return toString.call(obj) == '[object RegExp]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Has own property?
  _.has = function(obj, key) {
    return hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iterators.
  _.identity = function(value) {
    return value;
  };

  // Run a function **n** times.
  _.times = function (n, iterator, context) {
    for (var i = 0; i < n; i++) iterator.call(context, i);
  };

  // Escape a string for HTML interpolation.
  _.escape = function(string) {
    return (''+string).replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g,'&#x2F;');
  };

  // If the value of the named property is a function then invoke it;
  // otherwise, return it.
  _.result = function(object, property) {
    if (object == null) return null;
    var value = object[property];
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Add your own custom functions to the Underscore object, ensuring that
  // they're correctly added to the OOP wrapper as well.
  _.mixin = function(obj) {
    each(_.functions(obj), function(name){
      addToWrapper(name, _[name] = obj[name]);
    });
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = idCounter++;
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /.^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    '\\': '\\',
    "'": "'",
    'r': '\r',
    'n': '\n',
    't': '\t',
    'u2028': '\u2028',
    'u2029': '\u2029'
  };

  for (var p in escapes) escapes[escapes[p]] = p;
  var escaper = /\\|'|\r|\n|\t|\u2028|\u2029/g;
  var unescaper = /\\(\\|'|r|n|t|u2028|u2029)/g;

  // Within an interpolation, evaluation, or escaping, remove HTML escaping
  // that had been previously added.
  var unescape = function(code) {
    return code.replace(unescaper, function(match, escape) {
      return escapes[escape];
    });
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  _.template = function(text, data, settings) {
    settings = _.defaults(settings || {}, _.templateSettings);

    // Compile the template source, taking care to escape characters that
    // cannot be included in a string literal and then unescape them in code
    // blocks.
    var source = "__p+='" + text
      .replace(escaper, function(match) {
        return '\\' + escapes[match];
      })
      .replace(settings.escape || noMatch, function(match, code) {
        return "'+\n_.escape(" + unescape(code) + ")+\n'";
      })
      .replace(settings.interpolate || noMatch, function(match, code) {
        return "'+\n(" + unescape(code) + ")+\n'";
      })
      .replace(settings.evaluate || noMatch, function(match, code) {
        return "';\n" + unescape(code) + "\n;__p+='";
      }) + "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __p='';" +
      "var print=function(){__p+=Array.prototype.join.call(arguments, '')};\n" +
      source + "return __p;\n";

    var render = new Function(settings.variable || 'obj', '_', source);
    if (data) return render(data, _);
    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled function source as a convenience for build time
    // precompilation.
    template.source = 'function(' + (settings.variable || 'obj') + '){\n' +
      source + '}';

    return template;
  };

  // Add a "chain" function, which will delegate to the wrapper.
  _.chain = function(obj) {
    return _(obj).chain();
  };

  // The OOP Wrapper
  // ---------------

  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.
  var wrapper = function(obj) { this._wrapped = obj; };

  // Expose `wrapper.prototype` as `_.prototype`
  _.prototype = wrapper.prototype;

  // Helper function to continue chaining intermediate results.
  var result = function(obj, chain) {
    return chain ? _(obj).chain() : obj;
  };

  // A method to easily add functions to the OOP wrapper.
  var addToWrapper = function(name, func) {
    wrapper.prototype[name] = function() {
      var args = slice.call(arguments);
      unshift.call(args, this._wrapped);
      return result(func.apply(_, args), this._chain);
    };
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    wrapper.prototype[name] = function() {
      var wrapped = this._wrapped;
      method.apply(wrapped, arguments);
      var length = wrapped.length;
      if ((name == 'shift' || name == 'splice') && length === 0) delete wrapped[0];
      return result(wrapped, this._chain);
    };
  });

  // Add all accessor Array functions to the wrapper.
  each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    wrapper.prototype[name] = function() {
      return result(method.apply(this._wrapped, arguments), this._chain);
    };
  });

  // Start chaining a wrapped Underscore object.
  wrapper.prototype.chain = function() {
    this._chain = true;
    return this;
  };

  // Extracts the result from a wrapped and chained object.
  wrapper.prototype.value = function() {
    return this._wrapped;
  };

}).call(this);
define("underscore", (function (global) {
    return function () {
        var ret, fn;
        return ret || global._;
    };
}(this)));

// Helper functions for computing distance.
//
// The name of this should probably be changed, once we learn what other
// kinds of things we're including here.

define('math/distance',['require'],function(require){

var Distance = {
  // sqrt(x^2 + y^2), computed to avoid overflow and underflow.
  // http://en.wikipedia.org/wiki/Hypot
  hypot: function(x, y) {
    if(x === 0 && y === 0) {
      return 0;
    }
    if (Math.abs(x) > Math.abs(y)) {
      return Math.abs(x) * Math.sqrt((y/x) * (y/x) + 1);
    } else {
      return Math.abs(y) * Math.sqrt((x/y) * (x/y) + 1);
    }
  },

  // (x1 + x2)/2, computed to avoid overflow.
  mean: function (x1, x2) {
    return ((x1 > 0) === (x2 > 0)) ? x1 + 0.5*(x2 - x1) : 0.5*(x1 + x2);
  },

  dot: function(x1, y1, x2, y2) {
    return x1*x2 + y1*y2;
  },

  // Consider the line extending the segment, parameterized as
  // v1 + t (v2 - v1), where p, v1, and v2 are (xp, yp), (x1, y1), and
  // (x2, y2) respectively.
  //
  // Return the value of the parameter t for the projected point of p onto
  // the line through the segment.
  //
  // It falls where t = [(p-v) . (w-v)] / |w-v|^2
  //
  // Returns 0 in the degenerate case where v1 === v2.
  pointToSegmentParameter: function(xp, yp, x1, y1, x2, y2) {
    var line_length = this.hypot(x2 - x1, y2 - y1);

    // Degenerate case of a point to a point
    if (line_length === 0) return 0;

    var t = this.dot(
      (xp - x1)/line_length,
      (yp - y1)/line_length,
      (x2 - x1)/line_length,
      (y2 - y1)/line_length
    );

    return t;
  },

  closestPointOnSegment: function (xp, yp, x1, y1, x2, y2) {
    var t = this.pointToSegmentParameter(xp, yp, x1, y1, x2, y2);
    
    if (t <= 0) return [x1, y1];
    if (t >= 1) return [x2, y2];
    return [x1 + t*(x2 - x1), y1 + t*(y2 - y1)];
  },

  // Shortest distance from a point to a line segment
  // http://stackoverflow.com/questions/849211/shortest-distance-between-a-point-and-a-line-segment
  pointToSegment: function (xp, yp, x1, y1, x2, y2) {
    var p = this.closestPointOnSegment(xp, yp, x1, y1, x2, y2);
    return this.hypot(xp - p[0], yp - p[1]);
  }
};

return Distance;
});

// Utilites for finding and refining points of interest in samled functions.
//
// bisect* are low level functions take endpoints and a function, and return
// a single [x, f(x)] pair, where f is the function that was passed in, or
// null if a non-finite value of the function is encountered during
// evaluation. These methods have preconditions on the endpoints that callers
// are expected to enforce (because they are called recursively). They bisect
// to machine precision.
//
// find* are higher level. They take an array of segments and a function.
// Each segment is an array of points representing a polyline that
// approximates the function over a range where the function is expected to be
// continuous. No more than one zero and one extremum will be returned between
// individual point pairs in the segments list.
//
// findPOIs collects the results of all the find* methods together.


define('math/poi',['require','./builtin','./distance'],function(require){
  var BuiltIn = require('./builtin');
  var Distance = require('./distance');

// floatMiddle is a helper function for bisecting floats. Necessary because
// floats are denser near 0 than they are elsewhere, so using a normal mean
// results in slow bisection to 0.
//
// This function returns the arithmetic mean if both numbers have
// magnitude larger than 1e-2, 0 if the numbers are small and have opposite
// signs, and the signed geometric mean if the numbers have the same sign. The
// geometric mean bisects the exponent instead of the mantissa, which is what
// we want near 0.

function floatMiddle(a, b) {
  var tmp;
  if (a > b) {
    tmp = a; a = b; b = tmp;
  }
  var aPos = a > 0;
  var bPos = b > 0;
  var aLarge = Math.abs(a) > 1e-2;
  var bLarge = Math.abs(b) > 1e-2;
  if (aLarge || bLarge) return Distance.mean(a, b);
  if (a === 0) return b*Math.abs(b);
  if (b === 0) return a*Math.abs(a);
  if (aPos !== bPos) return 0;
  var gMean = (aPos) ? Math.sqrt(a*b) : -Math.sqrt(a*b);
  // Check if the geometric mean actually lies between the numbers (it might
  // not because of floating point rounding). If it does not, return the
  // normal mean, which is computed in a way that guarantees it will be
  // between the inputs.
  return ((gMean >= a) && (b >= gMean)) ? gMean : Distance.mean(a, b);
}

function bisectZero(x0, y0, x2, y2, fn) {
  // Preconditions:
  // 1. y0 and y2 are finite and non-zero and have opposite sign
  if (!(isFinite(y0) && isFinite(y2) && (y0 < 0) !== (y2 < 0))) {
    //console.log('bisectZero called with bad y values', [y0, y2]);
    return;
  }

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);
    
    if (!isFinite(y1)) return null;

    // We can't bisect any further; return x for side with y closer to 0.
    if (x1 === x0 || x1 === x2) {
      return Math.abs(y0) <= Math.abs(y2) ? [x0, y0] : [x2, y2];
    }

    // Found a 0 early. Check if we're on a flat, and return the center of it.
    if (y1 === 0) return flatCenter(x0, y0, x1, y1, x2, y2, fn);

    // Bisect on side that brackets zero
    if ((y0 < 0) !== (y1 < 0)) {
      x2 = x1; y2 = y1;
    } else {
      x0 = x1; y0 = y1;
    }
  }
}

// Returns the center of a possibly flat region with constant value y1
function flatCenter(x0, y0, x1, y1, x2, y2, fn) {
  // Preconditions:
  // 1. x0 < x1 < x2

  var edge;
  if (!isFinite(y1)) return;

  if (!isFinite(y0)) {
    edge = bisectFinite(x0, y0, x1, y1, fn);
    x0 = edge[0];
    y0 = edge[1];
  }

  if (!isFinite(y2)) {
    edge = bisectFinite(x1, y1, x2, y2, fn);
    x2 = edge[0];
    y2 = edge[1];
  }

  var flatLeft, flatRight;

  if (y0 === y1) {
    flatLeft = [x0, y0];
  } else {
    flatLeft = bisectConstant(x0, y0, x1, y1, fn, y1);
  }
  
  if (y2 === y1) {
    flatRight = [x2, y2];
  } else {
    flatRight = bisectConstant(x1, y1, x2, y2, fn, y1);
  }

  var xc = floatMiddle(flatLeft[0], flatRight[0]);
  return [xc, fn(xc)];
}

function bisectFinite(x0, y0, x2, y2, fn) {
  // Preconditions:
  // 1. isFinite(y0) !== isFinite(y2)
  if (isFinite(y0) === isFinite(y2)) {
    //console.log('bisectFinite called with bad y values', [y0, y2]);
    return;
  }
  
  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);

    // We can't bisect any further; return [x, y] pair for side that is finite.
    if (x1 === x0 || x1 === x2) return isFinite(y0) ? [x0, y0]: [x2, y2];

    // Bisect on side that brackets zero
    if (isFinite(y1) !== isFinite(y0)) {
      x2 = x1; y2 = y1;
    } else {
      x0 = x1; y0 = y1;
    }
  }
}

function bisectConstant(x0, y0, x2, y2, fn, constant) {
  // Preconditions:
  // 1. (y0 === constant) !== (y2 === constant)
  if ((y0 === constant) === (y2 === constant)) {
    //console.log('bisectConstant called with bad y values', [y0, y2, constant]);
    return;
  }
  
  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);
    
    // We can't bisect any further; return [x, y] pair for side with
    // y === constant
    if (x1 === x0 || x1 === x2) return (y0 === constant) ? [x0, y0]: [x2, y2];
    
    if ((y1 === constant) !== (y0 === constant)) {
      x2 = x1; y2 = y1;
    } else {
      x0 = x1; y0 = y1;
    }
  }
}

function bisectExtremum(x0, y0, x2, y2, x4, y4, fn) {
  // Preconditions:
  // 1. x0 < x2 < x4
  // 2. y0, y2, and y4 are finite, non-equal, and y2 > y0 === y2 > y4.
  if (!(x0 < x2 && x2 < x4)) {
    //console.log('bisectExtremum called with bad x values', [x0, x2, x4]);
    return;
  }
  if (!(
    (isFinite(y0) && isFinite(y2) && isFinite(y4)) &&
    (y0 !== y2 && y2 !== y4) &&
    (y2 > y0) === (y2 > y4)
  )) {
    //console.log('bisectExtremum called with bad y values', [y0, y2, y4]);
    return;
  }
  
  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);
    var x3 = floatMiddle(x2, x4);
    var y3 = fn(x3);
    
    if (!isFinite(y1) || !isFinite(y3)) return null;
    
    // We can't bisect any further; return x and y for most extreme value
    if (x1 === x0 || x1 === x2 || x3 === x2 || x3 === x4) {
      if ((y1 > y2) === (y2 > y0)) return [x1, y1];
      if ((y3 > y2) === (y2 > y0)) return [x3, y3];
      return [x2, y2];
    }
    
    // We've hit a flat. Find its edges and return x and y for its center.
    if (y1 === y2 || y3 === y2) {
      return flatCenter(x0, y0, x2, y2, x4, y4, fn);
    }
    
    // Bisect on side that brackets zero
    if ((y1 > y0) === (y2 > y0) && (y1 > y0) === (y1 > y2)) {
      x4 = x2; y4 = y2; x2 = x1; y2 = y1;
    } else if ((y3 > y4) === (y2 > y4) && (y3 > y2) === (y3 > y4)) {
      x0 = x2; y0 = y2; x2 = x3; y2 = y3;
    } else {
      x0 = x1; y0 = y1; x4 = x3; y4 = y3;
    }
  }
}

// Returns larget jump among 4 points. Used in final step of bisectJump
function largestJump(x0, y0, x1, y1, x2, y2, x3, y3) {
  // Preconditions:
  // 1. y0, y1, y2, and y3 are all finite
  var d1 = Math.abs(y1 - y0);
  var d2 = Math.abs(y2 - y1);
  var d3 = Math.abs(y3 - y2);
  
  if (d1 > d2 && d1 > d3) return [[x0, y0], [x1, y1]];
  if (d3 > d2 && d3 > d1) return [[x2, y2], [x3, y3]];
  return [[x1, y1], [x2, y2]];
}

// Tries to find the largest jump in an interval. Returns left side and right
// side of jump as [[xl, yl], [xr, yr]], or null if no jump was found.
// Tolerance is allowed to be 0, and this works for some smooth functions,
// but returns false positives for others.
function bisectJump(x0, y0, x2, y2, x4, y4, fn, tolerance) {
  // Preconditions:
  // 1. x0 < x2 < x4
  // 2. y0, y2, and y4 are all finite.
  // Also expect x2 - x0 ~= x4 - x2
  if (!(x0 < x2 && x2 < x4)) {
    //console.log('bisectJump called with bad x values', [x0, x2, x4]);
    return;
  }
  if (!(isFinite(y0) && isFinite(y2) && isFinite(y4))) {
    //console.log('bisectJump called with bad y values', [y0, y2, y4]);
    return;
  }

  while (true) {
    var x1 = floatMiddle(x0, x2);
    var y1 = fn(x1);
    var x3 = floatMiddle(x2, x4);
    var y3 = fn(x3);
    var dy1 = Math.abs(y1 - Distance.mean(y0, y2));
    var dy3 = Math.abs(y3 - Distance.mean(y2, y4));
    var left;
    var right;
    if (!tolerance) tolerance = 0;

    if (dy1 <= tolerance && dy3 <= tolerance) return null;

    // An undefined region counts as a jump.
    if (!isFinite(y1)) {
      left = bisectFinite(x0, y0, x1, y1, fn);
      right = bisectFinite(x1, y1, x4, y4, fn);
      return [left, right];
    }

    if (!isFinite(y3)) {
      left = bisectFinite(x0, y0, x3, y3, fn);
      right = bisectFinite(x3, y3, x4, y4, fn);
      return [left, right];
    }

    if ((x1 === x0 || x1 === x2) && (x3 === x2 || x3 === x4)) {
      if (Math.abs(y2 - y0) > Math.abs(y4 - y2)) {
        left = [x0, y0];
        right = [x2, y2];
      } else {
        left = [x2, y2];
        right = [x4, y4];
      }
      return [left, right];
    } else if (x1 === x0 || x1 === x2) {
      return largestJump(x0, y0, x2, y2, x3, y3, x4, y4);
    } else if (x3 === x2 || x3 === x4) {
      return largestJump(x0, y0, x1, y1, x2, y2, x4, y4);
    }

    if (dy1 > dy3) {
      x4 = x2; y4 = y2; x2 = x1; y2 = y1;
    } else {
      x0 = x2; y0 = y2; x2 = x3; y2 = y3;
    }
  }
}

function findZeros(segments, fn) {
  var segment;
  var accumulator = { x: [], y: [] };
  var x0;
  var y0;
  var x2;
  var y2;
  var zero;
  var flatLeft;
  for (var i=0, li=segments.length; i<li; i++) {
    segment = segments[i];
    flatLeft = undefined;
    if (segment[1] === 0) flatLeft = [segment[0], segment[1]];
    for (var j=0, lj=segment.length; j<lj-2; j = j+2) {
      x0 = segment[j];
      y0 = segment[j+1];
      x2 = segment[j+2];
      y2 = segment[j+3];

      if (!flatLeft) {
        if (y2 === 0) {
          // Entering left side of a potential flat. Save its position.
          flatLeft = [x0, y0];
        } else if ((y0 < 0) !== (y2 < 0)) {
          zero = bisectZero(x0, y0, x2, y2, fn);
          if (zero) {
            accumulator.x.push(zero[0]);
            accumulator.y.push(zero[1]);
          }
        }
      } else {
        if (y2 !== 0) {
          // Leaving right side of a flat. Add its center as a root.
          // Don't label zeros that start on segment boundaries.
          if (flatLeft[0] !== segment[0]) {
            zero = flatCenter(flatLeft[0], flatLeft[1], x0, y0, x2, y2, fn);
            accumulator.x.push(zero[0]);
            accumulator.y.push(zero[1]);
          }
          flatLeft = undefined;
        }
        // Otherwise we're in the middle of the flat; do nothing
      }
    }
    // Don't label zero that ends on a segment boundary.
  }
  
  return accumulator;
}

function findExtrema(segments, fn) {
  var segment;
  var accumulator = { x: [], y: [] };
  var x0;
  var y0;
  var x2;
  var y2;
  var x4;
  var y4;
  var extremum;
  var flatLeft;
  for (var i=0, li=segments.length; i<li; i++) {
    segment = segments[i];
    for (var j=0, lj=segment.length; j<lj - 4; j = j+2) {
      x0 = segment[j];
      y0 = segment[j+1];
      x2 = segment[j+2];
      y2 = segment[j+3];
      x4 = segment[j+4];
      y4 = segment[j+5];
      
      //TODO handle extremal endpoints.
      if (!(isFinite(y0) && isFinite(y2) && isFinite(y4))) continue;

      if (y0 !== y2 && y2 === y4) {
        // Entering left side of a flat. Save its position.
        flatLeft = [x0, y0];
      } else if (y0 === y2 && y2 !== y4 && flatLeft) {
        // Leaving right side of a flat.
        if ((y2 > flatLeft[1]) === (y2 > y4)) {
          // Flat is an extremum. Push it's center.
          extremum = flatCenter(flatLeft[0], flatLeft[1], x2, y2, x4, y4, fn);
          accumulator.x.push(extremum[0]);
          accumulator.y.push(extremum[1]);
        }
        flatLeft = undefined;
      } else if (y0 === y2 && y2 === y4) {
        // Middle of a flat, do nothing
      } else if ((y2 > y0) === (y2 > y4)) {
        if (fn.derivative) {
          // If we have derivative information, find zeros of the derivative
          // to find extrema. This gives greater accuracy in the argmax/argmin
          // because the original function is flat at the extrema, but its
          // derivative is (usually) not.
          
          // Make sure we satisfy prereqs of bisectZero
          if ((fn.derivative(x0) > 0) === (fn.derivative(x4) > 0)) continue;
          extremum = bisectZero(
            x0, fn.derivative(x0),
            x4, fn.derivative(x4),
            fn.derivative
          );
          // Currently treat maxima and minima the same
          if (extremum) {
            accumulator.x.push(extremum[0]);
            accumulator.y.push(fn(extremum[0]));
          }
        } else {
          extremum = bisectExtremum(x0, y0, x2, y2, x4, y4, fn);
          // Currently treat maxima and minima the same
          if (extremum) {
            accumulator.x.push(extremum[0]);
            accumulator.y.push(extremum[1]);
          }
        }
      }
    }
  }
  return accumulator;
}

function findIntercept(segments, fn) {
  var intercept = fn(0);
  if (!isFinite(intercept)) return { x: [], y: []};
  return { x: [ 0 ], y: [ fn(0) ] };
}

function findEdges(segments, fn) {
  var slen = segments.length;
  var accumulator = { x: [], y: [] };
  //TODO work out robust system for labeling holes so that we can label all
  // edges.
  //
  // For now, only label edges that are close to zero as zeros.
  
  for (var i = 0; i < slen; i++) {
    var segment = segments[i];
    if (parseFloat(segment[1].toFixed(7)) === 0) {
      accumulator.x.push(segment[0]);
      accumulator.y.push(segment[1]);
    }
    
    if (parseFloat(segment[segment.length - 1].toFixed(7)) === 0) {
      accumulator.x.push(segment[segment.length - 2]);
      accumulator.y.push(segment[segment.length -1]);
    }
  }
  return accumulator;
}

function findPOIs(segments, fn) {
  var zeros = findZeros(segments, fn);
  var edges = findEdges(segments, fn);
  
  // Not displaying edges right now; combine them with zeros.
  zeros.x.push.apply(zeros.x, edges.x);
  zeros.y.push.apply(zeros.y, edges.y);
  
  return {
    zeros: zeros,
    intercept: findIntercept(segments, fn),
    extrema: findExtrema(segments, fn)
  };
}

function findIntersections (differenceSamples, fn1, fn2) {
  var differenceFn = function (x) { return fn2(x) - fn1(x); };

  var zeros = findZeros(differenceSamples, differenceFn);
  var i, elen, zlen;

  // Find tangent intersections.
  var extrema = findExtrema(differenceSamples, differenceFn);
  for (i = 0, elen = extrema.x.length; i < elen; i++) {
    if (BuiltIn.approx(extrema.y[i], 0)) {
      zeros.x.push(extrema.x[i]);
      zeros.y.push(extrema.y[i]);
    }
  }

  // Find original function intersection y values.
  for (i = 0, zlen = zeros.x.length; i < zlen; i++) {
    zeros.y[i] = fn1(zeros.x[i]);
  }
  return zeros;
}

return {
  bisectJump: bisectJump,
  bisectExtremum: bisectExtremum,
  bisectFinite: bisectFinite,
  bisectZero: bisectZero,
  findExtrema: findExtrema,
  findZeros: findZeros,
  findPOIs: findPOIs,
  findIntersections: findIntersections,

  //Enums for POI type
  INTERSECTION: 1001,
  ZERO: 1002,
  INTERCEPT: 1003,
  EXTREMUM: 1004,
  EDGE: 1005,
  DEFINITION: 1006
};

});

define('graphing/graphmode',{
  X: 1,
  Y: 2,
  XYPOINT: 3,
  XYPOINT_MOVABLE: 4,
  PARAMETRIC: 5,
  POLAR: 6,
  POLYGONFILL: 7
});

define('math/plotter',['require','./distance','./poi','graphing/graphmode','./builtinframe'],function(require){
  /* jshint maxlen: false */
  var Distance = require('./distance');
  var POI = require('./poi');
  var GRAPHMODE = require('graphing/graphmode');
  var BuiltInFrame = require('./builtinframe');

var Plotter = {

  //Accumulates a list of segments
  Accumulator: function (domain) {
    var xtolerance, ytolerance;
    
    if (domain) {
      xtolerance = domain.xtolerance || domain.tolerance || 0;
      ytolerance = domain.ytolerance || domain.tolerance || 0;
    } else {
      xtolerance = ytolerance = 0;
    }
    
    var colinear = function (p0, p1, p2, xtolerance, ytolerance) {
      
      if (domain && domain.map) {
        p0 = domain.map(p0);
        p1 = domain.map(p1);
        p2 = domain.map(p2);
      }
      
      var t = Distance.pointToSegmentParameter(
        p2[0], p2[1],
        p0[0], p0[1],
        p1[0], p1[1]
      );

      if (t < 1) return false;

      var closestPoint = [
        p0[0] + t*(p1[0] - p0[0]),
        p0[1] + t*(p1[1] - p0[1])
      ];

      return (
        Math.abs(p2[0] - closestPoint[0]) <= xtolerance &&
        Math.abs(p2[1] - closestPoint[1]) <= ytolerance
      );
    };
    
    return {
      xtolerance: xtolerance,
      ytolerance: ytolerance,
      segments:[],
      segment:null,

      // Second point added to colinear set; defines line direction
      pivotPoint: null,
      // Most recent point in colinear set
      pendingPoint: null,

      addPoint: function (p) {
        this.n+=1;
        var pivotPoint = this.pivotPoint;

        if (!this.segment) {
          this.segment = [p[0], p[1]];  //First point of the segment
          return;
        }

        if (xtolerance < 0 && ytolerance < 0) {
          this.segment.push(p[0], p[1]);
          return;
        }
 
        if (!pivotPoint) {
          this.pivotPoint = p;
          this.pendingPoint = p;
          return;
        }

        // Check if the new point lies on the line segment defined by the
        // last flushed point and the pivot point. If not, flush the pending
        // point and start a new linear section.
        var lastPoint = [
          this.segment[this.segment.length - 2],
          this.segment[this.segment.length - 1]
        ];

        if (!colinear(lastPoint, pivotPoint, p, xtolerance, ytolerance)) {
          this.flushPending();
          this.pivotPoint = p;
        }

        this.pendingPoint = p;
      },

      flushPending: function () {
        if (this.pendingPoint) { //Only happens when we have a segment
          this.segment.push(this.pendingPoint[0], this.pendingPoint[1]);
          this.pivotPoint = null;
          this.pendingPoint = null;
        }
      },
 
      breakSegment: function () {
        this.flushPending();

        if (this.segment) {
          if (this.segment.length > 2) {
            this.segments.push(this.segment);
          }
          this.segment = null;
        }
      },

      getSegments: function () {
        this.breakSegment();
        return this.segments;
      }
    };
  },

//Simple sampling of a [x(t), y(t)] function.
//Domain is provided in terms of the independent variable
//PARAMETERS
//fn(int) => [x, y]
//domain = {min, max, step}
//RETURNS
//Unclipped list of segments which can be passed directly into onGraph
  sampleParametricNaive: function(fn, domain){
    var accumulator = Plotter.Accumulator();
    var point;
    for(var independent = domain.min; independent <= domain.max + domain.step/2; independent += domain.step){
      point = fn(independent);
      if (isFinite(point[0]) && isFinite(point[1])){
        accumulator.addPoint(point);
      }
      else{
        accumulator.breakSegment();
      }
    }
    return accumulator.getSegments();
  },

  //Simple sampling of a y(x) function.
  //PARAMETERS
  //fn(int) => y
  //domain = {min, max, step}
  //RETURNS
  //Unclipped list of segments which can be passed directly into onGraph
  sampleXYNaive: function (fn, domain) {
    var accumulator = Plotter.Accumulator(domain);
    var y;
    for (var x = domain.min; x <= domain.max + domain.step/2; x += domain.step) {
      y = fn(x);
      if (isFinite(y)) {
        accumulator.addPoint([x, y]);
      } else {
        accumulator.breakSegment();
      }
    }
    return accumulator.getSegments();
  },

  sampleXY: function(fn, domain) {
    
    var accumulator = Plotter.Accumulator(domain);
    var edge;
    var x = domain.min;
    var y = fn(x);
    var previousPoint = [x, y];
    var jumpTolerance;
    
    if (domain) jumpTolerance = domain.ytolerance || domain.tolerance;
    
    var handleJump = function (previousPoint, point) {
      if (!isFinite(jumpTolerance) || (jumpTolerance <= 0)) return;
      var jump;
      var xc;
      xc = Distance.mean(previousPoint[0], point[0]);
      jump = POI.bisectJump(
        previousPoint[0], previousPoint[1],
        xc, fn(xc),
        point[0], point[1],
        fn, jumpTolerance
      );
      if (jump) {
        accumulator.addPoint(jump[0]);
        accumulator.breakSegment();
        accumulator.addPoint(jump[1]);
      }
    };
    
    if (isFinite(y)) accumulator.addPoint([x, y]);
    for (x += domain.step; x <= domain.max + domain.step/2; x += domain.step) {
      y = fn(x);
      if (isFinite(y) && isFinite(previousPoint[1])) {
        handleJump(previousPoint, [x, y]);
        accumulator.addPoint([x, y]);
      } else if (isFinite(y) && !isFinite(previousPoint[1])) {
        // left edge
        edge = POI.bisectFinite(previousPoint[0], previousPoint[1], x, y, fn);
        if (edge[0] !== x) accumulator.addPoint(edge);
        handleJump(edge, [x, y]);
        accumulator.addPoint([x, y]);
      } else if (!isFinite(y) && isFinite(previousPoint[1])) {
        // right edge
        edge = POI.bisectFinite(previousPoint[0], previousPoint[1], x, y, fn);
        handleJump(previousPoint, edge);
        if (edge[0] !== previousPoint[0]) accumulator.addPoint(edge);
        accumulator.breakSegment();
      }
      previousPoint = [x, y];
    }
    return accumulator.getSegments();
  },

  findPiPeriod: function (fn, domain, allowAntiperiods) {
    // If the function is periodic by a multiple of 2*pi, or antiperiodic by
    // a multiple of pi within the domain, return the period.
    //
    // Can optionally pass true to find antiperiods if they exist.
    var min = domain.min;
    var range = domain.max - domain.min;
    var tolerance = (domain.xtolerance && domain.ytolerance) ?
      Math.min(domain.xtolerance, domain.ytolerance) :
      domain.tolerance;
    var piRange = Math.floor(range/(Math.PI/BuiltInFrame._angleMultiplier));
    var n, m, period;

    function isPeriod(fn, n) {
      var sign = (n % 2 === 0) ? 1 : -1;
      if (!allowAntiperiods && sign === -1) return false;
      var nPI = n*(Math.PI/BuiltInFrame._angleMultiplier);
      var vals = [ min, min + 1, min + 2, min + 3];
      
      for (var i = 0, ilen = vals.length; i < ilen; i++) {
        if (
          isFinite(fn(vals[i])) !== isFinite(fn(vals[i] + nPI)) ||
          Math.abs(fn(vals[i]) - sign*fn(vals[i] + nPI)) > tolerance
        ) {
          return false;
        }
      }
      
      return true;
    }

    for (n = 1; n <= piRange; n++) {
      if (isPeriod(fn, n)) {
        period = n;
        // Check if integer multiples of the period are also periods
        for (m = 2; m*n <= piRange; m++) {
          if (!isPeriod(fn, m*n)) period = undefined;
        }
        if (period) break;
      }
    }
    
    if (!period) return null;
    
    return period*(Math.PI/BuiltInFrame._angleMultiplier);
  },

  mapPolar: function (p) {
    return [ p[1]*Math.cos(p[0]), p[1]*Math.sin(p[0]) ];
  },

  samplePolar: function (fn, domain) {
    // Don't allow line coallescing, since linear segments of a polar
    // equation don't map to lines on the graph paper.
    domain.map = this.mapPolar;
    return this.sampleXY(fn, domain);
  },

  // Helper for calling a function at steps along a range that makes sure we
  // hit start and endpoints exactly.
  //
  // TODO, use this in sampling xy also. Not
  // doing that for now because I don't want to step on Eric's toes with
  // extrema interleaving system that is being concurrently developed.
  eachStep: function (domain, fn) {
    var min = domain.min;
    var max = domain.max;
    var step = domain.step;
    var range = max - min;
    var nsteps = Math.ceil(range/step);
    var newStep = range/nsteps;
    for (var n = 0; n < nsteps; n++) {
      fn(min + n*newStep);
    }
    fn(max);
  },

  sampleParametricRecursive: function(fn, domain){
    if(domain.max < domain.min){ return [] }

    var accumulator = Plotter.Accumulator(domain);
    var xtolerance, ytolerance;
    if (domain) {
      xtolerance = domain.xtolerance || domain.tolerance || 0;
      ytolerance = domain.ytolerance || domain.tolerance || 0;
    } else {
      xtolerance = ytolerance = 0;
    }

    //Sampling parameters
    var subdivision_levels = 10;

    //Initialize for first pass through loop
    var t0 = domain.min;
    var p0 = fn(t0);
    if (isFinite(p0[0]) && isFinite(p0[1])){
      accumulator.addPoint(p0);
    }

    var p1;
    // Note, processes first point twice; but that's okay.
    this.eachStep(domain, function (t1) {
      p1 = fn(t1);
      Plotter.subsampleParametricRecursive(fn, t0, p0, t1, p1, subdivision_levels, accumulator, xtolerance, ytolerance);
      t0 = t1;
      p0 = p1;
    });

    return accumulator.getSegments();
  },

  subsampleParametricRecursive: function(fn, t0, p0, t1, p1, subdivision_levels_left, accumulator, xtolerance, ytolerance){

    if (t1 === t0) return; // Nothing new to add, but don't need to break;

    var t_mid = Distance.mean(t0, t1);
    var p_mid = fn(t_mid, true);

    var p0_valid = isFinite(p0[0]) && isFinite(p0[1]);
    var p1_valid = isFinite(p1[0]) && isFinite(p1[1]);
    var p_mid_valid = isFinite(p_mid[0]) && isFinite(p_mid[1]);

    if (subdivision_levels_left === 0 || t_mid === t0 || t_mid === t1) {
      accumulator.breakSegment(); //Didn't converge.
      if (p1_valid) accumulator.addPoint(p1);
      return;
    }

    if (!p0_valid && !p1_valid) return; //Don't need to break segment, since p0 should already have been processed.

    if(p0_valid != p1_valid){
      //We're at the edge of where the function is defined.  Subdivide until we find where edge point to machine precision
      var original_t0 = t0;
      var original_t1 = t1;
      var original_p0 = p0;
      var original_p1 = p1;
   
      while (t0 !== t_mid && t_mid !== t1) {

        if(p_mid_valid == p0_valid){
          t0 = t_mid;
          p0 = p_mid;
          p0_valid = p_mid_valid;
        }
        else{
          t1 = t_mid;
          p1 = p_mid;
          p1_valid = p_mid_valid;
        }

        t_mid = t0 + (t1-t0)/2;
        p_mid = fn(t_mid, true);
        p_mid_valid = isFinite(p_mid[0]) && isFinite(p_mid[1]);
      } //When this loop terminates, t_mid equals either t0 or t1

      if(p0_valid){
        Plotter.subsampleParametricRecursive(fn, original_t0, original_p0, t0, p0, subdivision_levels_left-1, accumulator, xtolerance, ytolerance);
        accumulator.breakSegment();
      }
      else{
        accumulator.breakSegment();
        accumulator.addPoint(p1);
        Plotter.subsampleParametricRecursive(fn, t1, p1, original_t1, original_p1, subdivision_levels_left-1, accumulator, xtolerance, ytolerance);
      }
      return;
    }

    if (p0_valid && p_mid_valid && p1_valid) {
      
      var t = Distance.pointToSegmentParameter(
        p_mid[0],
        p_mid[1],
        p0[0],
        p0[1],
        p1[0],
        p1[1]
      );
      
      // If the new point lies betwen 20 % and 80 % of the way between the
      // outer points, and the distance from the segment to the new point is
      // less than tolerance, add the rightmost point, and stop recursing.
      if (
        t > 0.2 &&
        t < 0.8 &&
        Math.abs(p_mid[0] - (p0[0] + t*(p1[0] - p0[0]))) <= xtolerance &&
        Math.abs(p_mid[1] - (p0[1] + t*(p1[1] - p0[1]))) <= ytolerance
      ) {
        accumulator.addPoint(p1);
        return;
      }
    }

    // If we didn't stop, recurse. Don't recurse between two points that are
    // equal, since this will make us do a lot of work if our point becomes
    // independent of t over some range.
    if (!(p0[0] === p_mid[0] && p0[1] === p_mid[1])) {
      Plotter.subsampleParametricRecursive(fn, t0, p0, t_mid, p_mid, subdivision_levels_left - 1, accumulator, xtolerance, ytolerance);
    }
    if (!(p1[0] === p_mid[0] && p1[1] === p_mid[1])) {
      Plotter.subsampleParametricRecursive(fn, t_mid, p_mid, t1, p1, subdivision_levels_left - 1, accumulator, xtolerance, ytolerance);
    }
  },

  validateViewState: function(viewState){
    /*jshint -W018*/ //Suppresses !(a>b) jshint warning.
    if(!viewState) return false;
    var xmin = viewState.viewport.xmin;
    var xmax = viewState.viewport.xmax;
    var ymin = viewState.viewport.ymin;
    var ymax = viewState.viewport.ymax;
    if(!(xmax > xmin)) return false;
    if(!(ymax > ymin)) return false;
    if(!(viewState.screen.width > 0)) return false;
    if(!(viewState.screen.height > 0)) return false;
    return true;
  },

  computeDomain: function(viewState, graph_info, fn){
    var xmin = viewState.viewport.xmin;
    var xmax = viewState.viewport.xmax;
    var ymin = viewState.viewport.ymin;
    var ymax = viewState.viewport.ymax;

    var xtolerance = 0.25*(xmax - xmin)/viewState.screen.width;
    var ytolerance = 0.25*(ymax - ymin)/viewState.screen.height;
    var isLinear = graph_info.isLinear;

    var domain;
    switch(graph_info.graphMode){
      case GRAPHMODE.X:
        domain = {
          min: ymin,
          max: ymax,
          xtolerance: ytolerance, // Note, switched
          ytolerance: xtolerance,
          step: (isLinear ? ymax - ymin : ytolerance)
        };
        break;
      case GRAPHMODE.Y:
        domain = {
         min: xmin,
         max: xmax,
         xtolerance: xtolerance,
         ytolerance: ytolerance,
         step: (isLinear ? xmax - xmin : xtolerance)
        };
        break;
      case GRAPHMODE.POLAR:
        domain = {
          min :0,
          max: 2*Math.PI/BuiltInFrame._angleMultiplier*6,
          step: (2*Math.PI/BuiltInFrame._angleMultiplier)/1000,
          tolerance: Math.min(xtolerance, ytolerance)
        };
        var period = Plotter.findPiPeriod(fn, domain, graph_info.operator === '=');
        if (period) domain.max = domain.min + period;
        break;
      case GRAPHMODE.PARAMETRIC:
        domain = {
          min: graph_info.domain.min,
          max: graph_info.domain.max,
          step: graph_info.domain.step,
          xtolerance: xtolerance,
          ytolerance: ytolerance
        };
        break;
    }
    return domain;
  },

  //Computes domain, decides what function to use, and returns answer
  computeGraphData: function(viewState, graph_info, fn){
    var domain = Plotter.computeDomain(viewState, graph_info, fn);
    if(!domain) return [];
    var segments;
    var tmp;
    switch(graph_info.graphMode){
      case GRAPHMODE.X:
      case GRAPHMODE.Y:
      segments = Plotter.sampleXY(fn, domain);
      break;
      case GRAPHMODE.POLAR:
      segments = Plotter.samplePolar(fn, domain);
      break;
      case GRAPHMODE.PARAMETRIC:
      if(!domain.step) domain.step = (domain.max - domain.min) / 1000;
      segments = Plotter.sampleParametricRecursive(fn, domain);
    }

    var poi = [];
    if(graph_info.graphMode !== GRAPHMODE.PARAMETRIC){
      poi = POI.findPOIs(segments, fn);
      segments = Plotter.interleaveExtrema(segments, poi);
    }

    // Flip POI representation if necessary
    if (graph_info.graphMode === GRAPHMODE.X) {
      for (var type in poi) {
        if (!poi.hasOwnProperty(type)) continue;
        tmp = poi[type].y;
        poi[type].y = poi[type].x;
        poi[type].x = tmp;
      }
    }

    var datum = {
      segments: segments,
      graphMode: graph_info.graphMode,
      color: graph_info.color,
      operator: graph_info.operator,
      poi: poi,
      expr: null //compiled.fn
    };
    return [datum];
  },

  interleaveExtrema: function(segments, poi) {
    var nsegments = segments.length;
    var segment;
    var newSegments = Array(nsegments);
    var newSegment;
    var slen;
    var extrema = poi.extrema;
    var j=0;
    var elen = extrema.x.length;

    for (var n = 0; n < nsegments; n++) {
      segment = segments[n];
      slen = segment.length;
      newSegment = [];
      for (var i=0; i < slen; i = i+2) {
        // push extrema between last point and current point onto
        // accumulator.
        while (j < elen && extrema.x[j] <= segment[i]) {
          // Don't push the same point twice
          if (extrema.x[j] !== segment[i]) {
            newSegment.push(extrema.x[j], extrema.y[j]);
          }
          j++;
        }
        // push current point onto accumulator.
        newSegment.push(segment[i], segment[i+1]);
      }
      newSegments[n] = newSegment;
    }
    return newSegments;
  },

  polygonsFromSegments: function(bottom_segments, top_segments, graphMode){
    var last_x = function(segments){
      var last_segment = segments[segments.length - 1];
      return last_segment[last_segment.length - 2];
    };

    var polygons = [];
    //Until we have pulled the last segment:
      //Continue to pull segments from the top and the bottom until we find two which end at the same point.
      //When that happens, close the polygon, and start another one.
    var i_top = 0;
    var i_bottom = 0;
    var current_bottom = [];
    var current_top = [];
    var top_x = -Infinity;
    var bottom_x = -Infinity;

    while(true){

      if(top_x <= bottom_x){
        if(i_top >= top_segments.length) break;
        current_top.push(top_segments[i_top++]);
      }
      if(bottom_x <= top_x){
        if(i_bottom >= bottom_segments.length) break;
        current_bottom.push(bottom_segments[i_bottom++]);
      }
      top_x = last_x(current_top);
      bottom_x = last_x(current_bottom);

      if(top_x == bottom_x){
        polygons.push(Plotter.polygonFromSegments(current_bottom, current_top, graphMode));
        current_top = [];
        current_bottom = [];
      }
    }
    return polygons;
  },

  polygonFromSegments: function(bottom_segments, top_segments, graphMode){
    //TODO - respect graphMode (by pushing in proper order)
    var i, j, p, segment;
    var polygon = [];
    var map;
    switch(graphMode){
      case GRAPHMODE.POLAR:
        map = this.mapPolar;
        break;
      case GRAPHMODE.X:
        map = function(p){return [p[1], p[0]];};
        break;
    }
    for(i = 0; i < bottom_segments.length; i++){
      segment = bottom_segments[i];
      for(j = 0; j < segment.length; j += 2){
        p = [segment[j], segment[j+1]];
        if(map)
          p = map(p);
        polygon.push(p[0], p[1]);
      }
    }
    for(i = top_segments.length - 1; i>=0; i--){
      segment = top_segments[i];
      for(j = segment.length - 2; j >= 0; j -= 2){
        p = [segment[j], segment[j+1]];
        if(map)
          p = map(p);
        polygon.push(p[0], p[1]);
      }
    }
    return polygon;
  }
};

return Plotter;
});

// Basically temporary shim to support the API of the current formula object and allow integration into the rest of the
// system. API here is just a direct copy, funny naming and all.

define('math/evaluationstate',['require','pjs','graphing/graphmode'],function(require){
  var P = require('pjs');
  var GRAPHMODE = require('graphing/graphmode');

var EvaluationState = P(function (state) {
  state.init = function (analysis, context, statement) {
    var graphMode;
    

    this.error = analysis.error;
    this.is_graphable = statement && statement.isGraphable();
    
    if (this.is_graphable) graphMode = analysis.graph_info.graphMode;
    this.is_evaluable = statement && statement.isEvaluable();
    if (this.is_evaluable) this.zero_values = statement.getZeroValues();
    this.is_point_list = graphMode === GRAPHMODE.XYPOINT || graphMode === GRAPHMODE.XYPOINT_MOVABLE;
    this.is_parametric = graphMode === GRAPHMODE.PARAMETRIC;
    this.is_shade_between = this.is_graphable && !!statement.shade_between;
    if (this.is_shade_between) this.shade_between_operators = statement.getOperators();
    this.is_double_inequality = this.is_shade_between && statement.getOperators().length == 2;
    if (statement) {
      this.operator = statement.getOperator();
      this.assignment = statement.getAssignedVariable();
      this.variables = statement.getSlidableVariables();
      this.simple_constant = statement.getSliderValue();
    } else {
      this.variables = [];
    }
    //Internally true or undefined, nicer to pass true/false to others
    this.is_slidable = !!analysis.slider;
    this.is_animatable = this.is_slidable && !this.is_graphable;
    if (analysis.moveIds) {
      this.move_ids = analysis.moveIds;
    }
    this.is_tableable = (
      this.is_graphable &&
      !this.is_parametric &&
      !statement.is_solved_equation &&
      this.operator === '=' &&
      !this.is_double_inequality
    );
    if (this.is_tableable) {
      this.table_info = statement.getTableInfo();
      var independent = this.table_info.independent_variable;
      if(independent === 'y' || independent === 'theta') {
        this.is_tableable = false;
        delete(this.table_info);
      }
    }
  };
});
return EvaluationState;
});

define('graphing/columnmode',{
  POINTS: 'POINTS',
  LINES: 'LINES',
  POINTS_AND_LINES: 'POINTS_AND_LINES'
});

define('math/derivative',['require','./parser_util','./evalframe'],function(require){
  var Parser = require('./parser_util');
  var EvalFrame = require('./evalframe');

var DerivativeNode = Parser.DerivativeNode;
var ConstantNode = Parser.ConstantNode;
var NegationNode = Parser.NegationNode;
var ParseNode = Parser.ParseNode;
var BinaryOperatorNode = Parser.BinaryOperatorNode;
var FunctionNode = Parser.FunctionNode;
var FunctionDeclarationNode = Parser.FunctionDeclarationNode;
var FunctionCallExponentNode = Parser.FunctionCallExponentNode;
var IdentifierNode = Parser.IdentifierNode;
var RepeatedOperatorNode = Parser.RepeatedOperatorNode;
var SummationNode = Parser.SummationNode;
var ChainedComparatorNode = Parser.ChainedComparatorNode;
var PiecewiseNode = Parser.PiecewiseNode;
var AssignmentNode = Parser.AssignmentNode;
// TODO derivative not defined for AssignmentNode and ProductNode
// var ProductNode = Parser.ProductNode;

DerivativeNode.open(function (node) {
  node.takeDerivative = function (frame, variable) {
    if (this.freeOf(frame, variable)) return ConstantNode(0);
    
    var dtree = this.expression.takeDerivative(
      frame,
      this.derivative_variable
    );

    // If root of the derivative tree is a Derivative node, then we don't know
    // how to symbolically differentiate this tree. Just wrap it in another
    // DerivativeNode.
    if (dtree instanceof DerivativeNode) {
      return Parser.DerivativeNode(variable, dtree);
    }

    return dtree.takeDerivative(frame, variable);
  };
  
  node.freeOf = function (frame, variable) {
    return this.expression.freeOf(frame, variable);
  };
  
  node.substitute = function (frame) {
    var dtree = this.expression.takeDerivative(
      frame,
      this.derivative_variable
    );

    if (dtree instanceof DerivativeNode) {
      if (frame.hasVariable(this.derivative_variable.identifier)) {
        throw "Can't substitute for derivative variable if derivative can't be taken symbolically";
      }

      return DerivativeNode(this.derivative_variable, this.expression);
    }

    return dtree.substitute(frame);
  };
});

ParseNode.open(function (node) {
  // Fallback. If we don't know how to take the derivative of a node
  // symbolically, wrap it in a DerivativeNode, and the evaluator will
  // evaluate the derivative numerically.
  node.takeDerivative = function (frame, variable) {
    return DerivativeNode(variable, this);
  };

  node.freeOf = function (frame, variable) { return false; };
});

var DerivativeHelpers = {};

// Helper for implementing the chain rule. For f(a), tree is f'(a), and
// arg is a. Returns f'(a)*da/dx, but checks whether a is free of x, in which
// case we just return a ConstantNode(0). This is important when f'(a) is
// undefined, since 0*NaN is NaN, but we want the output to be zero.
DerivativeHelpers.chain = function(frame, variable, tree, arg) {
  if (arg.freeOf(frame, variable)) return ConstantNode(0);
  return BinaryOperatorNode.reduce(
    '*',
    tree,
    arg.takeDerivative(frame, variable)
  );
};

// Helper that parses a latex string and returns a function that replaces
// a_{i} identifiers with the trees in an array. e.g.
//
//   substituteFn('a_1*\\sin(a_0)')([Parser.parse('x^2'), Parser.parse('y')])
//
// returns a tree equivalent to
//
//   Parser.parse('y*\\sin(x^2)')
;(function () {

  var tmps = [];
  var argRegExps = [];

  // 9 arguments should be enough for anyone...
  for (var i = 0; i < 9; i++) {
    tmps.push(IdentifierNode('a_{' + i + ParseNode.prototype.tmp() + '}'));
    argRegExps.push(RegExp('a_' + i, 'g'));
  }

  // Do things lexically like this because the latexStrings are known
  // statically, and because we don't yet have all the substitute machinery
  // defined.
  //
  // Note, this code is a little more delicate than it looks. the tmps could
  // almost be straight strings, but I'm making them IdentifierNodes and using
  // .toString and .identifier to finesse the issue that a_{i} parses into an
  // expression with identifier a_i.
  var replaceArgs = function (latexString) {
    for (var i = 0; i < tmps.length; i++) {
      latexString = latexString.replace(argRegExps[i], tmps[i].toString());
    }
    return latexString;
  };

  DerivativeHelpers.substituteFn = function(latexString) {
    var parsed = Parser.parse(replaceArgs(latexString));
    var frame = EvalFrame();
    
    return function (args) {
      var length = args.length;
      for (var i = 0; i < length; i++) {
        frame.setVariable(tmps[i].identifier, args[i]);
      }
      return parsed.substitute(frame);
    };
  };
})();


// Factory method for creating binary operator nodes that folds constants.
// Note, we don't simplify 0*a because a could be NaN or Infinity.
BinaryOperatorNode.reduce = function (operator, arg1, arg2) {
  switch (operator) {
    case '+':
      if (arg1 instanceof ConstantNode && arg2 instanceof ConstantNode) {
        return ConstantNode(arg1.value + arg2.value);
      }
      if (arg1 instanceof ConstantNode && arg1.value === 0) {
        return arg2;
      }
      if (arg2 instanceof ConstantNode && arg2.value === 0) {
        return arg1;
      }
      break;
    case '-':
      if (arg1 instanceof ConstantNode && arg2 instanceof ConstantNode) {
        return ConstantNode(arg1.value - arg2.value);
      }
      if (arg2 instanceof ConstantNode && arg2.value === 0) {
        return arg1;
      }
      break;
    case '*':
      if (arg1 instanceof ConstantNode && arg2 instanceof ConstantNode) {
        return ConstantNode(arg1.value*arg2.value);
      }
      if (arg1 instanceof ConstantNode && arg1.value === 1) {
        return arg2;
      }
      if (arg2 instanceof ConstantNode && arg2.value === 1) {
        return arg1;
      }
      break;
    case '/':
      if (arg2 instanceof ConstantNode && arg2.value === 1 ) {
        return arg1;
      }
      if (arg1 instanceof ConstantNode && arg2 instanceof ConstantNode) {
        return ConstantNode(arg1/arg2);
      }
      break;
    case '^':
      if (arg2 instanceof ConstantNode && arg2.value === 1) {
        return arg1;
      }
      break;
  }
  return BinaryOperatorNode(operator, arg1, arg2);
};

NegationNode.reduce = function (expression) {
  if (expression instanceof ConstantNode) {
    return ConstantNode(-expression.value);
  }
  if (expression instanceof NegationNode) return expression.expression;
  return NegationNode(expression);
};

BinaryOperatorNode.open(function (node, _super) {
  
  // substitution functions for taking derivatives of powers:
  // d/dxf(x)^{g(x)} = g(x)*f(x)^{g(x) - 1}*f'(x) + f(x)^{g(x)}*ln(f(x))*g'(x)
  //                =         bprime*f'(x)        +         eprime*g'(x)
  var bprime = DerivativeHelpers.substituteFn('a_1*a_0^{a_1 - 1}');
  var eprime = DerivativeHelpers.substituteFn('a_0^{a_1}*\\ln(a_0)');
  
  node.takeDerivative = function (frame, variable) {
    if (this.freeOf(frame, variable)) return ConstantNode(0);
    
    var a0 = this.args[0];
    var a1 = this.args[1];
    switch (this.operator) {
      case '+':
        return BinaryOperatorNode.reduce(
          '+',
          a0.takeDerivative(frame, variable),
          a1.takeDerivative(frame, variable)
        );
      case '-':
        return BinaryOperatorNode.reduce(
          '-',
          a0.takeDerivative(frame, variable),
          a1.takeDerivative(frame, variable)
        );
      case '*':
        return BinaryOperatorNode.reduce(
          '+',
          DerivativeHelpers.chain(frame, variable, a1, a0),
          DerivativeHelpers.chain(frame, variable, a0, a1)
        );
      case '/':
        return BinaryOperatorNode.reduce(
          '/',
          BinaryOperatorNode.reduce(
            '-',
            DerivativeHelpers.chain(frame, variable, a1, a0),
            DerivativeHelpers.chain(frame, variable, a0, a1)
          ),
          BinaryOperatorNode.reduce('^', a1, ConstantNode(2))
        );
      case '^':
        return BinaryOperatorNode.reduce(
          '+',
          DerivativeHelpers.chain(frame, variable, bprime(this.args), a0),
          DerivativeHelpers.chain(frame, variable, eprime(this.args), a1)
        );
      default:
        return _super.takeDerivative.call(this, frame, variable);
    }
  };
  
  node.freeOf = function (frame, variable) {
    return this.args[0].freeOf(frame, variable) &&
      this.args[1].freeOf(frame, variable);
  };

  node.substitute = function (frame) {
    return BinaryOperatorNode.reduce(
      this.operator,
      this.args[0].substitute(frame),
      this.args[1].substitute(frame)
    );
  };
});

ChainedComparatorNode.open(function (node) {
  node.freeOf = function (frame, variable) {
    return this.args.every(function (arg) {
      return arg.freeOf(frame, variable);
    });
  };
  
  node.substitute = function (frame) {
    return ChainedComparatorNode(
      this.comparators,
      this.args.map(function(arg) {
        return arg.substitute(frame);
      })
    );
  };
});

ConstantNode.open(function (node) {
  node.takeDerivative = function () { return ConstantNode(0); };

  node.freeOf = function (frame, variable) { return true; };

  node.substitute = function (frame) { return this; };
});

FunctionNode.open(function (node, _super) {
  var derivativeStrings = {
    exp: [ '\\exp(a_0)' ],
    sqrt: [ '\\frac{1}{2*\\sqrt{a_0}}' ],
    sin: [ '\\angleMultiplier(1)*\\cos(a_0)' ],
    cos: [ '-\\angleMultiplier(1)*\\sin(a_0)' ],
    tan: [ '\\angleMultiplier(1)*(\\sec(a_0))^2' ],
    arcsin: [ '\\frac{1}{\\angleMultiplier(1)*\\sqrt{1 - a_0^2}}' ],
    arccos: [ '\\frac{-1}{\\angleMultiplier(1)*\\sqrt{1 - a_0^2}}' ],
    arctan: [ '\\frac{1}{\\angleMultiplier(1)*(1 + a_0^2)}' ],
    sinh: [ '\\cosh(a_0)' ],
    cosh: [ '\\sinh(a_0)' ],
    tanh: [ '(\\sech(a_0))^2' ],
    arcsinh: [ '\\frac{1}{\\sqrt{a_0^2 + 1}}' ],
    arccosh: [ '\\frac{1}{\\sqrt{a_0^2 - 1}}' ],
    arctanh: [ '\\frac{1}{1 - a_0^2}' ],
    factorial: [ '(a_0)!*\\polyGamma(0, a_0 + 1)' ],
    floor: [ '\\left\\{ \\mod(a_0, 1) > 0: 0 \\right\\}' ],
    ceil: [ '\\left\\{ \\mod(a_0, 1) > 0: 0 \\right\\}' ],
    round: [
      '\\left\\{ \\abs(\\mod(a_0, 1) - 0.5) > 0: 0 \\right\\}'
    ],
    abs: [ '\\left\\{ \\abs(a_0) > 0: \\sign(a_0) \\right\\}' ],
    sign: [ '\\left\\{ \\abs(a_0) > 0: 0 \\right\\}' ],
    angleMultiplier: [ '0' ],
    log: [
      // d/dx ln(x) is actually real for negative x, too, but showing the
      // derivative in places where we don't show the function is confusing,
      // so restrict to x > 0.
      '\\left\\{a_0 > 0: \\frac{1}{a_0*\\ln(a_1)}\\right\\}',
      '\\frac{-\\log_{a_1}(a_0)}{a_1*\\ln(a_1)}'
    ],
    pow: [
      'a_1*a_0^{a_1 - 1}',
      'a_0^{a_1}*\\ln(a_0)'
    ],
    nthroot: [
      'a_0^{1/a_1 - 1}/a_1',
      '-\\frac{a_0^{1/a_1}*\\ln(a_0)}{a_1^2}'
    ],
    polyGamma: [
      '0/0',
      '\\polyGamma(1 + a_0, a_1)'
    ],
    // Taking care to leave the derivative undefined for min(x, c) when x == c
    // Not sure how to make the case of d/dx min(x, x) = 1 work right
    min: [
      '\\left\\{ a_0 < a_1 : 1, a_0 > a_1 : 0 \\right\\}',
      '\\left\\{ a_1 < a_0 : 1, a_1 > a_0 : 0 \\right\\}'
    ],
    max: [
      '\\left\\{ a_0 > a_1 : 1, a_0 < a_1 : 0 \\right\\}',
      '\\left\\{ a_1 > a_0 : 1, a_1 < a_0 : 0 \\right\\}'
    ],
    mod: [
      '\\left\\{ \\abs(\\mod(a_0, a_1)) > 0: 1 \\right\\}',
      // Check whether division results in an integer directly instead
      // of computing mod of the args because division sometimes results
      // in an integer when modulus does not result in 0, e.g.
      //
      // 3.8 % -0.7599999999999999 -> 3.3306690738754696e-16, but
      // 3.8 / -0.7599999999999999 -> -5
      //
      // This can confuse the jump detector, resulting in spurious
      // connections.
      //
      //TODO still have some spurious connections near 0 in d/dx mod(3,x).
      // Why?
      '\\left\\{ \\mod(a_0/a_1, 1) > 0: -\\floor(a_0/a_1) \\right\\}'
    ]
  };
  
  var derivativeTable = {};
  
  // Turn derivativeStrings into substitution functions by mapping
  // substituteFn. Extra scope is to keep 'identifier' from leaking.
  ;(function () {
    var ds = derivativeStrings;
    var dt = derivativeTable;
    var substituteFn = DerivativeHelpers.substituteFn;
    for (var identifier in ds) {
      if (!ds.hasOwnProperty(identifier)) continue;
      dt[identifier] = ds[identifier].map(substituteFn);
    }
  })();

  var registerReciprocalDerivative = function (symbol, reciprocal) {
    derivativeTable[reciprocal] = [function (args) {
      return NegationNode.reduce(BinaryOperatorNode.reduce(
        '/',
        derivativeTable[symbol][0](args),
        BinaryOperatorNode.reduce(
          '^',
          FunctionNode(IdentifierNode(symbol), args),
          ConstantNode(2)
        )
      ));
    }];
  };

  [
    ['sin', 'csc'],
    ['cos', 'sec'],
    ['tan', 'cot'],
    ['sinh', 'csch'],
    ['cosh', 'sech'],
    ['tanh', 'coth']
  ].forEach(function(pair) {
    registerReciprocalDerivative(pair[0], pair[1]);
  });

  var registerInverseReciprocalDerivative = function (symbol, reciprocal) {
    derivativeTable[reciprocal] = [function (args) {
      return NegationNode.reduce(BinaryOperatorNode.reduce(
        '/',
        derivativeTable[symbol][0]([
          BinaryOperatorNode.reduce('/', ConstantNode(1), args[0])
        ]),
        BinaryOperatorNode.reduce('^', args[0], ConstantNode(2))
      ));
    }];
  };

  [
    ['arcsin', 'arccsc'],
    ['arccos', 'arcsec'],
    ['arctan', 'arccot'],
    ['arcsinh', 'arccsch'],
    ['arccosh', 'arcsech'],
    ['arctanh', 'arccoth']
  ].forEach(function(pair) {
    registerInverseReciprocalDerivative(pair[0], pair[1]);
  });

  var undefinedFn = function () { return ConstantNode(NaN); };

  // Assumes arity 2
  var registerUndefinedDerivative = function (symbol) {
    derivativeTable[symbol] = [ undefinedFn, undefinedFn ];
  };

  // We actually round arguments for these functions, so to be consistent,
  // these could be defined as 0 except at integers where they're undefined,
  // but that is not a standard definition.
  //
  // Can also define continuous nCr and nPr using gamma function.
  //
  //TODO useful error messages for these?
  ['lcm', 'gcd', 'nCr', 'nPr', 'mcm', 'mcd'].forEach(registerUndefinedDerivative);

  //These functions are used for solving quadratic functions, but will never be differentiated.
  //This is a bit of an abuse of the frame system, but registering them as builtins is a good way
  //to have them available within compiled functions
  ['quadraticFormula', 'quadraticInequalityRegions'].forEach(registerUndefinedDerivative);

  node.takeDerivative = function (frame, variable) {
    if (this.freeOf(frame, variable)) return ConstantNode(0);
    
    var identifier = this.identifier.identifier;

    var args = this.args;
    var partials;
    if (derivativeTable.hasOwnProperty(identifier)) {
      partials = derivativeTable[identifier];
    } else if (frame.hasFunction(identifier)) {
      partials = frame.getFunctionTree(identifier).computePartials(frame);
    } else if (this.args.length === 1 && frame.hasVariable(identifier)) {
      // Treat as implicit multiplication
      return BinaryOperatorNode(
        '*',
        this.identifier,
        this.args[0]
      ).takeDerivative(frame, variable);
    } else {
      return _super.takeDerivative.call(this, frame, variable);
    }

    var nargs = args.length;

    var firstTerm = DerivativeHelpers.chain(
      frame,
      variable,
      partials[nargs - 1](args),
      args[nargs - 1]
    );

    // Implements the chain rule for multi-argument functions. Called
    // recursively to build up a sum using BinaryOperatorNode('+', ...)
    function sumPartials(sumSoFar, n) {
      if (n < 0) return sumSoFar;

      return sumPartials(BinaryOperatorNode.reduce(
        '+',
        sumSoFar,
        DerivativeHelpers.chain(
          frame,
          variable,
          partials[n](args),
          args[n]
        )
      ), n - 1);
    }

    return sumPartials(firstTerm, this.args.length - 2);
  };
  
  node.freeOf = function (frame, variable) {
    return this.args.every(function (arg) {
      return arg.freeOf(frame, variable);
    }) && this.identifier.freeOf(frame, variable);
  };

  node.substitute = function (frame) {
    return FunctionNode(
      this.identifier,
      this.args.map(function (arg) {
        return arg.substitute(frame);
      })
    );
  };
});

FunctionDeclarationNode.open(function (node) {
  node.computePartials = function (frame) {
    var self = this;
    return self.args.map(function (arg) {
      var dtree = self.expression.takeDerivative(frame, arg);
      return function (args) {
        var argFrame = EvalFrame(frame);
        var valFrame = EvalFrame(frame);
        var tmp;
        for (var i = 0; i < self.args.length; i++) {
          tmp = IdentifierNode(self.tmp());
          argFrame.setVariable(self.args[i].identifier, tmp);
          valFrame.setVariable(tmp.identifier, args[i]);
        }
        // Use temporary identifiers to avoid putting self-referencing
        // substitutions in the same frame, i.e. x->2x, since substitute
        // works recursively.
        return dtree.substitute(argFrame).substitute(valFrame);
      };
    });
  };
});

FunctionCallExponentNode.open(function (node) {
  node.takeDerivative = function (frame, variable) {
    return this.getEquivalentNode(frame).takeDerivative(frame, variable);
  };
  
  node.freeOf = function (frame, variable) {
    return this.getEquivalentNode(frame).freeOf(frame, variable);
  };
  
  node.substitute = function (frame) {
    return FunctionCallExponentNode(
      this.identifier.substitute(frame),
      this.arg.substitute(frame),
      this.exponent.substitute(frame)
    );
  };
});

IdentifierNode.open(function (node) {
  node.takeDerivative = function (frame, variable) {
    if (variable.identifier === this.identifier) return ConstantNode(1);
    if (!frame.hasVariable(this.identifier)) return ConstantNode(0);
    return frame.getVariable(this.identifier).takeDerivative(frame, variable);
  };

  node.freeOf = function (frame, variable) {
    if (variable.identifier === this.identifier) return false;
    if (!frame.hasVariable(this.identifier)) return true;
    return frame.getVariable(this.identifier).freeOf(frame, variable);
  };
  
  node.substitute = function (frame) {
    if (!frame.hasVariable(this.identifier)) return this;
    
    return frame.getVariable(this.identifier).substitute(frame);
  };
  
});

NegationNode.open(function (node) {
  node.takeDerivative = function (frame, variable) {
    if (this.freeOf(frame, variable)) return ConstantNode(0);
    return NegationNode.reduce(this.expression.takeDerivative(frame, variable));
  };
  
  node.freeOf = function (frame, variable) {
    return this.expression.freeOf(frame, variable);
  };

  node.substitute = function (frame) {
    return NegationNode.reduce(this.expression.substitute(frame));
  };
});

PiecewiseNode.open(function (node) {
  //NOTE doesn't differentiate the condition (expect this to only produce
  // delta functions)
  node.takeDerivative = function (frame, variable) {
    if (this.freeOf(frame, variable)) return ConstantNode(0);
    
    var pn = PiecewiseNode(
      this.condition,
      this.if_expr.takeDerivative(frame, variable)
    );

    if (this.else_expr) {
      pn.append_else(this.else_expr.takeDerivative(frame, variable));
    }

    return pn;
  };

  //TODO ignores the condition for now. Only want to traverse nodes that
  // derivative traverses.
  node.freeOf = function (frame, variable) {
    if (!this.else_expr) {
      return (
        this.condition.freeOf(frame, variable) &&
        this.if_expr.freeOf(frame, variable)
      );
    }
    return (
      this.condition.freeOf(frame, variable) &&
      this.if_expr.freeOf(frame, variable) &&
      this.else_expr.freeOf(frame, variable)
    );
  };

  node.substitute = function (frame) {
    var pn = PiecewiseNode(
      this.condition.substitute(frame),
      this.if_expr.substitute(frame)
    );

    if (this.else_expr) pn.append_else(this.else_expr.substitute(frame));

    return pn;
  };
});

RepeatedOperatorNode.open(function (node) {
  node.freeOf = function (frame, variable) {
    return (
      this.index.freeOf(frame, variable) &&
      this.lower_bound.freeOf(frame, variable) &&
      this.upper_bound.freeOf(frame, variable) &&
      this.summand.freeOf(frame, variable)
    );
  };

  node.substitute = function (frame) {
    // If the index is in the substitution map, replace it before substituting
    //TODO is this necessary?
    var index = this.index;
    var newFrame = EvalFrame(frame);
    var newIndex;
    //Always replace index with new tmp variable, to prevent early collapsing
    newIndex = IdentifierNode(this.tmp());
    newFrame.setVariable(index.identifier, newIndex);
    
    // Note, can't call this.constructor(...) directly because it's a pjs
    // corner case. See https://github.com/jayferd/pjs/issues/9
    var constructor = this.constructor;
    return constructor(
      newIndex,
      this.lower_bound.substitute(frame),
      this.upper_bound.substitute(frame),
      this.summand.substitute(newFrame)
    );
  };
});

SummationNode.open(function (node) {
  node.takeDerivative = function (frame, variable) {
    if (this.freeOf(frame, variable)) return ConstantNode(0);
    
    return SummationNode(
      this.index,
      this.lower_bound,
      this.upper_bound,
      this.summand.takeDerivative(frame, variable)
    );
  };
});

//TODO ProductNode not implemented. The easy way to write this involves
// divisions of terms that could be zero
// node.takeDerivative = function (frame, variable)


// Nodes that can be graphed need to be able to return the derivative of
// the expression they graph for extremum finding. For example, if we have
// y = sin(x), the sin(x) part is graphed, so we need to be able to find the
// derivative of it.
//
// Call this 'expressionDerivative' instead of 'takeDerivative' because it
// isn't really the derivative of the whole node.
;(function () {
  var expressionDerivative = function (frame, variable) {
    return this.expression.takeDerivative(frame, variable);
  };
  
  AssignmentNode.open(function (node) {
    node.substitute = function (frame) {
      return AssignmentNode(this.assigns, this.expression.substitute(frame));
    };
    
    node.expressionDerivative = expressionDerivative;
  });

  FunctionDeclarationNode.open(function (node) {
    node.substitute = function (frame) {
      return FunctionDeclarationNode(this.assigns, this.args, this.expression.substitute(frame));
    };
    
    node.expressionDerivative = expressionDerivative;
  });
})();

return; //Just re-opens ParseNodes, doesn't return anything

});

define('math/evaluatorobject',['require','underscore','pjs','./parser_util','./plotter','./comparators','./evalframe','./quadratic','./evaluationstate','graphing/graphmode','graphing/columnmode','./derivative'],function(require){
  /* jshint maxlen: false */
  var _ = require('underscore');
  var P = require('pjs');
  var Parser = require('./parser_util');
  var Plotter = require('./plotter');
  var Comparators = require('./comparators');
  var EvalFrame = require('./evalframe');
  var Quadratic = require('./quadratic');
  var EvaluationState = require('./evaluationstate');
  var GRAPHMODE = require('graphing/graphmode');
  var COLUMNMODE = require('graphing/columnmode');
  require('./derivative');

  //Status enums
  var ERROR = {name: 'ERROR'};
  var WARNING = {name: 'WARNING'};
  var EVALUABLE = {name: 'EVALUABLE'};
  var GRAPHABLE = {name: 'GRAPHABLE'};
  var SILENT = {name: 'SILENT'};

  //TODO - need to export Nodes from parse_util into namespace
var AnalysisClass = {}; //Map object type to analysis class

var ConstantNode = Parser.ConstantNode;
var IdentifierNode = Parser.IdentifierNode;
var ErrorNode = Parser.ErrorNode;
var BinaryOperatorNode = Parser.BinaryOperatorNode;

function copyDefinedPOIs(points) {
  var xs = [];
  var ys = [];

  var len = points.length;
  for (var i=0; i<len; i++) {
    xs.push(points[i][0]);
    ys.push(points[i][1]);
  }

  return {
    defined: {x: xs, y: ys}
  };
}

var AnalysisObject = P(function(obj){
  obj.init = function(context){
    this._context = context;
    this._analysis = null;
    this.compiler = context.compiler;
  };

  obj.exportDefinitionsTo = function(frame){
  };

  obj.getAllIds = function(){
    return [];
  };

  obj.cleanupId = function(id){
    throw "base analysis object can't cleanup ID";
  };

  obj.invalidate = function(){
    this._analysis = null;
  };

  obj.getAnalysis = function(){
    if(!this._analysis) this._context.updateAnalysis();
    return this._analysis;
  };

  obj.setAnalysis = function(analysis){
    this._analysis = analysis;
  };

  obj.shouldIntersect = function(){
    return false;
  };

  obj.isEvaluable = function(){
    return this.getAnalysis().status == EVALUABLE;
  };

  obj.isGraphable = function(){
    return this.getAnalysis().status == GRAPHABLE;
  };

  obj.isGraphed = function(){
    return this.isGraphable();
  };

  obj.graphModeFromVariables = function(independent, dependent){
    if(dependent === 'x' || independent === 'y') return GRAPHMODE.X;
    if((dependent === 'r' && independent === 'theta') ||
       (dependent === 'r' && independent === undefined) ||
       (dependent === undefined && independent === 'theta')){
          return GRAPHMODE.POLAR;
    }
    return GRAPHMODE.Y;
  };


  obj.setGraphMode = function(mode, independent, dependent){
    if(dependent === 'y' && !independent) independent = 'x';
    if(dependent === 'x' && !independent) independent = 'y';
    if(dependent === 'r' && !independent) independent = 'theta';

    if(!mode){
      mode = this.graphModeFromVariables(independent, dependent);
    }
    this._analysis.graph_info = {
      color: this._statement.color,
      graphMode:mode,
      independent:independent,
      dependent:dependent,
      operator: this.getOperator(),
      domain: this._statement.domain //Only defined for parametric.  One day for polar also
    };
    return GRAPHABLE;
  };

  obj.computeGraphData = function(viewport){
  };

  obj.getStatus = function(){
    return this.getAnalysis().status;
  };

  obj.getAssignedVariable = function(){
    return null;//TODO - override for variable definitions and equations
  };

  obj.compile = function(){
    return undefined;
  };

  obj.getSlidableVariables = function(){
    return [];
  };

  obj.getSliderValue = function(){
    return NaN;
  };

  obj.getZeroValues = function(){
    return [];
  };

  obj.addFreeVariables = function(variables){
    for(var i = 0; i < variables.length; i++){
      var variable = variables[i];
      if(this._analysis.free_variables.indexOf(variable) > -1) continue;
      this._analysis.free_variables.push(variable);
    }
  };

});

var StatementAnalysis = P(AnalysisObject, function(obj, _super){
  obj.init = function(context, statement, tree){
    _super.init.call(this, context);
    this._statement = statement;
    this._tree = tree;
    this.id = statement.id;

    //TODO - get rid of these copies.  They're here to make the transition easier
    this.color = statement.color;
    this.domain = statement.domain;
  };

  obj.isGraphed = function(){
    return this.isGraphable() && this._statement.shouldGraph;
  };

  obj.getAllIds = function(){
    return [this.id];
  };

  obj.getGraphInfo = function(){
    return this._analysis.graph_info;
  };

  obj.shouldIntersect = function(){
    if(!this.isGraphed()) return false;
    var graphMode = this.getGraphInfo().graphMode;
    return (graphMode === GRAPHMODE.Y || graphMode === GRAPHMODE.X);
  };

  obj.computeGraphData = function(viewState){
    var graphData = {};

    //Compile
    var frame = this._context.getFrame();

    var compiled = this.compile(frame);
    compiled.fn.derivative = this.compileDerivative(frame).fn;

    //Figure out graphMode
    var graph_info = this._analysis.graph_info;

    //Check if it's linear first
    var order =  this._tree.polynomialOrder(frame, graph_info.independent);
    if(order === 1){
      graph_info.isLinear = true;
    }

    //Actually fill out graphData
    graphData[this.id] = Plotter.computeGraphData(viewState, graph_info, compiled.fn);
    graphData[this.id][0].compiled = compiled;

    return graphData;
  };

  obj.getEvaluationState = function(){
    return EvaluationState(this._analysis, this._context, this);
  };

  obj.computeStatus = function(){
    return this.markError("Unimplemented status check");
  };

  obj.getZeroValues = function(){
    return [{val: this._tree.evaluateOnce(this._context.getFrame()), operator:'='}];
  };

  obj.referencesSymbol = function(symbol){
    return this._tree.references(symbol);
  };

  obj.referencedSymbols = function(symbol){
    return this._tree._referencedSymbols;
  };

  obj.getSlidableVariables = function(){
    var free_variables = this._analysis.free_variables;
    var variables = [];
    for(var i = 0; i < free_variables.length; i++){
      var variable = free_variables[i];
      if(this._context.assignmentForbidden(variable)) continue;
      if (this._analysis.hasOwnProperty('solution')) {
        if (variable == this._analysis.solution.variable) continue;
      }
      variables.push(variable);
    }
    return variables;
  };

  obj.exportedSymbols = function(){
    //assignment or function declaration
    var exported = {};
    if(this._tree.assigns)
      exported[this._tree.assigns.identifier] = this._tree.arity;
    return exported;
  };

  obj.exportDefinitionsTo = function (frame, id) {
    if(!this._tree.assigns) return;
    var symbol = this._tree.assigns.identifier;
    if(this._context.assignmentForbidden(symbol)) return;
    this._tree.exportDefinitionsTo(frame, this.compiler);
    // Used to look up which expression defines an identifier
    frame.setDefinitionId(symbol, id);
  };

  obj.shadowedSymbols = function(){
    return [];
  };

  obj.getDependencies = function(){
    return this._tree.dependencies();
  };

  obj.getType = function(){
    return this._tree.statementType;
  };

  obj.freeVariablesError = function(free_variables){
    for(var i = 0; i < free_variables.length; i++){
      if(this._context.assignmentForbidden(free_variables[i])) continue;
      var msg = "Too many free variables to graph.  Try defining '" + free_variables[i] + "'.";
      return this.markError(msg);
    }
    return this.markError("Too many free variables.  I don't know what to do with this");
  };

  obj.getParseError = function(){
    if(this._tree.valid) return undefined;
    return this._tree.error_msg;
  };

  obj.markError = function(msg){
    this._analysis.error = msg;
    this._analysis.status = ERROR;
    return ERROR;
  };

  obj.evaluateOnce = function(frame){
    return this._tree.evaluateOnce(frame);
  };

  obj.evalStrings = function(frame){
    return this._tree.getEvalStrings(frame);
  };

  obj.compileAllBranches = function(frame){
    return [this.compile(frame)];
  };

  obj.compile = function(frame) {
    var source = this.compile_to_strings(frame, this.independent_variable());
    source.fn = this.compiler.compile(source.args, source.function_string);
    return source;
  };

  obj.compileDerivative = function (frame) {
    var independent_variable = this.independent_variable();
    var identifier = IdentifierNode(independent_variable);
    var derivative_tree;
    if (this._tree.expressionDerivative) {
      derivative_tree = this._tree.expressionDerivative(frame, identifier);
    } else {
      derivative_tree = this._tree.takeDerivative(frame, identifier);
    }
    
    //TODO CLEANUP Making a new object like this is a bit of a hack. Consider
    // changing interface of compile functions so we don't need to pass as
    // much stuff.
    var derivativeObject = StatementAnalysis(
      this._context,
      this._statement,
      derivative_tree
    );
    var source = derivativeObject.compile_to_strings(frame,
      independent_variable);
    source.fn = this.compiler.compile(source.args, source.function_string);
    return source;
  };

  obj.independent_variable = function () {
    if (this._analysis.status === GRAPHABLE) {
      return this._analysis.graph_info.independent;
    } else if (this._analysis.free_variables.length === 1) {
      return this._analysis.free_variables[0];
    }
  };

  obj.compile_to_strings = function(frame, independent_variable) {
    var eval_strings = this._tree.getEvalStrings(frame);

    var function_string = eval_strings.statements + 'return ' + eval_strings.expression;
    return {
      args: [independent_variable],
      function_string: function_string
    };
  };

  obj.getOperator = function(){
    return '=';
  };

  obj.getTableInfo = function(){
    return undefined;
  };

  obj.getTableInfo = function(){
    return {
      independent_variable: this._analysis.graph_info.independent,
      dependent_column: this._tree.getInputString(),
      by_reference: false
    };
  };

});

AnalysisClass[EXPRESSION] = P(StatementAnalysis, function(obj, _super){
  obj.computeStatus = function(frame){
    var free_variables = this._analysis.free_variables;
    if(free_variables.length === 0) return EVALUABLE;
    if(free_variables.length === 1){
      switch(free_variables[0]){
      case 'x':     return this.setGraphMode(GRAPHMODE.Y, 'x');
      case 'y':     return this.markError("Maybe you wanted to plot x as a function of y?");
      case 'r':     //Fall through to theta
      case 'theta': return this.markError("Maybe you wanted to plot r as a function of θ?");
      default:      return this.markError("Maybe you wanted to plot x or y as a function of " + free_variables[0] + "?");
      }
    }
    return this.freeVariablesError(free_variables);
  };
});

AnalysisClass[FUNCTION_DEFINITION] = P(StatementAnalysis, function(obj, _super){
  obj.init = function(context, statement, tree){
    _super.init.call(this, context, statement, tree);
    this.arity = this._tree.arity;
  };

  obj.shadowedSymbols = function(){
    return this._tree.passed_variables;
  };

  obj.computeStatus = function(frame){
    if(this._tree.arity === 1){
      if(this._tree.assigns.identifier === this._tree.passed_variables[0]){
        return this.markError("You can't use " + this._tree.assigns.identifier + " as both the function name and the argument");
      }
      if(this._analysis.free_variables.length > 0){ //f(x) = a with a undefined shouldn't plot vs. a
        return this.markError("Every variable you use in the function must be defined.  Either define '"+this._analysis.free_variables[0]+"' or pass it in as an argument");
      }
      return this.setGraphMode(undefined, this._tree.passed_variables[0], this._tree.assigns.identifier);
    }
    if(this._tree.arity > 1) return WARNING; //TODO - need to handle these warnings in the UI
  };

  obj.addFreeVariables = function(variables){
    var passed_variables = this._tree.passedVariables();
    for(var i = 0; i < variables.length; i++){
      var variable = variables[i];
      if(passed_variables.indexOf(variable) > -1) continue;
      if(this._analysis.free_variables.indexOf(variable) > -1) continue;
      this.markError("Every variable you use in the function must be defined.  Either define '"+variable+"' or pass it in as an argument");
      this._analysis.free_variables.push(variable);
    }
  };

  obj.conflictError = function(symbol){
    var msg = '"' + symbol + '" is already defined, so you can\'t reuse it as one of the parameters of this function';
    return this.markError(msg);
  };

  obj.getTableInfo = function(){
    if(this._context.assignmentForbidden(this._tree.assigns.identifier)){
      return {
        independent_variable: this._analysis.graph_info.independent,
        dependent_column: this._tree.expression.getInputString(),
        by_reference: false
      };
    } else {
      return {
        independent_variable: this._analysis.graph_info.independent,
        dependent_column: this._tree.getInputString(),
        by_reference: true
      };
    }
  };

  obj.getSlidableVariables = function(){
    var free_variables = this._analysis.free_variables;
    var variables = [];
    for(var i = 0; i < free_variables.length; i++){
      var variable = free_variables[i];
      if(this._context.assignmentForbidden(variable)) continue;
      variables.push(variable);
    }
    return variables;
  };

});


AnalysisClass[VARIABLE_DEFINITION] = P(StatementAnalysis, function(obj, _super){
  obj.computeStatus = function(frame){
    var variable = this._tree.assigns.identifier;
    var free_variables = this._analysis.free_variables;
    if (variable === 'theta') {
    //TODO - support this
      return this.markError("Sorry - can't graph θ as a function of anything yet");
    }
    if (free_variables.length === 0) {
      var should_slide = (this._tree.expression instanceof ConstantNode);
      if(should_slide) this._analysis.slider = true;

      if ('xyr'.indexOf(variable) !== -1) return this.setGraphMode(undefined, undefined, variable);
      return should_slide ? SILENT : EVALUABLE;  //Don't display the value next to a slider
    }
    if (free_variables.length === 1) {
      if(free_variables[0] === variable) {
      //TODO - needs better message (at least)
        return this.markError('Cannot define ' + free_variables[0] + ' in terms of itself.');
      }
      if (free_variables[0] === 'r') {
        return this.markError('Maybe you wanted to plot r as a function of θ?');
      }
      return this.setGraphMode(undefined, free_variables[0], variable);
    }
    return this.freeVariablesError(free_variables);
  };

  obj.getAssignedVariable = function(){
    return this._tree.assigns.identifier;
  };

  obj.getSliderValue = function(){
    if(this._tree.expression instanceof ConstantNode){
      return this._tree.evaluateOnce();
    }
    return _super.getSliderValue();
  };

  obj.getTableInfo = function(){
    if(this._context.assignmentForbidden(this._tree.assigns.identifier)){
      return {
        independent_variable: this._analysis.graph_info.independent,
        dependent_column: this._tree.expression.getInputString(),
        by_reference: false
      };
    } else {
      return {
        independent_variable: this._analysis.graph_info.independent,
        dependent_column: this._analysis.graph_info.dependent,
        by_reference: true
      };
    }
  };
});

AnalysisClass[IDENTIFIER]= P(StatementAnalysis, function(obj, _super){
  obj.computeStatus = function(frame){
    var free_variables = this._analysis.free_variables;
    if(free_variables.length === 1 && free_variables[0] === 'x') return this.setGraphMode(GRAPHMODE.Y, 'x');
    if(free_variables.length > 0) return SILENT;
    return EVALUABLE;
  };
});

AnalysisClass[CONSTANT]= P(StatementAnalysis, function(obj, _super){
  obj.computeStatus = function(frame){
    return SILENT;
  };

  obj.getSliderValue = function(){
    return this._tree.evaluateOnce();
  };
});

AnalysisClass[ORDERED_PAIR_LIST]= P(StatementAnalysis, function(obj, _super){

  // A point is movable if one or both of its coordinates is an identifier
  // that has a slider associated with it.
  //
  // With this definition:
  //
  // [ 'a = 1', 'b = 1', '(a, b)' ]     can be dragged in both directions
  //
  // [ 'a = 1', 'b = 1', '(a, b + 1)' ] can be dragged horizontally only
  //
  // [ 'a = 1', '(a, a^2)' ]            updates 'a' when dragged, which moves
  //                                    the point along a parabola
  //
  // [ 'a = 1', '(a + 1, a^2)' ]        can't be dragged at all
  //
  obj.computeMovable = function (frame) {
    var self = this;
    if (self._analysis.status != GRAPHABLE) return; //Filter out errors and depdendency problems
    if (self._analysis.free_variables.length !== 0) return;
    if (self._tree.elements.length !== 1) return;
    
    var movable;
    var moveIds = [undefined, undefined];
    self._tree.elements[0].children.forEach(function (tree, index) {
      if (!(tree instanceof IdentifierNode)) return;

      var definitionId = frame.getDefinitionId(tree.identifier);
      if (definitionId === undefined) return;
      if (!self._context.statements[definitionId]._analysis.slider) return;
      
      movable = true;
      moveIds[index] = definitionId;
    });

    if (movable) {
      self._analysis.movable = true;
            
      // upgrade a point to a movable point
      if (self._analysis.graph_info.graphMode === GRAPHMODE.XYPOINT) {
        self._analysis.graph_info.graphMode = GRAPHMODE.XYPOINT_MOVABLE;
      }
      
      // Avoid double updating in case of [ 'a = 1', '(a, a)' ]
      if (moveIds[1] === moveIds[0]) moveIds[1] = undefined;
      self._analysis.moveIds = moveIds;
    }
  };

  obj.computeStatus = function(frame){
    var free_variables = this._analysis.free_variables;
    if(free_variables.length === 0){
      return this.setGraphMode(GRAPHMODE.XYPOINT);
    }

    if(free_variables.length === 1){
      if(free_variables[0] === 't' && this._tree.elements.length == 1){
        return this.setGraphMode(GRAPHMODE.PARAMETRIC, 't');
      }
      return this.markError("Define " + free_variables[0] + " to plot this point, or make each coordinate a function of t to plot it as a parametric function");
    }

    if(free_variables.length > 1){
      return this.freeVariablesError(free_variables);
    }
  };

  obj.getSlidableVariables = function(){
    //Don't offer to create a slider for t
    var variables = _super.getSlidableVariables.call(this);
    var index = variables.indexOf('t');
    if(index > -1){
      variables.splice(index, 1);
    }
    return variables;
  };

  obj.computeGraphData = function(viewState){
    //Figure out graphMode
    var graph_info = this._analysis.graph_info;
    var graphData = {};

    //Test if we're points
    if(graph_info.graphMode === GRAPHMODE.XYPOINT || graph_info.graphMode === GRAPHMODE.XYPOINT_MOVABLE){
      var points = this._tree.evaluateOnce(this._context.getFrame());
      var datum = {
        segments: [points],
        graphMode: graph_info.graphMode,
        color: this._statement.color,
        poi: copyDefinedPOIs(points)
      };
      graphData[this.id] = [datum];
      return graphData;
    }

    //Plot parametric
    
    //Compile
    var compiled = this.compile(this._context.getFrame());
    var fn = function(x){return compiled.fn(x)[0]};  //TODO - fix this with compileAllBranches
    graphData[this.id] = Plotter.computeGraphData(viewState, graph_info, fn);

    return graphData;
    //Start intersections going (TODO - make sure starting / stopping these is still correct)
  };

  obj.getTableInfo = function(){
    var values = this._tree.evaluateOnce(this._context.getFrame());
    return {
      independent_variable: 'x',
      dependent_column: 'y',
      by_reference: false,
      values: values
    };
  };

});

AnalysisClass[DOUBLE_INEQUALITY] = P(StatementAnalysis, function(obj, _super){
  obj.init = function(context, statement, tree){
    _super.init.call(this, context, statement, tree);
    this._inequalities = [];
    for(var i = 0; i < 2; i++){
      var subtree = tree.getInequality(i);
      this._inequalities.push(AnalysisClass[COMPARATOR](context, statement, subtree));
    }
  };

  obj.shade_between = true;

  obj.computeStatus = function(frame){
    for(var i = 0; i < 2; i++){
      this._inequalities[i].setAnalysis({free_variables: this._analysis.free_variables});
    }
    var statuses = this._inequalities.map(function (x) {
      x._analysis.status = x.computeStatus(frame);
      return x._analysis.status;
    }); //Compute status for each sub-inequality

    if(statuses[0] === GRAPHABLE && statuses[1] === GRAPHABLE){
      this._analysis.graph_info = this._inequalities[0]._analysis.graph_info;
      if(this._analysis.graph_info.graphMode === GRAPHMODE.POLAR)
        return this.markError('Two-sided inequalities are only supported for x and y.  You can do one-sided polar inequalities.');
      return GRAPHABLE;
    }
    else{
      return this.markError('One or more sub-inequality had an error'); //TODO - good error messages and detection
    }
  };

  obj.computeGraphData = function(frame){
    var id = this.id;
    var graphData = {};
    graphData[id] = [];

    var updateOperator = function (s) {
      s.operator = Comparators.get(Comparators.table[s.operator].inclusive, 0);
    };

    for ( var i = 0; i < 2; i++ ) {
      var subGraphData = this._inequalities[i].computeGraphData(frame)[id].slice(0, 4);
      subGraphData.forEach(updateOperator);
      graphData[id].push.apply(graphData[id], subGraphData);
    }

    var graphMode = graphData[id][0].graphMode;
    var polygons;

    polygons = Plotter.polygonsFromSegments(graphData[id][4].segments, graphData[id][0].segments, graphMode);

    graphData[id].push(
      {
        graphMode: GRAPHMODE.POLYGONFILL,
        segments: polygons,
        poi:{}
      }
    );
    
    polygons = Plotter.polygonsFromSegments(graphData[id][7].segments, graphData[id][3].segments, graphMode);
    
    graphData[id].push(
      {
        graphMode: GRAPHMODE.POLYGONFILL,
        segments: polygons,
        poi:{}
      }
    );

    return graphData;
  };

  obj.compileAllBranches = function(frame){
    var compiled = [];
    for(var i = 0; i < 2; i++){
      compiled.push.apply(compiled, this._inequalities[i].compileAllBranches(frame));
    }
    return compiled;
  };

  obj.getOperators = function(){
    return [this._inequalities[0].getOperator(),
            this._inequalities[1].getOperator()];
  };

});

AnalysisClass[EQUATION]= P(StatementAnalysis, function(obj, _super){
  obj.init = function(context, statement, tree){
    _super.init.call(this, context, statement, tree);
    this.temp_tree = BinaryOperatorNode('-', this._tree.lhs, this._tree.rhs);
  };

  obj.is_solved_equation = true;

  //Figure out which variables to solve for, save solution in analysis
  obj.computeStatus = function(frame){
    var free_variables = this._analysis.free_variables;
    if(free_variables.length > 2) return this.freeVariablesError(free_variables);
    
    if(free_variables.length === 2){
      //Might be graphable, if variables are X and Y;
      if((free_variables[0] === 'x' && free_variables[1] === 'y') ||
         (free_variables[0] === 'y' && free_variables[1] === 'x')){
        var x_order = this.temp_tree.polynomialOrder(frame, 'x');
        var y_order = this.temp_tree.polynomialOrder(frame, 'y');
        if(y_order <= 2) return this.setGraphMode(GRAPHMODE.Y, 'x', 'y');
        if(x_order <= 2) return this.setGraphMode(GRAPHMODE.X, 'y', 'x');
        return this.markError("Equation is too complicated.  One variable needs to be quadratic.");
      }
      return this.markError('You can only plot implicit equations of x and y');
    }

    if(free_variables.length === 1){
      //Might be evaluable, let's try
      var solution = this.solveEvaluable(frame);
      if(solution){
        this._analysis.solution = solution;
        return EVALUABLE;
      }
      else{
        return this.markError('Sorry - unable to solve this equation.  Try something like a quadratic?');
      }
    }

    if(free_variables.length === 0){
      return this.markError("This equation has no variables in it - there's nothing to solve");
      //TODO - support boolean true/false tests with equals sign
    }
  };

  obj.solveEvaluable = function(frame){
    var coeffs, roots;

    if(this._analysis.free_variables.length != 1) return false;

    var variable = this._analysis.free_variables[0];
    var order = this.temp_tree.polynomialOrder(frame, variable);

    switch(order){
      case 1:
        coeffs = this.temp_tree.quadraticCoefficients(frame, variable);
        roots = [-coeffs[2] / coeffs[1]];
        break;
      case 2:
        coeffs = this.temp_tree.quadraticCoefficients(frame, variable);
        roots = Quadratic.formula(coeffs);
        break;
      default:
        return false;
    }

    return {roots:roots, variable:variable};
  };

  obj.getZeroValues = function(){
    var retval = [];
    var roots = this._analysis.solution.roots;
    for(var i = 0; i < roots.length; i++){
      retval.push({val:roots[i], operator:'='});
    }
    return retval;
  };

  obj.getAssignedVariable = function(){
    switch(this._analysis.status){
      case EVALUABLE:
        return this._analysis.solution.variable;
      case GRAPHABLE:
        return this._analysis.graph_info.dependent;
    }
  };

  obj.computeGraphData = function(viewState){
    var graphData = {};
    var compiled = this.compileAllBranches(this._context.getFrame());
    var graph_info = this._analysis.graph_info;

    graphData[this.id] = [];
    for(var i = 0; i < compiled.length; i++){
      var data = Plotter.computeGraphData(viewState, graph_info, compiled[i].fn)[0];
      data.compiled = compiled[i];
      graphData[this.id].push(data);
    }
    return graphData;
  };

  obj.compileAllBranches = function(frame){
    var compiled = [];
    var independent = this._analysis.graph_info.independent;
    var dependent = this._analysis.graph_info.dependent;
    var coeffEvalStrings = this.temp_tree.polynomialEvalStrings(frame, dependent, independent);

    var evalStrings = Quadratic.formulaEvalStrings(coeffEvalStrings);

    var args = [independent];
    for(var i = 0; i < evalStrings.length; i++){
      compiled.push({fn: this.compiler.compile(args, evalStrings[i]), args:args, function_string:evalStrings[i]});
    }
    return compiled;
  };
});

AnalysisClass[COMPARATOR] = P(StatementAnalysis, function(obj, _super) {
  obj.init = function(context, statement, tree) {
    _super.init.call(this, context, statement, tree);
    var operator = this._tree.operator;
    if (Comparators.table[operator].direction === 1) {
      this.temp_tree = BinaryOperatorNode(
        '-',
        this._tree.args[0],
        this._tree.args[1]
      );
    } else {
      this.temp_tree = BinaryOperatorNode(
        '-',
        this._tree.args[1],
        this._tree.args[0]
      );
    }
  };

  obj.getDependencies = function(){
    var deps = this._tree.dependencies();
    if(_.isEqual(deps, {r:0, theta:0})){
      this.addFreeVariables(['r', 'theta']);
      return [];
    }
    if(_.isEqual(deps, {r:0})){
      this.addFreeVariables(['r']);
      return [];
    }
    return deps;
  };
  
  obj.computeStatus = function(frame){
    var free_variables = this._analysis.free_variables;
    if (free_variables.length === 0) return EVALUABLE;
    
    var singleVariables = { x: true, y: true, r: true };
    
    var fv0 = free_variables[0], fv1 = free_variables[1];
    var order0, x_order, y_order, r_order;
    
    if (free_variables.length === 1) {
      if (!singleVariables.hasOwnProperty(fv0)) {
        return this.markError('We only plot inequalities of x and y, or r and theta');
      }

      order0 = this.temp_tree.polynomialOrder(frame, fv0);
      if (fv0 === 'r' && order0 > 1) {
        return this.markError('We only plot polar inequalities that are first order in r.');
      }
      if (order0 > 2) {
        return this.markError('Equation too complicated. One variable needs to be quadratic');
      }
      
      return this.setGraphMode(undefined, undefined, fv0);
    }
    
    var twoVariables = { x: 'y', y: 'x', r: 'theta', theta: 'r' };
    
    if (free_variables.length === 2) {
      if (twoVariables[fv0] !== fv1) {
        return this.markError('We only plot inequalities of x and y, or r and theta');
      }
      
      if (fv0 === 'r' || fv1 === 'r') {
        r_order = this.temp_tree.polynomialOrder(frame, 'r');
        if (r_order > 1) {
          return this.markError('We only plot polar inequalities that are first order in r.');
        }
        return this.setGraphMode(GRAPHMODE.POLAR, 'theta', 'r');
      }
      
      x_order = this.temp_tree.polynomialOrder(frame, 'x');
      y_order = this.temp_tree.polynomialOrder(frame, 'y');
      if (y_order <= 2) return this.setGraphMode(GRAPHMODE.Y, 'x', 'y');
      if (x_order <= 2) return this.setGraphMode(GRAPHMODE.X, 'y', 'x');
      return this.markError("Equation is too complicated.  One variable needs to be quadratic.");
      
    }
    
  };
  
  obj.computeGraphData = function(viewState){
    var graphData = {};
    var compiled = this.compileAllBranches(this._context.getFrame());
    var graph_info = this._analysis.graph_info;
    var operator = this._tree.operator;
    var thisGraphData = graphData[this.id] = [];
    var data;

    //TODO this system doesn't work with polar inequalities yet.
    //Currently, this works for first-order polar inequalities by just pushing
    //the single open-ended inequality, and leaving the rest of the branches empty
    //
    //This would need to be fixed to support second-order polar inequalities

    var polarities = [ -1, 0, 0, 1 ];

    for (var i = 0; i < 4; i++) {
      data = Plotter.computeGraphData(
        viewState,
        graph_info,
        compiled[i].fn
      )[0];
      data.compiled = compiled[i];
      data.operator = Comparators.get(
        Comparators.table[operator].inclusive,
        polarities[i]
      );
      thisGraphData.push(data);
    }

    var polygons;

    polygons = Plotter.polygonsFromSegments(
      thisGraphData[1].segments,
      thisGraphData[2].segments,
      thisGraphData[1].graphMode
    );

    thisGraphData.push({
      graphMode: GRAPHMODE.POLYGONFILL,
      segments: polygons,
      poi:{}
    });

    return graphData;
  };

  obj.compileAllBranches = function(frame){
    var compiled = [];
    var independent = this._analysis.graph_info.independent;
    var dependent = this._analysis.graph_info.dependent;
    var coeffEvalStrings = this.temp_tree.polynomialEvalStrings(frame, dependent, independent);

    var evalStrings = Quadratic.inequalityRegionEvalStrings(coeffEvalStrings);

    var args = [independent];
    for(var i = 0; i < evalStrings.length; i++){
      compiled.push({fn: this.compiler.compile(args, evalStrings[i]), args:args, function_string:evalStrings[i]});
    }
    return compiled;
  };

  obj.getOperator = function(){
    return this._tree.operator;
  };

  obj.getSlidableVariables = function(){
    //Don't offer a slider for r
    return _super.getSlidableVariables.call(this).filter(function(v){
      return (v !== 'r');
    });
  };
});

AnalysisClass[CHAINED_COMPARATOR] = P(StatementAnalysis, function(obj, _super) {
  obj.computeStatus = function (frame) {
    var free_variables = this._analysis.free_variables;
    if (free_variables.length === 0) return EVALUABLE;
    
    return this.markError('We only graph solved double inequalities. Try sin(x) < y < cos(x).');
  };
  
  
});

var Table = P(AnalysisObject, function(obj, _super){
  obj.init = function(context, table_description){
    _super.init.call(this, context);
    this._description = table_description;
    this.id = table_description.id;
    this.ids_to_clean = [];
    this.columns = [];
    this.cell_tree = [];
    for(var i = 0; i < this._description.columns.length; i++){
      //Not a great solution, but since we're using the same latex parser, this is what makes sense.
      //Might make sense to eventually create a different table-header latex parser which enforces that grammar, so that the parser errors come out properly, but for now I don't think the maintenance overhead is worth it
      if(this._description.columns[i].latex === '' && i > 0){
        this._description.columns[i].latex = '\\emptycolumn_'+i; //Make empty columns behave like scatterplot
      }
      var column_analysis = createAnalysisObject(this._context, this._description.columns[i]);
      this.columns.push(column_analysis);
      this.cell_tree[i] = [];
      var values = this._description.columns[i].values;
      for(var row = 0; row < values.length; row++){
        if(values[row].trim() === ''){
          this.cell_tree[i][row] = ErrorNode('');  //Stay silent for empty cells
          continue;
        }
        this.cell_tree[i][row] = Parser.tryParse(values[row]);
      }
    }
    if(this.columns[0]._tree && this.columns[0]._tree instanceof IdentifierNode){
      this.shadowed_symbols = [this.columns[0]._tree.identifier];
      var symbol = this.shadowed_symbols[0];
      if(symbol === 'y') this.parse_error = "Sorry - can't make a table based on y yet.  Try x?";
      if(symbol === 'r') this.parse_error = "Sorry - can't make a table based on r yet.  Try x?";
    }
    else{
      this.parse_error = 'Tables need a single variable for their first independent column';
      this.shadowed_symbols = [];
    }
    //TODO - throw user-facing errors if any of the columns or rows try to export things
  };

  obj.conflictError = function(symbol){
    //console.log("Variable conflict with a table.  Ignoring it, but not crashing");
  };

  obj.isGraphed = function(){return true;}; //Always graph table, let columns decide

  obj.cleanupId = function(id){
    this.ids_to_clean.push(id);
  };

  obj.getAllIds = function(){
    var ids = [this.id];
    for(var i = 0; i < this.columns.length; i++){
      ids.push(this.columns[i].id);
    }
    return ids;
  };

  obj.exportedSymbols = function(){
    //Tables never export anything
    return [];
  };

  obj.shadowedSymbols = function(){
    return this.shadowed_symbols;
  };

  obj.getDependencies = function(){
    //Record all dependencies of all headers as dependencies
    var dependencies = {};
    var dependency;
    for(var i = 0; i < this.columns.length; i++){
      var column_dependencies = this.columns[i].getDependencies();
      for(dependency in column_dependencies){
        if(!column_dependencies.hasOwnProperty(dependency)) continue;
        //TODO - verify that all dependencies are consistent arity
        dependencies[dependency] = column_dependencies[dependency];
      }

      //Iterate over rows, for independent columns
      for(var row = 0; row < this.cell_tree[i].length; row++){
        var cell_tree = this.cell_tree[i][row];
        var cell_dependencies = cell_tree.dependencies();
        for(dependency in cell_dependencies){
          dependencies[dependency] = cell_dependencies[dependency];
        }
      }
    }
    return dependencies;
  };

  obj.referencesSymbol = function(symbol){
    //Iterate over all headers
    for(var i = 0; i < this.columns.length; i++){
    //If header references symbol, return true
      if(this.columns[i].referencesSymbol(symbol)) return true;
      //If cell references symbol return true
      for(var row = 0; row < this.cell_tree[i].length; row++){
        if(this.cell_tree[i][row].references(symbol)) return true;
      }
    }
    return false;
  };

  obj.getParseError = function(){
    if(this.parse_error) return this.parse_error;
    return this.columns[0].getParseError(); //Only the first column is unrecoverable
  };

  obj.computeStatus = function(frame){
    if(this.getParseError()) return ERROR;
    for(var i = 0; i < this.columns.length; i++){
      //Check for un-defined, variable-like dependencies, and define them as free variables
      this.columns[i]._analysis.free_variables = []; //TODO - don't reach in to private members
      var dependencies = this.columns[i].getDependencies();
      for(var dependency in dependencies){
        if(!dependencies.hasOwnProperty(dependency)) continue;
        var arity = dependencies[dependency];
        if(arity <= 1 && !frame.defines(dependency)){
          this.columns[i].addFreeVariables([dependency]);
        }
        //TODO - if arity > 1, mark column as error.  We depend on an undefined function
      }
      this.columns[i]._analysis.status = this.columns[i].computeStatus(frame);
    }
    return GRAPHABLE;
  };

  obj.invalidate = function(){
    _super.invalidate.call(this);
    this.columns.forEach(function(column){
      column.invalidate();
    });
  };

  obj.setAnalysis = function(analysis){
    _super.setAnalysis.call(this, analysis);
    this.columns.forEach(function(column){
      column.setAnalysis({});
    });
  };

  obj.getEvaluationState = function(){
    var result;
    var num_rows = this._description.columns[0].values.length;
    var columns_data = [];
    var symbol;
    var symbols = [];
    var tmp_frame = EvalFrame(this._context.getFrame()); //Track what has been defined in previous columns
    var independent_frame = EvalFrame(this._context.getFrame());
    var frame = EvalFrame(this._context.getFrame());
    var error;
    var value;
    for(var column = 0; column < this.columns.length; column++){
      var is_independent = false;
      var is_continuous = false; //Can this be graphed at all values of the independent variable, or just graph values
      error = null;

      if(this.columns[column]._tree instanceof IdentifierNode){
        symbol = this.columns[column]._tree.identifier;
        if(!tmp_frame.defines(symbol)) is_independent = true;
        if(column === 0){
          if(!is_independent){
            error = "First column must be independent";
          }
          if(symbol === 'y' || symbol == 'theta' || symbol == 'r'){
            error = "We don't do the right thing for tables with independent "+symbol+" yet";
          }
          if(!error){
            independent_frame.setVariable(symbol, ConstantNode(0));  //Should never be accessed, just used to say "this is defined" based on only the independent variable
          }
        }
        if(!error){
          tmp_frame.setVariable(symbol, ConstantNode(0));  //Should never be accessed, just used to say "this is defined" based on all preceding variables
        }
        symbols[column] = symbol;
      }
      if(!is_independent){
        error = this.columns[column].getParseError();
        if(!error){
          //Check if it's continuous
          try{
            result = this.columns[column].evaluateOnce(independent_frame);
            is_continuous = true;
          }
          catch(e){
            //Unable to evaluate this at all values
            is_continuous = false;
          }
          //Check if it's dependent
          try{
            result = this.columns[column].evaluateOnce(tmp_frame);
            if(typeof result !== 'number') error = result;
          }
          catch(e){
            error = e; //Mark runtime errors that always occur at column-level
          }
        }
      }


      if(this.columns[column].getParseError()){
        this.error = this.columns[column].getParseError();
      }

      var values = [];
      if(!error){
        for(var row = 0; row < num_rows; row++){
          frame = EvalFrame(this._context.getFrame());
          for(var i = 0; i < column; i++){
            if(!columns_data[i].dependent && !columns_data[i].error){
              var independent_value = columns_data[i].values[row];
              if(typeof(independent_value) === 'number')
                frame.setVariable(symbols[i], ConstantNode(independent_value));
            }
          }
          if(is_independent){
            var tree = this.cell_tree[column][row];
            if(tree.hasOwnProperty('error_msg')) value = tree.error_msg;
            else{
              try {value = tree.evaluateOnce(frame)}
              catch(e) {value = e;}
            }
          }
          else{
            try {value = this.columns[column].evaluateOnce(frame);}
            catch(e) {value = '';}
          }
          values.push(value);
        }
      }
      var column_data = {
        dependent: !is_independent,
        discrete: !is_continuous,
        error: error,
        values: values
      };
      columns_data.push(column_data);
    }
    return columns_data;
  };

  obj.computeGraphData = function(viewState){
    
    var id, x, y, row, value;
    var datum;
    var state = this.getEvaluationState(); //TODO - cache this so we don't double-compute
    var graphData = {};
    while(this.ids_to_clean.length){
      graphData[this.ids_to_clean.pop()] = {};
    }
    //Compute points for all columns vs the first column
    for(var column = 1; column < state.length; column++){
      var column_description = this._description.columns[column];
      id = this.columns[column].id;
      if (state[column].error){
        graphData[id] = {};
      }
      graphData[id] = [];
      
      var columnMode = column_description.columnMode;
      var showPoints = columnMode === COLUMNMODE.POINTS || columnMode === COLUMNMODE.POINTS_AND_LINES;
      var showLines = columnMode === COLUMNMODE.LINES || columnMode === COLUMNMODE.POINTS_AND_LINES;
      var hidden = column_description.hidden;
      
      if(showPoints && !hidden){
        var segments = [];
        for(row = 0; row < state[0].values.length; row++){
          //Push points into datum
          //TODO - error checking
          x = state[0].values[row];
          y = state[column].values[row];
          if(typeof(x) === 'number' && typeof(y) === 'number'){  //Don't make points for errors
            segments.push([x, y]);
          }
        }
        datum = {
        segments: [segments],
        graphMode: GRAPHMODE.XYPOINT,
        poi: copyDefinedPOIs(segments),
        color: column_description.color
        };
        graphData[id].push(datum);
      }

      //Connect points if discrete
      if(showLines && !hidden && state[column].discrete){
        var accumulator = Plotter.Accumulator();
        for(row = 0; row < state[0].values.length; row++){
          //Push points into datum
          //TODO - error checking
          x = state[0].values[row];
          y = state[column].values[row];
          if(typeof(x) === 'number' && typeof(y) === 'number'){  //Don't make points for errors
            accumulator.addPoint([x, y]);
          }
          else{
            accumulator.breakSegment();
          }
        }
        datum = {
        segments: accumulator.getSegments(),
        graphMode: GRAPHMODE.PARAMETRIC,
        poi: [],
        color: column_description.color
        };
        graphData[id].push(datum);
      }
      
      //Plot line for non-discrete headers
      if(showLines && !hidden && !state[column].discrete){
        if(this.columns[column].getStatus() === GRAPHABLE){
          var columnGraphData = this.columns[column].computeGraphData(viewState);
          if(columnGraphData[id].length !== 1) throw 'Programming error - graphData for table columns must be singleton';
          graphData[id].push(columnGraphData[id][0]);
        }
        if(this.columns[column].getStatus() === EVALUABLE || this.columns[column].getStatus() === SILENT){
          try{
            //Make and plot temporary constant function
            value = this.columns[column].evaluateOnce(this._context.getFrame());
            var graph_info = {
              graphMode: GRAPHMODE.Y,
              independent: 'x',
              dependent: 'y',
              operator: '='
            };
            var compiled = this.compileConstantFunction(value);
            var constantGraphData = Plotter.computeGraphData(viewState, graph_info, compiled.fn);
            constantGraphData[0].compiled = compiled;

            if(constantGraphData.length !== 1) throw 'Programming error - graphData for table columns must be singleton';
            graphData[id].push(constantGraphData[0]);
          } catch(e) {
            //I'm a bit worried that there may be a case I haven't thought of that will crash the above section.
            //Protecting with a defensive try/catch to make sure it doesn't mess up the rest of the graph if someone manages to come up with it
          }
        }
      }
    }
    return graphData;
  };

  obj.compileConstantFunction = function(value){
    /*jshint evil:true */
    var compiled = {
      args: [],
      function_string: 'return ' + String(value)
    };
    compiled.fn = new Function(compiled.args, compiled.function_string);
    return compiled;
  };

  // For now, tables can only have graphMode Y. Should probably enable
  // per-branch graphModes.
  obj.getGraphInfo = function () { return { graphMode: GRAPHMODE.Y }; };
  
  obj.shouldIntersect = function () { return true; };

  obj.compileAllBranches = function (frame) {
    return this.columns.slice(1).filter(function (column) {
      return column.getStatus() === GRAPHABLE;
    }).map(function (column) {
      return column.compile(frame);
    });
  };

});

var createAnalysisObject = function(context, statement){
  switch(statement.type){
    case 'table':
      return Table(context, statement);
    case 'statement':
    case undefined: //Not a good long-term solution
      var tree = Parser.tryParse(statement.latex);
      var analysisClass = AnalysisClass[tree.statementType];
      return analysisClass(context, statement, tree);
    default:
      throw("Unrecognized statement type " + statement.type);
  }
};

return {
  createAnalysisObject: createAnalysisObject,
  status: {
    ERROR: ERROR,
    WARNING: WARNING,
    EVALUABLE: EVALUABLE,
    GRAPHABLE: GRAPHABLE,
    SILENT: SILENT
  }
};

});

//Compiles from function strings into actual functions
//Allows compiled functions to reference other functions from the same scope
//which is required, since you can't closure into "new Function()" invocations

define('math/functions',['require','underscore','pjs'],function (require) {
  var _ = require('underscore');
  var P = require('pjs');

  var FunctionCompiler = P(function(compiler){
    compiler.init = function(){
      var fn_map = {};

      this.compile = function(args, evalString){
      /*jshint evil:true*/
        var fn = new Function(args, evalString);
        return _.bind(fn, fn_map);
      };

      this.register = function(name, fn){
        fn_map[name] = fn;
      };
    };

    compiler.dehydrateGraphData = function(data){
      for (var i = 0; i < data.length; i++) {
        if (data[i].compiled) {
          delete data[i].compiled.fn;
        }
      }
    };

    compiler.rehydrateGraphData = function(data){
      for (var i = 0; i < data.length; i++) {
        if (data[i].compiled) {
          data[i].compiled.fn = this.compile(
            data[i].compiled.args,
            data[i].compiled.function_string
          );
        }
      }
    };

    compiler.updateFromFunctionMap = function(fnmap){
      for(var name in fnmap){
        if(!fnmap.hasOwnProperty(name)) continue;
        this.register(name, fnmap[name]);
      }
    };

    compiler.updateFromSourceMap = function(sourcemap){
      for(var name in sourcemap){
        if(!sourcemap.hasOwnProperty(name)) continue;
        var source = sourcemap[name];
        this.register(name, this.compile(source.args, source.source));
      }
    };
  });

  return FunctionCompiler;
});

define('math/evaluatorcontext',['require','pjs','underscore','./plotter','./evalframe','./evaluatorobject','./poi','./functions','main/config','graphing/graphmode'],function(require){
  var P = require('pjs');
  var _ = require('underscore');
  var Plotter = require('./plotter');
  var EvalFrame = require('./evalframe');
  var EvaluatorObject = require('./evaluatorobject');
  var POI = require('./poi');
  var Functions = require('./functions');
  var Config = require('main/config');
  var GRAPHMODE = require('graphing/graphmode');

var EvaluatorContext = P(function(context){
  
  // callback noop
  context.triggerGraphComputed = function(){};
  context.triggerStatusChange = function(){};
  context.triggerRemoveGraph = function(){};
  context.triggerRender = function(){};
  context.triggerRenderSlowly = function(){};
  context.triggerDidAddStatement = function(){};
  context.triggerDidRemoveStatement = function(){};
  context.triggerDidSetCompleteState = function(){};
  context.triggerDidSetDegreeMode = function(){};
  context.triggerDidUpdateIntersections = function () {};
  context.triggerDidUpdateFunctionMap = function() {};

  context.init = function(frame){
    if(!frame) frame = EvalFrame();
    this.parent_frame = frame;
    this.statements = {};    //Each statement should be immutable
    this.analysis = null;    //This can be cleaned out at re-derived each round
    this.current_state = {}; //Remember last sent message, so that we only update when necessary
    this.dirty = {}; //dirty[id] = True or undefined
    this.graph_changed = [];
    this.compiler = Functions();
    this.intersectIds = {};

    var fm = frame.functionMap();
    for(var name in fm){
      this.compiler.register(name, fm[name]);
    }
  };

  context.eachStatement = function(fn){
    for(var id in this.statements){
      fn.apply(this, [this.statements[id]]); //Make sure this works from within context.eachStatement blocks
    }
  };
  
  context.processChangeSet = function (changeSet) {
    var ids, triggerRender;
    
    if (changeSet.isCompleteState) {
      this.statements = {};
      this.invalidate();
    }

    // update the viewport
    if (changeSet.viewState) {
      this.setViewState(changeSet.viewState);
    }
      
    // update degree mode
    if (changeSet.hasOwnProperty('degreeMode')) {
      this.setDegreeMode(changeSet.degreeMode);
    }
      
    // change which expressions 'intersectId' attempts to intersect with
    if (changeSet.hasOwnProperty('intersectIds')) {
      this.intersectIds = changeSet.intersectIds;
    }
      
    if (changeSet.statements) {
      for (var id in changeSet.statements) {
        var statement = changeSet.statements[id];
         
        // remove the statement
        if (statement === null) {
          if (!changeSet.isCompleteState && this.statements.hasOwnProperty(id)) {
            ids = this.statements[id].getAllIds();
          }
          
          this.removeStatement(id);
           
          if (!changeSet.isCompleteState && ids) {
            for (var i = 0; i < ids.length; i++) {
              this.triggerRemoveGraph(ids[i]);
            }
            this.triggerDidRemoveStatement(id);
          }
        }
          
        // add the statement
        else {
          this.addStatement(statement);
            
          if (!changeSet.isCompleteState) {
            this.triggerDidAddStatement(statement);
          }
        }
      }
    }

    if (changeSet.hasOwnProperty('intersectId')) this.updateIntersections(changeSet.intersectId);
      
    if (changeSet.isCompleteState) {
      this.triggerDidSetCompleteState(changeSet.statements);

      //Temporarily use slow rendering callback
      triggerRender = this.triggerRender;
      this.triggerRender = this.triggerRenderSlowly;
      this.publishing_paused = false;
    }

    this.publishChanges();

    if (changeSet.isCompleteState) {
      this.triggerRender = triggerRender;
    }
  };

  context.setViewState = function (viewState) {
    if (_.isEqual(viewState, this.viewState)) return;
    this.viewState = viewState;
    this.invalidate();
  };

  context.setDegreeMode = function(use_degrees) {
    this.parent_frame.setDegreeMode(use_degrees);
    this.invalidate();
    this.triggerDidSetDegreeMode(use_degrees);
  };

  context.publishing_paused = false;
  context.changes_pending = false;

  context.pausePublishing = function(){
    //console.log("PAUSING");
    this.publishing_paused = true;
  };

  context.resumePublishing = function(){
    //console.log("RESUMING");
    this.publishing_paused = false;
    if(this.changes_pending){
      this.publishChanges();
    }
  };

  context.publishChanges = function(){
    if(this.publishing_paused){
      this.changes_pending = true;
      return;
    }

    this.changes_pending = false;
   
    this.publishAllStatuses();
    if(Plotter.validateViewState(this.viewState))
      this.graphAllChanged();
  };

  context.publishAllStatuses = function(){
    //Compute new states, but only send them out if they're different from what we sent last time
    var changes = {};
    var last_state = this.current_state;
    this.current_state = {};

    this.eachStatement(function(statement){
      var id = statement.id;
      var newState = this.getEvaluationState(id);
      if(JSON.stringify(newState) !== JSON.stringify(last_state[id])){
        changes[id] = newState;
      }
      this.current_state[id] = newState;
    });
      
    this.triggerStatusChange(changes);
  };

  context.graphAllChanged = function(){
    if (!this.graph_changed.length) return;
    var viewState = this.viewState;
    var id;
    var i;
    for (i = 0; i < this.graph_changed.length; i++) {
      id = this.graph_changed[i];
      if (!this.statements.hasOwnProperty(id)) continue;
      if (this.statements[id].isGraphed()) {
        this.graph(id, viewState);
      } else {
        this.triggerRemoveGraph(id);
      }
    }
    
    var graphChangedSet = {};
    for (i = 0; i < this.graph_changed.length; i++) {
      graphChangedSet[this.graph_changed[i]] = true;
    }
    this.graph_changed = [];
    
    // Recompute all visible intersections for curves that weren't regraphed.
    // Curves that were regraphed already had their intersections updated in
    // the graph routine. Need to do this because we're only keeping track of
    // one partner in an intersection, and the other partner might have
    // changed.
    for (id in this.intersectIds) {
      if (!this.intersectIds.hasOwnProperty(id)) continue;
      if (graphChangedSet.hasOwnProperty(id)) continue;
      this.updateIntersections(id);
    }
    
    this.triggerRender();
  };

  //TODO - delegate to statement objects
  context.graph = function (id, viewState) {
    if(!viewState){
      //console.log("No view state.  Not graphing");
      return;
    }

    var statement = this.statements[id];
    var graphData = statement.computeGraphData(viewState);

    if (
      this.intersectIds.hasOwnProperty(id) &&
      statement.shouldIntersect() &&
      graphData.hasOwnProperty(id) // TODO bails on intersecting tables
    ) {
      var someIntersections = this.findSomeIntersectionsWith(id);
      
      for (var branch = 0; branch < someIntersections.intersections.length; branch++) {
        graphData[id][branch].poi.intersections = someIntersections.intersections[branch];
      }
      // If we ran out of time to compute all the intersections, stream the
      // rest of them back to the grapher as we have time.
      someIntersections.streamRest();
    }
    
    for(var sketch_id in graphData){
      this.triggerGraphComputed(sketch_id, graphData[sketch_id]);
    }
  };

  // Find all intersections between a curve with the given id and other
  // curves.
  context.updateIntersections = function (id) {
    var statement = this.statements[id];

    if (!statement || !statement.shouldIntersect()) {
      this.triggerDidUpdateIntersections(id, []);
      return;
    }

    this.findSomeIntersectionsWith(id).streamRest();

  };

  // context.findSomeIntersectionsWith computes as many intersections with the
  // curve with given id as it can in 20 ms and then returns an object:
  // {
  //   intersections: // Intersections found so far
  //   streamRest: // Function that will stream the rest of the intersections
  //               // back to the grapher.
  // }
  //
  // We run a different timeout for every curve id that is having
  // having intersections computed on it so that we can start computing
  // intersections with a few curves at once without having them cancel
  // eachother. This will happen if you open intersections on a few different
  // curves and then change something that triggers a graphAll.
  //
  // Note that we typically only stick the intersection POI on one of the two
  // curves that is involved in an intersection (the one that was selected
  // when the intersection was computed).
  var streamIntersectionsTimeouts = {};
  context.findSomeIntersectionsWith = function (id1) {
    this.cancelIntersectionStreaming(id1);
    
    var runFor = 20; // ms
    var waitFor = 60; // ms
    var self = this;
    var push = Array.prototype.push;
    var statement1 = self.statements[id1];
    var graph_info = statement1.getGraphInfo();
    var graphMode = graph_info.graphMode;
    var compiled1 = self.statements[id1].compileAllBranches(self.getFrame());
    var domain = Plotter.computeDomain(self.viewState, graph_info, null);
    
    var otherStatements = [];
    for (var id2 in self.statements) {
      if (!self.statements.hasOwnProperty(id2)) continue;
      if (String(id2) === String(id1)) continue;
      otherStatements.push(self.statements[id2]);
    }
    
    // intersections accumulator and iterator i are modified during successive
    // calls to computeSome()
    var intersections = [];
    for (var branch = 0; branch < compiled1.length; branch++) {
      intersections[branch] = { x: [], y: [], intersects: [] };
    }
    var i = otherStatements.length - 1;
    var stream = false;
    var computeSome = function () {
      /*jshint loopfunc: true */
      var now = new Date();
      var updated = false;
      var fn1;
      var fn2;
      var newIntersections;
      var statement2;
      var compiled2;
      var swap;
      var differenceSamples;
      for (i; i >= 0; i--) {
        if (new Date() - now > runFor) {
          if (!stream) return;
          streamIntersectionsTimeouts[id1] = setTimeout(computeSome, waitFor);
          if (!updated) return;
          self.triggerDidUpdateIntersections(id1, intersections);
          return;
        }
        statement2 = otherStatements[i];
        if (!statement2.shouldIntersect()) continue;
        if (statement2.getGraphInfo().graphMode !== graphMode) continue;

        compiled2 = statement2.compileAllBranches(self.getFrame());

        for (var branch1=0; branch1 < compiled1.length; branch1++) {
          fn1 = compiled1[branch1].fn;
          for (var branch2 = 0; branch2 < compiled2.length; branch2++) {
            fn2 = compiled2[branch2].fn;
            differenceSamples = Plotter.sampleXY(function (x) {
              return fn2(x) - fn1(x);
            }, domain);
            newIntersections = POI.findIntersections(
              differenceSamples,
              fn1,
              fn2
            );
            if (newIntersections.x.length) updated = true;
            newIntersections.intersects = Array(newIntersections.x.length);
            for (var j = 0, jlen = newIntersections.x.length; j < jlen; j++) {
              newIntersections.intersects[j] = statement2.id;
            }
            // Need to swap x and y if graphmode is GRAPHMODE.X
            if (graphMode === GRAPHMODE.X) {
              swap = newIntersections.y;
              newIntersections.y = newIntersections.x;
              newIntersections.x = swap;
            }
            push.apply(intersections[branch1].x, newIntersections.x);
            push.apply(intersections[branch1].y, newIntersections.y);
            push.apply(intersections[branch1].intersects, newIntersections.intersects);
          }
        }
      }
      
      if (!stream || !updated) return;
      self.triggerDidUpdateIntersections(id1, intersections);
      self.cancelIntersectionStreaming(id1);
    };

    computeSome();

    return {
      intersections: intersections,
      streamRest: function () {
        // Slightly wasteful, but handy for clearing old intersections early.
        self.triggerDidUpdateIntersections(id1, intersections);
        stream = true;
        computeSome();
      }
    };

  };
  
  context.cancelIntersectionStreaming = function (id) {
    clearTimeout(streamIntersectionsTimeouts[id]);
    delete streamIntersectionsTimeouts[id];
  };

  context.cancelAllIntersectionStreaming = function () {
    for (var id in streamIntersectionsTimeouts[id]) {
      if (!streamIntersectionsTimeouts.hasOwnProperty(id)) continue;
      this.cancelIntersectionStreaming(id);
    }
  };

  //Takes a object representing an "expression" (TODO - rename this concept)
  //Expects expr to have properties:
  // * id (integer)
  // * latex (string)
  // * shouldGraph (boolean)
  // * color (string)
  context.addStatement = function(statement){
    if(!statement) return;
    var id = statement.id;
    this.markDirty(id); // Mark existing dependencies as dirty

    var previous_ids;  //Used to tell tables to ungraph old columns

    if(this.statements.hasOwnProperty(id)){
      previous_ids = this.statements[id].getAllIds();
    }

    this.statements[id] = EvaluatorObject.createAnalysisObject(this, statement);
    
    if(previous_ids){
      for(var i = 0; i< previous_ids.length; i++){
        var previous_id = previous_ids[i];
        if(previous_id != id){
          this.statements[id].cleanupId(previous_id);
        }
      }
    }
    // Need to mark clean before marking dirty again because otherwise we'll
    // hit an early return and fail to mark new dependencies dirty.
    this.markClean(statement.id);
    this.markDirty(statement.id); // Mark any new dependencies as dirty
  };

  context.removeStatement = function(id){
    if(!this.statements.hasOwnProperty(id)) return;
    // Looks like it was already deleted.
    // This happens when a table is deleted, and then each column is deleted.

    this.markDirty(id); //Mark dirty before deletion
    delete this.statements[id];
  };

  context.recompute = function(){
    this.invalidate();
    this.publishChanges();
  };

  context.invalidate = function(){
    this.analysis = null;
    this.current_state = {};
    this.cancelAllIntersectionStreaming();
  };

  context.markDirty = function(id){
    if(this.dirty[id]) return;
    this.dirty[id] = true;
    this.cancelIntersectionStreaming(id);
    //symbols which id exports
    if (!this.statements[id]) return;
    for(var symbol in this.statements[id].exportedSymbols()){
      this.markSymbolDirty(symbol);
    }
  };

  context.markSymbolDirty = function(symbol){
    if(this.assignmentForbidden(symbol)) return;
    this.eachStatement(function(statement){
      if(statement.referencesSymbol(symbol)){
        this.markDirty(statement.id);
      }
    });
  };

  context.markClean = function(id){
    delete(this.dirty[id]);
  };

  context.isDirty = function(id){
    return this.dirty.hasOwnProperty(id);
  };

  context.getFrame = function(){
    //Return frame, updating if necessary.
    return this.getAnalysis().frame;
  };

  context.getAnalysis = function(){
    this.updateAnalysis();
    return this.analysis;
  };

  context.getType = function(id){
    return this.statements[id].getType();
  };

  context.updateAnalysis = function(){
    if(this.hasOwnProperty('partial_analysis')) throw "Programming error - two overlapping call to updateAnalysis";
    
    var dirty_statements = [];
    var id;
    if(this.analysis){
      for(id in this.dirty){
        dirty_statements.push(id);
      }
      //If we already have analysis and nothing is dirty, return
      if(dirty_statements.length === 0) return;
    }
    else{
      for(id in this.statements){
        dirty_statements.push(id);
      }
    }

    //For a first pass, re-run the analysis for everything (since that's cheap), only graph dirty statements
    delete(this.analysis);
    this.partial_analysis = {};
    var a = this.partial_analysis;
    try{

      a.frame = EvalFrame(this.parent_frame);

      this.eachStatement(function(statement){
        var id = statement.id;
        a[id] = {};
        statement.setAnalysis(a[id]);
        var error = statement.getParseError();
        if(error) a[id].error = error;
      });

      a.assignments = this.analyzeAssignments();
      this.markVariableConflicts(a.assignments);

      this.analyzeDependencies(a);

      for (var i = 0; i < a.dependencyOrder.length; i++) {
        id = a.dependencyOrder[i];
        this.statements[id].exportDefinitionsTo(a.frame, id);
      }

      this.graph_changed = dirty_statements;
      this.dirty = {};

      var fm = a.frame.leafFunctionMap(); //Only update new functions, nothing from parent frame
      for(var name in fm){
        this.compiler.register(name, fm[name]);
      }
      //Used to send function definitions from worker to UI thread for tracing
      this.triggerDidUpdateFunctionMap(a.frame);

      this.analyzeStatus(a);

      //if (Config.get('dragpoints')) {
        // Need to do this after analyzeStatus because we need to know which
        // variables are slidable in order to know which statements are movable
        this.analyzeMovable(a);
      //}
      
      //Mark analysis as done, and make it active
      this.analysis = this.partial_analysis;
    }
    catch(e){
      //Error in analysis - invalidate everything so that we don't persist anything
      this.invalidate();
    }
    finally{
      //No matter what, partial_analysis should dissapear
      delete(this.partial_analysis);
    }
  };

  context.evaluateOnce = function(id){
    if(!this.statements.hasOwnProperty(id)) {throw('Statement ' + id + ' not defined');}
    return this.statements[id].evaluateOnce(this.getFrame());
  };

  context.compile = function(id){
    return this.statements[id].compile(this.getFrame());
  };

  context.evalStrings = function(id){
    return this.statements[id].evalStrings(this.getFrame());
  };

  context.analyzeStatus = function(a){
    this.eachStatement(function(statement){
      var id = statement.id;
      var s = this.partial_analysis[id];
      if(s.error) s.status = EvaluatorObject.status.ERROR;
      if(s.status) return;
      s.status = statement.computeStatus(a.frame);
    });
  };

  context.assignmentForbidden = function(identifier){
    return (identifier === 'x' || identifier === 'y' || identifier === 'theta');
  };

  context.getStatus = function(id){
    if (this.getAnalysis()[id] === undefined)
      return undefined;
    return this.getAnalysis()[id].status;
  };

  //Returns an object that mirrors the API of Formula
  context.getEvaluationState = function(id){
    this.getAnalysis(); // Used for side-effects
    return this.statements[id].getEvaluationState();
  };

//Analyzing dependencies
     //Iterate over all definitions to identify multiple-definitions and mark defined identifiers with type
        //Multiple definitions are OK, as long as they are not referenced
     //Scan all statements, recording dependencies as free variables, or defined functions/variables
        //During this scan, drop out any equations which reference multiply-defined identifiers
        //During this scan, build data-structure for dependency DAG
     //Crawl data-structure, to create evaluation ordering with clean dependencies
     //Identify cycles in remaining statements, and mark those as errors
     //Return clean ordering, to be used in frame generation and compilation

  context.analyzeAssignments = function(){
    var assignments = {};
    this.eachStatement(function(statement){
      var exports = statement.exportedSymbols();
      for(var symbol in exports){
        if(this.assignmentForbidden(symbol)) continue; //Nobody gets to assign x or y globally
        if(this.parent_frame && this.parent_frame.defines(symbol)){
          statement.markError("Cannot redefine " + symbol);
          continue;
        }
        if(!assignments.hasOwnProperty(symbol)) {assignments[symbol] = []}
        assignments[symbol].push({id:statement.id, arity:exports[symbol]});
      }
    });
    return assignments;
  };

  context.markVariableConflicts = function(assignments){
    this.eachStatement(function(statement){
      var shadowed = statement.shadowedSymbols();
      for(var i = 0; i < shadowed.length; i++){
        var symbol = shadowed[i];
        if(assignments.hasOwnProperty(symbol)){
          // TODO - define this error message
          // '"' + conflicts[0] + '" is already defined, so you can\'t use it as one of the parameters of this function.
          // You could try a different letter, or using a subscript.';
          statement.conflictError(symbol);
        }
      }
    });
  };

  //Returns dependency-ordered sequence of statement ids
  context.analyzeDependencies = function(a){
    var order = [];       //The IDs of the sequence (built up incrementally)
    var ready = [];       //IDs of which statements are ready to add to the sequence
    var block_count = {}; //IDs of blocked statments are keys => number of blockers.
    var blocked_on = {};  //Term string are keys => IDs of blocked statements;

    //Note - for now, the same term can show up as a blocker multiple times for the same statement.
    //This is correct, but could become inefficient.  We might want to make the dependency lists unique.

    //Initialize data structure to be able to query DAG efficiently
    for (var id in this.statements){
      var s = a[id];
      s.free_variables = [];
      if(!this.statements.hasOwnProperty(id)) continue;
      //Track dependencies
      var dependencies = this.statements[id].getDependencies();
      block_count[id] = 0;
      for(var dependency in dependencies){
        if (!dependencies.hasOwnProperty(dependency)){continue;}
        var dependency_arity = dependencies[dependency];

        if(this.parent_frame){
          //If we're looking for a variable and the parent defines it, we're good (arity 1 could be either)
          if((dependency_arity <= 1) && this.parent_frame.hasVariable(dependency)) {
            continue;
          }

          //If we're looking or a function with specific arity and the parent defines it, we're good
          if((dependency_arity >= 1) && this.parent_frame.hasFunctionWithArity(dependency, dependency_arity)){
            continue;
          }
        }

        var assigners = a.assignments[dependency];  //List of IDs for statements which define dependency
        //0 assigners => free variable or error, if it's a function
        if(this.parent_frame && this.parent_frame.defines(dependency)){
          var real_arity = this.parent_frame.arity(dependency);
          if(real_arity === 0){
            s.error = "Cannot call constant " + dependency + " as a function";
          }
          if(real_arity > 0){
            s.error = dependency + " is a function that requires " + real_arity + " arguments";
          }
          else{
            s.error = "Something has gone wrong.  Please report this to our support";
          }
          continue;
        }
        if(!assigners || assigners.length === 0){
          if (dependency_arity <= 1){
            this.statements[id].addFreeVariables([dependency]);
          }
          else{
            s.error = "Function '" + dependency + "' isn't defined. Try defining it in a new expression";
          }
        }

        //1 => possibly healthy dependency
        if(assigners && assigners.length === 1){
          var assignment_arity = assigners[0].arity;

          if (
            // Check if assignment has the same arity as our dependency
            assignment_arity === dependency_arity ||
            // Ambiguous dependency can be resolved with arity 1 function or variable.
            (assignment_arity === 0 && dependency_arity === 1)
          ) {

            if(!blocked_on.hasOwnProperty(dependency)) { blocked_on[dependency] = []; } //create list if empty

            blocked_on[dependency].push(id);
            block_count[id]++;
          }
          else{
            //construct an example of using the function
            var args = [];
            for (var i = 0 ; i < assignment_arity ; i++) {args[i] = i+1; }
            var recommendation = dependency + "(" + args.join(",") + ")";
            s.error = (
              'Function ' + dependency + ' requires ' + assignment_arity + ' argument' +
              (assignment_arity == 1 ? "" : "s") + ". For example, try typing: " + recommendation
            );
          }
        }
        //>1 => dependency on an ambiguous term
        if(assigners && assigners.length > 1){
          s.error = (
            "'" + dependency + "' is defined more than once. Try deleting all but one definition of '" +
            dependency + "'"
          );
          //TODO - put errors or warning on all assigners as well
        }
      }
      if (block_count[id] === 0){
        ready.push(id);
      }
    }

    //Keep pulling from ready list until it's empty (either we're done, or we can't finish)
    while(ready.length){
      var next = ready.pop();
      if(a[next].error){
        // TODO Mark dependencies as errors for depending on it - currently just letting them fail the same as circular
        // dependencies
        continue;
      }
      order.push(next);
      var exported = this.statements[next].exportedSymbols();
      for(var symbol in exported){
        var unblocked_list = blocked_on[symbol];
        if(!unblocked_list) continue;  //Doesn't unblock anything else

        while(unblocked_list.length){
          var unblocked = unblocked_list.pop();
          this.statements[unblocked].addFreeVariables(a[next].free_variables);
          block_count[unblocked]--;      //Unblocks everything that depends on whatever next defines
          if (block_count[unblocked] === 0){
            delete block_count[unblocked];
            ready.push(unblocked);
          }
        }
      }
    }

    for(id in block_count){
      if(block_count.hasOwnProperty(id) && block_count[id] !== 0){
        a[id].unresolved = true;
        a[id].error = "Circular dependency";
      }
    }

    a.dependencyOrder = order;
  };

  context.analyzeMovable = function (a) {
    this.eachStatement(function (statement) {
      if (statement.computeMovable) statement.computeMovable(a.frame);
    });
  };

});

return EvaluatorContext;

});

define('worker/workercore',['require','math/evaluatorcontext','math/builtinframe','math/derivative'],function(require){
  var EvaluatorContext = require('math/evaluatorcontext');
  var BuiltInFrame = require('math/builtinframe');
  require('math/derivative');

  return function(sendMessage){

    //Initialize environment
    var context = EvaluatorContext(BuiltInFrame);

    //Functions to send data back to main thread
    context.triggerGraphComputed = function(id, data){
      //Can't pass function objects across worker boundary.  Will re-create on other side
      for(var i = 0; i < data.length; i++){
        if(data[i].compiled) delete data[i].compiled.fn;
      }
      sendMessage('graphComputed', {id:id, graphData:data});
    };

    context.triggerDidUpdateIntersections = function(id, intersections) {
      sendMessage('updateIntersections', {id:id, intersections:intersections});
    };

    context.triggerDidUpdateFunctionMap = function(frame){
      sendMessage('updateFunctionMap', frame.leafFunctionSourceMap());
    };

    context.triggerRender = function(){
      sendMessage('render');
    };

    context.triggerRenderSlowly = function(){
      sendMessage('renderSlowly');
    };

    context.triggerRemoveGraph = function(id){
      sendMessage('removeGraph', id);
    };

    context.triggerDidSetDegreeMode = function(use_degrees){
      sendMessage('setDegreeMode', use_degrees);
    };

    context.triggerStatusChange = function(data){
      sendMessage('statusChange', data);
    };
    
    return {
      processChangeSet: function (changeSet) {
        context.processChangeSet(changeSet);
        
        sendMessage('processChangeSet', changeSet);
      }
    };
    
  };

});

define('worker/fakeworker',['require','worker/workercore'],function(require){
  var WorkerCore = require('worker/workercore');

  return function(messageListener){
    var fakeWorker = {};
    var workerCore = WorkerCore(sendMessage);
    
    //Handle message from worker to UI thread
    function sendMessage(type, payload){
      messageListener({data:{type:type, payload:payload}});
    }

    //Handle messages from UI thread to worker
    fakeWorker.postMessage = function(e){
      setTimeout(function(){
        workerCore.processChangeSet(e);
      }, 0);
    };

    return fakeWorker;
  };
});

define('api/cross_origin_worker',['require'],function(require) {
  return function (workerURL, Config) {
    var location = window.location;
    var a = document.createElement('a');
    a.href = workerURL;

    var configString = JSON.stringify(Config.all());

    if (a.protocol === location.protocol && a.host === location.host) {
      return workerURL;
    }

    var loadConfig =
      'Graph = {}; Graph.config = JSON.parse(\'' + configString + '\');'
    ;

    var importString = 'importScripts(\'' + workerURL + '\');';

    var codeString = loadConfig + importString;

    var blob;
    try {
      blob = new Blob([codeString], {type : 'application/javascript'});
    } catch (e) {
      var BlobBuilder = window.BlobBuilder || window.WebKitBlobBuilder || window.MozBlobBuilder || window.MSBlobBuilder;
      var blobBuilder = new BlobBuilder();
      blobBuilder.append(codeString);
      blob = blobBuilder.getBlob('application/javascript');
    }

    var URL = window.URL || window.webkitURL;
    return URL.createObjectURL(blob);
  };
});
define('main/evaluator',['require','pjs','math/builtinframe','worker/fakeworker','math/functions','api/cross_origin_worker','main/config'],function (require) {
  var P = require('pjs');
  var BuiltInFrame = require('math/builtinframe');
  var FakeWorker = require('worker/fakeworker');
  var Functions = require('math/functions');
  var crossOriginWorkerURL = require('api/cross_origin_worker');
  var Config = require('main/config');

var Evaluator = P(function (evaluator) {
  
  // Overwritten in calc.js
  evaluator.triggerStatusChange = function (changes) {};
  evaluator.triggerRemove = function (id) {};
  evaluator.triggerGraphComputed = function (id, graphData) {};
  evaluator.triggerUpdateIntersections = function (id, intersections) {};
  evaluator.triggerRender = function () {};
  evaluator.triggerRenderSlowly = function () {};

  evaluator.init = function (workerPath) {
    this.functions = Functions();
    this.changeSet = null;
    this.jobsInWorker = 0;
    this.syncId = 1;
    this.processingDisabled = false;

    var useFakeWorker = function () {
      this.worker = FakeWorker(this.processMessage.bind(this));
      this.spawnNewWorker = function () {};
    }.bind(this);

    if (workerPath) {
      try {
        this.workerPath = crossOriginWorkerURL(workerPath, Config);
        this.spawnNewWorker();
      } catch (e) {
        // Fallback when we can't support real workers. Can happen if
        // 1. window.Worker does not exist (IE < 10)
        // 2. We're working cross domain and the browser can't build Blobs.
        //    (for the API; all versions of IE I've been able to test)
        useFakeWorker();
      }
    } else {
      // Used in unit tests when it's inconvenient to specify a worker path.
      //console.log('No worker path specified. Not using workers');
      useFakeWorker();
    }

    

    this.syncRequests = [];

    this.listeners.setDegreeMode = function (use_degrees) {
      BuiltInFrame.setDegreeMode(use_degrees);
    };

    this.functions.updateFromFunctionMap(BuiltInFrame.functionMap());
  };

  evaluator.spawnNewWorker = function () {
    //Kill current worker if we have one
    if (this.worker) {
      this.worker.terminate();
    }
    this.worker = new Worker(this.workerPath);
    this.worker.addEventListener('message', this.processMessage.bind(this));
    this.worker.onerror = function (evt) {/*console.log(evt)*/};
    this.jobsInWorker = 0;
  };

  evaluator.processMessage = function (e) {
    //console.log("Recieved " + e.data.type + " message of length " + JSON.stringify(e.data).length);
    this.listeners[e.data.type].call(this, e.data.payload);
  };

  evaluator.listeners = {};
  
  evaluator.listeners.processChangeSet = function (changeSet) {
    var syncId = changeSet.syncId;
    
    // find all waiting sync ids <= syncId and call callback
    while (this.syncRequests.length && this.syncRequests[0].id <= syncId) {
      var syncRequest = this.syncRequests.shift();
      syncRequest.callback();
    }
        
    // try to send another job in
    this.jobsInWorker--;
    this.processChangeSet();
  };

  evaluator.listeners.log = function (msg) { /*console.log(msg);*/ };

  evaluator.listeners.removeGraph = function (id) {
    this.triggerRemove(id);
  };

  evaluator.listeners.graphComputed = function (payload) {
    this.functions.rehydrateGraphData(payload.graphData);
    this.triggerGraphComputed(payload.id, payload.graphData);
  };

  evaluator.listeners.updateFunctionMap = function (sourceFunctionMap) {
    this.functions.updateFromSourceMap(sourceFunctionMap);
  };

  evaluator.listeners.updateIntersections = function (payload) {
    this.triggerUpdateIntersections(payload.id, payload.intersections);
  };

  evaluator.listeners.statusChange = function (changes) {
    //Updates to status of expression-list items
    this.triggerStatusChange(changes);
  };

  evaluator.listeners.render = function () {
    this.triggerRender();
  };

  evaluator.listeners.renderSlowly = function () {
    this.triggerRenderSlowly();
  };
  
  evaluator._disableProcessing = function () {
    this.processingDisabled = true;
  };
  
  evaluator._enableProcessing = function () {
    this.processingDisabled = false;
    this.processChangeSet();
  };

  // Allows multiple messages to be pushed onto a changeset without
  // intermediate processing.
  evaluator.batch = function (fn) {
    var alreadyDisabled = this.processingDisabled;
    this._disableProcessing();
    try{
      fn();
    }
    finally{
      // Want to make sure that if calls to evaluator.batch are nested, only the
      // outermost call reenables processing.
      if (!alreadyDisabled) this._enableProcessing();
    }
  };

  //Set up outgoing communication to worker
  evaluator.processChangeSet = function(){
    if (!this.changeSet) return;
    if (this.processingDisabled) return;
    if (this.jobsInWorker > 0) return;

    var changeSet = this.changeSet;

    // one more job is in worker; changes have been processed
    this.jobsInWorker++;
    this.changeSet = null;

    this.worker.postMessage(changeSet);
  };

  // Wrap a function in a check that this.changeSet exists before call to
  // this.processChangeSet() after.
  var withChangeSet = function (fn) {
    return function () {
      if (!this.changeSet) this.changeSet = {};
      fn.apply(this, arguments);
      this.processChangeSet();
    };
  };

  evaluator.setViewState = withChangeSet(function (viewState) {
    this.changeSet.viewState = viewState;
  });

  evaluator.setCompleteState = withChangeSet(function (statements) {
    this.spawnNewWorker();
    this.changeSet.isCompleteState = true;
    this.changeSet.statements = statements;
  });

  //Takes a object representing an "expression" (TODO - rename this concept)
  //Expects expr to have properties:
  // * id (integer)
  // * latex (string)
  // * shouldGraph (boolean)
  // * color (string)
  evaluator.addStatement = withChangeSet(function (statement) {
    if (!this.changeSet.statements) this.changeSet.statements = {};
    this.changeSet.statements[statement.id] = statement;
  });

  evaluator.removeStatement = withChangeSet(function (id) {
    if (!this.changeSet.statements) this.changeSet.statements = {};
    this.changeSet.statements[id] = null;
  });

  evaluator.removeStatements = withChangeSet(function (ids) {
    if (!this.changeSet.statements) this.changeSet.statements = {};
    for (var i = 0; i < ids.length; i++) {
      this.changeSet.statements[ids[i]] = null;
    }
  });

  // TODO - rename setIntersectIds and updateIntersections. They trip
  // me up every time.
  evaluator.setIntersectIds = withChangeSet(function (intersectIds) {
    this.changeSet.intersectIds = intersectIds;
  });

  evaluator.updateIntersections = withChangeSet(function (id) {
    this.changeSet.intersectId = id;
  });

  evaluator.setDegreeMode = withChangeSet(function (use_degrees) {
    this.changeSet.degreeMode = use_degrees;
  });

  evaluator.notifyWhenSynced = withChangeSet(function (callback) {
    this.syncId++;
    
    //Put the request in a list
    this.syncRequests.push({id: this.syncId, callback: callback});
    
    // send sync request to worker. when it comes back, we'll call the
    // callback
    this.changeSet.syncId = this.syncId;
  });

});

return Evaluator;
});

;(function () {

  if (typeof Function.prototype.bind !== 'function') {
    Function.prototype.bind = function bind(this_) {
      var fn = this;

      return function() {
        return fn.apply(this_, arguments);
      };
    };
  }

})();

define("lib/function.bind", function(){});

define('lib/underscore_model',['require','underscore','pjs','lib/function.bind'],function(require){
var _ = require('underscore');
var P = require('pjs');
require('lib/function.bind');

var UnderscoreModel = P(function (model) {
  
  model.init = function () {
    this.__observers = {};
    this.__oldProperties = {};
    this.__propertyComparators = {};
  };
  
  model.getProperty = function (property) {
    return this[property];
  };
  
  model.getOldProperty = function (property) {
    return this.__oldProperties[property];
  };
  
  model.setProperty = function (property, newValue) {
    var oldValue = this[property];
    var comparator = this.__propertyComparators[property];
    if (comparator) {
      if (comparator(oldValue, newValue)) {
        return;
      }
    } else if (_.isEqual(oldValue, newValue)) {
      return;
    }
    
    this.__oldProperties[property] = oldValue;
    this[property] = newValue;
    this.notifyPropertyChange(property);
  };

  model.setProperties = function (obj) {
    for (var k in obj) {
      if (obj.hasOwnProperty(k)) this.setProperty(k, obj[k]);
    }
  };
  
  model.setPropertyComparator = function (property, comparator) {
    this.__propertyComparators[property] = comparator;
  };
  
  model.notifyPropertyChange = function (property) {
    var observers = this.__observers[property];
    if (observers) {
     for (var i=0; i<observers.length; i++) {
       observers[i].callback(property, this);
     }
    }
  };
  
  model.unobserve = function (property_string) {
    
    // get rid of all observers
    if (!property_string) {
      this.__observers = {};
      return;
    }
    
    var properties = property_string.split(" ");
    for (var i=0; i<properties.length; i++) {
      var property_parts = properties[i].split(".");
      var property = property_parts[0];
      var namespace = property_parts[1];

      // only keep the ones with a different namespace
      if (property && namespace) {
        var original = this.__observers[property];
        var filtered = [];
        if (!original) continue;
        for (var j=0; j<original.length; j++) {
          var observer = original[j];
          if (observer.namespace !== namespace) {
            filtered.push(observer);
          }
        }
        this.__observers[property] = filtered;
        
      // get rid of all of observers for this property since no namespace given
      } else if (property) {
        if (this.__observers[property]) {
          this.__observers[property] = [];
        }
              
      // we aren't given a property, only a namespace. run through each
      // property that has observers and call .unobserve(property.namespace)
      } else if (namespace) {
        for (property in this.__observers) {
          this.unobserve(property + "." + namespace);
        }
      }
    }
  };
  
  model.observe = function (property_string, callback) {
    var properties = property_string.split(" ");
    for (var i=0; i<properties.length; i++) {
      var property_parts = properties[i].split(".");
      var property = property_parts[0];
      if (!property) throw 'Must supply a property to observe';
      
      var namespace = property_parts[1];
      var observer = {
        namespace: namespace,
        callback: callback
      };
      
      var observers = this.__observers[property];
      if (!observers) {
        this.__observers[property] = [observer];
      } else {
        observers.push(observer);
      }
    }
  };
});

return UnderscoreModel;
});

define('main/url_prefix',['require'],function(require){
  var URL_PREFIX = window.location.href.split('#')[0];
  // if we're on the file:// protocol we don't want to look at pathname. It'll
  // be a really ugly path listing all the directories we need to go through to
  // get to the index.html file. Just pretend like we're on a live server.
  if (window.location.protocol === 'file:') URL_PREFIX = '';
  return URL_PREFIX;
});


define('main/graph',['require','pjs','lib/underscore_model','main/url_prefix'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');
  var URL_PREFIX = require('main/url_prefix');

  var Graph = P(UnderscoreModel, function (proto, _super) {

    var properties = [
      'title', 'thumbURL', 'hash', 'graphData', 'access', 'created'
    ];

    proto.init = function (obj) {
      _super.init.call(this);
      var self = this;
      this.observe('title', function () {
        self.displayTitle = self.title  || self.__oldProperties.title || '[Untitled Graph]';
      });
      this.observe('created', this.updateDisplayDate.bind(this));
      this.observe('hash', function () {
        self.setProperty(
          'path',
          URL_PREFIX + (self.hash ? '#' + self.hash : '')
        );
      });

      if (obj) {
        properties.forEach(function (p) {
          if (obj.hasOwnProperty(p)) self.setProperty(p, obj[p]);
        });
      }
      if (!this.access) this.setProperty('access', 'all');
      if (!this.path) this.setProperty('path', URL_PREFIX);
      this.now = new Date();
    };

    proto.copy = function () {
      return Graph(this);
    };

    function computeDisplayDate (created) {
      var now = Date.now();
      var seconds = (now - created)/1000;
      var minutes = seconds/60;
      var hours = minutes/60;
      var days = hours/24;
      var weeks = days/7;
      var monthNames = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];

      if (weeks >= 5) {
        return 'on ' + monthNames[created.getMonth()] + ' ' + created.getDate() + ', ' + created.getFullYear();
      }
      if (weeks >= 2) return String(Math.floor(weeks)) + ' weeks ago';
      if (days >= 7) return 'last week';
      if (days >= 2) return String(Math.floor(days)) + ' days ago';
      if (hours >= 24) return 'yesterday';
      if (hours >= 2) return String(Math.floor(hours)) + ' hours ago';
      if (minutes >= 60) return 'one hour ago';
      if (minutes >= 2) return String(Math.floor(minutes)) + ' minutes ago';
      if (seconds >= 60) return 'one minute ago';
      return 'just now';
    }

    proto.updateDisplayDate = function () {
      this.displayDate = computeDisplayDate(this.created);
    };

    proto.plainObject = function () {
      var out = {};
      var self = this;
      properties.forEach(function (p) {
        out[p] = self[p];
      });
      return out;
    };
  });

  Graph.fromAjax = function(obj) {
    return Graph({
      title: obj.title,
      thumbURL: obj.thumbUrl,
      graphData: JSON.stringify(obj.state),
      hash: obj.hash,
      access: obj.access,
      created: new Date(obj.created)
    });
  };

  Graph.updateFromSync = function (obj, resp) {
    /* jshint nonstandard: true */
    obj.setProperty('title', resp.title);
    obj.setProperty('hash', resp.hash);
    obj.setProperty('graphData', unescape(obj.graphData));
    obj.setProperty('thumbURL', resp.thumbUrl);
    obj.setProperty('created', new Date(resp.created));
  };

  return Graph;
});

define('lib/browser',['require','jquery'],function (require) {
  var $ = require('jquery');

  var Browser = {
    IS_IE8: navigator.userAgent.match(/MSIE 8.0/i) !== null,
    IS_IE9: navigator.userAgent.match(/MSIE 9.0/i) !== null,
    IS_IE: navigator.userAgent.match(/MSIE/i) !== null,
    IS_IPAD: navigator.userAgent.match(/iPad/i) !== null,
    IS_MOBILE: navigator.userAgent.match(/Mobile|Android/i) !== null,
    IS_ANDROID: navigator.userAgent.match(/Android/i) !== null,
    IS_KINDLE: navigator.userAgent.match(/Kindle/i) !== null || navigator.userAgent.match(/Silk/i) !== null
  };

    // Need to detet opera less than 12 because the implementation of webworkers
    // there breaks.
  Browser.IS_OPERA_LT_12 = (function () {
    if (!navigator.userAgent.match(/OPERA/i)) return false;

    var match = navigator.userAgent.match(/Version\/(\d+)/);
    if (!(match && match[1])) return false;

    var operaVersion = parseInt(match[1], 10);
    return operaVersion < 12;
  })();

  // Returns translate3d if supported, translate otherwise
  // from http://stackoverflow.com/questions/5661671/detecting-transform-translate3d-support
  //
  // Needs document.body to be defined before it can run (so that we can put
  // an element into it). In supported browsers, the value will be set to
  // true on $(document).ready();
  Browser.SUPPORTS_TRANSLATE3D = false;
  
  $(document).ready(function() {
    var el = document.createElement('p');
    var has3d;
    var computedStyle;
    var transforms = {
      'webkitTransform':'-webkit-transform',
      'OTransform':'-o-transform',
      'msTransform':'-ms-transform',
      'MozTransform':'-moz-transform',
      'transform':'transform'
    };
    // Add it to the body to get the computed style.
    document.body.insertBefore(el, null);
    for (var t in transforms) {
      if (el.style[t] !== undefined) {
        el.style[t] = "translate3d(1px,1px,1px)";
        computedStyle = window.getComputedStyle(el);
        if (!computedStyle) return;
        has3d = computedStyle.getPropertyValue(transforms[t]);
      }
    }
    document.body.removeChild(el);
    Browser.SUPPORTS_TRANSLATE3D = (
      has3d !== undefined &&
      has3d.length > 0 &&
      has3d !== "none"
    );
  });
  
  //return a generated rule for an x-y translation. use translate3d where supported
  Browser.translateRule = function(x, y) {
    if (Browser.SUPPORTS_TRANSLATE3D) {
      return "translate3d(" + x + (x ? "px" : "") + "," + y + (y ? "px" : "") + ",0)";
    }
    return "translate(" + x + (x ? "px" : "") + "," + y + (y ? "px" : "") + ")";
  };

  Browser.CAPABLE_BROWSER = (function () {
    var is_too_small = false;
    // Our interface doesn't work on phone-size devices.
    if (window.matchMedia) {
    var mq = window.matchMedia("(max-device-width:480px)");
    if (mq && mq.matches) is_too_small = true;
    } else if (Browser.IS_ANDROID) {
    // Assume Android devices without matchMedia are too small.
    is_too_small = true;
    }

    var elem = document.createElement('canvas');
    var supports_canvas = !!(elem.getContext && elem.getContext('2d'));
    
    //we don't support iOS3 (which requires svg for fonts)
    var is_iOS3 = (Browser.IS_IPAD && (navigator.userAgent.match(/OS 3/i) !== null));

    return ((supports_canvas) && !(is_too_small || Browser.IS_KINDLE || is_iOS3));
  })();

  return Browser;
});

define('lib/rounding',['require','math/distance'],function(require){
  var Distance = require('math/distance');

  var digitRound = function (x, places) {
    var pow10 = Math.pow(10, places);
    return (Math.round(x * pow10) / pow10);
  };

  var Rounding = {
    bestRound: function (x, pixel_units, pixel_precision) {
      pixel_precision = pixel_precision || 1;

      //figure out how decimal places we can afford to round to
      var decimal_places = -Math.floor(Math.log(pixel_units) / Math.LN10);

      //round to that many decimal places
      var better_x = digitRound(x, decimal_places);

      //now we also want to check if we're within pixel_precision of one of
      //the *good* roundings
      var test_rounded_x = digitRound(x, decimal_places - 2);
      if (Math.abs(test_rounded_x - x) < pixel_precision * pixel_units) {
        better_x = test_rounded_x;
      }

      //good to go, return it
      return better_x;
    },

    shortestDecimalBetween: function(a, b){
      if(a > b){
        var tmp = b;
        b = a;
        a = tmp;
      }
      if(a === b) return a;
      if(a <= 0 && 0 <= b) return 0;
      var c = Distance.mean(a,b);
      var exponent = -8;
      var best = c;
      while(exponent < 309){ //1e309 is infinity
        var denom = Math.pow(10, -exponent);
        var mantissa = Math.round(c*denom);
        var rounded_c = mantissa/denom;

        var valid = (a <= rounded_c && rounded_c <= b);
        if(!valid) break;
        best = rounded_c;
        exponent += 1;
      }
      return best;
    }
  };

  return Rounding;
});

define('graphing/viewport',['require','lib/rounding'],function (require) {
  var Rounding = require('lib/rounding');

  function Viewport (xmin, xmax, ymin, ymax) {
    this.xmin = xmin !== undefined ? xmin : -10;
    this.xmax = xmax !== undefined ? xmax :  10;
    this.ymin = ymin !== undefined ? ymin : -10;
    this.ymax = ymax !== undefined ? ymax :  10;
  }

  Viewport.prototype.toObject = function () {
    return {
      xmin: this.xmin,
      ymin: this.ymin,
      xmax: this.xmax,
      ymax: this.ymax
    };
  };

  Viewport.fromObject = function (obj) {
    return new Viewport(obj.xmin, obj.xmax, obj.ymin, obj.ymax);
  };

  Viewport.prototype.equals = function (viewport) {
    if (this.xmin !== viewport.xmin) return false;
    if (this.ymin !== viewport.ymin) return false;
    if (this.xmax !== viewport.xmax) return false;
    if (this.ymax !== viewport.ymax) return false;

    return true;
  };

  Viewport.prototype.isXValid = function() {
    return (this.xmax - this.xmin > 0);
  };

  Viewport.prototype.isYValid = function() {
    return (this.ymax - this.ymin > 0);
  };

  Viewport.prototype.isValid = function () {
    return this.isXValid() && this.isYValid();
  };

  Viewport.prototype.isSquare = function (screen) {
    return Math.abs(screen.height - screen.width*this.aspectRatio()) < 1;
  };

  Viewport.prototype.aspectRatio = function () {
    return (this.ymax-this.ymin)/(this.xmax-this.xmin);
  };

  Viewport.prototype.squareXAxis = function (screen) {
    var xrange = this.xmax - this.xmin;
    var yrange = this.ymax - this.ymin;
    var xcenter = this.xmin + xrange/2;
    var new_xrange = yrange/screen.height * screen.width;

    this.xmin = xcenter - new_xrange/2;
    this.xmax = xcenter + new_xrange/2;
  };

  Viewport.prototype.squareYAxis = function (screen) {
    var xrange = this.xmax - this.xmin;
    var yrange = this.ymax - this.ymin;
    var ycenter = this.ymin + yrange/2;
    var new_yrange = xrange/screen.width * screen.height;

    this.ymin = ycenter - new_yrange/2;
    this.ymax = ycenter + new_yrange/2;
  };

  Viewport.prototype.squareCrop = function (screen) {
    // Square axes in a way that is guaranteed to reduce the viewport
    if (this.aspectRatio() > screen.height/screen.width) {
      this.squareYAxis(screen);
    } else {
      this.squareXAxis(screen);
    }
  };

  // rounds the viewport so that it's not more precise than a pixel
  Viewport.prototype.round = function (screen) {
    var xrange = this.xmax - this.xmin;
    var yrange = this.ymax - this.ymin;

    var x_pixel_units = xrange/screen.width;
    var y_pixel_units = yrange/screen.height;

    // Do things this way to try to maintain xrange and yrange when panning.
    this.xmin = Rounding.bestRound(this.xmin, x_pixel_units/10);
    this.xmax = Rounding.bestRound(this.xmin + xrange, x_pixel_units/10);
    this.ymin = Rounding.bestRound(this.ymin, y_pixel_units/10);
    this.ymax = Rounding.bestRound(this.ymin + yrange, y_pixel_units/10);
  };

  Viewport.prototype.clone = function() {
    return new Viewport(this.xmin, this.xmax, this.ymin, this.ymax);
  };

  // calculates a distance from the origin that is guaranteed to reach out past
  // the edge of the viewport for all values of theta. The actual value doesn't
  // matter much. This is used for clipping and the value will get truncated
  // during the clipping routine. In theory could use a really big number but
  // it's possible that we won't pick a big enough number.
  Viewport.prototype.polarDiameter = function() {
     var d1 = Math.abs(this.xmax), d2 = Math.abs(this.xmin);
     var d3 = Math.abs(this.ymax), d4 = Math.abs(this.ymin);

     // Distance can be at most sqrt(2)*magnitude of largest limit.
     // the 1.5 gives a little padding
     return 1.5 * Math.max(d1, d2, d3, d4);
  };

  //the largest visible radius. Note: this should always be strictly smaller than polarDiameter
  Viewport.prototype.largestR = function() {
    //if xmin is positive, then xmax is bigger than abs(xmin)
    //if xmax is negative, then -xmin is bigger than abs(xmax)
    return Math.sqrt(
      Math.pow(Math.max(-this.xmin, this.xmax), 2) +
      Math.pow(Math.max(-this.ymin, this.ymax), 2)
    );
  };

  //the smallest visible radius on the screen
  Viewport.prototype.smallestR = function() {
    //origin is visible
    if (this.xmin <= 0 && this.xmax >= 0 && this.ymin <= 0 && this.ymax >= 0) return 0;
    //y-axis is visible: return wherever on that's smallest
    if (this.xmin <= 0 && this.xmax >= 0) return Math.min(Math.abs(this.ymin), Math.abs(this.ymax));
    //x-axis is visible: return wherever on that's smallest
    if (this.ymin <= 0 && this.ymax >= 0) return Math.min(Math.abs(this.xmin), Math.abs(this.xmax));

    // both x & y axes are offscreen. one of the corners is the min.
    // If both negative, then -xmax is positive and smaller.
    // If both positive, then xmin positive and smaller
    return Math.sqrt(
      Math.pow(Math.max(this.xmin, -this.xmax), 2) +
      Math.pow(Math.max(this.ymin, -this.ymax), 2)
    );
  };

  return Viewport;
});

define('graphing/projection',[],function () {

  // A single object that contains all the information to map from
  // the theoretical space to the canvas space.
  var Projection = function (screen, viewport, settings) {
    this.screen = screen;
    this.viewport = viewport;
    this.settings = settings;
  };

  Projection.prototype.mapx = function(x) {
      return (x - this.viewport.xmin)*this.screen.width/(this.viewport.xmax - this.viewport.xmin);
  };
  
  Projection.prototype.mapy = function(y) {
      return this.screen.height - (y - this.viewport.ymin)*this.screen.height/(this.viewport.ymax - this.viewport.ymin);
  };

  Projection.prototype.map_pt = function(pt) {
      return {x: this.mapx(pt.x), y: this.mapy(pt.y)};
  };

  Projection.prototype.reverse_mapx = function (mapped_x) {
    return mapped_x * (this.viewport.xmax - this.viewport.xmin)/this.screen.width + this.viewport.xmin;
  };

  Projection.prototype.reverse_mapy = function (mapped_y) {
    return (
      -(mapped_y - this.screen.height)*(this.viewport.ymax - this.viewport.ymin)/this.screen.height + this.viewport.ymin
    );
  };

  Projection.prototype.reverse_map_pt = function (mapped_pt) {
    return {x: this.reverse_mapx(mapped_pt.x), y: this.reverse_mapy(mapped_pt.y)};
  };

  return Projection;
});

define('graphing/viewporttransformation',['require','pjs','./viewport','./projection'],function(require){
  var P = require('pjs');
  var Viewport = require('./viewport');
  var Projection = require('./projection');

  var ViewportTransformation = P(function (proto) {
    // Constructor can take 2 arguments for a translation only, 3 arguments
    // for a uniform scaling, or 4 arguments for different scalings along x
    // and y.
    proto.init = function (xOffset, yOffset, xScale, yScale) {
      this.xOffset = xOffset !== undefined ? xOffset : 0;
      this.yOffset = yOffset !== undefined ? yOffset : 0;
      this.xScale = xScale !== undefined ? xScale : 1;
      this.yScale = yScale !== undefined ? yScale : this.xScale;
    };

    proto.compose = function (transformation) {
      return new ViewportTransformation(
        transformation.xScale*this.xOffset + transformation.xOffset,
        transformation.yScale*this.yOffset + transformation.yOffset,
        transformation.xScale*this.xScale,
        transformation.yScale*this.yScale
      );
    };

    proto.lerp = function (transformation, ratio) {
      return new ViewportTransformation(
        (1 - ratio)*this.xOffset + ratio*transformation.xOffset,
        (1 - ratio)*this.yOffset + ratio*transformation.yOffset,
        (1 - ratio)*this.xScale + ratio*transformation.xScale,
        (1 - ratio)*this.yScale + ratio*transformation.yScale
      );
    };

    proto.transformProjection = function (projection) {
      var viewport = projection.viewport;
      var screen = projection.screen;

      var vmidx = (viewport.xmin + viewport.xmax)/2;
      var vmidy = (viewport.ymin + viewport.ymax)/2;
      var vminx = vmidx + (viewport.xmin - vmidx)/this.xScale;
      var vmaxx = vmidx + (viewport.xmax - vmidx)/this.xScale;
      var vminy = vmidy + (viewport.ymin - vmidy)/this.yScale;
      var vmaxy = vmidy + (viewport.ymax - vmidy)/this.yScale;

      // Pixel coord vs cartesian coord flip means that voffset_y needs to be flipped.
      var vox = this.xOffset * (vmaxx-vminx) / screen.width;
      var voy = -this.yOffset * (vmaxy-vminy) / screen.height;

      return new Projection(
        projection.screen,
        new Viewport(vminx-vox, vmaxx-vox, vminy-voy, vmaxy-voy),
        projection.settings
      );
    };
  });

  return ViewportTransformation;
});

define('graphing/screen',['require'],function(require) {
  function Screen(width, height) {
      this.width = width;
      this.height = height;

      return this;
  }

  return Screen;
});

/**
 * @license RequireJS text 2.0.7 Copyright (c) 2010-2012, The Dojo Foundation All Rights Reserved.
 * Available via the MIT or new BSD license.
 * see: http://github.com/requirejs/text for details
 */
/*jslint regexp: true */
/*global require, XMLHttpRequest, ActiveXObject,
  define, window, process, Packages,
  java, location, Components, FileUtils */

define('text',['module'], function (module) {
    

    var text, fs, Cc, Ci,
        progIds = ['Msxml2.XMLHTTP', 'Microsoft.XMLHTTP', 'Msxml2.XMLHTTP.4.0'],
        xmlRegExp = /^\s*<\?xml(\s)+version=[\'\"](\d)*.(\d)*[\'\"](\s)*\?>/im,
        bodyRegExp = /<body[^>]*>\s*([\s\S]+)\s*<\/body>/im,
        hasLocation = typeof location !== 'undefined' && location.href,
        defaultProtocol = hasLocation && location.protocol && location.protocol.replace(/\:/, ''),
        defaultHostName = hasLocation && location.hostname,
        defaultPort = hasLocation && (location.port || undefined),
        buildMap = {},
        masterConfig = (module.config && module.config()) || {};

    text = {
        version: '2.0.7',

        strip: function (content) {
            //Strips <?xml ...?> declarations so that external SVG and XML
            //documents can be added to a document without worry. Also, if the string
            //is an HTML document, only the part inside the body tag is returned.
            if (content) {
                content = content.replace(xmlRegExp, "");
                var matches = content.match(bodyRegExp);
                if (matches) {
                    content = matches[1];
                }
            } else {
                content = "";
            }
            return content;
        },

        jsEscape: function (content) {
            return content.replace(/(['\\])/g, '\\$1')
                .replace(/[\f]/g, "\\f")
                .replace(/[\b]/g, "\\b")
                .replace(/[\n]/g, "\\n")
                .replace(/[\t]/g, "\\t")
                .replace(/[\r]/g, "\\r")
                .replace(/[\u2028]/g, "\\u2028")
                .replace(/[\u2029]/g, "\\u2029");
        },

        createXhr: masterConfig.createXhr || function () {
            //Would love to dump the ActiveX crap in here. Need IE 6 to die first.
            var xhr, i, progId;
            if (typeof XMLHttpRequest !== "undefined") {
                return new XMLHttpRequest();
            } else if (typeof ActiveXObject !== "undefined") {
                for (i = 0; i < 3; i += 1) {
                    progId = progIds[i];
                    try {
                        xhr = new ActiveXObject(progId);
                    } catch (e) {}

                    if (xhr) {
                        progIds = [progId];  // so faster next time
                        break;
                    }
                }
            }

            return xhr;
        },

        /**
         * Parses a resource name into its component parts. Resource names
         * look like: module/name.ext!strip, where the !strip part is
         * optional.
         * @param {String} name the resource name
         * @returns {Object} with properties "moduleName", "ext" and "strip"
         * where strip is a boolean.
         */
        parseName: function (name) {
            var modName, ext, temp,
                strip = false,
                index = name.indexOf("."),
                isRelative = name.indexOf('./') === 0 ||
                             name.indexOf('../') === 0;

            if (index !== -1 && (!isRelative || index > 1)) {
                modName = name.substring(0, index);
                ext = name.substring(index + 1, name.length);
            } else {
                modName = name;
            }

            temp = ext || modName;
            index = temp.indexOf("!");
            if (index !== -1) {
                //Pull off the strip arg.
                strip = temp.substring(index + 1) === "strip";
                temp = temp.substring(0, index);
                if (ext) {
                    ext = temp;
                } else {
                    modName = temp;
                }
            }

            return {
                moduleName: modName,
                ext: ext,
                strip: strip
            };
        },

        xdRegExp: /^((\w+)\:)?\/\/([^\/\\]+)/,

        /**
         * Is an URL on another domain. Only works for browser use, returns
         * false in non-browser environments. Only used to know if an
         * optimized .js version of a text resource should be loaded
         * instead.
         * @param {String} url
         * @returns Boolean
         */
        useXhr: function (url, protocol, hostname, port) {
            var uProtocol, uHostName, uPort,
                match = text.xdRegExp.exec(url);
            if (!match) {
                return true;
            }
            uProtocol = match[2];
            uHostName = match[3];

            uHostName = uHostName.split(':');
            uPort = uHostName[1];
            uHostName = uHostName[0];

            return (!uProtocol || uProtocol === protocol) &&
                   (!uHostName || uHostName.toLowerCase() === hostname.toLowerCase()) &&
                   ((!uPort && !uHostName) || uPort === port);
        },

        finishLoad: function (name, strip, content, onLoad) {
            content = strip ? text.strip(content) : content;
            if (masterConfig.isBuild) {
                buildMap[name] = content;
            }
            onLoad(content);
        },

        load: function (name, req, onLoad, config) {
            //Name has format: some.module.filext!strip
            //The strip part is optional.
            //if strip is present, then that means only get the string contents
            //inside a body tag in an HTML string. For XML/SVG content it means
            //removing the <?xml ...?> declarations so the content can be inserted
            //into the current doc without problems.

            // Do not bother with the work if a build and text will
            // not be inlined.
            if (config.isBuild && !config.inlineText) {
                onLoad();
                return;
            }

            masterConfig.isBuild = config.isBuild;

            var parsed = text.parseName(name),
                nonStripName = parsed.moduleName +
                    (parsed.ext ? '.' + parsed.ext : ''),
                url = req.toUrl(nonStripName),
                useXhr = (masterConfig.useXhr) ||
                         text.useXhr;

            //Load the text. Use XHR if possible and in a browser.
            if (!hasLocation || useXhr(url, defaultProtocol, defaultHostName, defaultPort)) {
                text.get(url, function (content) {
                    text.finishLoad(name, parsed.strip, content, onLoad);
                }, function (err) {
                    if (onLoad.error) {
                        onLoad.error(err);
                    }
                });
            } else {
                //Need to fetch the resource across domains. Assume
                //the resource has been optimized into a JS module. Fetch
                //by the module name + extension, but do not include the
                //!strip part to avoid file system issues.
                req([nonStripName], function (content) {
                    text.finishLoad(parsed.moduleName + '.' + parsed.ext,
                                    parsed.strip, content, onLoad);
                });
            }
        },

        write: function (pluginName, moduleName, write, config) {
            if (buildMap.hasOwnProperty(moduleName)) {
                var content = text.jsEscape(buildMap[moduleName]);
                write.asModule(pluginName + "!" + moduleName,
                               "define(function () { return '" +
                                   content +
                               "';});\n");
            }
        },

        writeFile: function (pluginName, moduleName, req, write, config) {
            var parsed = text.parseName(moduleName),
                extPart = parsed.ext ? '.' + parsed.ext : '',
                nonStripName = parsed.moduleName + extPart,
                //Use a '.js' file name so that it indicates it is a
                //script that can be loaded across domains.
                fileName = req.toUrl(parsed.moduleName + extPart) + '.js';

            //Leverage own load() method to load plugin value, but only
            //write out values that do not have the strip argument,
            //to avoid any potential issues with ! in file names.
            text.load(nonStripName, req, function (value) {
                //Use own write() method to construct full module value.
                //But need to create shell that translates writeFile's
                //write() to the right interface.
                var textWrite = function (contents) {
                    return write(fileName, contents);
                };
                textWrite.asModule = function (moduleName, contents) {
                    return write.asModule(moduleName, fileName, contents);
                };

                text.write(pluginName, nonStripName, textWrite, config);
            }, config);
        }
    };

    if (masterConfig.env === 'node' || (!masterConfig.env &&
            typeof process !== "undefined" &&
            process.versions &&
            !!process.versions.node)) {
        //Using special require.nodeRequire, something added by r.js.
        fs = require.nodeRequire('fs');

        text.get = function (url, callback, errback) {
            try {
                var file = fs.readFileSync(url, 'utf8');
                //Remove BOM (Byte Mark Order) from utf8 files if it is there.
                if (file.indexOf('\uFEFF') === 0) {
                    file = file.substring(1);
                }
                callback(file);
            } catch (e) {
                errback(e);
            }
        };
    } else if (masterConfig.env === 'xhr' || (!masterConfig.env &&
            text.createXhr())) {
        text.get = function (url, callback, errback, headers) {
            var xhr = text.createXhr(), header;
            xhr.open('GET', url, true);

            //Allow plugins direct access to xhr headers
            if (headers) {
                for (header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        xhr.setRequestHeader(header.toLowerCase(), headers[header]);
                    }
                }
            }

            //Allow overrides specified in config
            if (masterConfig.onXhr) {
                masterConfig.onXhr(xhr, url);
            }

            xhr.onreadystatechange = function (evt) {
                var status, err;
                //Do not explicitly handle errors, those should be
                //visible via console output in the browser.
                if (xhr.readyState === 4) {
                    status = xhr.status;
                    if (status > 399 && status < 600) {
                        //An http 4xx or 5xx error. Signal an error.
                        err = new Error(url + ' HTTP status: ' + status);
                        err.xhr = xhr;
                        errback(err);
                    } else {
                        callback(xhr.responseText);
                    }

                    if (masterConfig.onXhrComplete) {
                        masterConfig.onXhrComplete(xhr, url);
                    }
                }
            };
            xhr.send(null);
        };
    } else if (masterConfig.env === 'rhino' || (!masterConfig.env &&
            typeof Packages !== 'undefined' && typeof java !== 'undefined')) {
        //Why Java, why is this so awkward?
        text.get = function (url, callback) {
            var stringBuffer, line,
                encoding = "utf-8",
                file = new java.io.File(url),
                lineSeparator = java.lang.System.getProperty("line.separator"),
                input = new java.io.BufferedReader(new java.io.InputStreamReader(new java.io.FileInputStream(file), encoding)),
                content = '';
            try {
                stringBuffer = new java.lang.StringBuffer();
                line = input.readLine();

                // Byte Order Mark (BOM) - The Unicode Standard, version 3.0, page 324
                // http://www.unicode.org/faq/utf_bom.html

                // Note that when we use utf-8, the BOM should appear as "EF BB BF", but it doesn't due to this bug in the JDK:
                // http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=4508058
                if (line && line.length() && line.charAt(0) === 0xfeff) {
                    // Eat the BOM, since we've already found the encoding on this file,
                    // and we plan to concatenating this buffer with others; the BOM should
                    // only appear at the top of a file.
                    line = line.substring(1);
                }

                if (line !== null) {
                    stringBuffer.append(line);
                }

                while ((line = input.readLine()) !== null) {
                    stringBuffer.append(lineSeparator);
                    stringBuffer.append(line);
                }
                //Make sure we return a JavaScript string and not a Java string.
                content = String(stringBuffer.toString()); //String
            } finally {
                input.close();
            }
            callback(content);
        };
    } else if (masterConfig.env === 'xpconnect' || (!masterConfig.env &&
            typeof Components !== 'undefined' && Components.classes &&
            Components.interfaces)) {
        //Avert your gaze!
        Cc = Components.classes,
        Ci = Components.interfaces;
        Components.utils['import']('resource://gre/modules/FileUtils.jsm');

        text.get = function (url, callback) {
            var inStream, convertStream,
                readData = {},
                fileObj = new FileUtils.File(url);

            //XPCOM, you so crazy
            try {
                inStream = Cc['@mozilla.org/network/file-input-stream;1']
                           .createInstance(Ci.nsIFileInputStream);
                inStream.init(fileObj, 1, 0, false);

                convertStream = Cc['@mozilla.org/intl/converter-input-stream;1']
                                .createInstance(Ci.nsIConverterInputStream);
                convertStream.init(inStream, "utf-8", inStream.available(),
                Ci.nsIConverterInputStream.DEFAULT_REPLACEMENT_CHARACTER);

                convertStream.readString(inStream.available(), readData);
                convertStream.close();
                inStream.close();
                callback(readData.value);
            } catch (e) {
                throw new Error((fileObj && fileObj.path || '') + ': ' + e);
            }
        };
    }
    return text;
});

define('loadcss',['text'], function(text){
  var buildMap = {};
  
  function inject_css_file(href) {
    var head = document.getElementsByTagName('head')[0];
    var link = document.createElement('link');
    link.href = href;
    link.rel = 'stylesheet';
    link.type = 'text/css';
    head.appendChild(link);
  }

  return {
    load: function(name, req, onLoad, config){
      var filename = req.toUrl(name) + ".css";
      
      // it's a build, so we grab the source directly
      if (config.isBuild) {
        text.get(filename, function(css_source){
          buildMap[name] = css_source;
          onLoad();
        });
      }
      
      // not a build, so add a <link> element to load the css file
      else {
        inject_css_file(filename);
        onLoad();
      }
    },
    
    onLayerEnd: function (write, data) {
      var complete_css = '';
      for (var moduleName in buildMap) {
        complete_css += buildMap[moduleName];
      }

      // save a css file in the same folder as the .js that will be saved. Could possibly
      // integrate this better with optimize.js in order to have more control over where the css
      // file goes. For now, it's fine within the generated/js/ dir.   
      var fs = require.nodeRequire('fs');
      var css_file = data.path.replace(/\.js/g, '.required.css');
      fs.writeFileSync(css_file, complete_css, 'utf8');
    },

    write: function(pluginName, moduleName, write){
      if(moduleName in buildMap){
        write("define('" + pluginName + '!' + moduleName + "', function(){});");
      } else{
        //console.log("ERROR - failed to find css " + moduleName + " in buildMap");
      }
    }
  };
});
define('loadcss!css/poi', function(){});
// Disable text selection

/* global jQuery */
;(function($){

  $.fn.disableTextSelection = function( removeFocus ) {

    if (removeFocus) {
      this.each(function(){
        $(this).bind("mousedown touchstart", function(){
          $(document.activeElement).focusout();
        });
      });
    }

    return this.each(function() {
    $(this).attr('unselectable', 'on').css({
                   '-moz-user-select':'none',
                   '-webkit-user-select':'none',
                   'user-select':'none'
               })
               .each(function() {
                   this.onselectstart = function() { return false; };
               });
    });
  };

})(jQuery);


define("lib/jquery.disabletextselection", function(){});

define('graphing/canvaslayer',['require','jquery','pjs','lib/browser','lib/jquery.disabletextselection'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var Browser = require('lib/browser');
  require('lib/jquery.disabletextselection');

  var CanvasLayer = P(function (layer) {

    layer.init = function (width, height) {
      this.$ = $("<div class='graph-outer'></div>")
      .css('position', 'absolute')
      .css('overflow', 'hidden')
      .disableTextSelection(Browser.IS_IE);

      this.canvas_node = $("<canvas class='graph-inner'></canvas>")
      .css('position', 'relative')
      .css('display', 'block')
      .disableTextSelection(Browser.IS_IE);

      this.devicePixelRatio = (window.devicePixelRatio || 1);
      this.ctx = this.canvas_node[0].getContext('2d');

      this.resize(width, height);

      // Canvas used to hold an image of the graph when we're panning/scaling.
      this.unscaledCanvas = document.createElement('canvas');
      this.unscaledCanvas.width = width;
      this.unscaledCanvas.height = height;

      // Flag for whether we're in the middle of a pan/scale
      this.transforming = false;

      this.$.append(this.canvas_node);
    };

    layer.resize = function (width, height) {
      // concession to retina iPads, where there is a horrendous performance
      // drop between 1023 pixels, and its full width, 1024 pixels. This
      // problem also occurs on desktop Safari as of version 6, so full screen
      // safari on a retina laptop will still be a bad experience.
      //
      // see minimal examlpe at http://jsbin.com/ulobuh/4
      if (width === 1024 && this.devicePixelRatio === 2) width = 1023;

      // early trap if not changing size
      if (width === this.width && height === this.height) return;

      this.width = width;
      this.height = height;

      this.$.css('width', width + "px")
      .css('height', height + "px");

      this.canvas_node.css('width', width + "px")
      .css('height', height + "px")
      .attr('width', width*this.devicePixelRatio)
      .attr('height', height*this.devicePixelRatio);

      if (this.unscaledCanvas) {
        this.unscaledCanvas.width = width;
        this.unscaledCanvas.height = height;
      }

      this.ctx.scale(this.devicePixelRatio, this.devicePixelRatio);
    };

    // should get overridden by subclass
    layer.redraw = function () {};

    layer.saveUnscaledCanvas = function (projection) {

      // if we've already saved it, don't want to overwrite it. You must release
      // it if you want to resave it.
      if (this.transforming) return;
      this.transforming = true;

      var ctx = this.unscaledCanvas.getContext('2d');
      var width = this.unscaledCanvas.width;
      var height = this.unscaledCanvas.height;
      ctx.clearRect(0, 0, width, height);
      ctx.drawImage(this.canvas_node[0], 0, 0, width, height);
    };

    layer.releaseUnscaledCanvas = function () {
      this.transforming = false;
    };

    layer.paintScaledCanvas = function (transformation) {
      // can't do this if we don't have an unscaledCanvas to scale
      if (!this.unscaledCanvas) return;

      var t = transformation;

      var width = this.ctx.canvas.width;
      var height = this.ctx.canvas.height;

      this.ctx.save();
      this.ctx.clearRect(0, 0, width, height);

      this.ctx.setTransform(
        t.xScale, 0,
        0, t.yScale,
        t.xOffset*this.devicePixelRatio - 0.5*(t.xScale - 1)*width,
        t.yOffset*this.devicePixelRatio - 0.5*(t.yScale - 1)*height
      );
      this.ctx.drawImage(this.unscaledCanvas, 0, 0, width, height);
      this.ctx.restore();
    };
  });

  return CanvasLayer;
});

define('graphing/clipping',[], function(){

var Clipping = {
  
  TOP: 1,
  BOTTOM: 2,
  LEFT: 4,
  RIGHT: 8,
  ALL: 15,
  X: 12,
  Y: 3,
  
  POLAR_RADIAN_EQUALITY: 1,
  POLAR_RADIAN_INEQUALITY: 2,
  POLAR_DEGREE_EQUALITY: 3,
  POLAR_DEGREE_INEQUALITY: 4,
  Y_EQUALS: 5,
  X_EQUALS: 6,
  
  mapSegmentToCanvas: function (segment, viewport, screen, graphType) {
    var output = [];
    var xmin = viewport.xmin;
    var ymin = viewport.ymin;
    var xrange = viewport.xmax-viewport.xmin;
    var yrange = viewport.ymax-viewport.ymin;
    var width = screen.width;
    var height = screen.height;
    var xscale = width/xrange;
    var yscale = -height/yrange;
    var len = segment.length;
    var i,x,y,theta,r;
        
    if (graphType === Clipping.Y_EQUALS) {
      
      for (i=0; i < len; i+=2) {
        x = (segment[i]-xmin)*xscale - 0.5;
        y = (segment[i+1]-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }
      
    } else if (graphType === Clipping.X_EQUALS) {
      
      for (i=0; i < len; i+=2) {
        x = (segment[i+1]-xmin)*xscale - 0.5;
        y = (segment[i]-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }
      
    } else if (graphType === Clipping.POLAR_RADIAN_EQUALITY) {
      
      for (i=0; i<segment.length; i+=2) {
        theta = segment[i];
        r = segment[i+1];
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }
        
    } else if (graphType === Clipping.POLAR_RADIAN_INEQUALITY) {
      
      for (i=0; i<segment.length; i+=2) {
        theta = segment[i];
        r = segment[i+1];
        if (r < 0) r = 0;
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }
      
    } else if (graphType === Clipping.POLAR_DEGREE_EQUALITY) {
      
      for (i=0; i<segment.length; i+=2) {
        theta = segment[i]*Math.PI/180;
        r = segment[i+1];
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }
      
    } else if (graphType === Clipping.POLAR_DEGREE_INEQUALITY) {
       
      for (i=0; i<segment.length; i+=2) {
        theta = segment[i]*Math.PI/180;
        r = segment[i+1];
        if (r < 0) r = 0;
        x = (r*Math.cos(theta)-xmin)*xscale - 0.5;
        y = (r*Math.sin(theta)-ymin)*yscale+height - 0.5;
        output.push(x,y);
      }

    }
    
    return output;
  },
  
  clipStrokeEdges: function (segment, viewport) {
    return Clipping.clipFillEdges(segment, viewport, Clipping.ALL, true);
  },

  clipFillEdge: function (input, inside_test, exit_point, is_open) {
    var output = [];
    var push = [].push;
    var start_index;

    if(is_open){  //stroke
      x = input[0];
      y = input[1];
      start_index = 2;
      inside = inside_test(x, y);
      if(inside) output.push(x, y);
    } else {      //fill
      x = input[input.length - 2];
      y = input[input.length - 1];
      start_index = 0;
      inside = inside_test(x, y);
    }

    for (var i = start_index; i < input.length; i+=2) {
      var x_prev = x;
      var y_prev = y;
      var inside_prev = inside;
    
      var x = input[i];
      var y = input[i+1];
      var inside = inside_test(x, y);

      if(!inside && !inside_prev){
        continue;
      }
      if(inside && inside_prev){
        output.push(x, y);
      }
      if(inside && !inside_prev){
        push.apply(output, exit_point(x, y, x_prev, y_prev));
        output.push(x, y);
      }
      if(!inside && inside_prev){
        push.apply(output, exit_point(x_prev, y_prev, x, y));
      }
    }
    return output;
  },

  clipFillEdges: function (input, viewport, edges, is_open) {
    /* jshint bitwise: false */
    var xmin = viewport.xmin;
    var xmax = viewport.xmax;
    var ymin = viewport.ymin;
    var ymax = viewport.ymax;

    var test_xmin = function (x, y) {
      return x >= xmin;
    };
    var test_xmax = function (x, y) {
      return x <= xmax;
    };
    var test_ymin = function (x, y) {
      return y >= ymin;
    };
    var test_ymax = function (x, y) {
      return y <= ymax;
    };

    var entry_xmin = function (x, y, x2, y2) {
      var dy = y2-y;
      return [xmin, y+dy*(xmin-x)/(x2-x)];
    };
    var entry_xmax = function (x, y, x2, y2) {
      var dy = y2-y;
      return [xmax, y+dy*(xmax-x)/(x2-x)];
    };
    var entry_ymin = function (x, y, x2, y2) {
      var dx = x2-x;
      return [x+dx*(ymin-y)/(y2-y), ymin];
    };
    var entry_ymax = function (x, y, x2, y2) {
      var dx = x2-x;
      return [x+dx*(ymax-y)/(y2-y), ymax];
    };
    
    var output = input;
    
    if (edges & Clipping.LEFT) {
      output = Clipping.clipFillEdge(input, test_xmin, entry_xmin, is_open);
    }
    
    if (edges & Clipping.BOTTOM) {
      output = Clipping.clipFillEdge(output, test_ymin, entry_ymin, is_open);
    }
    
    if (edges & Clipping.RIGHT) {
      output = Clipping.clipFillEdge(output, test_xmax, entry_xmax, is_open);
    }

    if (edges & Clipping.TOP) {
      output = Clipping.clipFillEdge(output, test_ymax, entry_ymax, is_open);
    }
    
    return output;
  },

  clipAllFillEdges: function (input, viewport) {
   return Clipping.clipFillEdges(input, viewport, Clipping.ALL, false);
  },
  
  computePolarFill: function(segment, fillTowards, polarInterval) {
    
    var all_segments = [];
   
    var theta;
    var start_theta = segment[0];
    var end_theta = start_theta+polarInterval;
    var limited_segment = [];
    all_segments.push(limited_segment);

    // detect 2pi intervals and split into separate segments
    for (var i=0; i<segment.length; i+=2) {
      theta = segment[i];
      var r = segment[i+1];
      if (r<0) r = 0;
        
      if (theta>=end_theta) {
        
        limited_segment = [];
        all_segments.push(limited_segment);
        start_theta = segment[i-2]; //previous theta
        end_theta = start_theta;
        // Make sure that end_theta always increases. Adding polarInterval
        // only once isn't enough because theta might change by more than
        // polarInterval between two samples.
        while(theta >= end_theta) end_theta += polarInterval;
        i -= 4; //go back 1 theta (for loop will +2)
        
      } else {
        limited_segment.push(theta,r);
      }

    }
      
    if (fillTowards === 0) {
      // just fill towards the origin
      for (i=0; i<all_segments.length; i++) {
        all_segments[i].push(0,0);
      }
      
    } else {
      
      // shade toward outside. trace around counter clockwise, jump to the
      // outside, and trace around clockwise again at pi/8 intervals. Then
      // go to the starting theta with very large radius.
      var clockwise_step = polarInterval/16;
      var radius = fillTowards;
      for (i=0; i<all_segments.length; i++) {
        var seg = all_segments[i];
        start_theta = seg[0];
        end_theta = seg[seg.length-2];
        for (theta = end_theta; theta > start_theta; theta -= clockwise_step) {
          seg.push( theta, radius);
        }
        seg.push( start_theta, radius);
      }
      
    }

    return all_segments;
  },

  computeCartesianFill: function(segment, fillTowards) {
    // copy the incoming segment and push it to the list
    segment = segment.slice();

    // add a couple points that decide which direction we fill
    segment.push(segment[segment.length-2], fillTowards);
    segment.push(segment[0], fillTowards);

    return [segment];
  }
};

return Clipping;
});

define('graphing/constants',[],function () {
  return {
    ANIMATE_ZOOM_DURATION: 500,
    DOUBLETAP_ZOOM: 2.0,
    ZOOM_FACTOR: 1.125,

    MAX_DOTTED_SEGMENTS: 1000,
    STROKE_ALPHA: 0.7,
    HIGHLIGHTED_STROKE_ALPHA: 1,
    FILL_ALPHA: 0.4,
    POINT_ALPHA: 0.9,
    HIGHLIGHTED_POINT_ALPHA: 0.6,
    POLAR_ALPHA: 0.2,
    POI_ALPHA: 0.01
  };
});

//TODO - something is slow about this when zoomed way out.
//       could be subpixel rendering.
define('graphing/dasheddrawer',['require','./constants','math/distance'],function(require){
  var constants = require('./constants');
  var Distance = require('math/distance');

function DashedDrawer(ctx, seglen) {
    this.pattern = [11,7];
    this.replen = this.pattern[0] + this.pattern[1];
     
  if (seglen !== null && seglen/this.replen > constants.MAX_DOTTED_SEGMENTS) {
        this.pattern[0] = seglen*this.pattern[0]/this.replen/constants.MAX_DOTTED_SEGMENTS;
        this.pattern[1] = seglen*this.pattern[1]/this.replen/constants.MAX_DOTTED_SEGMENTS;
    }
     
    this.pstate = 0; // 0 being "draw a line"
    this.dstaccum = 0.0;
    this.px = null;
    this.py = null;
    this.ctx = ctx;
     
    return this;
}
  
DashedDrawer.getTotalSegmentLength = function(segment) {
  if (segment.length < 4) return 0;

  var len = 0;
  var x = segment[0];
  var y = segment[1];
  
  for (var i = 2; i < segment.length; i+=2) {
    var nx = segment[i];
    var ny = segment[i+1];
  
    len += Distance.hypot(nx-x,ny-y);
  
    x = nx;
    y = ny;
  }

  return len;
};

DashedDrawer.prototype.start = function(x,y) {
    if(!this.ctx.graph_batching) this.ctx.beginPath();
    this.px = x;
    this.py = y;
};
  
DashedDrawer.prototype.next = function(x,y) {
    var dstlimit = this.pattern[this.pstate];
    var dstincr = Math.sqrt(Math.pow(x-this.px,2) + Math.pow(y-this.py,2));
     
  if (dstincr > 0.00001) {
    while (dstincr + this.dstaccum >= dstlimit) {
            // Draw up to the phase change, change phase.
            // compute actual line-to point
            var incrx = x - this.px;
            var incry = y - this.py;

            // Scaling factor
            var linedst = dstlimit - this.dstaccum;
            incrx *= linedst/dstincr;
            incry *= linedst/dstincr;
             
            // Draw if in the draw state
      if (this.pstate === 0) {
                this.ctx.moveTo(this.px, this.py);
                this.ctx.lineTo(this.px+incrx, this.py+incry);
            }
             
            // Reset the accumulator
            this.dstaccum = 0.0;
            this.px += incrx;
            this.py += incry;
            // Flip the pattern state
            this.pstate = 1-this.pstate;
            dstlimit = this.pattern[this.pstate];
            dstincr -= linedst;
        }
         
    // Draw up to the target point.
    if (this.pstate === 0) {
            this.ctx.moveTo(this.px, this.py);
            this.ctx.lineTo(x, y);
        }
    }
    this.px = x;
    this.py = y;
    this.dstaccum += dstincr;
};

DashedDrawer.prototype.skip = function(x,y) {
  this.px = x;
  this.py = y;
};
  
DashedDrawer.prototype.close = function() {
    if(!this.ctx.graph_batching) this.ctx.stroke();

    this.pstate = 0; // 0 being "draw a line"
    this.dstaccum = 0.0;
    this.px = null;
    this.py = null;
};

return DashedDrawer;
});

define('graphing/graphslayer',['require','pjs','./canvaslayer','./clipping','./dasheddrawer','./constants','./viewport','graphing/graphmode'],function (require) {
  var P = require('pjs');
  var CanvasLayer = require('./canvaslayer');
  var Clipping = require('./clipping');
  var DashedDrawer = require('./dasheddrawer');
  var constants = require('./constants');
  var Viewport = require('./viewport');
  var GRAPHMODE = require('graphing/graphmode');

  var screenToClippingViewport = function (screen) {
    return new Viewport(-3, screen.width + 3, -3, screen.height + 3);
  };

  var GraphsLayer = P(CanvasLayer, function (layer) {

      layer.redraw = function (projection, graphSketches) {
        var screen = projection.screen;

        // make sure that this is the correct size
        this.resize(screen.width, screen.height);
        // Clear out the drawing area
        this.ctx.clearRect(0, 0, screen.width, screen.height);
        this.redrawToCtx(this.ctx, projection, graphSketches);

      };

      layer.redrawToCtx = function (ctx, projection, graphSketches) {
        // TODO - maybe should be more explict about order.
        // Do the drawing of the segments
        for (var id in graphSketches) {
          var sketch = graphSketches[id];

          if (sketch.visible) {
            GraphsLayer.drawSketchToCtx(graphSketches[id], ctx, projection);
          }
        }
      };

  });

  GraphsLayer.eachSegment = function (sketch, fn) {
    for (var i = 0; i < sketch.branches.length; i++) {
      var branch = sketch.branches[i];
      for (var j = 0; j < branch.segments.length; j++) {
        var segment = branch.segments[j];
        fn(branch, segment);
      }
    }
  };

  GraphsLayer.drawSketchToCtx = function (sketch, ctx, projection) {

      if (!sketch.branches || !sketch.branches.length) return;

      ctx.lineWidth = projection.settings.graphLineWidth;
      ctx.strokeStyle = sketch.color;
      ctx.fillStyle = sketch.color;
      ctx.lineJoin = "round";
      ctx.lineCap = "round";

      //If we're drawing points, draw points and return
      var allowMovable = !!projection.settings.takingScreenshot;
      ctx.graph_batching = true;
      ctx.beginPath();
      ctx.save();
      GraphsLayer.eachSegment(sketch, function (branch, segment) {
        if (branch.graphMode === GRAPHMODE.XYPOINT ||
            (branch.graphMode === GRAPHMODE.XYPOINT_MOVABLE && allowMovable)) {
          GraphsLayer.drawPointsToCtx(ctx, projection, segment);
        }
      });

      ctx.globalAlpha = constants.POINT_ALPHA;
      ctx.stroke();
      ctx.restore();
      ctx.graph_batching = false;

      //If we're filling, fill.  No batching, because we want polar to shade deeper in overlaps
      GraphsLayer.eachSegment(sketch, function (branch, segment) {
        if (branch.graphMode === GRAPHMODE.XYPOINT || branch.graphMode === GRAPHMODE.XYPOINT_MOVABLE) return;
        var graphMode = GRAPHMODE.Y;
        if (branch.flip) graphMode = GRAPHMODE.X;
        if (branch.graphMode) graphMode = branch.graphMode;

        if (graphMode === GRAPHMODE.POLYGONFILL) {
          GraphsLayer.fillPolygonToCtx(ctx, projection, segment);
        } else {
          var op = branch.operator;
          var fill = (
            op == "<" || op == ">" || op == "<=" || op == ">=" ||
            op == "\\leq" || op == "\\le" || op == "\\geq" || op == "\\ge"
          );
          var fill_d = (op == "<=" || op == "<" || op == "\\leq" || op == "\\le");

          if (fill) GraphsLayer.fillGraphStrokeToCtx(ctx, projection, segment, fill_d, graphMode);
        }
      });

      //If we're drawing segments, draw them
      ctx.graph_batching = true;
      ctx.beginPath();
      GraphsLayer.eachSegment(sketch, function (branch, segment) {
        if (branch.graphMode === GRAPHMODE.XYPOINT || branch.graphMode === GRAPHMODE.XYPOINT_MOVABLE) return;
        var graphMode = GRAPHMODE.Y;
        if (branch.flip) graphMode = GRAPHMODE.X;
        if (branch.graphMode) graphMode = branch.graphMode;

        var op = branch.operator;
        // != is used for shade-between lines which should be dashed but not filled
        var dotted = (op == "<" || op == ">" || op == '!=');

        GraphsLayer.drawGraphStrokeToCtx(ctx, projection, segment, dotted, graphMode, op);
      });
      ctx.globalAlpha = constants.STROKE_ALPHA;
      ctx.stroke();
      ctx.globalAlpha = 1.0;
      ctx.graph_batching = false;
  };

  GraphsLayer.drawGraphStrokeToCtx = function (ctx, projection, segment, dotted, graphMode, op) {
    ctx.globalAlpha = projection.settings.highlight ?
      constants.HIGHLIGHTED_STROKE_ALPHA : constants.STROKE_ALPHA
    ;

    // takes the raw array of numbers and maps it to the canvas. Then it clips.
    var graphType = GraphsLayer.getClippingGraphType(graphMode, op !== "=", projection.settings);
    var scaled = Clipping.mapSegmentToCanvas(segment, projection.viewport, projection.screen, graphType);
    var clipped = Clipping.clipStrokeEdges(scaled, screenToClippingViewport(projection.screen));
    var i;

    // draws the clipped segment as a solid curve
    if (!dotted) {

      if (!ctx.graph_batching) ctx.beginPath();
      ctx.moveTo(clipped[0],clipped[1]);
      for (i=0; i<clipped.length; i+=2) {
        ctx.lineTo(clipped[i], clipped[i+1]);
      }
      if (!ctx.graph_batching) ctx.stroke();

    // draws the clipped segment as a dashed curve
    } else {

      var buf = new DashedDrawer(ctx, DashedDrawer.getTotalSegmentLength(clipped) );
      buf.start(clipped[0], clipped[1]);
      for (i=2; i < clipped.length; i+=2) {
        buf.next(clipped[i], clipped[i+1]);
      }
      buf.close();

    }

    ctx.globalAlpha = 1.0;
  };

  GraphsLayer.mapPointToScreen = function (projection, x, y) {
    // if the point is more than 20px off the screen in any direction, we just
    // don't draw it.
    var padding = 20;
    var mx = projection.mapx(x)-0.5;
    if (mx < -padding || mx > projection.screen.width+padding) return null;

    var my = projection.mapy(y)-0.5;
    if (my < -padding || my > projection.screen.height+padding) return null;

    return {x: mx, y: my};
  };

  GraphsLayer.drawPointToCtx = function (ctx, projection, x, y, alpha) {

    var pt = GraphsLayer.mapPointToScreen(projection, x, y);
    if (!pt) return false;

    ctx.globalAlpha = projection.settings.highlight ?
      constants.HIGHLIGHTED_POINT_ALPHA : constants.POINT_ALPHA
    ;
    if (alpha) ctx.globalAlpha = alpha;

    ctx.globalAlpha = constants.POINT_ALPHA;
    if (!ctx.graph_batching) ctx.beginPath();
    // For some reason we need a full polygon, but a small one.
    ctx.moveTo(pt.x-0.1, pt.y-0.1);
    ctx.lineTo(pt.x-0.1, pt.y+0.1);
    ctx.lineTo(pt.x+0.1, pt.y+0.1);
    ctx.lineTo(pt.x+0.1, pt.y-0.1);
    ctx.closePath();
    if (!ctx.graph_batching) ctx.stroke();

    ctx.globalAlpha = 1.0;

    return true;
  };

  GraphsLayer.drawPointsToCtx = function (ctx, projection, segment) {
      ctx.lineWidth = projection.settings.pointLineWidth;

      for (var i=0; i < segment.length; i++) {
        GraphsLayer.drawPointToCtx(ctx, projection, segment[i][0], segment[i][1]);
      }
  };

  GraphsLayer.fillGraphStrokeToCtx = function (ctx, projection, segment, fillDown, graphMode) {
    ctx.globalAlpha = (graphMode === GRAPHMODE.POLAR) ? constants.POLAR_ALPHA : constants.FILL_ALPHA;

    var fill_paths = null;
    var clipped_edges = null;
    var fillTowards;

    if (graphMode === GRAPHMODE.POLAR) {

      clipped_edges = Clipping.ALL;
      var radius = fillDown ? 0 : projection.viewport.polarDiameter();
      var interval = projection.settings.degreeMode ? 180.0 : 2*Math.PI;
      fill_paths = Clipping.computePolarFill(segment, radius, interval);

    } else if (graphMode === GRAPHMODE.Y) {

      clipped_edges = Clipping.Y;
      fillTowards = fillDown ? projection.viewport.ymin : projection.viewport.ymax;
      fill_paths = Clipping.computeCartesianFill(segment, fillTowards);

    } else if (graphMode === GRAPHMODE.X) {

      clipped_edges = Clipping.X;
      fillTowards = fillDown ? projection.viewport.xmin : projection.viewport.xmax;
      fill_paths = Clipping.computeCartesianFill(segment, fillTowards);

    }

    // scale, clip, and then draw each fill path
    var clipped_viewport = screenToClippingViewport(projection.screen);
    for (var i=0; i<fill_paths.length; i++) {

      // scale the segment
      var map_graphType = GraphsLayer.getClippingGraphType(graphMode, true, projection.settings);
      var scaled = Clipping.mapSegmentToCanvas(fill_paths[i], projection.viewport, projection.screen, map_graphType);

      // clip the segment
      var clipped = Clipping.clipFillEdges(scaled, clipped_viewport, clipped_edges);

      // draw the segment
      if (clipped.length >= 6) {
        ctx.beginPath();

        ctx.moveTo(clipped[0],clipped[1]);
        for (var j=2; j<clipped.length; j+=2) {
          ctx.lineTo(clipped[j],clipped[j+1]);
        }

        ctx.closePath();
        ctx.fill();
      }
    }

    ctx.globalAlpha = 1.0;
  };

  GraphsLayer.fillPolygonToCtx = function (ctx, projection, segment) {
    ctx.globalAlpha = constants.FILL_ALPHA;

    var clipped_viewport = screenToClippingViewport(projection.screen);

    var scaled = Clipping.mapSegmentToCanvas(segment, projection.viewport, projection.screen, Clipping.Y_EQUALS);

    // clip the segment
    var clipped = Clipping.clipFillEdges(scaled, clipped_viewport, Clipping.ALL);

    // draw the segment
    if (clipped.length >= 6) {
      ctx.beginPath();

      ctx.moveTo(clipped[0],clipped[1]);
      for (var j=2; j<clipped.length; j+=2) {
        ctx.lineTo(clipped[j],clipped[j+1]);
      }

      ctx.closePath();
      ctx.fill();
    }

    ctx.globalAlpha = 1.0;
  };

  GraphsLayer.getClippingGraphType = function (graphMode, isInequality, settings) {
    switch (graphMode) {

      case GRAPHMODE.X:
        return Clipping.X_EQUALS;

      case GRAPHMODE.PARAMETRIC:
      case GRAPHMODE.Y:
        return Clipping.Y_EQUALS;

      case GRAPHMODE.POLAR:
        if (settings.degreeMode) {
          return isInequality ? Clipping.POLAR_DEGREE_INEQUALITY : Clipping.POLAR_DEGREE_EQUALITY;
        } else {
          return isInequality ? Clipping.POLAR_RADIAN_INEQUALITY : Clipping.POLAR_RADIAN_EQUALITY;
        }

    }
  };

  return GraphsLayer;
});

define('graphing/poidotslayer',['require','loadcss!css/poi','pjs','./graphslayer','./canvaslayer','math/poi','./constants'],function(require) {
  
  // TODO - we have both a poidots layer and poilabels layer. This is including the css for both layers. Either
  // split the css into two separate files or combine the two layers into a single file
  require('loadcss!css/poi');

  var P = require('pjs');
  var GraphsLayer = require('./graphslayer');
  var CanvasLayer = require('./canvaslayer');
  var POITYPE = require('math/poi');
  var constants = require('./constants');

// TODO - rename from 'POIDotsLayer to something like SketchStyleLayer.
var POIDotsLayer = P(CanvasLayer, function(layer){
  
    layer.redraw = function (projection, graphSketches) {
    
      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);
      
      // Clear out the drawing area
      this.ctx.clearRect(0, 0, projection.screen.width, projection.screen.height);
      
      // Iterate through each graphSketch, find the ones that should showPOI
      // and draw the poi dots. Also, we save the dots we drew.
      var savedPOI = [];
      for (var id in graphSketches) {
        var sketch = graphSketches[id];
        
        if (sketch.visible) {
          
          if (sketch.showHighlight) {
            POIDotsLayer.drawSketchHighlight(sketch, this.ctx, projection);
          }
          
          var pois = sketch.getPOI();
          if (
            sketch.showPOI ||
            // Always run this routine on defined POI. They aren't drawn to the screen, but they
            // need to be available to be opened. This is easier in the current system
            // than ensuring that showPOI is always set to true for these sketches.
            (pois.length && pois[0].type === POITYPE.DEFINITION)
          ) {
            savedPOI.push.apply(savedPOI,POIDotsLayer.drawPOIs(pois, this.ctx, "#AAAAAA", projection));
          }
        }
      }
      this.savedPOI = savedPOI;
    };
    
    layer.getDrawnPOI = function () {
      return this.savedPOI || [];
    };
});

POIDotsLayer.drawSketchHighlight = function (sketch, ctx, projection) {
  projection.settings.setProperty('highlight', true);
  GraphsLayer.drawSketchToCtx(sketch, ctx, projection);
  projection.settings.setProperty('highlight', false);
};

POIDotsLayer.drawPOIs = function (pois, ctx, color, projection) {

  ctx.lineWidth = projection.settings.pointLineWidth;
  ctx.strokeStyle = color || "#AAAAAA";
  ctx.fillStyle = color || "#AAAAAA";
  ctx.lineJoin = "round";
  ctx.lineCap = "round";

  var oldGlobalAlpha = ctx.globalAlpha;
  ctx.globalAlpha = constants.POI_ALPHA;
  
  var poiOnScreen = [];

  var i, plen = pois.length;
  var poi;
  
  // we don't draw dots for POI that are defined. There is already a dot
  // for the point on the screen. But, we want there to be a POI registered
  // still, so we add it to the list of poiOnScreen
  if (plen && pois[0].type === POITYPE.DEFINITION) {
    for (i=0; i<plen; i++) {
      poi = pois[i];
      if (GraphsLayer.mapPointToScreen(projection, poi.x, poi.y)) {
        poiOnScreen.push(poi);
      }
    }
  }
  
  // actually draw them on screen
  else {
    for (i=0; i<plen; i++) {
      poi = pois[i];
      if (GraphsLayer.drawPointToCtx(ctx, projection, poi.x, poi.y, constants.POI_ALPHA)) {
        poiOnScreen.push(poi);
      }
    }
  }

  ctx.globalAlpha = oldGlobalAlpha;
  return poiOnScreen;
};

return POIDotsLayer;
});

define('graphing/domlayer',['require','pjs','jquery','lib/browser','lib/jquery.disabletextselection'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var Browser = require('lib/browser');
  require('lib/jquery.disabletextselection');

var DOMLayer = P(function(layer){
  
  layer.init = function (width, height) {
    this.$ = $("<div class='graph-outer'></div>")
           .css('position', 'absolute')
           .css('overflow', 'hidden')
           .disableTextSelection(  Browser.IS_IE  );
      
    this.dom_node = $("<div></div>")
                     .css('position', 'relative')
                     .css('display', 'block')
                     .disableTextSelection(  Browser.IS_IE  );
     
    this.resize(width, height);
           
    this.$.append(this.dom_node);
  };
  
  layer.resize = function (width, height) {
    
    // early trap if not changing size
    if (width === this.width && height === this.height) return;
    
    this.width = width;
    this.height = height;
    
    this.$.css('width', width + "px")
          .css('height', height + "px");
  
    this.dom_node.css('width', width + "px")
                 .css('height', height + "px");
  };
  
  // should get overridden by subclass
  layer.redraw = function() {};
});

return DOMLayer;
});

define('graphing/label',['math/builtin'], function (BuiltIn) {
// Returns a label for a point with an appropriate number of decimals for the
// given scale. Scale is typically chosen to be the range of numbers displayed
// in the current viewport. Rounds to pi fractions when the denominator is 24
// or less, according to a tolerance that depends on x and scale.
//
// Label is returned as on object with the string representation given by
// label.string, and represented value label.value, which is equal to x when
// the string is a decimal representation, and equal to n*Math.PI/d for pi
// fractions. This is used for checking if a labeled value is actually a hole
// in the function.
function value(x, scale) {

  if (isNaN(x)) return { string: 'undefined', value: x };

  if (x === 0) return { string: '0', value: x };

  if (!scale) scale = x;

  var piFraction = BuiltIn.toFraction(x/Math.PI, 24);
  var nString;
  var dString;

  if (
    fewDigits(scale) &&
    BuiltIn.approx(piFraction.n/piFraction.d*Math.PI, x, 3)
  ) {
    if (piFraction.n === 0) {
      nString = "0";
    } else if (piFraction.n === 1) {
      nString = "π";
    } else if (piFraction.n === -1) {
      nString = "-π";
    } else {
      nString = piFraction.n.toString() + "π";
    }

    if (piFraction.d === 1) {
      dString = "";
    } else {
      dString = "/" + piFraction.d.toString();
    }

    return {
      string: nString + dString,
      value: piFraction.n/piFraction.d*Math.PI
    };
  }

  var mantissa, superscript, string;
  if (fewDigits(scale)) {
    string = stripZeros(x.toFixed(decimalsFromScale(scale)));
    superscript = null;
    mantissa = null;
    
  } else {
    var parts = stripExponentialZeros(x.toExponential(decimalsFromScale(scale/x))).split('e');
    mantissa = parts[0] + '\u00d7' + '10';
    superscript = parts[1].replace('+', '');
    string = stripExponentialZeros(x.toExponential(decimalsFromScale(scale/x))).replace('+', '');
  }

  return { string: string, mantissa: mantissa, superscript: superscript, value: x };
}

// x and f(value(x).value), returning the results as two strings. Useful
// because the function may have a hole at value(x).value.
function point(x, xscale, yscale, fn) {
  var xlabel = value(x, xscale);
  var ylabel = value(fn(xlabel.value), yscale);
  return [xlabel, ylabel];
}

// Strip trailing zeros from a string representation of a decimal.
var trailingZerosRegex = /\.?0+$/;
function stripZeros(string) {
  if (string.indexOf('.') === -1) return string;
  return string.replace(trailingZerosRegex, '');
}

var exponentialTrailingZerosRegex = /\.?0+e/;
function stripExponentialZeros(string) {
  return string.replace(exponentialTrailingZerosRegex, 'e');
}

function fewDigits(x) {
  x = Math.abs(x);
  return 1e-4 < x && x < 1e7;
}

// Returns integer number of decimals to show given scale of numbers to be
// represented.
function decimalsFromScale(scale) {
  scale = Math.abs(scale);
  scale = Math.max(scale, 1e-16);
  return Math.max(0, Math.floor(4.5 - Math.log(scale)/Math.LN10));
}

return {
  value: value,
  point: point
};

});

define('graphing/poilabelslayer',['require','pjs','jquery','./domlayer','./label','graphing/graphmode','math/poi'],function(require){
  var P = require('pjs');
  var $ = require('jquery');
  var DOMLayer = require('./domlayer');
  var Label = require('./label');
  var GRAPHMODE = require('graphing/graphmode');
  var POITYPE = require('math/poi');

var POILabelsLayer = P(DOMLayer, function(layer, _super){
   
    // can't use jquery addClass and removeClass because they are slow on ipad.
    // the problem appears to be that jquery implementation keeps setting the
    // className property of the element even if nothing has changed. In turn,
    // ios appears to rerender everything since .className was set. So we only
    // add/remove the class if it'll change the className of the body.
    var body = $('body');
    function addGlobalClass (className) {
      if (!body.hasClass(className)) {
        body.addClass(className);
      }
    }
    function removeGlobalClass (className) {
     if (body.hasClass(className)) {
       body.removeClass(className);
     }
    }
    
    layer.redraw = function (projection, graphSketches) {
    
      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);
      
      // Clear out the drawing area
      this.dom_node.find('.poi').remove();

      // check if an old hoveredPOI was set and clear it out if so
      var hoveredPOI = this.hoveredPOI;
      var hoveredSketch = hoveredPOI ? hoveredPOI.sketch : null;
      var foundHoveredSketch = false;
      
      // Iterate through each graphSketch, find the opened poi and draw them
      // also saves which ones were drawn.
      var savedPOI = [];
      for (var id in graphSketches) {
        var sketch = graphSketches[id];
        if (sketch === hoveredSketch) foundHoveredSketch = true;
        if (!sketch.visible) continue;
        
        var pois = POILabelsLayer.drawOpenPOI(sketch, this.dom_node, projection);
        if (pois.length) {
          savedPOI.push.apply(savedPOI,pois);
        }
      }
      
      // we had a hoveredPOI set but the sketch isn't there any more. clear out
      // the hoverdPOI property.
      if (!foundHoveredSketch) {
        hoveredPOI = this.hoveredPOI = null;
      }
      
      if (hoveredPOI && hoveredPOI.sketch.visible) {
        
        if (!hoveredPOI.isOpen()) {
          POILabelsLayer.drawHoveredPOI(this.dom_node, hoveredPOI, projection);
          addGlobalClass('mouse-over-closed-poi');
        } else {
          addGlobalClass('mouse-over-opened-poi');
        }
        
      } else {
       
         removeGlobalClass('mouse-over-closed-poi');
         removeGlobalClass('mouse-over-opened-poi');
        
      }

      this.savedPOI = savedPOI;
    };
    
    layer.getDrawnPOI = function () {
      return this.savedPOI || [];
    };
    
});

POILabelsLayer.getPointLabel = function(poi_in, viewport) {
  var xscale = viewport.xmax - viewport.xmin;
  var yscale = viewport.ymax - viewport.ymin;
  var labels;
  var graphMode = poi_in.getGraphMode();
  
  if (graphMode === GRAPHMODE.XYPOINT || graphMode === GRAPHMODE.XYPOINT_MOVABLE) {
    
    labels = [
      Label.value(poi_in.x, xscale),
      Label.value(poi_in.y, yscale)
    ];
    
  } else {

    var flip = graphMode === GRAPHMODE.X;
    var independent = (flip) ? poi_in.y : poi_in.x;
    var fn = poi_in.getCompiledFunction();
    labels = Label.point(independent, xscale, yscale, fn);

    if (flip) {
      var tmp = labels[0];
      labels[0] = labels[1];
      labels[1] = tmp;
    }
    
  }
  var x_label = (
    labels[0].superscript ? labels[0].mantissa + '<sup>' + labels[0].superscript + '</sup>' : labels[0].string
  );
  var y_label = (
    labels[1].superscript ? labels[1].mantissa + '<sup>' + labels[1].superscript + '</sup>' : labels[1].string
  );
  return {
    x: labels[0].value,
    x_label: x_label,
    y: labels[1].value,
    y_label: y_label,
    is_hole: !isFinite(labels[1].value)
  };
};

// TODO - cleanup. Copied and modified from main/grapher.js
POILabelsLayer.createSinglePOI = function(poi_in, viewport) {
  
  var pt = POILabelsLayer.getPointLabel(poi_in, viewport);
  var hole = pt.is_hole ? ' hole' : '';
  var real = poi_in.type === POITYPE.DEFINITION ? ' real' : '';
  
  var x_label = pt.x_label.replace("π", "<span class='pi'>π</span>");
  var y_label = pt.y_label.replace("π", "<span class='pi'>π</span>");
  
  return $(
    '<div class="tracept poi' + hole + real +'">' +
    '  <div class="pt"></div>' +
    '  <div class="label">'+ x_label + ', ' + y_label + '</div>' +
    '  <div class="arrow""></div>' +
    '</div>'
  );
};

POILabelsLayer.drawHoveredPOI = function (dom, poi, projection) {
  var screen_x = projection.mapx(poi.x);
  var screen_y = projection.mapy(poi.y);

  // ensure is on screen. TODO - duplicate of code elsewhere. Might want to centralize that.
  if (
    screen_x > -20 && screen_y > -20 &&
    screen_x < projection.screen.width + 20 && screen_y < projection.screen.height + 20
  ) {
    var dom_poi = POILabelsLayer.createSinglePOI(poi, projection.viewport);
    dom_poi.css({
      left: screen_x + "px",
      top: screen_y + "px"
    });
    dom_poi.addClass('mouseover');
    dom.append(dom_poi);
  }
  
};

POILabelsLayer.drawOpenPOI = function (sketch, dom, projection) {
  
  var pois = sketch.openPOI;
  if (!pois.length) return [];
  
  var poiOnScreen = [];
  for (var i=0; i<pois.length; i++) {
    var poi = pois[i];
    var screen_x = projection.mapx(poi.x);
    var screen_y = projection.mapy(poi.y);

    // ensure is on screen. TODO - duplicate of code elsewhere. Might want to centralize that.
    if (
      screen_x > -20 && screen_y > -20 &&
      screen_x < projection.screen.width + 20 && screen_y < projection.screen.height + 20
    ) {
      var dom_poi = POILabelsLayer.createSinglePOI(poi, projection.viewport);
      dom_poi.css({
        left: screen_x + "px",
        top: screen_y + "px"
      });
      dom_poi.addClass('opened');
      
      dom.append(dom_poi);
      poiOnScreen.push(poi);
    }
  }
  
  return poiOnScreen;
};

return POILabelsLayer;
});

define('graphing/gridlayer',['jquery', 'pjs', './canvaslayer', './label'], function($, P, CanvasLayer, Label){

var GridLayer = P(CanvasLayer, function(layer){

  layer.redraw = function (projection, scaleAxis) {
    var screen = projection.screen;
    // make sure that this is the correct size
    this.resize(screen.width, screen.height);
    // Clear out the drawing area
    this.ctx.clearRect(0, 0, screen.width, screen.height);
    this.redrawToCtx(this.ctx, projection, scaleAxis);
  };

  layer.redrawToCtx = function (ctx, projection, scaleAxis) {
    if (projection.settings.showGrid) {
      if (projection.settings.polarMode) {
        this.drawPolarGrid(ctx, projection);
       } else {
        this.drawCartesianGrid(ctx, projection);
      }
    }

    if (projection.settings.showAxes) {
      this.drawAxes(ctx, projection, scaleAxis);
    }

    if (projection.settings.showLabels) {
      if (projection.settings.polarMode) {
        this.drawPolarLabels(ctx, projection);
       } else {
        this.drawCartesianLabels(ctx, projection);
      }
    }
  };

  var eachStep = function (min, max, step, func) {
    var nmin = Math.ceil(min/step);
    var nmax = Math.floor(max/step);
    var invstep = 1/step;
    if (nmin > nmax) return;
    // If step===0, this would loop forever. This is designed for drawing
    // gridlines to a screen, so it shouldn't need to use more steps than
    // there are pixels.
    if (nmax - nmin > 10000) return;
    for (var n = nmin; n <= nmax; n++) func(n/invstep);
  };

  var clamp = function (value, min, max) {
    if (value < min) return min;
    if (value > max) return max;
    return value;
  };
  
  layer.drawPolarGrid = function (ctx, projection) {
    
    var info = bestStepSizes(projection);
    var minorOpacity = projection.settings.minorAxisOpacity;
    var majorOpacity = projection.settings.majorAxisOpacity;
    var adjustedMajorOpacity = 1 - (1 - majorOpacity)/(1 - minorOpacity);

    var x = projection.mapx(0);
    var y = projection.mapy(0);
    var rh = projection.screen.height/(projection.viewport.ymax-projection.viewport.ymin);
    var rw = projection.screen.width/(projection.viewport.xmax-projection.viewport.xmin);
    var scale = rh/rw;
    var y_scaled = y/scale;
    var rmin = projection.viewport.smallestR();
    var rmax = projection.viewport.largestR();

    // we don't want to draw from info.minorStepX if the origin is way off
    // the screen. We figure out the first multiples of minorStepX and
    // majorStepX that are visible (or nearly visible).
    var firstMinorStepX = info.minorStepX * Math.max(1, Math.floor(rmin/info.minorStepX));
    var firstMajorStepX = info.majorStepX * Math.max(1, Math.floor(rmin/info.majorStepX));
    
    // minor circles
    ctx.save();
    ctx.scale(1, scale);
    ctx.beginPath();
    eachStep(firstMinorStepX, rmax, info.minorStepX, function (value) {
      var r = projection.mapx(value) - x;
      ctx.moveTo(x+r, y_scaled);
      ctx.arc(x, y_scaled, r, 0, 2 * Math.PI);
    });
    ctx.restore();
    ctx.lineWidth=1;
    ctx.strokeStyle = "rgba(0, 0 , 0, " + minorOpacity + ")";
    ctx.stroke();
    
    // minor radial lines
    ctx.beginPath();
    //if rmin > 0, the origin is offscreen. tacky, but use this as the cue to double-up the lines
    var rInterval = (rmin > 0 ? 5 : 15);
    eachStep(0, 359, rInterval, function (degrees) {
      ctx.moveTo(x,y);
      var x_px = projection.mapx(rmax * Math.cos(degrees*Math.PI/180));
      var y_px = projection.mapy(rmax * Math.sin(degrees*Math.PI/180));
      ctx.lineTo(x_px, y_px);
    });
    ctx.stroke();

    // major circles
    ctx.save();
    ctx.scale(1, scale);
    ctx.beginPath();
    eachStep(firstMajorStepX, rmax, info.majorStepX, function (value) {
      var r = projection.mapx(value) - x;
      ctx.moveTo(x+r, y_scaled);
      ctx.arc(x, y_scaled, r, 0, 2 * Math.PI);
    });
    ctx.restore();
    ctx.lineWidth=1;
    ctx.strokeStyle = "rgba(0, 0 , 0, " + adjustedMajorOpacity + ")";
    ctx.stroke();
    
    // major radial lines
    ctx.beginPath();
    eachStep(0, 360-15, 90, function (degrees) {
      ctx.moveTo(x,y);
      var x_px = projection.mapx(rmax * Math.cos(degrees*Math.PI/180));
      var y_px = projection.mapy(rmax * Math.sin(degrees*Math.PI/180));
      ctx.lineTo(x_px, y_px);
    });
    ctx.stroke();

  };

  layer.drawCartesianGrid = function (ctx, projection) {

    var xmin = projection.viewport.xmin, ymin = projection.viewport.ymin;
    var xmax = projection.viewport.xmax, ymax = projection.viewport.ymax;

    var info = bestStepSizes(projection);

    var width = projection.screen.width;
    var height = projection.screen.height;

    var minorOpacity = projection.settings.minorAxisOpacity;
    var majorOpacity = projection.settings.majorAxisOpacity;

    ctx.lineWidth = 1;

    // Minor gridlines
    
    ctx.beginPath();

    ctx.strokeStyle = "rgba(0, 0 , 0, " + minorOpacity + ")";

    eachStep(xmin, xmax, info.minorStepX, function (value) {
      var pixelValue = Math.round(projection.mapx(value));
      if (pixelValue === width) return;
      ctx.moveTo(pixelValue - 0.5, 0);
      ctx.lineTo(pixelValue - 0.5, height);
    });
    
    eachStep(ymin, ymax, info.minorStepY, function (value) {
      var pixelValue = Math.round(projection.mapy(value));
      if (pixelValue === height) return;
      ctx.moveTo(0, pixelValue - 0.5);
      ctx.lineTo(width, pixelValue - 0.5);
    });

    ctx.stroke();

    // Major gridlines

    ctx.beginPath();
    // Compensate for double stroking major gridlines. Strokes opacities
    // compose as o3 = 1 - (1 - o1)(1 - o2). We know what we've stroked so
    // far (o1), and what final stroke we'd like (o3), so solve for o2:
    // o2 = 1 - (1 - o3)/(1 - o1).
    var adjustedMajorOpacity = 1 - (1 - majorOpacity)/(1 - minorOpacity);
    ctx.strokeStyle = "rgba(0, 0 , 0, " + adjustedMajorOpacity + ")";

    eachStep(xmin, xmax, info.majorStepX, function (value) {
      var pixelValue = Math.round(projection.mapx(value));
      if (pixelValue === width) return;
      ctx.moveTo(pixelValue - 0.5, 0);
      ctx.lineTo(pixelValue - 0.5, height);
    });
    
    eachStep(ymin, ymax, info.majorStepY, function (value) {
      var pixelValue = Math.round(projection.mapy(value));
      if (pixelValue === height) return;
      ctx.moveTo(0, pixelValue - 0.5);
      ctx.lineTo(width, pixelValue - 0.5);
    });

    ctx.stroke();

  };

  layer.drawAxes = function(ctx, projection, scaleAxis) {
    var lineOffset = projection.settings.axisLineOffset;
    var axisOpacity = projection.settings.axisOpacity.toString();

    var scaleAxisStyle = "rgba(127,205,230," + axisOpacity + ")";
    var normalAxisStyle = "rgba(0,0,0," + axisOpacity + ")";
    
    var scaleAxisMultiplier = 3;
    
    var pixelX = Math.round(projection.mapx(0)) - lineOffset;
    var pixelY = Math.round(projection.mapy(0)) - lineOffset;
    var height = projection.screen.height;
    var width = projection.screen.width;
    
    ctx.lineWidth = projection.settings.axisLineWidth * (scaleAxis === 'y' ? scaleAxisMultiplier : 1);
    ctx.strokeStyle = scaleAxis === 'y' ? scaleAxisStyle : normalAxisStyle;
    ctx.beginPath();
    ctx.moveTo(pixelX, 0);
    ctx.lineTo(pixelX, height);
    ctx.stroke();
    
    ctx.lineWidth = projection.settings.axisLineWidth * (scaleAxis === 'x' ? scaleAxisMultiplier : 1);
    ctx.strokeStyle = scaleAxis === 'x' ? scaleAxisStyle : normalAxisStyle;
    ctx.beginPath();
    ctx.moveTo(0, pixelY);
    ctx.lineTo(width, pixelY);
    ctx.stroke();
  };
  
  layer.drawPolarLabels = function (ctx, projection) {

    var info = bestStepSizes(projection);
    var rmax = projection.viewport.largestR();
    var rmin = projection.viewport.smallestR();
    var xmin = projection.viewport.xmin, xmax = projection.viewport.xmax;
    var ymin = projection.viewport.ymin, ymax = projection.viewport.ymax;
    var width = projection.screen.width;
    var height = projection.screen.height;

    var hangingColor = projection.settings.labelHangingColor;
    var normalColor = projection.settings.labelNormalColor;

    var fontSize = projection.settings.labelSize;
    var textHeight = fontSize;

    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.font = fontSize.toString() + "px Arial";
    
    function intersectX (r, bounds, labels) {
      var y = Math.sqrt(r*r-bounds*bounds);
      if (ymin <= y && y <= ymax) {
        labels.push([projection.mapx(bounds), projection.mapy(y)]);
      }
      if (ymin <= -y && -y <= ymax) {
        labels.push([projection.mapx(bounds), projection.mapy(-y)]);
      }
    }

    function intersectY (r, bounds, labels) {
      var x = Math.sqrt(r*r-bounds*bounds);
      if (xmin <= x && x <= xmax) {
        labels.push([projection.mapx(x), projection.mapy(bounds)]);
      }
      if (xmin <= -x && -x <= xmax) {
        labels.push([projection.mapx(-x), projection.mapy(bounds)]);
      }
    }
    
    var xAxis = projection.mapx(0);
    var yAxis = projection.mapy(0);
    
    // if the axis is on screen add labels for it
    var addXLabels = ymin <= 0 && 0 <= ymax;
    var addYLabels = xmin <= 0 && 0 <= xmax;
    var addEdgeLabels = '';

    // neither axis is on the screen
    if (!addXLabels && !addYLabels) {
      
      // figure out which edge is closest to an axis
      var leftDistance = Math.abs(xAxis);
      var rightDistance = Math.abs(xAxis-width);
      var topDistance = Math.abs(yAxis);
      var bottomDistance = Math.abs(yAxis-height);

      var leftRightWinner, topBottomWinner, leftRightDis, topBottomDis;
      
      if (leftDistance <= rightDistance) {
        leftRightWinner = 'left';
        leftRightDis = leftDistance;
      } else {
        leftRightWinner = 'right';
        leftRightDis = rightDistance;
      }
      
      if (topDistance <= bottomDistance) {
        topBottomWinner = 'top';
        topBottomDis = topDistance;
      } else {
        topBottomWinner = 'bottom';
        topBottomDis = bottomDistance;
      }
      
      addEdgeLabels = leftRightDis <= topBottomDis ? leftRightWinner : topBottomWinner;
    }
    
    // label each circle where it crosses the x axis, the y axis, and
    // whenever it leaves or enters the viewport.
    eachStep(info.majorStepX, rmax, info.majorStepX, function (r) {
      var labels = [];
      var label = Label.value(r, rmax);

      var textWidth = _measureWidth(ctx, fontSize, label);

      // check if circle intersects positive y axis
      if (addYLabels && ymin <= r && r <= ymax) {
        labels.push([xAxis - textWidth.main - textWidth.superscript - 5, projection.mapy(r)]);
      }
  
      // check if circle intersects negative y axis
      if (addYLabels && ymin <= -r && -r <= ymax) {
        labels.push([xAxis - textWidth.main - textWidth.superscript - 5, projection.mapy(-r)]);
      }
      
      // check if circle intersects positive x axis
      if (addXLabels && xmin <= r && r <= xmax) {
        labels.push([projection.mapx(r), yAxis + textHeight*0.6 + 3]);
      }
            
      // check if circle intersects negative x axis
      if (addXLabels && xmin <= -r && -r <= xmax) {
        labels.push([projection.mapx(-r), yAxis + textHeight*0.6 + 3]);
      }
      
      // if we're supposed to add labels to an edge, do it
      switch (addEdgeLabels) {
        case "top":
          intersectY(r, ymax, labels);
          break;
          
        case "bottom":
          intersectY(r, ymin, labels);
          break;
          
        case "left":
          intersectX(r, xmin, labels);
          break;
          
        case "right":
          intersectX(r, xmax, labels);
          break;
      }
      
      // draw each label for this circle
      for (var i=0; i<labels.length; i++) {
        var clampedPixelX = clamp(labels[i][0], 3 + textWidth.main, width - 3 - textWidth - textWidth.superscript);
        var clampedPixelY = clamp(labels[i][1], 3 + textHeight, height - 3 - textHeight);
        ctx.fillStyle = normalColor;
        _renderScientificLabel(ctx, fontSize, label, clampedPixelX, clampedPixelY, textWidth);
      }
    });
    
    // figure out which circle to label radial lines along.
    // Rule here: halfway between the largest and smallest r (rmin and rmax).
    // not scientific. Round up. Let's see how it feels
    
    // 0 => 0th circle. 1 => first circle, etc;
    var minRadNum = Math.ceil(rmin / info.majorStepX);
    var maxRadNum = Math.floor(rmax / info.majorStepX);
    var radiusNum = Math.ceil((minRadNum + maxRadNum)/2);
    var radial_label_radius = radiusNum * info.majorStepX;
    

    //if rmin > 0, the origin is offscreen. tacky, but use this as the cue to double-up the lines
    var rInterval = (rmin > 0 ? 15 : 30);

    // label radial lines

    eachStep(0, 359, rInterval, function (degrees) {
      var string;
      if (projection.settings.degreeMode) {
        string = degrees.toString() + "°";
      } else {
        string = Label.value(degrees*Math.PI/180, 2*Math.PI).string;
      }
      
      var textHalfWidth = ctx.measureText(string).width/2;
      var r = radial_label_radius / 1.05;
      
      var x = r * Math.cos(degrees*Math.PI/180);
      var y = r * Math.sin(degrees*Math.PI/180);

      // only draw labels that are on the screen
      if (x < xmin || x > xmax|| y < ymin || y > ymax) return;
      
      var pixelX = projection.mapx(x);
      var pixelY = projection.mapy(y);
      
      // some adjustments to the labels along the axes
      if (degrees === 0 || degrees === 180) {
        pixelY -= textHeight;
      } else if (degrees === 90 || degrees === 270) {
        pixelX += textHalfWidth+3;
      }
            
      var clampedPixelX = clamp(pixelX, 3 + textHalfWidth, width - 3 - textHalfWidth);
      var clampedPixelY = clamp(pixelY, 3 + textHeight, height - 3 - textHeight);
      
      ctx.fillStyle = hangingColor;
      ctx.font = fontSize.toString() + "px Arial";
      ctx.fillText(string, clampedPixelX, clampedPixelY);
    });
  };

  var _measureWidth = function(ctx, fontSize, label) {
    var superscriptWidth = 0, mainHalfWidth;
    if (label.superscript && label.string !== '0') {
      ctx.font = fontSize.toString() + "px Arial";
      mainHalfWidth = ctx.measureText(label.mantissa).width/2;
      ctx.font = (Math.round(0.8 * fontSize)).toString() + "px Arial";
      superscriptWidth = ctx.measureText(label.superscript).width;
    } else {
      ctx.font = fontSize.toString() + "px Arial";
      mainHalfWidth = ctx.measureText(label.string).width/2;
    }
    return {main: mainHalfWidth, superscript: superscriptWidth};
  };
  
  var _renderScientificLabel = function(ctx, fontSize, label, x, y, textWidth) {
    if (label.superscript) {
      ctx.font = fontSize.toString() + "px Arial";
      ctx.fillText(label.mantissa, x, y+Math.round(fontSize / 5));
      ctx.font = (Math.round(0.8 * fontSize)).toString() + "px Arial";
      ctx.fillText(label.superscript, x + textWidth.main + textWidth.superscript/2, y - Math.round(fontSize / 4));
    } else {
      ctx.font = fontSize.toString() + "px Arial";
      ctx.fillText(label.string, x, y);
    }
  };

  layer.drawCartesianLabels = function(ctx, projection) {
    
    var xmin = projection.viewport.xmin, xmax = projection.viewport.xmax;
    var ymin = projection.viewport.ymin, ymax = projection.viewport.ymax;
    var info = bestStepSizes(projection);
    var width = projection.screen.width;
    var height = projection.screen.height;

    var hangingColor = projection.settings.labelHangingColor;
    var normalColor = projection.settings.labelNormalColor;

    var xAxis = projection.mapx(0);
    var yAxis = projection.mapy(0);

    var fontSize = projection.settings.labelSize;
    var textHeight = fontSize;

    ctx.textAlign = "center";
    ctx.textBaseline = "middle";
    ctx.font = fontSize.toString() + "px Arial";

    var minusHalfWidth = (
      (ctx.measureText("-1").width - ctx.measureText("1").width)/2
    );

    eachStep(xmin, xmax, info.majorStepX, function (value) {
      var label = Label.value(value, xmax - xmin);
      
      var textWidth = _measureWidth(ctx, fontSize, label);
      var pixelX = projection.mapx(value);
      var pixelY = yAxis + textHeight*0.6 + 3;

      // Bump negative x values to the left so that the number without the
      // minus sign is centered on the grid line.
      if (value < 0) pixelX -= minusHalfWidth;

      var clampedPixelX = clamp(pixelX, 3 + textWidth.main, width - 3 - textWidth.main - textWidth.superscript);
      var clampedPixelY = clamp(pixelY, 3 + textHeight, height - 3 - textHeight);

      ctx.fillStyle = (pixelY === clampedPixelY) ? normalColor : hangingColor;

      if (label.string === "0") {
        ctx.fillStyle = normalColor;
        ctx.fillText("0", xAxis - 5 - textWidth.main, pixelY);
        return;
      }

      _renderScientificLabel(ctx, fontSize, label, clampedPixelX, clampedPixelY, textWidth);
    });

    eachStep(ymin, ymax, info.majorStepY, function (value) {
      var label = Label.value(value, ymax - ymin);

      var textWidth = _measureWidth(ctx, fontSize, label);

      var pixelY = projection.mapy(value);
      var pixelX = xAxis - 3 - textWidth.main - textWidth.superscript;

      var clampedPixelX = clamp(pixelX, 3 + textWidth.main, width - 3 - textWidth.main - textWidth.superscript);
      var clampedPixelY = clamp(pixelY, 3 + textHeight, height - 3 - textHeight);

      ctx.fillStyle = (pixelX === clampedPixelX) ? normalColor : hangingColor;

      if (label.string === "0") return;

      _renderScientificLabel(ctx, fontSize, label, clampedPixelX, clampedPixelY, textWidth);
    });
  };

  var RATIONAL_STEPS = {
    base: 10,
    major: [ 1, 2, 5 ],
    minor: [ 4, 4, 5 ]
  };
  
  var PI_STEPS = {
    base: 10,
    major: [ Math.PI, 2*Math.PI, 5*Math.PI ],
    minor: [ 4, 4, 5 ]
  };
  
  var PI_FRAC_STEPS = {
    base: 2,
    major: [ Math.PI/3 ],
    minor: [ 3 ]
  };

  // Helper for bestStepSizes
  var _bestStep = function (exact, steps) {
    
    // JM: What does this mean...
    
    /* 1 + xrange/bestMultiple <= expectedX
    * xrange/(expectedX-1) <= bestMultiple
    * xrange/(expectedX-1) <= mult*base^exp
    * (xrange/expectedX-1) / mult <= base^exp
    * ceil(log((range/expectedX-1)/mult)/log(base)) = exp
    */
    var major, bestMajor = Infinity, bestMinor, exp, num;
    for (var i=0; i < steps.major.length; i++) {
      major = steps.major[i];
      exp = Math.ceil(Math.log(exact/major)/Math.log(steps.base));
      num = major*Math.pow(steps.base, exp);

      if (num < bestMajor) {
        bestMajor = num;
        bestMinor = bestMajor/steps.minor[i];
      }
    }

    return { major: bestMajor, minor: bestMinor };
  };

  var bestStepSizes = function (projection) {

    var width = projection.screen.width;
    var height = projection.screen.height;
    var expectedX = width/projection.settings.pixelsPerLabel + 1;
    var expectedY = height/projection.settings.pixelsPerLabel + 1;
    var xRange = projection.viewport.xmax - projection.viewport.xmin;
    var yRange = projection.viewport.ymax - projection.viewport.ymin;
    var exactX = xRange/(expectedX-1);
    var exactY = yRange/(expectedY-1);

    var stepModeX, stepModeY;

    if (!projection.settings.xAxisPiLabels || projection.settings.polarMode) {
      stepModeX = RATIONAL_STEPS;
    } else if (exactX >= 1) {
      stepModeX = PI_STEPS;
    } else {
      stepModeX = PI_FRAC_STEPS;
    }
    
    var bestX = _bestStep(exactX, stepModeX);

    if (!projection.settings.yAxisPiLabels || projection.settings.polarMode) {
      stepModeY = RATIONAL_STEPS;
    } else if (exactY >= 1) {
      stepModeY = PI_STEPS;
    } else {
      stepModeY = PI_FRAC_STEPS;
    }
    
    var bestY = _bestStep(exactY, stepModeY);

    // If the axes have similar extents, prefer to choose the same steps for
    // x and y.
    if (stepModeX === stepModeY) {
      var maxRatio = projection.settings.polarMode ? Infinity : 2;
      var pixel_scale_ratio = (width/xRange) / (height/yRange);
      if (pixel_scale_ratio >= 1 && pixel_scale_ratio <= maxRatio) {
        bestX = bestY;
      } else if( pixel_scale_ratio <= 1 && pixel_scale_ratio >= 1/maxRatio ) {
        bestY = bestX;
      }
    }

    return {
      majorStepX: bestX.major,
      minorStepX: bestX.minor,
      majorStepY: bestY.major,
      minorStepY: bestY.minor
    };
  };

});

return GridLayer;
});

define('graphing/poi',[], function(){

// This is a very coupled class. It should be used along side GraphSketch.
function POI(x, y, type, sketch, branch) {
  this.x = x;
  this.y = y;
  this.type = type;
  this.sketch = sketch;
  this.branch = branch;
}

POI.prototype.getGraphMode = function () {
  return this.sketch.branches[this.branch].graphMode;
};

POI.prototype.getCompiledFunction = function () {
  return this.sketch.branches[this.branch].compiled.fn;
};

POI.prototype.isOpen = function () {
  return this.sketch.openPOI.indexOf(this) >= 0;
};

POI.prototype.close = function () {
  var index = this.sketch.openPOI.indexOf(this);
  if (index === -1) return false;
  
  this.sketch.openPOI.splice(index,1);
  return true;
};

POI.prototype.open = function () {
  if (this.isOpen()) return false;

  this.sketch.openPOI.push(this);
  return true;
};

return POI;
});

define('graphing/graphsketch',['require','math/poi','./poi','math/distance','graphing/graphmode'],function(require){
  var POITYPE = require('math/poi');
  var POI = require('./poi');
  var Distance = require('math/distance');
  var GRAPHMODE = require('graphing/graphmode');

function GraphSketch (id, branches) {
  
  // mutable properties
  this.color = '#000000';
  this.visible = true;
  this.showPOI = false;
  this.showHighlight = false;
  this.openPOI = []; // the points that are opened and visible
  this.hiddenOpenPOI = []; // the points that were opened previously,
                           // but not mapped to screen any longer.
  // immutable properties
  this.id = id;
  this.branches = branches !== undefined ? branches : [];
}

// looks inside the branches and finds POI. Only needs to do this
// once because branches are immutable. This caches the results. Also
// note that this implementation postpones the conversion from one
// large array of numbers to array of objects until someone actually
// cares about this graphsketch's poi.
GraphSketch.prototype.getPOI = function () {
  
  if (this.__cachedPOI) return this.__cachedPOI;
  
  var branch, graphMode;
  this.__cachedPOI = [];
  for (var i=0; i<this.branches.length; i++) {
    branch = this.branches[i];
    graphMode = branch.graphMode;
    
    var pois = branch.poi;
    if (graphMode === GRAPHMODE.X || graphMode === GRAPHMODE.Y) {
      this._pushPOI(pois.zeros, i, POITYPE.ZERO);
      this._pushPOI(pois.intercept, i, POITYPE.INTERCEPT);
      this._pushPOI(pois.extrema, i, POITYPE.EXTREMUM);
      this._pushPOI(pois.intersections, i, POITYPE.INTERSECTION);
    } else if (graphMode === GRAPHMODE.XYPOINT || graphMode === GRAPHMODE.XYPOINT_MOVABLE) {
      this._pushPOI(pois.defined, i, POITYPE.DEFINITION);
    }
  }

  return this.__cachedPOI;
};

GraphSketch.prototype._pushPOI = function (pois, i, type) {
  if (!pois) return;
  
  for (var j=0, plen = pois.x.length; j < plen; j++) {
    
    var poi = new POI();
    poi.type = type;
    poi.x = pois.x[j];
    poi.y = pois.y[j];
    poi.branch = i;
    poi.sketch = this;
    if (pois.intersects) poi.intersects = pois.intersects[j];
    
    this.__cachedPOI.push(poi);
  }
};

GraphSketch.prototype.updateIntersections = function (intersections) {
  for (var i = 0, ilen = this.branches.length; i < ilen; i++) {
    this.branches[i].poi.intersections = intersections[i];
  }
  this.__cachedPOI = undefined;
  this.getPOI();
  this.reopenPOIFrom(this);
};

GraphSketch.prototype.updateFrom = function (sketch) {
  if (!sketch) return;

  this.visible = true;

  if (sketch.openPOI.length || sketch.hiddenOpenPOI.length) {
    this.reopenPOIFrom(sketch);
  }

  this.showPOI = sketch.showPOI;
  this.showHighlight = sketch.showHighlight;
};

// TODO - change all the cryptic variable names to meaningful names
GraphSketch.prototype.reopenPOIFrom = function (sketch) {
  var openPOI = [];
  var hiddenOpenPOI = [];
  var pois, n_pts, min, n_j, o_pt, n_pt;
  var t_poi, poi, poi_type;
  var i, j;

  var newPoints = {};
  var oldPoints = {};

  // categorize all new poi
  pois = this.getPOI();

  for (i=0; i<pois.length; i++) {
    poi = pois[i];
    poi_type = poi.type;

    if (!newPoints[poi_type]) {
      newPoints[poi_type] = [poi];
    } else {
      newPoints[poi_type].push(poi);
    }
    
  }
  
  // categorize all old poi
  pois = sketch.openPOI.concat(sketch.hiddenOpenPOI);
  for (i=0; i<pois.length; i++) {
    poi = pois[i];
    poi_type = poi.type;

    if (!oldPoints[poi_type]) {
      oldPoints[poi_type] = [poi];
    } else {
      oldPoints[poi_type].push(poi);
    }

  }
  
  // reopen the new points that were closest to the old opened points
  for (var type in oldPoints) {
    t_poi = oldPoints[type];
    n_pts = newPoints[type] || [];

    for (i = t_poi.length-1; i >= 0; i--) {
      o_pt = t_poi[i];
      min = Infinity;
      n_j = -1;

      for (j = n_pts.length-1; j>=0; j--) {
        n_pt = n_pts[j];
        if (!n_pt) continue;
        // Don't allow intersections to jump between functions.
        if (n_pt.intersects !== o_pt.intersects) continue;

        var dis = Distance.hypot(o_pt.x-n_pt.x, o_pt.y-n_pt.y);
        if (dis < min) {
          n_j = j;
          min = dis;
        }
      }

      if (n_j != -1) {
        openPOI.push(n_pts[n_j]); // open the poi again
        n_pts[n_j] = null;
      } else {
        hiddenOpenPOI.push(o_pt); // mark point as opened but not mapped to screen
      }
    }
  }
  
  this.openPOI = openPOI;
  this.hiddenOpenPOI = hiddenOpenPOI;
};

return GraphSketch;
});

define('graphing/tracelayer',['require','pjs','./domlayer','./poi','./poilabelslayer'],function (require) {
  var P = require('pjs');
  var DOMLayer = require('./domlayer');
  var POI = require('./poi');
  var POILabelsLayer = require('./poilabelslayer');

  var TraceLayer = P(DOMLayer, function(layer){
    layer.redraw = function (projection) {

      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);

      // Clear out the drawing area
      this.dom_node.find('.tracept').remove();

      var poi = this.traceInfo ? this.traceInfo.pt : null;
      if (!poi) return;

      var screen_x = projection.mapx(poi.x);
      var screen_y = projection.mapy(poi.y);

      // ensure is on screen. TODO - duplicate of code elsewhere. Might want to centralize that.
      if (
        screen_x > -20 && screen_y > -20 &&
        screen_x < projection.screen.width+20 && screen_y < projection.screen.height+20
      ) {

        // TODO - this is nasty. the createSinglePOI assumes that we pass in an
        //        instance of the POI class. traceInfo.pt is not a POI. Putting
        //        this here just to test tracing for now.
        var real_poi = new POI(poi.x,
                               poi.y,
                               POI.ZERO,
                               this.traceInfo.branchInfo.sketch,
                               this.traceInfo.branchInfo.branch);

        var dom_poi = POILabelsLayer.createSinglePOI(real_poi, projection.viewport);
        dom_poi.css({
          left: screen_x + "px",
          top: screen_y + "px"
        });
        dom_poi.addClass('temp');
        dom_poi.removeClass('poi');
        dom_poi.find('.pt').css('background-color', real_poi.sketch.color);
        dom_poi.find('.pt').css('border-color', real_poi.sketch.color);
        this.dom_node.append(dom_poi);

      }
    };
  });

  return TraceLayer;
});

define('graphing/movablepointslayer',['require','pjs','jquery','./domlayer','graphing/graphmode'],function (require) {
  var P = require('pjs');
  var $ = require('jquery');
  var DOMLayer = require('./domlayer');
  var GRAPHMODE = require('graphing/graphmode');

  //collection of movablePoints that are rendered to the DOM
  // $ is a handle to the jquery element
  // shouldGarbageCollect is a flag
  var renderedMovablePoints = {};

  var MovablePointsLayer = P(DOMLayer, function(layer, _super){
   
    // can't use jquery addClass and removeClass because they are slow on ipad.
    // the problem appears to be that jquery implementation keeps setting the
    // className property of the element even if nothing has changed. In turn,
    // ios appears to rerender everything since .className was set. So we only
    // add/remove the class if it'll change the className of the body.
    var body = $('body');
    
    function addGlobalClass (className) {
      if (!body.hasClass(className)) {
        body.addClass(className);
      }
    }
    function removeGlobalClass (className) {
     if (body.hasClass(className)) {
       body.removeClass(className);
     }
    }
   
    layer.redraw = function (projection, graphSketches) {

      // make sure that this is the correct size
      this.resize(projection.screen.width, projection.screen.height);
      
      // clear out hoveredSketchId if the sketch is gone
      var hoveredSketch = graphSketches[this.hoveredSketchId];
      if (!hoveredSketch) {
        this.hoveredSketchId = null;
      }
      
      // clear out pressedSketchId if the sketch is gone
      var pressedSketch = graphSketches[this.pressedSketchId];
      if (!pressedSketch) {
        this.pressedSketchId = null;
      }
      
      // Iterate through each graphSketch, find the opened poi and draw them
      // also saves which ones were drawn.
      var savedPOI = [];
      
      for (var id in renderedMovablePoints) {
        renderedMovablePoints[id].shouldGarbageCollect = true;
      }

      for (id in graphSketches) {
        var sketch = graphSketches[id];
        if (!sketch.visible) continue;
        
        var styles = {
          hovered: sketch === hoveredSketch,
          pressed: sketch === pressedSketch
        };
        
        var point = drawMovablePoint(sketch, this.dom_node, projection, styles);
        if (point) {
          savedPOI.push(point);
        }
      }
      
      
      for (id in renderedMovablePoints) {
        if (renderedMovablePoints[id].shouldGarbageCollect) {
          renderedMovablePoints[id].$.remove();
          delete(renderedMovablePoints[id]);
        }
      }
      
      if (hoveredSketch && hoveredSketch.visible) {
         addGlobalClass('mouse-over-movable-point');
      } else {
         removeGlobalClass('mouse-over-movable-point');
      }
      
      if (pressedSketch && pressedSketch.visible) {
         addGlobalClass('dragging-movable-point');
      } else {
         removeGlobalClass('dragging-movable-point');
      }
           
      this.savedPOI = savedPOI;
    };
    
    layer.getDrawnPOI = function () {
      return this.savedPOI;
    };
    
  });

  var drawMovablePoint = function (sketch, dom, projection, styles) {
    
    if (!sketch.branches ||
         sketch.branches.length !== 1 ||
         sketch.branches[0].graphMode !== GRAPHMODE.XYPOINT_MOVABLE) {
           return;
    }

    var poi = sketch.getPOI()[0];
    var screen_x = projection.mapx(poi.x);
    var screen_y = projection.mapy(poi.y);
    
    if (!(sketch.id in renderedMovablePoints)) {
      var $el = $("<div class='movable-point'><div class='background'></div><div class='dot'></div></div>");
      dom.append($el);
      renderedMovablePoints[sketch.id] = {
        $: $el,
        shouldGarbageCollect: true
      };
    }

    var dom_poi = renderedMovablePoints[sketch.id].$;

    // ensure is on screen. TODO - duplicate of code elsewhere. Might want to centralize that.
    if (
      screen_x > -20 && screen_y > -20 &&
      screen_x < projection.screen.width + 20 && screen_y < projection.screen.height + 20
    ) {
      dom_poi.css({
        left: screen_x + "px",
        top: screen_y + "px",
        backgroundColor: sketch.color
      });

      dom_poi.toggleClass('highlight', !!sketch.showHighlight);
      dom_poi.toggleClass('simulate-hovered', !!styles.hovered);
      dom_poi.toggleClass('simulate-active', !!styles.pressed);
      
      //don't garbage collect this point
      renderedMovablePoints[sketch.id].shouldGarbageCollect = false;
    }

    return poi;
  };

return MovablePointsLayer;
});
define('graphing/grapher',['require','jquery','lib/browser','./viewport','./viewporttransformation','./screen','./poidotslayer','./poilabelslayer','./gridlayer','./graphsketch','./canvaslayer','./graphslayer','./projection','./tracelayer','./movablepointslayer','math/poi'],function(require){
  var $ = require('jquery');
  var Browser = require('lib/browser');
  var Viewport = require('./viewport');
  var ViewportTransformation = require('./viewporttransformation');
  var Screen = require('./screen');
  var POIDotsLayer = require('./poidotslayer');
  var POILabelsLayer = require('./poilabelslayer');
  var GridLayer = require('./gridlayer');
  var GraphSketch = require('./graphsketch');
  var CanvasLayer = require('./canvaslayer');
  var GraphsLayer = require('./graphslayer');
  var Projection = require('./projection');
  var TraceLayer = require('./tracelayer');
  var MovablePointsLayer = require('./movablepointslayer');
  var POI = require('math/poi');

// This is the guy you talk to in order to allocate/deallocate graph layers.
// container is the <div> element that holds the graph area. Grapher handles resize automatically.
// onRecompute is the handler that should be called when a recompute is requested.
// onRecompute(viewport as Viewport, screen as Screen)
function Grapher(container, settings) {
    this.container = container;
    this.$ = $(container);

    this.viewport = new Viewport();
    this.screen = new Screen(this.$.width(), this.$.height());

    // a reference to an UnderscoreModel that we can ask for settings values
    this.settings = settings;

    this.$.css('overflow', 'hidden');
    // gridlines
    this.gridLayer = GridLayer(this.screen.width, this.screen.height);
    this.$.append( this.gridLayer.$ );

    // poi dots
    this.poiDotsLayer = POIDotsLayer(this.screen.width, this.screen.height);
    this.$.append( this.poiDotsLayer.$ );
    
    // graphs
    this.graphsLayer = GraphsLayer(this.screen.width, this.screen.height);
    this.$.append( this.graphsLayer.$ );

    // screenshot layer
    this.$.append('<div class="screenshot"></div>');

    this.movablePointsLayer = MovablePointsLayer(this.screen.width, this.screen.height);
    this.movablePointsLayer.$.css('z-index', '0');
    this.$.append( this.movablePointsLayer.$ );

    // poi labels (and opened dots)
    this.poiLabelsLayer = POILabelsLayer(this.screen.width, this.screen.height);
    // some weird interaction with overflow:hidden requires a z-index to be
    // set for openpoi to not flicker.
    this.poiLabelsLayer.$.css('z-index', '0');
    this.$.append( this.poiLabelsLayer.$ );
    
    // trace layer
    this.traceLayer = TraceLayer(this.screen.width, this.screen.height);
    // some weird interaction with overflow:hidden requires a z-index to be
    // set for the tracing label to not flicker.
    this.traceLayer.$.css('z-index', '0');
    this.$.append( this.traceLayer.$ );
     
    // needed to tell IE9 that the layer should steal mouse events.
    if (Browser.IS_IE9) {
      this.traceLayer.$.addClass('transparent-bg');
    }
    
    this.transformation = new ViewportTransformation();

    // Which axes are currently being scaled. Managed by GraphController.
    // 'x', 'y', 'both', or undefined
    this.scaleAxis = undefined;

    this.__transient = false;
    this.graphSketches = {};
    this.selectedId = null;
    return this;
}

Grapher.prototype.clear = function () {
  this.graphSketches = {};
};

Grapher.prototype.getGraphSketch = function(graphId) {
  if (graphId in this.graphSketches) {
    return this.graphSketches[graphId];
  } else {
    return null;
  }
};
  
Grapher.prototype.addGraphSketch = function(sketch) {
  this.graphSketches[sketch.id] = sketch;
};

Grapher.prototype.removeGraphSketch = function(graphId) {
  delete this.graphSketches[graphId];
};
 
Grapher.prototype.createProjection = function () {
  var projection = new Projection(this.screen, this.viewport, this.settings);
  
  if (this.isInTransientState()) {
    return this.transformation.transformProjection(projection);
  } else {
    return projection;
  }
};

Grapher.prototype.computeDefaultViewport = function () {
  var viewport = new Viewport(-10, 10, -10, 10);
  viewport.squareYAxis(this.screen);
  viewport.round(this.screen);
  
  return viewport;
};

// Updates the screen sizes of all of the layers and requests a redraw, viewport stays the same.
Grapher.prototype.updateScreenSize = function(w, h) {
    if (w<=0 || h<=0) return;
    if (this.screen.width === w && this.screen.height === h) return false;
    this.$.width(w);
    this.$.height(h);

    this.screen.width = w;
    this.screen.height = h;
    return true;
};
 
Grapher.prototype.beginTransientState = function() {
  if (this.isInTransientState()) return;

  var projection = this.createProjection();
  this.graphsLayer.saveUnscaledCanvas(projection);

  this.__transient = true;
};

Grapher.prototype.endTransientState = function() {
  if (!this.isInTransientState()) return;
  var projection = this.createProjection();
  this.viewport = projection.viewport;
  this.viewport.round(projection.screen);
  this.settings.setProperty(
    'squareAxes',
    this.viewport.isSquare(projection.screen)
  );
  this.transformation = new ViewportTransformation();
  this.graphsLayer.releaseUnscaledCanvas();
  this.__transient = false;
};

Grapher.prototype.isInTransientState = function () {
  return this.__transient;
};

Grapher.prototype.hide = function (id) {
  var sketch = this.getGraphSketch(id);
  if (sketch) sketch.visible = false;
};

Grapher.prototype.select = function (id) {
  var currentSketch = this.getGraphSketch(this.selectedId);
  if (currentSketch) currentSketch.showPOI = currentSketch.showHighlight = false;
  var newSketch = this.getGraphSketch(id);
  if (newSketch) newSketch.showPOI = newSketch.showHighlight = true;
  this.selectedId = id;
};

Grapher.prototype.updateSketch = function (id, graphData) {
  //Pause updates while zooming, to stay in sync with cached canvas
  if(this.isInTransientState()) return;
  var currentSketch = this.getGraphSketch(id);
  
  //TODO When does this happen?
  if (!graphData.length) return this.hide(id);
  
  var newSketch = new GraphSketch(id, graphData);
  //TODO - handle differently-colored branches
  newSketch.color = graphData[0].color;
  newSketch.updateFrom(currentSketch);
  newSketch.showPOI = newSketch.showHighlight = (String(id) === String(this.selectedId));
  this.addGraphSketch(newSketch);
};

Grapher.prototype.updateIntersections = function (id, intersections) {
  var sketch = this.getGraphSketch(id);
  if (sketch) sketch.updateIntersections(intersections);
};

Grapher.prototype.redrawAllLayers = function() {
  this.cancelRedrawSlowly();
  this.redrawGridLayer();
  this.redrawContentLayers();
};

Grapher.prototype.redrawContentLayers = function(){
  this.cancelRedrawSlowly();
  this.redrawGraphsLayer();
  this.redrawPOILayer();
  this.redrawTraceLayer();
  this.redrawMovablePointsLayer();
};

Grapher.prototype.cancelRedrawSlowly = function(){
  clearTimeout(this.redraw_slowly_timeout);
  this.redraw_slowly_timeout = null;
};

Grapher.prototype.redrawSlowly = function(delay, step, n){
  //This is an intentional slow-down used on initial graph loads to give a line-by-line drawing effect.
  //It draws only the first n graphs, and calls itself repeatedly on a timeout until all layers are drawn
  //Every delay ms, it draws step more graphs
  if(typeof(delay) === 'undefined'){
    delay = 30;
  }
  if(typeof(step) === 'undefined'){
    step = 1;
  }
  if(typeof(n) === 'undefined'){
    this.cancelRedrawSlowly();
    n = 0;
  }

  this.redrawGridLayer(); //Always draw grid first
  var sketches_to_draw = {};
  var stopped_early = false;
  var i = 0;
  for(var id in this.graphSketches){
    if(i++ > n){
      stopped_early = true;
      break;
    }
    sketches_to_draw[id] = this.graphSketches[id];
  }
  this.graphsLayer.redraw(this.createProjection(), sketches_to_draw);
  if(stopped_early){
    var self = this;
    //Store timeout so that this can be interrupted
    this.redraw_slowly_timeout = setTimeout(function(){self.redrawSlowly(delay, step, n+step)}, delay);
  }
  else{
    //Only draw trace and POI if this was our last iteration
    this.redrawPOILayer();
    this.redrawTraceLayer();
    this.redrawMovablePointsLayer();

    this.redraw_slowly_timeout = null;
  }
};

Grapher.prototype.redrawGridLayer = function () {
  this.gridLayer.redraw(this.createProjection(), this.scaleAxis);
};

Grapher.prototype.redrawGraphsLayer = function () {
  if (!this.isInTransientState()) {
    this.graphsLayer.redraw(this.createProjection(), this.graphSketches);
  } else {
    this.graphsLayer.paintScaledCanvas(this.transformation);
  }
};

Grapher.prototype.redrawMovablePointsLayer = function () {
  this.movablePointsLayer.redraw(this.createProjection(), this.graphSketches);
};

Grapher.prototype.redrawPOILayer = function () {
  this.poiDotsLayer.redraw(this.createProjection(), this.graphSketches);
  this.poiLabelsLayer.redraw(this.createProjection(), this.graphSketches);
};

Grapher.prototype.redrawTraceLayer = function () {
  this.traceLayer.redraw(this.createProjection());
};

Grapher.prototype.screenshot = function () {
  
  var screen = this.screen;
  var printLayer = CanvasLayer(screen.width, screen.height);
  var ctx = printLayer.ctx;
  var projection = this.createProjection();

  // Make a white background, since transparent backgrounds are funny in some
  // environments.
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, screen.width, screen.height);
  
  this.settings.takingScreenshot = true;
  this.gridLayer.redrawToCtx(ctx, projection);
  this.graphsLayer.redrawToCtx(ctx, projection, this.graphSketches);
  this.settings.takingScreenshot = false;
  
  return printLayer.canvas_node.get(0).toDataURL("image/png");
};

Grapher.prototype.thumbnail = function (width, height) {
  var screen = new Screen(width, height);
  
  var printLayer = CanvasLayer(width, height);
  var ctx = printLayer.ctx;
  
  var settings = this.settings.clone();
  settings.setProperty('showLabels', false);
  var viewport = this.viewport.clone();
  
  if (viewport.isSquare(this.screen)) viewport.squareCrop(screen);
  
  var projection = new Projection(screen, viewport, settings);
  
  // Make a white background, since transparent backgrounds are funny in some
  // environments.
  ctx.fillStyle = 'white';
  ctx.fillRect(0, 0, screen.width, screen.height);
  
  this.settings.takingScreenshot = true;
  this.gridLayer.redrawToCtx(ctx, projection);
  this.graphsLayer.redrawToCtx(ctx, projection, this.graphSketches);
  this.settings.takingScreenshot = false;
  
  return printLayer.canvas_node.get(0).toDataURL("image/png");
};

Grapher.prototype.getOpenIntersectionIds = function () {
  var openPOI;
  var hiddenOpenPOI;
  var i;

  var intersectIds = {};

  for (var id in this.graphSketches) {
    if (!this.graphSketches.hasOwnProperty(id)) continue;
    openPOI = this.graphSketches[id].openPOI;
    for (i = openPOI.length - 1; i >= 0; i--) {
      if (openPOI[i].type === POI.INTERSECTION) intersectIds[id] = true;
    }
    hiddenOpenPOI = this.graphSketches[id].hiddenOpenPOI;
    for (i = hiddenOpenPOI.length - 1; i >= 0; i--) {
      if (hiddenOpenPOI[i].type === POI.INTERSECTION) intersectIds[id] = true;
    }
  }

  return intersectIds;
};

return Grapher;
});

define('graphing/poicontroller',['require','jquery','math/distance','lib/rounding','graphing/graphmode'],function(require){
  var $ = require('jquery');
  var Distance = require('math/distance');
  var Rounding = require('lib/rounding');
  var GRAPHMODE = require('graphing/graphmode');

function POIController (grapher) {
  this.manager = grapher;
  this.$ = this.manager.$;
  
  this.triggerMovePoint = function (changes) {};
  this.triggerStartTracingBranch = function () {};
  this.triggerEmptyTouchStart = function () {};
  this.triggerStartMovingPoint = function () {};
  this.triggerStopMovingPoint = function () {};
  this.triggerPointSelected = function () {};

  this.addTouchEventHandlers();
  this.addHoverEventHandler();
}

POIController.prototype.getToleranceByDevice = function (device) {
  return device === 'touch' ? 20 : 10;
};

POIController.prototype.addHoverEventHandler = function () {
  
  $(document).on('tapmove', function(evt){
    
    // only want this handler to proceed on mouse-based interactions
    if (evt.device === 'touch') return;
    
    var screen_pt = this.getMouseRelativeToGrapher(evt);
    var tolerance = this.getToleranceByDevice(evt.device);
    
    var realPointInfo = this.getPointUnderPoint(screen_pt, tolerance);
    var poi = null;
    var movableSketchId = null;
    
    // if there is a real point under the mouse, then don't show a POI hover
    if (realPointInfo) {
      var movable = realPointInfo.sketch.branches[realPointInfo.branch].graphMode === GRAPHMODE.XYPOINT_MOVABLE;
      movableSketchId = movable ? realPointInfo.sketch.id : null;
    } else {
      poi = this.getPOIUnderPoint(screen_pt, tolerance);
    }
    
    if (poi != this.manager.poiLabelsLayer.hoveredPOI) {
      this.manager.poiLabelsLayer.hoveredPOI = poi;
      this.manager.redrawPOILayer();
    }
    
    if (movableSketchId != this.manager.movablePointsLayer.hoveredSketchId) {
      this.manager.movablePointsLayer.hoveredSketchId = movableSketchId;
      this.manager.redrawMovablePointsLayer();
    }
       
  }.bind(this));
  
};

POIController.prototype.addTouchEventHandlers = function () {

  // hack to prevent dblclick zoom from working when on poi. Ideally, this
  // would happen more naturally. Maybe we wouldn't listen for dblclick within
  // the graphcontroller. Only way that could happen is if we move these events
  // to click based instead of mousedown based.
  this.$.on('dblclick', function (evt){
      var screen_pt = this.getMouseRelativeToGrapher(evt);
      var tolerance = this.getToleranceByDevice(evt.device);
      if (this.getPointUnderPoint(screen_pt, tolerance) ||
          this.getPOIUnderPoint(screen_pt, tolerance) ||
          this.getBranchInfoUnderPoint(screen_pt, tolerance)) {
            
        evt.preventDefault();
        evt.handle();
      }
  }.bind(this));

  this.$.on('tapstart', function (evt) {
      var screen_pt = this.getMouseRelativeToGrapher(evt);
      var tolerance = this.getToleranceByDevice(evt.device);
      
      $(document.activeElement).blur();

      // check if we're on a point list
      var pointInfoUnderMouse = this.getPointUnderPoint(screen_pt, tolerance);
      if (pointInfoUnderMouse) {
        
        this.triggerStartMovingPoint(pointInfoUnderMouse.id);
        this.startMovingPoint(pointInfoUnderMouse);
        
        evt.handle(); //prevents panning/zooming
        return;
      }
      
      // check if we're on a POI. If so, either open or close the POI under
      // the mouse.
      if (this.togglePOIUnderPoint(screen_pt, tolerance)) {
        evt.handle(); //prevents panning/zooming
        return;
      }
            
      // check if we're on a curve
      var branchInfoUnderMouse = this.getBranchInfoUnderPoint(screen_pt, tolerance);
      if (branchInfoUnderMouse) {
        
        // selects expression
        this.triggerStartTracingBranch(branchInfoUnderMouse.id);
        this.startTracingBranch(branchInfoUnderMouse, screen_pt);
        
        evt.handle(); //prevents panning/zooming
        return;
      }

      this.triggerEmptyTouchStart();
  }.bind(this));
};

POIController.prototype.getMouseRelativeToGrapher = function (evt) {
  var pageOffset = this.$.offset();
  var pt = evt.touches ? evt.touches[0] : evt;
  
  return {x: pt.pageX - pageOffset.left, y: pt.pageY - pageOffset.top};
};

//modified to give precedence to a MOVABLE POINT
POIController.prototype.getPointUnderPoint = function (screen_pt, tolerance) {
  var minDistance = tolerance;
  var pointInfo = null;
  var foundMovablePoint = false;
  var sketches = this.manager.graphSketches;
  var projection = this.manager.createProjection();
  for (var id in sketches) {
    var sketch = sketches[id];
    if(!sketch || !sketch.visible) continue;

    var branches = sketch.branches;
    if (!branches || !branches.length) continue;
    
    for (var i=0; i<branches.length; i++) {
      var isMovable = (branches[i].graphMode === GRAPHMODE.XYPOINT_MOVABLE);
      if (
        isMovable ||
        // only search non-movable branches if we haven't alread found a movable point
        (!foundMovablePoint && branches[i].graphMode === GRAPHMODE.XYPOINT)
      ) {
        var list = branches[i].segments[0];

        for (var j = 0; j < list.length; j++) {
          var pt = list[j];
          var mapped = projection.map_pt({x: pt[0], y: pt[1]});
          var dis = Distance.hypot(mapped.x - screen_pt.x, mapped.y - screen_pt.y);
            
          if (
            dis < minDistance ||
            !foundMovablePoint && isMovable && dis < tolerance
          ) {
            minDistance = dis;
            pointInfo = { id: id, branch: i, sketch: sketch, x: pt[0], y: pt[1]};
          }
        }
      }
    }
  }
  
  return pointInfo;
};

POIController.prototype.getPOIUnderPoint = function (screen_pt, tolerance) {
  var projection = this.manager.createProjection();
  var poi = this.manager.poiLabelsLayer.getDrawnPOI();
      poi = poi.concat(this.manager.poiDotsLayer.getDrawnPOI());

      
  if (!poi.length) return null;

  var test_poi = poi[0];
  var mapped_poi = projection.map_pt(test_poi);
  var closest_distance = tolerance;
  var closest_poi = null;
    
  var test_distance = Distance.hypot(mapped_poi.x-screen_pt.x, mapped_poi.y-screen_pt.y);
  if (test_distance < closest_distance) {
    closest_poi = test_poi;
    closest_distance = test_distance;
  }
      
  for (var i=1; i<poi.length; i++) {
    test_poi = poi[i];
    mapped_poi = projection.map_pt(test_poi);
    
    test_distance = Distance.hypot(mapped_poi.x-screen_pt.x, mapped_poi.y-screen_pt.y);
    if (test_distance < closest_distance) {
      closest_distance = test_distance;
      closest_poi = test_poi;
    }
  }
  
  return closest_poi;
};

// because a POI can be in both the poiLabelsLayer and in
// the poiDotsLayer, it's possible that this function returns
// an array with duplicate elements. But, opened points will
// be returned at the start. Could possibly clean this up,
// but not too important because this really has only 1 purpose.
// That purpose is to allow us to open all POI at the exact same
// location as another one. The functions that use this don't care
// if a specific POI is contained within the returned array more
// than once.
POIController.prototype.getAllPOIAtSameLocation = function (pt) {
  if (!pt) return [];
  
  var same_poi = [];
  var openedPOI = this.manager.poiLabelsLayer.getDrawnPOI();
  var unopenedPOI = this.manager.poiDotsLayer.getDrawnPOI();
  var all_poi = openedPOI.concat(unopenedPOI);

  if (!all_poi.length) return [];

  for (var i=0; i<all_poi.length; i++) {
    var poi = all_poi[i];
    
    // doesn't handle the case where x or y is NaN, but in that
    // case I don't think we'd be able to assume the POI are at
    // the same location. NaN means hole and there's no guarantee
    // that the hole is in the same spot. At this point, we don't
    // have information about if this is a discontinuity or not and
    // if it's a discontinuity, we definitely don't know where it is.
    if (poi.x === pt.x && poi.y === pt.y) {
      same_poi.push(poi);
    }
  }
  
  return same_poi;
};

POIController.prototype.togglePOIUnderPoint = function (screen_pt, tolerance) {
  var poiUnderMouse = this.getPOIUnderPoint(screen_pt, tolerance);
  var allPOIUnderMouse = this.getAllPOIAtSameLocation(poiUnderMouse);

  if (allPOIUnderMouse.length) {
        
    // want to set all poi under mouse to open or all to closed
    var isOpen = allPOIUnderMouse[0].isOpen();
        
    for (var i=0; i<allPOIUnderMouse.length; i++) {
      if (isOpen) {
        allPOIUnderMouse[i].close();
            
        // hide hovered poi
        this.manager.poiLabelsLayer.hoveredPOI = null;
      } else {
        allPOIUnderMouse[i].open();
      }
    }

    this.manager.redrawPOILayer();
    return true;
  } else {
    return false;
  }
};

// TODO - cleanup
// returns an object containing the id, sketch, and the branch
POIController.prototype.getBranchInfoUnderPoint = function (screen_pt, tolerance) {

  var graphInfo = null;
  var minDis = tolerance;
  var projection = this.manager.createProjection();
  var pt = projection.reverse_map_pt(screen_pt);
  
  for (var id in this.manager.graphSketches) {
    var sketch = this.manager.graphSketches[id];
    if(!sketch || !sketch.visible) continue;

    var branches = sketch.branches;
    if (!branches || !branches.length) continue;
    
    for (var i=0; i<branches.length; i++) {
      var distance = POIController.calculateDistanceFromBranch(branches[i], pt, projection);
      if (distance < minDis) {
        minDis = distance;
        graphInfo = { id: id, branch: i, sketch: sketch };
      }
    }
  }

  return graphInfo;
};

POIController.calculateDistanceFromBranch = function(branch, pt, projection) {

  var tmp_pt = POIController.getBranchesClosestPoint(branch, pt, projection);
  if(!tmp_pt || isNaN(tmp_pt.x) || isNaN(tmp_pt.y)) return Infinity;

  var xscale = projection.screen.width/(projection.viewport.xmax - projection.viewport.xmin);
  var yscale = projection.screen.height/(projection.viewport.ymax - projection.viewport.ymin);
  return Distance.hypot((pt.x - tmp_pt.x)*xscale, (pt.y - tmp_pt.y)*yscale);
};

POIController.getBranchesClosestPoint = function(branch, pt, projection) {

  // tables lack this, so we shouldn't don't try to see how close we are
  if (!branch || !branch.compiled || !branch.compiled.fn) return;
    
  var xscale = projection.screen.width/(projection.viewport.xmax - projection.viewport.xmin);
  var yscale = projection.screen.height/(projection.viewport.ymax - projection.viewport.ymin);
  
  var x = pt.x;
  var y = pt.y;
  
  switch(branch.graphMode) {
    case GRAPHMODE.Y:
    break;

    case GRAPHMODE.X:
    var tmp_swap = x;
    x = y;
    y = tmp_swap;
    tmp_swap = xscale;
    xscale = yscale;
    yscale = tmp_swap;
    break;

    default:
    return null;
  }
 
  var fn = branch.compiled.fn;
  var x0 = x;
  var x1 = x0 - 3 / xscale;
  var x2 = x0 + 3 / xscale;

  var y0 = y;

  var y1 = fn(x1);
  var y2 = fn(x2);
  var x_best;
  var p;

  if (isNaN(y1) || isNaN(y2)) {
    x_best = x0;
  } else {
    p = Distance.closestPointOnSegment(x, y, x1, y1, x2, y2);
    x_best = p[0];
  }

  var y_best = POIController.fillHole(fn, x_best, xscale, yscale, x0, y0);

  var smooth_start = 10;
  var smooth_end = 20;

  // this sequence of code creates a smooth transition between the guessed x and the mouse x
  var dis = Distance.hypot((x_best - x0)*xscale, (y_best - y0)*yscale);

  if (dis > smooth_start) {
    dis -= smooth_start;
    var perc = Math.min(1, dis/(smooth_end - smooth_start));
    x_best = (x0*perc + x_best*(1 - perc));
  }
  x_best = Rounding.shortestDecimalBetween(x_best - 1/(2*xscale), x_best + 1/(2*xscale));

  y_best = POIController.fillHole(fn, x_best, xscale, yscale, x0, y0);
  
  switch(branch.graphMode) {
    case GRAPHMODE.Y:
    return { x: x_best, y: y_best };
    
    case GRAPHMODE.X:
    return { y: x_best, x: y_best };
  }
};

POIController.prototype.startMovingPoint = function (branchInfo) {
  var move_occured = false;
  var pt = {
    x: branchInfo.x,
    y: branchInfo.y
  };
  var id = branchInfo.id;
  
  this.manager.movablePointsLayer.pressedSketchId = branchInfo.sketch.id;
  this.manager.redrawMovablePointsLayer();
  
  $(document).on('tapmove.movepoint', function (evt) {
    move_occured = true;
    
    var projection = this.manager.createProjection();
    var screen_pt = this.getMouseRelativeToGrapher(evt);
    
    // we are going to search within the square pixel around our mouse to
    // find the shortest decimal for x and for y. We get the topLeft and
    // bottomRight (in viewport units, not pixels) of that square pixel here.
    var tl = projection.reverse_map_pt({
      x: screen_pt.x - 0.5,
      y: screen_pt.y - 0.5
    });

    var br = projection.reverse_map_pt({
      x: screen_pt.x + 0.5,
      y: screen_pt.y + 0.5
    });
    
    this.triggerMovePoint(id, [
      Rounding.shortestDecimalBetween(tl.x, br.x),
      Rounding.shortestDecimalBetween(tl.y, br.y)
    ]);
  }.bind(this));
  
  $(document).on('tapend.movepoint tapcancel.movepoint', function (evt) {
    $(document).off('.movepoint');
    
    this.manager.movablePointsLayer.pressedSketchId = null;
    this.manager.redrawMovablePointsLayer();
    
    this.triggerStopMovingPoint(id);
    
    // if this was just a tap, then open a label for the point
    if (!move_occured) {
      var projection = this.manager.createProjection();
      var tolerance = this.getToleranceByDevice(evt.device);
      
      // figure out the exact location of the point on the screen
      var screen_pt = projection.map_pt({x: pt.x, y: pt.y});
      
      var sketch = this.manager.getGraphSketch(id);

      // save how many poi are open for this id
      var oldPOICount = sketch.openPOI.length;
      // toggle the poi
      this.togglePOIUnderPoint(screen_pt, tolerance);
      // check how many poi are open for this particular id now
      var newPOICount = sketch.openPOI.length;

      // notify that the point was clicked. If it was deselected, send null.
      if (newPOICount > oldPOICount) this.triggerPointSelected(id);
    }
  }.bind(this));
};

// TODO - duplicating some code here
POIController.prototype.startTracingBranch = function (branchInfo, screen_pt) {
  this.last_screen_pt = screen_pt;
  var projection = this.manager.createProjection();
  var pt = projection.reverse_map_pt(screen_pt);

  var sketch = branchInfo.sketch;
  var branch = sketch.branches[branchInfo.branch];
  var tracePt = POIController.getBranchesClosestPoint(branch, pt, projection);

  this.manager.traceLayer.traceInfo = {pt: tracePt, branchInfo: branchInfo};
  this.manager.redrawTraceLayer();

  $(document).on('tapmove.tracing', this.handleTraceUpdate.bind(this));
  $(document).on('tapend.tracing tapcancel.tracing', this.stopTracingBranch.bind(this));
};

POIController.prototype.stopTracingBranch = function (evt) {

  // if we're over an unopened hovered poi, open it
  var hoveredPOI = this.manager.poiLabelsLayer.hoveredPOI;
  if (hoveredPOI && !hoveredPOI.isOpen()) {
    hoveredPOI.open();
    this.manager.redrawPOILayer();
  }

  this.manager.traceLayer.traceInfo = null;
  this.manager.redrawTraceLayer();
  
  $(document).off('.tracing');
};

POIController.prototype.handleTraceUpdate = function(evt) {
  if(!this.manager.traceLayer.traceInfo) return;
  var projection = this.manager.createProjection();
  var screen_pt;
  if(evt){
    screen_pt = this.getMouseRelativeToGrapher(evt);
    this.last_screen_pt = screen_pt;
  } else {
    screen_pt = this.last_screen_pt;
  }
  var pt = projection.reverse_map_pt(screen_pt);
  var minDis = Infinity;
  var bestBranch = -1;
  
  var traceInfo = this.manager.traceLayer.traceInfo;
  var traceSketch = this.manager.graphSketches[traceInfo.branchInfo.sketch.id];
  traceInfo.branchInfo.sketch = traceSketch;
  var branches = traceInfo.branchInfo.sketch.branches;
  //Look up new branch each time

  // Loop through branches to find which we're closest too
  for(var i=0; i<branches.length; i++) {
    var branchDis = POIController.calculateDistanceFromBranch(branches[i], pt, projection);
    if(branchDis < minDis) {
      bestBranch = i;
      minDis = branchDis;
    }
  }

  var branch = branches[bestBranch];
  var tracePt = branch ? POIController.getBranchesClosestPoint(branch, pt, projection) : null;
  
  this.manager.traceLayer.traceInfo.pt = tracePt;
  this.manager.redrawTraceLayer();
};

// TODO - might not belong here.. might be more appropriate in the math/poi.js
// TODO - probably better to be smarter about 'tiny offset'. should use a
//        dynmaic offset rather than always using 0.00000000001
POIController.fillHole = function(fn, x_val, xscale, yscale, x, y) {
  var y_val = fn(x_val);
  if (isFinite(y_val)) return y_val;
  
  var x_left =  x_val - 0.00000000001;
  var x_right = x_val + 0.00000000001;
  var y_left =  fn(x_left);
  var y_right = fn(x_right);

  if (isNaN(y_left) && isNaN(y_right)) return NaN;
  if (isNaN(y_left)) return y_right;
  if (isNaN(y_right)) return y_left;
  
  var dx_left = (x - x_left) * xscale;
  var dx_right = (x - x_right) * xscale;
  var dy_left = (y - y_left) * yscale;
  var dy_right = (y - y_right) * yscale;
  
  if (Distance.hypot(dx_left, dy_left) < Distance.hypot(dx_right, dy_right)) {
    return y_left;
  } else {
    return y_right;
  }
  
};

return POIController;
});

define('loadcss!vendor_css/tipsy/tipsy', function(){});
// tipsy, facebook style tooltips for jquery
// version 1.0.0a
// (c) 2008-2010 jason frame [jason@onehackoranother.com]
// released under the MIT license
//
// Modified by Mike Haverstock to work with touchtracking.js to decide when
// to show tooltips and when not to. Problem is that this library doesn't 
// allow you to manually hide/show tooltips that are set with the 'live'
// option. That's because the 'live' option postpones tipsy instantiation for
// a specific node until an event bubbles up for that node. So, when you call
// .tipsy('show') for a live node, it sees that there is no .data('tipsy') set
// for the node and ignores the request. The solution is to not listen for
// mouseenter and mouseleave. Instead of those, you listen for 'tipsyshow' and
// 'tipsyhide'. Then, you manually hide/show tooltips by triggering 'tipsyshow'
// and 'tipsyhide' on that node. Then, the live code works perfectly fine. Now
// the only way to trigger tipsy is by manually triggering those events.
define('tipsy',['require','loadcss!vendor_css/tipsy/tipsy','jquery'],function(require) {
  require('loadcss!vendor_css/tipsy/tipsy');
  var $ = require('jquery');
  
  var openSticky = null;
  var ignoreStickyOpen = false;
    
  $(document).on('tap', '.tipsy-sticky', function (evnt) {
    
    // don't do anything. let the code that hides stickies close it.
    if (ignoreStickyOpen) {
      ignoreStickyOpen = false;
      return;
    }
      
    var opener = evnt.currentTarget;
    var $target = $(opener);
      
    // if the target doesn't have a tooltip, check if a child does
    if (!$target.attr('tooltip')) {
      $target = $target.find('[tooltip]').filter(':not([tooltip=""])');
    }

    // there should be exactly 1 tooltip to show
    if ($target.length !== 1) return;

    // ensure that the target is not display:none and no parent is display:none
    if ($target.css('display') === 'none') return;
    if ($target.parents().filter(function(){return $(this).css('display') === 'none'}).length) return;
      
    var options = $.extend({}, $.fn.tipsy.defaults);
    options.title = 'tooltip';
    options.gravity = 'nw';
      
    openSticky = new Tipsy($target[0], options);
    openSticky.show();
    openSticky.opener = opener;
  });

  $(document).on('tapstart keydown', function (evnt) {
    if (openSticky) {
      openSticky.hide();
        
      var opener = openSticky.opener;
      if (evnt.type === 'tapstart' && $(evnt.target).closest(opener).length ) {
        $(document).one('tapend', function (evnt2) {
          if ($(evnt2.target).closest(opener).length) {
            ignoreStickyOpen = true;
          }
        });
      }

      openSticky=null;
    }
  });
    
  function maybeCall(thing, ctx) {
    return (typeof thing == 'function') ? (thing.call(ctx)) : thing;
  }
    
  function Tipsy(element, options) {
    this.$element = $(element);
    this.options = options;
    this.fixTitle();
  }

  Tipsy.prototype = {
    show: function() {
      var title = this.getTitle();
      if (title && !isTipsyDisabled()) {
        var $tip = this.tip();
               
        $tip.find('.tipsy-inner')[this.options.html ? 'html' : 'text'](title);
        $tip[0].className = 'tipsy'; // reset classname in case of dynamic gravity
        $tip.remove().css({top: 0, left: 0, visibility: 'hidden', display: 'block'}).prependTo(document.body);
                
        var pos = $.extend({}, this.$element.offset(), {
          width: this.$element[0].offsetWidth,
          height: this.$element[0].offsetHeight
        });
                
        var tp, actualWidth = $tip[0].offsetWidth,
            actualHeight = $tip[0].offsetHeight,
            gravity = maybeCall(this.options.gravity, this.$element[0]);

        switch (gravity.charAt(0)) {
          case 'n':
            tp = {top: pos.top + pos.height + this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
            break;
          case 's':
            tp = {top: pos.top - actualHeight - this.options.offset, left: pos.left + pos.width / 2 - actualWidth / 2};
            break;
          case 'e':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left - actualWidth - this.options.offset};
            break;
          case 'w':
            tp = {top: pos.top + pos.height / 2 - actualHeight / 2, left: pos.left + pos.width + this.options.offset};
            break;
        }
                
        if (gravity.length == 2) {
          if (gravity.charAt(1) == 'w') {
            tp.left = pos.left + pos.width / 2 - 15;
          } else {
            tp.left = pos.left + pos.width / 2 - actualWidth + 15;
          }
        }
                
        $tip.css(tp).addClass('tipsy-' + gravity);
        $tip.find('.tipsy-arrow')[0].className = 'tipsy-arrow tipsy-arrow-' + gravity.charAt(0);
        if (this.options.className) {
          $tip.addClass(maybeCall(this.options.className, this.$element[0]));
        }
                
        if (this.options.fadeIn) {
          $tip.stop().css({opacity: 0, display: 'block', visibility: 'visible'})
                     .animate({opacity: this.options.opacity}, this.options.fadeIn);
        } else {
          $tip.css({visibility: 'visible', opacity: this.options.opacity});
        }
                
        if (this.options.sticky) {
          $tip.addClass('sticky');
        }
                
        var self = this;
        var validateLoop = function () {
          self.validate();
          self.validateTimeout = setTimeout(validateLoop, 100);
        };
        validateLoop();
      }
    },
        
    hide: function() {
      clearTimeout(this.validateTimeout);
           
      if (this.options.fadeOut) {
        this.tip().stop().fadeOut(this.options.fadeOut, function() { $(this).remove(); });
      } else {
        this.tip().remove();
      }
    },
        
    fixTitle: function() {
      var $e = this.$element;
      if ($e.attr('title') || typeof($e.attr('original-title')) != 'string') {
        $e.attr('original-title', $e.attr('title') || '').removeAttr('title');
      }
    },
        
    getTitle: function() {
      var title, $e = this.$element, o = this.options;
      this.fixTitle();
      o = this.options;
      if (typeof o.title == 'string') {
        title = $e.attr(o.title == 'title' ? 'original-title' : o.title);
      } else if (typeof o.title == 'function') {
        title = o.title.call($e[0]);
      }

      if (title) title = ('' + title).replace(/(^\s*|\s*$)/, "");
      return title || o.fallback;
    },
        
    tip: function() {
      if (!this.$tip) {
        this.$tip = $('<div class="tipsy"><div class="tipsy-arrow"></div><div class="tipsy-inner"></div></div>');
      }
      return this.$tip;
    },
        
    validate: function() {
      var hasTitle = !!this.getTitle();
      var inDom = false;

      if (hasTitle) {
        try {
          var node = this.$element[0];
               
          while (node) {
            if (node === document) {
              inDom = true;
              break;
            } else {
              node = node.parentNode;
            }
          }
        } catch (e) {}
      }
                        
      if (!inDom) {
        this.hide();
      }
    }
  };
    
  $.fn.tipsy = function(options) {
        
    if (options === true) {
      return this.data('tipsy');
    } else if (typeof options == 'string') {
      var tipsy = this.data('tipsy');
      if (tipsy) tipsy[options]();
      return this;
    }
        
    options = $.extend({}, $.fn.tipsy.defaults, options);
       
    options.fadeIn = options.fadeIn || options.fade;
    options.fadeOut = options.fadeOut || options.fade;
        
    function get(ele) {
      var tipsy = $.data(ele, 'tipsy');
      if (!tipsy) {
        tipsy = new Tipsy(ele, $.fn.tipsy.elementOptions(ele, options));
        $.data(ele, 'tipsy', tipsy);
      }
      return tipsy;
    }
        
    function enter(evnt) {
      // the tipsyshow event bubbles up the dom, so we only want to
      // listen to the event if the target is the same as the element
      // that is responding to the event. If this wasn't here then when
      // you move your mouse from a tipsy-enabled parent to a child, the
      // tipsyshow event would be fired from the child, bubble through
      // the parent, and get caught higher up. That would cause the 
      // already opened tooltip to close and fade in again. With this
      // code, we ignore the tipsyshow event because the target is the
      // the child that isn't tipsy-enabled.
      if (evnt.type === 'tipsyshow' && evnt.target !== this) return;

      // this element has a sticky open already            
      if (openSticky === this) return;
           
      var tipsy = get(this);
      tipsy.hoverState = 'in';
              
      if (options.delayIn === 0) {
        tipsy.show();
      } else {
        tipsy.fixTitle();
        setTimeout(function() { if (tipsy.hoverState == 'in') tipsy.show(); }, options.delayIn);
      }
    }
        
    function leave(evnt) {
      // we do this for the same reason we do it for the tipsyshow event.
      // look at the comment a few lines above for more information.
      if (evnt.type === 'tipsyhide' && evnt.target !== this) return;
  
      var tipsy = get(this);

      // if this is a sticky tooltip, don't close it on tapStart. If we
      // closed it now, it would flicker back on when we mouse up and
      // make it permanent. We'd like it to stay on the whole time.
      if (evnt.type === 'tapstart' && tipsy.options.sticky) return;

      tipsy.hoverState = 'out';
      if (options.delayOut === 0) {
        tipsy.hide();
      } else {
        setTimeout(function() { if (tipsy.hoverState == 'out') tipsy.hide(); }, options.delayOut);
      }
    }
        
    if (!options.live) this.each(function() { get(this); });
       
    if (options.trigger != 'manual') {
      var eventIn  = options.trigger == 'hover' ? 'tipsyshow' : 'focus';
      var eventOut = options.trigger == 'hover' ? 'tipsyhide tapstart tapend tapcancel' : 'blur';
            
      if (options.live && options.delegate) {
        this.on(eventIn, options.delegate, enter).on(eventOut, options.delegate, leave);
      } else {
        var binder   = options.live ? 'on' : 'bind';
        this[binder](eventIn, enter)[binder](eventOut, leave);
      }
    }
        
    return this;
  };
    
  $.fn.tipsy.defaults = {
    className: null,
    delayIn: 0,
    delayOut: 0,
    fade: false,
    fadeIn: false,
    fadeOut: false,
    fallback: '',
    gravity: 'n',
    html: false,
    live: true,
    offset: 0,
    opacity: 1,
    title: 'title',
    trigger: 'hover'
  };
    
  // Overwrite this method to provide options on a per-element basis.
  // (remember - do not modify 'options' in place!)
  $.fn.tipsy.elementOptions = function(ele, options) {
    options = $.extend({}, options);
    
    var gravity = $(ele).attr('tipsy-gravity');
    if (gravity) {
      options.gravity = gravity;
    }
      
    var offset = parseInt($(ele).attr('tipsy-offset'), 10);
    if (!isNaN(offset)) {
      options.offset = offset;
    }
      
    return options;
  };
    
  $.fn.tipsy.autoNS = function() {
    return $(this).offset().top > ($(document).scrollTop() + $(window).height() / 2) ? 's' : 'n';
  };
    
  $.fn.tipsy.autoWE = function() {
    return $(this).offset().left > ($(document).scrollLeft() + $(window).width() / 2) ? 'e' : 'w';
  };
    
  /**
   * yields a closure of the supplied parameters, producing a function that takes
   * no arguments and is suitable for use as an autogravity function like so:
   *
   * @param margin (int) - distance from the viewable region edge that an
   *        element should be before setting its tooltip's gravity to be away
   *        from that edge.
   * @param prefer (string, e.g. 'n', 'sw', 'w') - the direction to prefer
   *        if there are no viewable region edges effecting the tooltip's
   *        gravity. It will try to vary from this minimally, for example,
   *        if 'sw' is preferred and an element is near the right viewable 
   *        region edge, but not the top edge, it will set the gravity for
   *        that element's tooltip to be 'se', preserving the southern
   *        component.
  */
  $.fn.tipsy.autoBounds = function(margin, prefer) {
    return function() {
			var dir = {ns: prefer[0], ew: (prefer.length > 1 ? prefer[1] : false)},
          boundTop = $(document).scrollTop() + margin,
          boundLeft = $(document).scrollLeft() + margin,
          $this = $(this);

			if ($this.offset().top < boundTop) dir.ns = 'n';
			if ($this.offset().left < boundLeft) dir.ew = 'w';
			if ($(window).width() + $(document).scrollLeft() - $this.offset().left < margin) dir.ew = 'e';
			if ($(window).height() + $(document).scrollTop() - $this.offset().top < margin) dir.ns = 's';

			return dir.ns + (dir.ew ? dir.ew : '');
		};
	};
    
  // automatically instantiate tipsy for .tipsy-sticky classes
  $(document).tipsy({
    title: 'tooltip',
    wait: 0,
    live: true,
    delegate: '.tipsy-sticky',
    gravity: 'nw',
    sticky: true,
    fade: false
  });

  var disableLocks = 0;
  function isTipsyDisabled () {
    return disableLocks !== 0;
  }

  function removeDisableLock() {
    disableLocks--;
  }
  
  function addDisableLock() {
    disableLocks++;
  }
  
  return {
    isDisabled: isTipsyDisabled,
    removeDisableLock: removeDisableLock,
    addDisableLock: addDisableLock
  };
});

// fixes an issue with ghost clicks. borrowed the idea of using capture phase rather than bubble phase from:
//    https://developers.google.com/mobile/articles/fast_buttons?csw=1#ghost
//
// but the solution there is far from complete. It doesn't deal with focus being placed in textboxes still, and
// it doesn't prevent the ghost events from propagating down and back up through the dom. Mathquill listens for
// the mousedown and mouseup events, so when they were triggered erroneously, we should prevent them from propagating.
//
// the event handlers defined here need to be added before jquery has chance to add it's own listeners. This is
// especially important for the focus and blur events. The fact that touchtracking.js is split into two separate
// events here is unfortunate, but I think it's fine for now. There are talks of refactoring the touchtracking.js
// code anyways.
define('lib/ipad.ghostevents',['require'],function (require) {
  
  var inGhostEventMode = false;
  var startingActiveElement = null;
    
  function stopGhostEvent (evt) {
    if (inGhostEventMode) {
      evt.stopPropagation();
      evt.stopImmediatePropagation();
    }
  }
    
  function stopAndPreventGhostEvent (evt) {
    if (inGhostEventMode) {
      evt.preventDefault();
      evt.stopPropagation();
      evt.stopImmediatePropagation();
    }
  }
  
  // will get overriden by touchtracking.js
  // would be better not do things this way, but we need to split touchtracking.js into
  // a part that jquery depends on and a part that depends on jquery. This little inconvenience is what
  // splices all of touchtracking back together
  var touchTrackingCallbacks = {
    isGhostEvent: function (evt) {
      return false;
    }
  };
  
  // don't send ghost mousedwon events; someone might be listening for them
  document.addEventListener('mousedown', function (evt) {
    startingActiveElement = document.activeElement;
     
    inGhostEventMode = touchTrackingCallbacks.isGhostEvent(evt);
      
    // stop the mousedown event
    stopGhostEvent(evt);
  }, true);
    
  // don't send ghost mouseup events; someone might be listening for them
  document.addEventListener('mouseup', stopGhostEvent, true);
    
  // prevent links from being followed on ghost clicks.
  document.addEventListener('click', function (evt) {
    stopAndPreventGhostEvent(evt);
     
    // put focus where it was before the start of these events. the focusin and focusout
    // events fired from this will be stopped.
    if (inGhostEventMode && document.activeElement !== startingActiveElement) {
      if (document.activeElement) document.activeElement.blur();
      if (startingActiveElement) startingActiveElement.focus();
    }
      
    // anything after this is not a ghost event
    inGhostEventMode = false;
  }, true);

  // we prevent focus events from firing during ghost events
  document.addEventListener('focus', stopAndPreventGhostEvent, true);
  document.addEventListener('blur', stopAndPreventGhostEvent, true);
  
  return touchTrackingCallbacks;
});

/*
 * Touch/Mouse event handling gets complicated when a user has both a touch
 * device attached and a mouse attached. This tracking system helps deal with
 * that situation. We listen for the touch and mouse events on the document
 * and redispatch new, normalized events that work for many different devices
 * It's important to note that evt.stopPropagation() cannot be called on any
 * events that this is listening for.
 *
 * It normalizes 'touchStart' and 'mouseDown' to the 'tapstart' event.
 * It normalizes 'touchMove' and 'mouseMove' to the 'tapmove' event.
 * It normalizes 'touchEnd' and 'mouseUp' to the 'tapend' event.
 * It sends out a 'tap' event after a single touchStart and touchEnd.
 * It sends out a 'longhold' event if 500ms after a single 'tapstart'
 *    there hasn't been another event and the 'tapstart' is the only touch.
 *    Events have a 'wasLongheld' property that lets you know if a longhold
 *    has happened.
 *
 * TODO - dispatch 'doubletap' event after 'tap' and 'tap' near same location.
 *
 * One thing that it does is enforce that only one device, either touch or
 * or mouse, be used at a time. TOUCH_MODE starts on 'touchStart' and ends when
 * when all touches are lifted. MOUSE_MODE starts on 'mouseDown' and ends on
 * 'mouseUp'. When in TOUCH_MODE, it ignores all MOUSE_MODE events. When in
 * MOUSE_MODE, it ignores all TOUCH_MODE events.
 *
 * There is still one other slight complication. The ipad issues a 'mouseDown'
 * event after the 'touchEnd' event. That means following the logic above, we'd
 * leave TOUCH_MODE on touchEnd, and we'd get a mouseDown event. That'd put us
 * in MOUSE_MODE. We'd process the 'mouseDown' as if it were from a mouse, and
 * we'd happily process the 'mouseUp' event as well. In order to combat that,
 * on each 'mouseDown' event we check if we've recently been in TOUCH_MODE. We
 * enforce that half a second has passed since a person was in TOUCH_MODE
 * before they can enter MOUSE_MODE. If we decide that that's not ideal, we
 * can check if the mouseDown is near the 'touchStart' or 'touchEnd' events, but
 * that sounds like an unnecessary complication.
 *
 * One other interesting thing is that 'mouseMove' can be dispatched even when
 * the mouse button isn't pressed. For that reason, this doesn't require that
 * you be in MOUSE_MODE to listen for 'mouseMove' events.
 */
define('lib/touchtracking',['require','jquery','tipsy','lib/ipad.ghostevents'],function(require){
  
  var $ = require('jquery');
  require('tipsy');
  var GhostEvents = require('lib/ipad.ghostevents');
  
  GhostEvents.isGhostEvent = function (evt) {
    // not a ghost event if it's from a mouse
    if (mode !== TOUCH_MODE && !hasRecentlyEndedTouchMode()) {
      return false;
    }
      
    // it's a ghost event if the target of the event and our lastTarget aren't ancestors. What has happened is 
    // the dom moved around while the legacy events were being generated. We'll be ignoring the upcoming
    // legacy events.
    if (evt.target === lastTarget) return false;
    if (evt.target && $.contains(evt.target, lastTarget)) return false;
    if (lastTarget && $.contains(lastTarget, evt.target)) return false;
    
    return true;
  };
  
  var NO_MODE = 0;    // nothing pressed
  var TOUCH_MODE = 1; // finger is on screen
  var MOUSE_MODE = 2; // mouse is held down

  var mode = NO_MODE;
  var modeEvents = {};
  var modeTargets = [];
  var endTouchModeTime = 0;
  var endTouchModeTimeout = null;
  var lastTarget = null;
  
  var longholdTimeout = null;

  // returns an array of node, parent, grandparent, etc
  var getAncestors = function (node) {
    var nodes = [];
    while (node) {
      nodes.push(node);
      node = $(node).parent()[0];
    }

    return nodes;
  };

  var beginMode = function (evnt) {
    lastTarget = null;
    
    if (evnt.type === 'mousedown') {
      mode = MOUSE_MODE;
      modeTargets = getAncestors(evnt.target);
    } else {
      mode = TOUCH_MODE;
      modeTargets = getAncestors(evnt.originalEvent.touches[0].target);
    }

    // make the elements under the mouse look pressed
    $(modeTargets).addClass('depressed');
    
    // save original scroll positions for elements we've moused on
    $(modeTargets).each(function(){
      var elm = $(this);
      
      elm.data({
        originalScrollTop: elm.scrollTop(),
        originalScrollLeft: elm.scrollLeft()
      });
    });
        
    modeEvents = {};
  };
  
  var endMode = function (evnt) {
    lastTarget = null;
    
    // nothing is pressed anymore
    $('.depressed').removeClass('depressed');
    
    // check if any of the elements we originally moused on have scrolled.
    $(modeTargets).each(function(){
      var elm = $(this);
      var verticalOffset = elm.data('originalScrollTop') - elm.scrollTop();
      var horizontalOffset = elm.data('originalScrollLeft') - elm.scrollLeft();
      // save original scroll positions
      if (verticalOffset || horizontalOffset) {
        modeEvents.scroll = true;
      }
    });
    
    if (modeEvents.tapstart===1 && modeEvents.tapend===1 && !modeEvents.tapcancel && !modeEvents.scroll) {

      // get the x and y position of event.
      var x = evnt.device === 'mouse' ? evnt.pageX : evnt.originalEvent.changedTouches[0].pageX;
      var y = evnt.device === 'mouse' ? evnt.pageY : evnt.originalEvent.changedTouches[0].pageY;
      
      // run through the original modeTargets to see if the touchend is
      // with the bounds.
      var tap_escaped_boundary = false;
      for (var i=0; i<modeTargets.length && !tap_escaped_boundary; i++) {
        var target = $(modeTargets[i]);
        var offset = target.offset();
        
        // don't let tap events escape from a tapboundary.
        //
        // we allow you to mousedown on one element and mouseup on another. We
        // dispatch the tap event on the common ancestor. This allows you to by
        // imprecious when clicking. Sometimes that isn't ideal however. Say
        // you mouse down on a slider thumb and mouse up on the expression. By
        // default, we'd dispatch a tap event on the expression. That'd cause
        // the expression to be selected and focused. That's not what we want.
        // So, we define a tapboundary on the slider element. That will not
        // allow a tap event to start within the slider and end somewhere
        // outside of it. It must terminate within the boundary, otherwise we
        // won't dispatch a tap event at all.
        if (target.attr('tapboundary') === 'true') {
          tap_escaped_boundary = true;
        }
      
        if (offset) {
          
          // check if within top and left sides
          if (x < offset.left || y < offset.top) continue;
  
          // check if within right side
          if (x > offset.left + target.outerWidth()) continue;
          
          // check if within bottom side
          if (y > offset.top + target.outerHeight()) continue;
          
        }
        
        lastTarget = target[0];
        dispatchEvent('tap', evnt, lastTarget);
        break;
      }
    }

    // start the timer after we process the tap event.
    // this fires an event 1000ms in the future. If anything had caused the ipad
    // legacy events to get delayed, that'll also cause this function call to
    // get delayed. For us to switch back to MOUSE_MODE, this event must have
    // fired and it must not have been fired within 500ms of us trying to
    // switch to MOUSE_MODE
    if (mode === TOUCH_MODE) {
      endTouchModeTimeout = setTimeout(function(){
        clearTimeout(endTouchModeTimeout);
        endTouchModeTime = new Date().getTime();
      }, 1000);
    }
     
    modeTargets = [];
    mode = NO_MODE;
  };
    
  var hasRecentlyEndedTouchMode = function () {
    return endTouchModeTimeout || new Date().getTime() - endTouchModeTime < 500;
  };
  
  // it's important to clone touches because some devices keep updating the
  // same reference to a touch.
  var clone = function (touches) {
    var cloned = [];
    for (var i=0; i<touches.length; i++) {
      
      var touch = touches[i];
      cloned.push({
        
        identifier: touch.identifier,
        x: touch.pageX,
        y: touch.pageY,
        
        screenX: touch.screenX,
        screenY: touch.screenY,
        pageX: touch.pageX,
        pageY: touch.pageY,
        clientX: touch.clientX,
        clientY: touch.clientY
      });
    }
    return cloned;
  };
  
  var dispatchEvent = function (type, evnt, differentTarget) {
    
    // count an event type. used to figure out if we should send out
    // a tap and doubletap event.
    if (modeEvents[type.toLowerCase()] === undefined) {
      modeEvents[type.toLowerCase()] = 1;
    } else {
      modeEvents[type.toLowerCase()]++;
    }
        
    var newEvnt = $.event.fix(evnt.originalEvent);
        newEvnt.type = type;
        newEvnt.device = mode === TOUCH_MODE ? 'touch' : 'mouse';
        newEvnt.touches = clone(evnt.originalEvent.touches);
        newEvnt.changedTouches = clone(evnt.originalEvent.changedTouches);
        newEvnt.target = differentTarget ? differentTarget : evnt.target;
        
        var wasLongheld = modeEvents.longhold > 0;
        newEvnt.wasLongheld = function () { return wasLongheld };
        
    // send out a 'longhold' 500ms after a 'tapstart' as long as nothing else happens between
    // now and then.
    clearTimeout(longholdTimeout);
    if (newEvnt.type === 'tapstart' && newEvnt.touches.length === 1) {
      longholdTimeout = setTimeout(function () {
        dispatchEvent('longhold', evnt, differentTarget);
      }, 500);
    }
    
    $(newEvnt.target).trigger(newEvnt);
  };
  
    // TODO - Remember nodes given .hovered last time instead of querying. Only
  //        problem I can see here is that it's possible for a person to
  //        clone an object that has the .hover and add it to
  //        the dom. Then it'll never lose the .hover class. If we find
  //        any more performance problems with this, then maybe we can worry
  //        about it, but I don't think we need that optimization.
  // Already optimized to leave .hover on elements that still are hovered. Saw
  // a preformance problem with sliders before optimization and problem went
  // away after optimization.
  var setHoveredNode = function (node) {
    
    var hoverableNodes = modeTargets; // gets a list of nodes that were under the mouse when it was pressed
    var checkIfNodeIsHoverable = !!modeTargets.length; // simple mouse move with no mouse down
    var hoveredBefore = $.makeArray($('.hovered'));
    var hoveredNow = [];
    var lostHover = [];
    var gainedHover = [];
    
    // loop through all that are currently hovered
    while (node && node !== document) {

      // only add to hovered list if it can be hovered.
      if (!checkIfNodeIsHoverable || hoverableNodes.indexOf(node) !== -1) {
        
        // hovered now, but wasn't before
        if (hoveredBefore.indexOf(node) === -1) {
          gainedHover.push(node);
        }
        
        hoveredNow.push(node);
      }

      node = $(node).parent()[0];
    }
    
    // find the ones that used to be hovered but aren't any more
    for (var i=0; i<hoveredBefore.length; i++) {
      node = hoveredBefore[i];
      if (hoveredNow.indexOf(node) === -1) {
        lostHover.push(node);
      }
    }

    $(lostHover).removeClass('hovered').trigger('tipsyhide');
    $(gainedHover).addClass('hovered').trigger('tipsyshow');
  };
  
  $(document).on('touchstart', function (evnt) {
    if (mode === MOUSE_MODE) return;
    
    // setup TOUCH_MODE
    if (mode === NO_MODE) {
      beginMode(evnt);
    }

    // nothing can be hovered now
    setHoveredNode(null);

    dispatchEvent('tapstart', evnt);
  });
   
   
  $(document).on('touchmove', function (evnt) {
    if (mode !== TOUCH_MODE) return;
    dispatchEvent('tapmove', evnt);
  });
   
   
  $(document).on('touchcancel', function (evnt) {
    if (mode !== TOUCH_MODE) return;
        
    dispatchEvent('tapcancel', evnt);
    
    // switch back to no mode if all touches are gone
    if (evnt.originalEvent.touches.length===0) {
      endMode(evnt);
    }
    
  });
   
   
  $(document).on('touchend', function (evnt) {
    if (mode !== TOUCH_MODE) return;

    dispatchEvent('tapend', evnt);

    // switch back to no mode if all touches are gone
    if (evnt.originalEvent.touches.length===0) {
      endMode(evnt);
    }
  });
   

   
  $(document).on('mousedown', function (evnt) {
    if (evnt.button === 1 || evnt.button === 2) return;

    // Take evasive action for legacy clicks--that is, click events that are
    // synthesized by touch browsers after a sequence of touches has ended.
    // The problem we're trying to solve here is that if you move a DOM
    // element in response to a touch event, then the legacy mouse events will
    // be fired on whatever element happens to now be under where the touch
    // event occurred.
    //
    // For example, the "functions" menu is hidden when one of its buttons is
    // touched, and the legacy click event is subsequently fired on the graph
    // paper. This takes focus from the expression that was being edited.
    //
    // The solution is to preventDefault() on the legacy events if we are in
    // touch mode. However, this prevents inputs, textareas, and selects from
    // being focused properly in mobile webkit browsers. We compromise by
    // firing preventDefault() only if the target is not an input, textarea,
    // or select.
    if (mode === TOUCH_MODE || hasRecentlyEndedTouchMode()) {
      if (!$(evnt.target).is('input, textarea, select')) {
        evnt.preventDefault();
      }
      return;
    }

    // setup MOUSE_MODE
    beginMode(evnt);
        
    // add in missing touch api information
    evnt.originalEvent.touches = [evnt];
    evnt.originalEvent.changedTouches = [evnt];
    
    dispatchEvent('tapstart', evnt);
  });

  // Stop mousedown event from propagating for any element with an ancestor with
  // class .do-not-blur (and no ancestor with .do-blur)
  $(document).ready(function() {
    $(document).on("mousedown", function(e) {
      var doNotBlur = !!$(e.target).closest('.do-not-blur').length,
        doBlur    = !!$(e.target).closest('.do-blur').length;
      if (doNotBlur && !doBlur) {
        e.preventDefault();
      }

      // we use preventDefault() in places and that will cause text selection
      // to be preserved when it shouldn't be. On mouse down, if the only
      // thing with selection is something that has the .text-selectable class
      // then we can safely remove selection.
      var selection = window.getSelection();
      if (selection.rangeCount === 1) {
        var range = selection.getRangeAt(0);
        if (range.startContainer === range.endContainer && $(range.startContainer).closest('.text-selectable').length) {
          selection.removeAllRanges();
        }
      }
     
    });
	});
   
  // If the mouse isn't pressed, then the mousemove that moves us off the
  // the screen isn't reported. That'll leave the last hovered element hoverd.
  // this checks if we are in NO_MODE and have a mouseleave event.
  $(document).on('mouseleave', function (evnt) {
    // we can move the mouse while not being in mouseMode
    if (mode !== NO_MODE) return;
    
    // check if a significant amount of time has passed since
    // switching from TOUCH_MODE to NO_MODE
    if (hasRecentlyEndedTouchMode()) return;

    // nothing is hovered
    setHoveredNode(null);
  });
   
  $(document).on('mousemove', function (evnt) {
    if (evnt.button === 1 || evnt.button === 2) return;
    

    // we can move the mouse while not being in mouseMode
    if (mode === TOUCH_MODE) return;
   
    // check if a significant amount of time has passed since
    // switching from TOUCH_MODE to MOUSE_MODE
    if (hasRecentlyEndedTouchMode()) return;
    
    setHoveredNode(evnt.target);
    
    // add in missing touch api information
    evnt.originalEvent.touches = [evnt]; // TODO - not perfect because it could be a non-touch
    evnt.originalEvent.changedTouches = [evnt];
    
    dispatchEvent('tapmove', evnt);
  });
   
   
  $(document).on('mouseup', function (evnt) {
    if (evnt.button === 1 || evnt.button === 2) return;

    if (mode !== MOUSE_MODE) return;
    
    // add in missing touch api information
    evnt.originalEvent.touches = [];
    evnt.originalEvent.changedTouches = [evnt];
    
    dispatchEvent('tapend', evnt);
    
    endMode(evnt);
  });
  
  /*For debugging
   
  $(document).on('tapstart tapend tapmove tap tapcancel', function (evt){
    console.log(evt.type, evt.originalEvent.changedTouches);
  });*/

  //Utilities to allow other modules to query this state
  return {
    isTapActive: function(){
      return (mode !== NO_MODE);
    }
  };
  
});

/*
 * A handled event is one that should act like propagation was
 *  stopped, yet it's allowed to still bubble because other
 *  code might expect to see an event higher up on the dom.
 *
 * So the solution is to call 'handle()' when you don't
 *  want the event to be handled by any other other listeners.
 *  The listeners will still get called, but they can check
 *  that evt.wasHandled() == false to make sure that it
 *  should handle the event.
 *
 * You can namespace your event handlings so that two
 *  completely different parts of code can both use this
 *  utility. When you call 'wasHandled()', just pass in a
 *  string, and it will check that namespace. And when you
 *  call 'handle()', pass in a namespace string.
 *
 * For convienience, you can set the handleEvent attribute
 *  for any dom element and the 'wasHandled()' method will
 *  check if the event has passed through any dom element
 *  that should have handled the event.
 */
 
/* global jQuery */
;(function($) {
  var GLOBAL_NAMESPACE = "_*_";
  
  $.Event.prototype.wasHandled = function (namespace) {

    namespace = namespace ? namespace : GLOBAL_NAMESPACE;
    var oe = this.originalEvent;
    var hb = oe && oe.handledBy;
    
    //check if it was explicitly handled in code
    if (hb && hb[namespace]) return true;
    
    // namespace wasn't handled
    if (namespace !== GLOBAL_NAMESPACE) return false;

    //Now, check if it was implicitly handled through
    //the dom attribute 'handleEvent'
    var dom = $(this.target).closest('[handleEvent]');
    //TEMPORARY: just return true instead of deeply parsing
    if (dom.length && dom[0] !== this.currentTarget) {
      return dom.attr('handleEvent') !== "false";
    }

    //must not have been handled
    return false;
  };

  $.Event.prototype.handle = function (namespace) {
    namespace = namespace ? namespace : GLOBAL_NAMESPACE;
    var oe = this.originalEvent;
    if (!oe) return; //can't handle this properly

    var hb = oe.handledBy;
    if (!hb) hb = oe.handledBy = {};

    hb[namespace] = true;
  };

})(jQuery);


define("lib/jquery.handleevent", function(){});

/*! Copyright (c) 2010 Brandon Aaron (http://brandonaaron.net)
 * Licensed under the MIT License (LICENSE.txt).
 *
 * Thanks to: http://adomas.org/javascript-mouse-wheel/ for some pointers.
 * Thanks to: Mathias Bank(http://www.mathias-bank.de) for a scope bug fix.
 * Thanks to: Seamus Leahy for adding deltaX and deltaY
 *
 * Version: 3.0.4
 *
 * Requires: 1.2.2+
 */


// need chrome visibility to fix scroll variances
(function($) {
    var userAgent = navigator.userAgent.toLowerCase();
    $.browser.chrome = /chrome/.test(userAgent);
})(jQuery);


(function($) {

var types = ['DOMMouseScroll', 'mousewheel'];

$.event.special.mousewheel = {
    setup: function() {
        if ( this.addEventListener ) {
            for ( var i=types.length; i; ) {
                this.addEventListener( types[--i], handler, false );
            }
        } else {
            this.onmousewheel = handler;
        }
    },

    teardown: function() {
        if ( this.removeEventListener ) {
            for ( var i=types.length; i; ) {
                this.removeEventListener( types[--i], handler, false );
            }
        } else {
            this.onmousewheel = null;
        }
    }
};

$.fn.extend({
    mousewheel: function(fn) {
        return fn ? this.bind("mousewheel", fn) : this.trigger("mousewheel");
    },

    unmousewheel: function(fn) {
        return this.unbind("mousewheel", fn);
    }
});


function handler(event) {
    var orgEvent = event || window.event, args = [].slice.call( arguments, 1 ), delta = 0, returnValue = true, deltaX = 0, deltaY = 0;
    event = $.event.fix(orgEvent);
    event.type = "mousewheel";


    // Old school scrollwheel delta
    if (event.originalEvent)
    {
        if ( event.originalEvent.wheelDelta ) { delta = event.originalEvent.wheelDelta/120; }
        else if ( event.originalEvent.detail     ) { delta = -event.originalEvent.detail/3; }
    }
    else
    {
        if ( event.wheelDelta ) { delta = event.wheelDelta/120; }
        else if ( event.detail     ) { delta = -event.detail/3; }
    }
    // New school multidimensional scroll (touchpads) deltas
    deltaY = delta;

    // Gecko
    if ( orgEvent.axis !== undefined && orgEvent.axis === orgEvent.HORIZONTAL_AXIS ) {
        deltaY = 0;
        deltaX = -1*delta;
    }

    // Webkit
    var wheelDeltaScaleFactor = 1;

    if ($.browser.msie || ($.browser.webkit && !$.browser.chrome)) {
      wheelDeltaScaleFactor = 40;
    }

    if ( orgEvent.wheelDeltaY !== undefined ) { deltaY = orgEvent.wheelDeltaY/120/wheelDeltaScaleFactor; }
    if ( orgEvent.wheelDeltaX !== undefined ) { deltaX = -1*orgEvent.wheelDeltaX/120/wheelDeltaScaleFactor; }

	if( delta > 0 ) delta = 1;
	else if( delta < 0)  delta = -1;

    // Add event and delta to the front of the arguments
    args.unshift(event, delta, deltaX, deltaY);

    return $.event.handle.apply(this, args);
}

})(jQuery);

define("vendor/jquery.mousewheel", function(){});

// TODO - rename this.manager to something better. But that'll probably be
//        around the time we rename the Grapher class to something else.
//
// TODO - rename this class to something else. This class is really only
//        supposed to be for the animation / panning / zooming of the
//        grapher. It's not for any and all controlling. There are some
//        methods (such as grapher.addGraphSketch) that should be called
//        directly on the grapher and shouldn't go through this 'controller.'
define('graphing/graphcontroller',['require','jquery','pjs','./viewport','./viewporttransformation','math/distance','./constants','main/config','lib/touchtracking','lib/jquery.handleevent','vendor/jquery.mousewheel'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var Viewport = require('./viewport');
  var ViewportTransformation = require('./viewporttransformation');
  var Distance = require('math/distance');
  var constants = require('./constants');
  var Config = require('main/config');

  require('lib/touchtracking');

  require('lib/jquery.handleevent');
  require('vendor/jquery.mousewheel');

  var GraphController = P(function (proto) {
    proto.init = function (grapher) {
      this.manager = grapher;
      this.$ = this.manager.$;

      // callback
      this.triggerViewportStable = function () {};
      // using for jquery's animate feature. Would be nice to use something
      // more suited to only animation, but probably not worth the overhead.
      this.$animation = $('<div></div>');

      this.addMouseWheelEventHandler();
      this.addTouchEventHandler();
    };

    proto.getViewport = function () {
      return this.manager.viewport.clone();
    };

    proto.setViewport = function (viewport) {
      if (!viewport.isValid()) return;
      if (!this.manager.isInTransientState() && viewport.equals(this.manager.viewport)) {
        this.triggerViewportStable();
        return;
      }

      this.manager.viewport = viewport.clone();
      this.endTransientState();
    };

    proto.setTransformation = function (transformation) {

      this.manager.beginTransientState();
      this.manager.transformation = transformation;
      this.manager.redrawAllLayers();

      clearTimeout(this.endTransientTimeout);
      this.endTransientTimeout = setTimeout(this.endTransientState.bind(this), 250);
    };

    proto.endTransientState = function () {
      clearTimeout(this.endTransientTimeout);

      this.manager.endTransientState();
      this.manager.redrawAllLayers();

      this.triggerViewportStable();
    };

    proto.animateTransformation = function (transformation) {
      var self = this;
      var currentTransformation = this.manager.transformation;
      var targetTransformation = currentTransformation.compose(transformation);
      this.cancelAnimation();
      this.$animation.css('percent',0);
      this.$animation.animate( {'percent':100}, {

        duration: constants.ANIMATE_ZOOM_DURATION,

        step: function (percent) {
          self.setTransformation(
            currentTransformation.lerp(targetTransformation, percent/100.0)
          );
        }
      });
    };

    proto.cancelAnimation = function () {
      this.$animation.stop();
    };

    // this is simple enough to encapsulate everything in a single closure.
    proto.addMouseWheelEventHandler = function () {
      var mousewheel_counter = 0;

      var onMouseWheel = function (evt, delta) {
        evt.preventDefault();

        if (mousewheel_counter > 0) return;

        mousewheel_counter += 1;
        setTimeout(function () { mousewheel_counter-- }, 50);
        delta = (delta > 0 ? 1 : -1);

        var t = this.manager.transformation;

        this.setTransformation(
          t.compose(ViewportTransformation(
            0,
            0,
            (delta > 0) ? constants.ZOOM_FACTOR : 1/constants.ZOOM_FACTOR
          ))
        );
      };

      this.$.mousewheel(onMouseWheel.bind(this));
    };

    proto.handleDoubleClick = function (evt) {
      if (Config.get('disable_dblclick_zooming')) return;
      if (evt.wasHandled()) return;
      evt.preventDefault();

      var pageOffset = this.$.offset();
      var screen = this.manager.screen;
      var xOffset = evt.pageX - (pageOffset.left + 0.5*screen.width);
      var yOffset = evt.pageY - (pageOffset.top + 0.5*screen.height);
      var scale = constants.DOUBLETAP_ZOOM;

      // VT(dx*(1 - scale), dy*(1 - scale), scale) ===
      // VT(dx, dy, 1).VT(0, 0, scale).VT(-dx, -dy, 1);
      // Scales about the click point instead of the origin.
      this.animateTransformation(ViewportTransformation(
        xOffset*(1 - scale),
        yOffset*(1 - scale),
        scale
      ));
    };

    proto.applyPanTouchChanges = function (oldTouches, newTouches) {
      var dx = newTouches[0].x - oldTouches[0].x;
      var dy = newTouches[0].y - oldTouches[0].y;
      var transformation = this.manager.transformation.compose(
        ViewportTransformation(dx, dy, 1)
      );
      this.setTransformation(transformation);
    };

    proto.applyScaleTouchChanges = function (oldTouches, newTouches, scaleAxis) {

      var panX = Distance.mean(
        newTouches[0].x - oldTouches[0].x,
        newTouches[1].x - oldTouches[1].x
      );

      var panY = Distance.mean(
        newTouches[0].y - oldTouches[0].y,
        newTouches[1].y - oldTouches[1].y
      );

      var screen = this.manager.screen;
      var offset = this.manager.$.offset();

      var x0 = Distance.mean(oldTouches[0].x, oldTouches[1].x) -
        (offset.left + 0.5*screen.width)
      ;
      var y0 = Distance.mean(oldTouches[0].y, oldTouches[1].y) -
        (offset.top + 0.5*screen.height)
      ;

      var dxNew = Math.abs(newTouches[1].x - newTouches[0].x);
      var dyNew = Math.abs(newTouches[1].y - newTouches[0].y);
      var dxOld = Math.abs(oldTouches[1].x - oldTouches[0].x);
      var dyOld = Math.abs(oldTouches[1].y - oldTouches[0].y);

      // Decide if this is an isotropic or anisotropic scaling.
      var xScale, yScale;

      // avoid very large or small scaling when fingers cross
      var thresh = 50; // px,
      if (scaleAxis === 'x') {
        yScale = 1;
        xScale = Math.max(thresh, dxNew)/Math.max(thresh, dxOld);
      } else if (scaleAxis === 'y') {
        xScale = 1;
        yScale = Math.max(thresh, dyNew)/Math.max(thresh, dyOld);
      } else {
        xScale = yScale = (
          Math.max(thresh, Distance.hypot(dxNew, dyNew)) /
          Math.max(thresh, Distance.hypot(dxOld, dyOld))
        );
      }

      // offset*(1 - scale) is a trick for scaling about a point other than
      // the origin. It's equivalent to translating back to the origin,
      // scaling there, then translating back to offset.
      var transformation = this.manager.transformation.compose(
        ViewportTransformation(
          panX + x0*(1 - xScale),
          panY + y0*(1 - yScale),
          xScale,
          yScale
        )
      );

      this.setTransformation(transformation);
    };

    // a complete closure to all touch event related code
    proto.addTouchEventHandler = function () {

      var self = this;
      var touches = [];
      var isDragging = false;

      var beginDrag = function (evnt) {

        // must not have been handled already. The POI controller may handle
        // this tapStart for POI purposes and we may want to ignore it.
        if (evnt.wasHandled()) return;

        // must not already be dragging
        if (isDragging) return;

        // must not have a touch down anywhere else. Only want to start dragging
        // if this is the first touch and it's on the grapher
        if (evnt.touches.length !== evnt.changedTouches.length) return;

        // setup drag
        isDragging = true;
        $(document).on('tapmove.graphdrag', updateDrag);
        $(document).on('tapstart.graphdrag tapend.graphdrag tapcancel.graphdrag', updateTouches);
      };

      var _computeScaleAxis = function (touches) {
        if (touches.length < 2) return undefined;

        var projection = self.manager.createProjection();
        var offset = self.manager.$.offset();
        var ox = projection.mapx(0);
        var oy = projection.mapy(0);

        // Clamp to screen edges
        ox = Math.min(Math.max(0, ox), projection.screen.width) + offset.left;
        oy = Math.min(Math.max(0, oy), projection.screen.height) + offset.top;

        var xClose = function (x) {
          return 10*Math.abs(x - ox) < projection.screen.width;
        };

        var yClose = function (y) {
          return 10*Math.abs(y - oy) < projection.screen.height;
        };

        var dx = touches[1].x - touches[0].x;
        var dy = touches[1].y - touches[0].y;

        if (
          xClose(touches[0].x) &&
          xClose(touches[1].x) &&
          Math.abs(dy) > 3*Math.abs(dx)
        ) {
          return 'y';
        }

        if (
          yClose(touches[0].y) &&
          yClose(touches[1].y) &&
          Math.abs(dx) > 3*Math.abs(dy)
        ) {
          return 'x';
        }

        return 'both';
      };

      var updateScaleAxis = function (touches) {
        if (!self.manager.scaleAxis) {
          self.manager.scaleAxis = _computeScaleAxis(touches);
        }
        return self.manager.scaleAxis;
      };

      var clearScaleAxis = function () {
        self.manager.scaleAxis = undefined;
      };

      var updateDrag = function (evnt) {
        // must be dragging
        if (!isDragging) return;

        var newTouches = evnt.touches;

        if (touches.length === 2 && newTouches.length === 2) {
          // zoom and pan
          self.applyScaleTouchChanges(
            touches,
            newTouches,
            updateScaleAxis(newTouches)
          );
        } else {
          clearScaleAxis();
        }

        if (touches.length === 1) {
          // only option is to pan...
          self.applyPanTouchChanges(touches, newTouches);
        }

        touches = newTouches;
      };

      var updateTouches = function (evnt) {

        // must be dragging
        if (!isDragging) return;

        self.cancelAnimation();

        // save our touches so that when we move one we can
        // figure out how the touches have moved.
        touches = evnt.touches;

        // check if drag is over
        if (evnt.touches.length === 0) {
          isDragging = false;
          $(document).off('.graphdrag');
        }

        if (evnt.touches.length < 2) {
          clearScaleAxis();
        }

      };

      this.$.on('tapstart', beginDrag);
      this.$.on('dblclick', this.handleDoubleClick.bind(this));
    };

    proto.getSetting = function (setting, _default) {
      var value = this.manager.settings.getProperty(setting);
      return value !== undefined ? value : _default;
    };

    proto.setSetting = function (setting, value, _default) {
      this.manager.settings.setProperty(
        setting,
        value !== undefined ? value : _default
      );
    };

    proto.getState = function () {
      return {
        viewport: this.getViewport().toObject(),
        showLabels: this.getSetting('showLabels'),
        degreeMode: this.getSetting('degreeMode'),
        showGrid: this.getSetting('showGrid'),
        polarMode: this.getSetting('polarMode'),
        showAxes: this.getSetting('showAxes'),
        squareAxes: this.getSetting('squareAxes'),
        labelXMode: this.getSetting('xAxisPiLabels') ? 'pi' : '',
        labelYMode: this.getSetting('yAxisPiLabels') ? 'pi' : ''
      };
    };

    // TODO - Each one of these setSetting commands will update the grids
    // layer. That's not terrible, but it might be nice to have control over
    // that.
    //
    // Might be worth adding the observer in here rather than in
    // graph_settings.js so that we can turn the observer off/on cleanly
    // any time we do a batch update like this.
    proto.setState = function (state) {
      this.setSetting('showLabels', state.showLabels, true);
      this.setSetting('showGrid', state.showGrid, true);
      this.setSetting('polarMode', state.polarMode, false);
      this.setSetting('showAxes', state.showAxes, true);
      this.setSetting('squareAxes', state.squareAxes, true);
      this.setSetting('xAxisPiLabels', state.labelXMode === 'pi');
      this.setSetting('yAxisPiLabels', state.labelYMode === 'pi');
      this.setSetting('degreeMode', state.degreeMode, false);

      if ("viewport" in state) {
        var viewport = Viewport.fromObject(state.viewport);
        if (
          this.getSetting('squareAxes') &&
          !viewport.isSquare(this.manager.screen)
        ) {
          viewport.squareYAxis(this.manager.screen);
          viewport.round(this.manager.screen);
        }

        this.setViewport(viewport);
      }

    };

    proto.zoom = function (action) {
      if (action === 'in') {
        this.animateTransformation(
          ViewportTransformation(0, 0, 2)
        );
      } else if (action === 'out') {
        this.animateTransformation(
          ViewportTransformation(0, 0, 0.5)
        );
      } else if (action === 'default') {
        this.manager.settings.setProperty('squareAxes', true);
        this.setViewport(this.manager.computeDefaultViewport());
      }
    };

    proto.isZoomRestored = function () {
      return this.manager.viewport.equals(this.manager.computeDefaultViewport());
    };

    //executes a the axes squaring
    proto.enforceSquareAxes = function () {
      var settings = this.manager.settings;

      if (!settings.squareAxes) return;

      var preserveDirection = settings.lastChangedAxis;

      var viewport = this.manager.viewport.clone();
      if (preserveDirection == 'y') {
        viewport.squareXAxis(this.manager.screen);
      } else {
        viewport.squareYAxis(this.manager.screen);
      }
      viewport.round(this.manager.screen);
      this.setViewport(viewport);
    };
  });

  return GraphController;
});

define('main/account_backend',['require','jquery'],function(require){
  var $ = require('jquery');

  var accountBackend = {
    logout: function () { return $.post('account/logout.php'); },

    fetchUser: function (formData) {
      var login = function () {
        return $.post('account/login.php', formData);
      };

      // do a logout before a login so that cookies are set correctly
      return this.logout().then(login, login).then(this.getUserInfo);
    },

    getUserInfo: function () { return $.getJSON('account/user_info.php'); },

    registerUser: function (formData) {
      return $.post('account/register.php', formData).then(this.getUserInfo);
    },

    editAccount: function (formData) {
      return $.post('account/edit_account.php', formData).then(
        this.getUserInfo
      );
    },

    recoverPassword: function (formData) {
      return $.post('account/recover.php', formData);
    }
  };

  return accountBackend;
});

define('main/user',['require','pjs','lib/underscore_model'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');

  var User = P(UnderscoreModel, function (proto, _super) {
    var properties = ['name', 'email'];

    proto.init = function (obj) {
      _super.init.call(this);
      var self = this;

      if (obj) {
        properties.forEach(function (p) {
          if (obj.hasOwnProperty(p)) self.setProperty(p, obj[p]);
        });
      }
    };
  });

  return User;
});



define('main/user_controller',['require','pjs','lib/underscore_model','main/account_backend','main/user'],function(require){
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');
  var accountBackend = require('main/account_backend');
  var User = require('main/user');


  var UserController = P(UnderscoreModel, function (proto, _super) {
    proto.init = function (graphsController) {
      _super.init.call(this);
      this.graphsController = graphsController;
    };

    proto.graphLogin = function (formData) {
      return accountBackend.fetchUser(formData).done(
        this.completeLogin.bind(this)
      );
    };

    proto.createAccount = function (formData) {
      return accountBackend.registerUser(formData).done(
        this.completeLogin.bind(this)
      ).done(function () {
      });
    };

    proto.editAccount = function (formData) {
      var currentUser = this.currentUser;
      var self = this;
      return accountBackend.editAccount(formData).done(function (msg) {
        currentUser.setProperty('name', msg.name);
        currentUser.setProperty('email', msg.email);
        self.notifyPropertyChange('currentUser');
      });
    };

    proto.recoverPassword = function (formData) {
      return accountBackend.recoverPassword(formData);
    };

    //called at the end of the login process
    proto.completeLogin = function (msg, source) {
      var user = User(msg);
      this.setProperty('currentUser', User(msg));
      this.graphsController.updateGraphs();

    };

    proto.logout = function () {
      var self = this;
      return accountBackend.logout().done(function() {
        self.setProperty('currentUser', null);
        self.graphsController.clear();
      });
    };
  });

  return UserController;
});

define('main/calculator_backend',['require','jquery','main/graph'],function(require){
  var $ = require('jquery');
  var Graph = require('main/graph');

  var calculatorBackend = {
    apiPath: function(path) {
      return ['account', path].join('/');
    },

    // Helper for saveGraph and shareGraph that lets them make different
    // decision about whether to add the graph to the list of the user's graphs.
    _saveGraph: function (graph, my_graphs) {
      var access = ($('input[name="access"]').attr("checked")? "all" : "link");
      var formData = {
        parent_hash: graph.parentHash,
        thumb_data: graph.thumbURL,
        calc_state: graph.graphData,
        graph_hash: graph.hash,
        version: 'h2',
        access: access,
        my_graphs: my_graphs,
        // Use all these undefineds so that the data doesn't go to the server
        // if it is blank or null.
        title: graph.title || undefined
      };

      return $.post(this.apiPath('save.php'), formData).pipe(function(resp) {
        Graph.updateFromSync(graph, resp);
        return graph;
      });
    },

    saveGraph: function (graph) {
      return this._saveGraph(graph, true);
    },

    getGraphs: function () {
      return $.getJSON(this.apiPath('list.php'));
    },

    removeGraph: function (graph) {
      return $.post(this.apiPath('remove.php'), {
        hash: graph.hash
      });
    },
  };

  return calculatorBackend;
});

define('undoredo',['require','underscore','pjs'],function (require) {
  var _ = require('underscore');
  var P = require('pjs');

var UndoRedoManager = P(function (manager, _super) {

  manager.CAUSE_OF_CHANGE = 1;
  manager.RESPONSE_TO_CHANGE = 2;
  manager.BATCHED_CHANGE = 3;

  manager.triggerFlash = function () {};

  manager.init = function () {
    this.undos = [];
    this.redos = [];
    this.changesCallbacks = [];
    this.__isApplyingTransaction = 0;
    this.markAsSaved();
  };

  // TODO - a different way to listen for z and y keys than hardcoding the numbers
  //Default ctrl-z, ctrl-y behavior
  manager.handleKeydown = function (evt) {
    if (evt.ctrlKey || evt.metaKey) {
      switch(evt.which) {
        case 90: //z
          if (evt.shiftKey) {
            this.redo();
          } else {
            this.undo();
          }
          return false;
        case 89: //y
          this.redo();
          return false;
      }
    }
  };

  manager.clear = function () {
    this.undos = [];
    this.redos = [];
    this.__batchableTransaction=null;
    this.markAsSaved();
  };

  manager.pushUndo = function (transaction) {
    this.undos.push(transaction);
    
    if (transaction.recordChange !== false) {
      this.__changesSinceSave++;
      this.triggerChanges();
    }
  };
  
  manager.pushRedo = function (transaction) {
    this.redos.push(transaction);
    
    if (transaction.recordChange !== false) {
      this.__changesSinceSave--;
      this.triggerChanges();
    }
  };
  
  manager.canUndo = function () {
    return this.undos.length > 0;
  };
  
  manager.canRedo = function () {
    return this.redos.length > 0;
  };
  
  manager.undo = function () {
    if (!this.canUndo()) return;
    this.__batchableTransaction=null;
    
    var action = this.undos.pop();
    this.applyTransaction(action,true);
    this.pushRedo(action);
  };
  
  manager.redo = function () {
    if (!this.canRedo()) return;
    this.__batchableTransaction=null;
    
    var action = this.redos.pop();
    this.applyTransaction(action);
    this.pushUndo(action);
  };

  //this is called from the outside world
  manager.markAsSaved = function () {
    this.__changesSinceSave = 0;
    this.triggerChanges();
  };
  
  manager.changedSinceSave = function () {
    return this.__changesSinceSave !== 0;
  };
  
  manager.isApplyingTransaction = function () {
    return !!this.__isApplyingTransaction;
  };
  
  manager.__applyTransaction = function (transaction, doUndo) {
    var i;
    var batched = transaction.__batched__ ? transaction.__batched__ : [];

    // apply transactions in reverse
    if (doUndo) {
      for (i=batched.length-1; i>=0; i--) {
        this.__applyTransaction(batched[i], doUndo);
      }
     
      transaction.undo();
    }
    
    // apply transactions the way they happened the first time
    else {
      transaction.redo();
      for (i=0; i<batched.length; i++) {
        this.__applyTransaction(batched[i], doUndo);
      }
    }
  };
  
  manager.applyTransaction = function (transaction, doUndo) {
    this.__isApplyingTransaction++;
    
    try {
      this.__applyTransaction(transaction, doUndo);
    } finally {
      this.__isApplyingTransaction--;
    }
  };
  
  // sometimes, we want to just do multiple things, and we want them to all
  // be grouped into a single transaction. This is different from the
  // BATCHED_CHANGE idea because we don't want to have to care about what
  // sideeffects a certain action might have. Here, we just do stuff, and all
  // that stuff gets grouped together. It might seem like we could supercede
  // the BATCHED_CHANGE property and just always use this. The problem with
  // that is that BATCHED_CHANGE works when the sideeffect happens
  // asynchronously and oneTransaction requires that all side effects happen
  // synchronously.
  manager.oneTransaction = function (func) {
    if (!this.__oneTransactionDepth) {
      this.__oneTransactionDepth=0;
    }
    
    this.__oneTransactionDepth++;
    func();
    this.__oneTransactionDepth--;
    
    if (!this.__oneTransactionDepth) {
      this.__oneTransaction = null;
    }
  };
  
  manager.isApplyingOneTransaction = function () {
    return this.__oneTransactionDepth > 0;
  };
  
  manager.addTransaction = function (transaction) {
    var batched;
    
    // A BATCHED_CHANGE transaction is one that is one that always happens
    // as a sideeffect of a different transaction. For instance, the slider's
    // value updates as a result of the user typing in the latex. The main
    // transaction would be the latex change, and the batched change would
    // be the slider value update.
    if (transaction.type === this.BATCHED_CHANGE) {
      
      if (!this.__batchableTransaction) return;
      
      batched = this.__batchableTransaction.__batched__;
      if (!batched) batched = this.__batchableTransaction.__batched__=[];
      batched.push(transaction);
      
      this.applyTransaction(transaction);
      return;
    }
    
    //don't accept changes that are sideffects of applying a transaction.
    //the transaction should've been written in such a way that chained
    //reactions are accounted for.
    if (this.isApplyingTransaction()) return;
    
    //automatically apply this if it's what's going to cause the initial
    //change.
    if (transaction.type === this.CAUSE_OF_CHANGE)
      this.applyTransaction(transaction);
    
    //if nothing really changed, then stop.
    if (transaction.ensureChangeOccured && transaction.ensureChangeOccured())
      return;
    
    // was this.redos.clear() in the Dark days. this.redos = [] would be
    // simpler, but has different semantics if someone else has a handle to
    // this array.
    this.redos.splice(0);
    var compressNow = transaction.compressWith;
    var compressBefore = !this.__batchableTransaction ? null :
                          this.__batchableTransaction.compressWith;
    
    if (!compressNow || compressNow != compressBefore) {

      this.__batchableTransaction=transaction;
          
      if (this.isApplyingOneTransaction()) {
        if (!this.__oneTransaction) {
          this.__oneTransaction = transaction;
        } else {
          batched = this.__oneTransaction.__batched__;
          if (!batched) batched = this.__oneTransaction.__batched__ = [];
          batched.push(transaction);
          return;
        }
      }
      
      this.pushUndo(transaction);
    } else {
      this.__batchableTransaction.redo=transaction.redo;
    }
  };

  manager.triggerChanges = function () {
    _.each(this.changesCallbacks, function (cb) { cb() });
  };

});


return UndoRedoManager();
});

define('main/graphs_controller',['require','underscore','pjs','main/graph','main/calculator_backend','lib/underscore_model','undoredo'],function(require){
  var _ = require('underscore');
  var P = require('pjs');
  var Graph = require('main/graph');
  var calculatorBackend = require('main/calculator_backend');
  var UnderscoreModel = require('lib/underscore_model');
  var UndoRedo = require('undoredo');

  var GraphsController = P(UnderscoreModel, function (proto, _super) {

    proto.init = function (graphController, stateController) {
      _super.init.call(this);

      this.observe('currentGraph', this.onCurrentGraphChange.bind(this));

      this.graphController = graphController;
      this.stateController = stateController;
      this.content = [];

      this.startSavingCallbacks = [];
      this.saveSuccessCallbacks = [];
      this.saveErrorCallbacks = [];
      this.startUpdatingGraphsCallbacks = [];
      this.updateGraphsSuccessCallbacks = [];
      this.updateGraphsErrorCallbacks = [];
      this.graphAddedCallbacks = [];
      this.clearCallbacks = [];
      this.graphRemovedCallbacks = [];
    };

    proto.remove = function (graph) {
      var index = this.getIndexFromGraph(graph);
      this.content.splice(index, 1);
      this.triggerRemove(index);
      calculatorBackend.removeGraph(graph);
    };

    proto.offlineRemove = function (graph) {
      var index = this.getIndexFromGraph(graph);
      this.content.splice(index, 1);
      this.triggerRemove(index);
      //calculatorBackend.removeGraph(graph);
    };

    proto.clear = function () {
      this.content = [];
      this.triggerClear();
    };

    proto.triggerStartSaving = function () {
      _.each(this.startSavingCallbacks, function (cb) { cb() });
    };

    proto.triggerSaveSuccess = function () {
      _.each(this.saveSuccessCallbacks, function (cb) { cb() });
    };

    proto.triggerSaveError = function () {
      _.each(this.saveErrorCallbacks, function (cb) { cb() });
    };

    proto.triggerStartUpdatingGraphs = function () {
      _.each(this.startUpdatingGraphsCallbacks, function (cb) { cb() });
    };

    proto.triggerUpdateGraphsSuccess = function () {
      _.each(this.updateGraphsSuccessCallbacks, function (cb) { cb() });
    };

    proto.triggerupdateGraphsError = function () {
      _.each(this.updateGraphsErrorCallbacks, function (cb) { cb() });
    };

    proto.triggerAdd = function (index) {
      _.each(this.graphAddedCallbacks, function (cb) { cb(index); });
    };

    proto.triggerClear = function () {
      _.each(this.clearCallbacks, function (cb) { cb(); });
    };

    proto.triggerRemove = function (index) {
      _.each(this.graphRemovedCallbacks, function (cb) { cb(index); });
    };

    // Update state and screenshot
    proto.updateGraphData = function (graph) {
      var state = this.stateController.getState('escaped');
      graph.setProperty('graphData', state);
      graph.setProperty('hash', randomHash());

      var thumbURL = this.graphController.manager.thumbnail(40,40);
      graph.setProperty('thumbURL', thumbURL);
    };

    proto.saveAs = function (graph) {
      this.save(graph, true);
    };

    //do_not_overwrite flag -- only exposed to proto.saveAs
    proto.save = function (graph, do_not_overwrite) {
      
      var oldGraph = this.currentGraph;
      var self = this;

      self.triggerStartSaving();

      // about to modify the graph, so we make sure we modify the copy, not the original
      graph = graph.copy();
      self.updateGraphData(graph);

      calculatorBackend.saveGraph(graph).done(function(graph) {

        // Don't call loadGraph here because we don't want to trigger a
        // setState on save.

        // copy graph so that what goes into my_graphs list isn't the exact
        // same object as what's stored in currentGraph.
        //self.setProperty('currentGraph', graph.copy());

        self.content.unshift(graph);
		//if (document.getElementsByClassName('variable-title')[0].innerHTML=='Untitled Graph') { self.loadGraph(graph); }
        self.triggerAdd(0);
        self.triggerSaveSuccess();

        if (!do_not_overwrite && oldGraph) {
          self.offlineRemove(oldGraph);
        }
        self.offlineUpdateGraphs();
		self.loadGraph(graph);
		UndoRedo.markAsSaved();
      }).fail(function() {
        self.triggerSaveError();
      });
    };

    //do_not_overwrite flag -- only exposed to proto.saveAs
    proto.rename = function (graph, do_not_overwrite) {
      
      var oldGraph = this.currentGraph;
      var self = this;

      self.triggerStartSaving();

      // about to modify the graph, so we make sure we modify the copy, not the original
      graph = graph.copy();
      self.updateGraphData(graph);

      calculatorBackend.saveGraph(graph).done(function(graph) {

        // Don't call loadGraph here because we don't want to trigger a
        // setState on save.

        // copy graph so that what goes into my_graphs list isn't the exact
        // same object as what's stored in currentGraph.
        //self.setProperty('currentGraph', graph.copy());

        self.content.unshift(graph);
		//if (document.getElementsByClassName('variable-title')[0].innerHTML=='Untitled Graph') { self.loadGraph(graph); }
        self.triggerAdd(0);
        self.triggerSaveSuccess();

        if (!do_not_overwrite && oldGraph) {
          self.remove(oldGraph);
        }
        self.offlineUpdateGraphs();
		self.loadGraph(graph);
		UndoRedo.markAsSaved();
      }).fail(function() {
        self.triggerSaveError();
      });
    };

    //is this the stablest way to do this?
    proto.getIndexFromGraph = function (graph) {
      for (var index = 0 ; index < this.content.length ; index++) {
        if (graph.hash === this.content[index].hash) return index;
      }
      return -1;
    };

    proto.updateGraphs = function () {
      var self = this;
      self.triggerStartUpdatingGraphs();
      calculatorBackend.getGraphs().done(function (msg) {
        var graphs;
        if (msg.myGraphs) graphs = msg.myGraphs.map(Graph.fromAjax);
        self.content = graphs;
        self.triggerUpdateGraphsSuccess();
      }).fail(function () {
        self.triggerupdateGraphsError();
      });
    };


    proto.offlineUpdateGraphs = function () {
      var self = this;
      self.triggerStartUpdatingGraphs();
	  for(i=0;i<self.content.length;i++)
	    {
		if(typeof(self.content[i].__oldProperties.title)!='undefined')
		  {
		  self.content[i].title=self.content[i].__oldProperties.title;
		  self.content[i].hash=self.content[i].__oldProperties.hash;
		  self.content[i].thumbURL=self.content[i].__oldProperties.thumbURL;
		  self.content[i].path=self.content[i].__oldProperties.path;
		  }
		}
      self.triggerUpdateGraphsSuccess();

    };
	
    proto.loadGraph = function (graph) {
      var self = this;
      
      // combine the setState undo/redo along with the currentGraph undo/redo into 
      // a single atomic undo/redo transaction.
      UndoRedo.oneTransaction(function () {
        
        // set the state. this itself is going to add to undo/redo stream to 
        self.stateController.setState(graph.graphData);

        // set the currentGraph. This will add to undo/redo as well.
        self.setProperty('currentGraph', graph);
        
      });
    };

    proto.clearGraph = function () {
      this.loadGraph(Graph());
    };

    proto.onCurrentGraphChange = function () {
      var currentGraph = this.currentGraph;
      var oldCurrentGraph = this.getOldProperty('currentGraph');
      
      // only undo currentGraph if there is an oldCurrentGraph. Basically, this makes it so
      // that we skip the first time we set a Graph(), whether the first Graph()
      if (oldCurrentGraph) {
        var self = this;

        // make copies of these from the start in case they ever get modified in the future      
        var undoGraph = oldCurrentGraph.copy();
        var redoGraph = currentGraph.copy();
  
        // this makes it so undo/redo changes title and hash
        UndoRedo.addTransaction({
          type: UndoRedo.RESPONSE_TO_CHANGE,
          redo: function(){
            self.setProperty('currentGraph', redoGraph.copy());
          },
          undo: function(){
            self.setProperty('currentGraph', undoGraph.copy());
          }
        });
      }
            
      document.title = currentGraph.title || 'Graph Beta';

      if (!(window.history && history.pushState)) return;

      var path = currentGraph.path;
      if (!path) return;
      if (window.location.search) path += window.location.search;
      if (path !== window.location.href) {
        history.pushState(
          currentGraph.plainObject(),
          currentGraph.title,
          path
        );
      }
    };
  });

  return GraphsController;
});

define('main/graph_settings',['require','jquery','pjs','lib/underscore_model'],function(require){
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');

  /*
  * graph settings
  */

  var GraphSettings = P(UnderscoreModel, function (settings, _super) {

    //these are user-defined properties and can be saved in the state
    settings.init = function () {
      _super.init.call(this);
      
      // stored in state
      this.squareAxes = true;
      this.showLabels = true;
      this.showGrid = true;
      this.polarMode = false;
      this.showAxes = true;
      this.xAxisPiLabels = false;
      this.yAxisPiLabels = false;
      this.degreeMode = false;
      
      //non computed -- these are the same for projectorMode and non-projector Mode
      this.labelHangingColor = 'rgba(150,150,150,1)';
      this.labelNormalColor = 'rgba(0,0,0,1)';

      //non-computed and not-stored in state. Just used for squaring Axes
      this.lastChangedAxis = 'x',

      // below here are properties that *are not* stored in the state and can,
      // right now, only be changed by toggling 'projectorMode'
      this.projectorMode = false;

      var self = this;
      function createProjectorProperty (property, offValue, onValue) {
        
        function computeProperty() {
          self.setProperty(property, self.projectorMode ? onValue : offValue);
        }
        
        self.observe('projectorMode', computeProperty);
        computeProperty();
      }
      
      function createHighlightProperty (property, off_off, off_on, on_off, on_on) {
        function computeProperty() {
          var value;
          if (self.projectorMode) {
            value = self.highlight ? on_on : on_off;
          } else {
            value = self.highlight ? off_on : off_off;
          }
          
          self.setProperty(property, value);
        }
        
        self.observe('projectorMode highlight', computeProperty);
        computeProperty();
      }
          
      //font size of labels
      createProjectorProperty('labelSize', 12, 18);
      //darker grid lines
      createProjectorProperty('majorAxisOpacity', 0.2, 0.5);
      
      //lighter grid lines
      createProjectorProperty('minorAxisOpacity', 0.08, 0.15);
      
      //main axes
      createProjectorProperty('axisOpacity', 0.7, 0.9);
      
      createProjectorProperty('axisLineWidth', 1, 2);

      //for antialiasing axes
      createProjectorProperty('axisLineOffset', 0.5, 0);
      
      //minimum separation between major axis lines
      createProjectorProperty('pixelsPerLabel', 70, 100);
      
      //line width for graphs
      createHighlightProperty('graphLineWidth', 2, 3, 6, 9);

      //line width for points
      createHighlightProperty('pointLineWidth', 7, 11, 15, 22);
    };

    settings.clone = function () {
      var newSettings = GraphSettings(this.grapher);
          newSettings.setProperty('squareAxes', this.squareAxes);
          newSettings.setProperty('showLabels', this.showLabels);
          newSettings.setProperty('showGrid', this.showGrid);
          newSettings.setProperty('polarMode', this.polarMode);
          newSettings.setProperty('squareAxes', this.showAxes);
          newSettings.setProperty('xAxisPiLabels', this.xAxisPiLabels);
          newSettings.setProperty('yAxisPiLabels', this.yAxisPiLabels);
          newSettings.setProperty('degreeMode', this.degreeMode);
          newSettings.setProperty('projectorMode', this.projectorMode);

      return newSettings;
    };
    
    settings.registerCallbacks = function (graphController, expressionsView) {
      var redrawGridLayer = function () {
        graphController.manager.redrawGridLayer();
      };
      this.observe('showLabels', redrawGridLayer);
      this.observe('showAxes', redrawGridLayer);
      this.observe('showGrid', redrawGridLayer);
      this.observe('polarMode', redrawGridLayer);
      this.observe('xAxisPiLabels', redrawGridLayer);
      this.observe('yAxisPiLabels', redrawGridLayer);
      this.observe('degreeMode', redrawGridLayer);

      this.observe('squareAxes', function() {
        graphController.enforceSquareAxes();
      });

      var self = this;
      this.observe('projectorMode', function() {
        graphController.manager.redrawAllLayers();

        //set class on the body for POIs & trace -- see poi.css
        $('body').toggleClass('PROJECTOR-MODE', !!self.projectorMode);
        expressionsView.onProjectorModeChange();
      });
    };
  });

  return GraphSettings;
});


/*
 * TimerModules is a way to setup a function to keep getting called every
 * 100ms. This is much cleaner than a lot of individual setTimeout or
 * setInterval calls, and it allows you to optionally load/not load the module.
 *
 * A 'module' is really nothing more than a simple javascript closure. In order
 * to 'add' a 'module', you make a call to Graph.TimerModules.add and pass two
 * arguments. The first is the name (string) you want to call the module, and
 * the second argument is the module (function) you want to be executed when
 * the module is 'loaded.'
 *
 * When you load a module, you can pass it arguments. This, for instance, would
 * load the 'sample' module with the arguments (0,'a'):
 *
 *    Graph.TimerModules.load('sample',0,'a')
 *
 * The 'sample' module will be executed. If the module returns a reference to
 * a function, that function will keep getting called every 100ms. It's
 * important to realize that the module itself won't be called every 100ms. The
 * module is used to setup the function that keeps called every 100ms.
 *
 * see expressions.overflows.js, expressions.renderviewport
 * for real examples
 */
define('main/timermodules',[], function(){

var added = {};
var loaded = {};
var runnable = {};

var TimerModules = {};
TimerModules.add = function(name,setup){
  added[name] = setup;
};

TimerModules.load = function(name){
  if( added[name] )
  {
    //load the module
    loaded[name] = added[name].apply(this,Array.prototype.slice.call(arguments,1));

    //add to list of runnable modules
    if( loaded[name] ) runnable[name] = loaded[name];
  }
};

var run = function(){
  
  for (var i in runnable) {
    if (runnable.hasOwnProperty(i)) runnable[i]();
  }
  
  setTimeout( run, 100 );
};

run();

return TimerModules;
});

define('expressions/abstractitem',['require','pjs','lib/underscore_model','undoredo'],function(require) {
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');
  var UndoRedo = require('undoredo');
  
  var AbstractItemModel = P(UnderscoreModel, function (model, _super) {

    var nextItemId = 1;
    
    model.init = function (state, list) {
      _super.init.call(this);
      
      // TODO - these belong on view, not the model
      this.index = -1;
      this.selected = false;
      this.list = list;
      
      for (var property in state) {
        if (state.hasOwnProperty(property)) {
          this[property] = state[property];
        }
      }
      
      if (!this.hasOwnProperty('id')) {
        this.id = nextItemId++;
      } else if (this.id >= nextItemId) {
        nextItemId = this.id + 1;
      }

      this.observe('folder', this.updateFolder.bind(this));
    };

    // Record change for undo-redo
    model.onStateDidChange = function(prop) {
      var id = this.id;
      var oldValue = this.getOldProperty(prop);
      var newValue = this.getProperty(prop);
      
      var list = this.list;
      UndoRedo.addTransaction({
        type: UndoRedo.RESPONSE_TO_CHANGE,
        undo: function() {
          list.getItemById(id).setProperty(prop, oldValue);
        },
        redo: function () {
          list.getItemById(id).setProperty(prop, newValue);
        }
      });
    };

    model.updateCollapsed = function () {
      this.setProperty(
        'inCollapsedFolder',
        this.folder ? this.folder.collapsed : false
      );
    };

    model.updateFolder = function () {
      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.id);
      }
      if (this.folder) {
        this.folder.observe(
          'collapsed.' + this.id,
          this.updateCollapsed.bind(this)
        );
      }
      this.updateCollapsed();
    };
    
  });
  
  return AbstractItemModel;
});

define('expressions/domain',['require','lib/underscore_model','pjs'],function(require){
  var UnderscoreModel = require('lib/underscore_model');
  var P = require('pjs');

var DomainModel = P(UnderscoreModel, function (model, _super) {
  model.init = function (min, max) {
    _super.init.call(this);
    this.min = min;
    this.max = max;
  };
  
  model.isValid = function () {
    return isFinite(this.min) && isFinite(this.max) && (this.max > this.min);
  };
  
  model.serialize = function () {
    return {min: this.min, max: this.max};
  };
});

DomainModel.deserialize = function (obj) {
  if (!obj) return DomainModel();
  else return DomainModel(obj.min, obj.max);
};

return DomainModel;
});

define('expressions/slider',['require','pjs','lib/underscore_model'],function(require) {
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');

  var SliderModel = P(UnderscoreModel, function (model, _super) {
    model.init = function (value, min, max, step, is_animatable, playDirection) {
      _super.init.call(this);
      this.min = min;
      this.max = max;
      this.step = step;
      this.value = value;
      this.is_animatable = is_animatable;
      this.playDirection = playDirection;
    };
    
    model.serialize = function () {
      return {min: this.min, max: this.max, step: this.step, value: this.value, playDirection: this.playDirection};
    };
    
    model.computeSnappedValue = function (val) {
      if (!this.step) return val;
      
      val = Math.round((val-this.min)/this.step)*this.step+this.min;
        
      // prevent 1.100000000000001 and just make it 1.1
      val= Number(val.toPrecision(9));
      
      return val;
    };
    
  });
  
  SliderModel.deserialize = function (obj) {
    if (!obj) return SliderModel();
    else return SliderModel(obj.value, obj.min, obj.max, obj.step, obj.is_animatable, obj.playDirection);
  };

  return SliderModel;
});

define('expressions/colors',['require'],function(require) {
  var RED = '#C0504D';
  var BLUE = '#4F81BD';
  var GREEN = '#9BBB59';
  var PURPLE = '#8064A2';
  var ORANGE = '#F79646';
  var BLACK = '#000000';
  var all = [ RED, BLUE, GREEN, PURPLE, ORANGE, BLACK ];
  var i = 0;

  function next () {
    var color = all[i];
    i = (i + 1) % all.length;
    return color;
  }

  return {
    all: all,
    next: next,
    RED: RED,
    BLUE: BLUE,
    GREEN: GREEN,
    PURPLE: PURPLE,
    ORANGE: ORANGE,
    BLACK: BLACK
  };
});
define('expressions/expression',['require','pjs','math/evaluationstate','undoredo','./abstractitem','./domain','./slider','./colors'],function(require){
  var P = require('pjs');
  var EvaluationState = require('math/evaluationstate');
  var UndoRedo = require('undoredo');
  var AbstractItemModel = require('./abstractitem');
  var DomainModel = require('./domain');
  var SliderModel = require('./slider');
  var Colors = require('./colors');
  
  
  var ExpressionObject = P(AbstractItemModel, function(model, _super) {

    model._computeNewLatex = function(latex, newValue) {
      //we know the expression will look like:
      // a bunch of stuff (we ignore this in the regex)
      // an "=" (doesn't slide if it's < or >)
      // 
      // a bunch of stuff (spaces, parens, the rest of the le, ge, etc)  ($1)
      // the number we're trying to replace ($2)
      // a bunch more stuff (spaces, parens, etc.) (we ignore this in the regex)
      var regex = /=(.*?)([-\.0-9]+)/;
      
      //if they're typing something crazy like y=00001, we want to not overwrite their work
      var matches = latex.match(regex);
      if (parseFloat(matches[2]) === newValue) return latex;
      
      return latex.replace(regex, "=$1" + newValue);
    };

    model.isExpression = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);
      
      this.loading = true;
      // a default blank formula while we calculate the real one
      this.formula = EvaluationState({error:''});
      
      // TODO - this is very temporary. Eventually we'll want to save the
      // slider info in here, but there are some old states that have obsolete
      // values stored in there. We've repurposed the .slider variable on this
      // class to be a SliderModel. Because the .slider value is being set
      // on instantiation, we aren't overwriting it with a SliderModel. Then,
      // when the .slider property is expected to do things that a SliderModel
      // can, it throws an error. When we migrate old graph states to use this
      // property, we need to remove the next line.
      delete this.slider;
      
      // fill in a color if not specified
      if (!this.color) {
        this.color = Colors.next();
      }
      
      // convert old style of color definition to simpler new version
      else if (typeof this.color === 'object') {
        this.color = this.color.value;
      }

      if (this.userRequestedGraphing === undefined) {
        this.userRequestedGraphing = 'default';
      }

      if (this.latex === undefined) this.latex = '';

      // convert raw domain object to a DomainModel Object
      var raw_domain = this.domain ? this.domain : {min: 0, max: 1};
      this.domain = DomainModel.deserialize(raw_domain);
      this.domain.observe('min max', function (property) {
        this.onExpressionDidChange();
        
        // handle undo/redo
        var id = this.id;
        var oldValue = this.domain.getOldProperty(property);
        var newValue = this.domain.getProperty(property);
        
        UndoRedo.addTransaction({
          type: UndoRedo.RESPONSE_TO_CHANGE,
          undo: function()  { list.getItemById(id).domain.setProperty(property, oldValue); },
          redo: function () { list.getItemById(id).domain.setProperty(property, newValue); }
        });
      }.bind(this));

      this.computeShouldGraph();
      
      this.observe('formula', this.onFormulaUpdate.bind(this));
      this.observe('latex color userRequestedGraphing', this.onStateDidChange.bind(this));
      this.observe('latex shouldGraph color', this.onExpressionDidChange.bind(this));
      this.observe('userRequestedGraphing', this.computeShouldGraph.bind(this));
      // TODO - I think we should call this.onExpressionDidChange here and
      // not in the expression list. The expression is responsible for
      // requestParse() on any change after it's created. It should be
      // responsible for the requestParse() immediately after it's created.
      // The only problem there is that it's not too certain when it's destroyed
      // and it'll still be up to the expression list to requestUnparse() it.
      // That would be solved if the expression had a 'inTheList' property that
      // we tripped when it was deleted. An alternative to this would be
      // for the expression itself to never call .requestParse() but for the
      // expression list to simply observe changes to the expression. I think
      // I like that better.
    };
    
    model.updateFolder = function () {
      _super.updateFolder.call(this);

      // TODO namespacing with the id seems kind of gross...
      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.id);
      }
      if (this.folder) {
        this.folder.observe(
          'hidden.' + this.id,
          this.computeShouldGraph.bind(this)
        );
      }
      this.computeShouldGraph();
    };
    
    model.computeShouldGraph = function () {
      var shouldGraph;
      if (this.folder && this.folder.hidden) {
        shouldGraph = false;
      } else {
        shouldGraph = (
          this.userRequestedGraphing === 'default' ||
          this.userRequestedGraphing === 'always'
        );
      }
      this.setProperty('shouldGraph', shouldGraph);
    };

    model.onExpressionDidChange = function() {
      if (this.domain.isValid()) {
        this.requestParse();
      }
    };

    model.getParsableObject = function () {
      //Work-around for bug in Mathquill / expression list
      // where on deletion of an expression via back-space key, Mathquill fires both an UpwardDelete
      // and a Render event.  UpwardDelete causes the expressionList to delete, and Render causes
      // expression list to fire another add request for the already deleted expression, which comes
      // in with latex === undefined.
      if(this.latex === undefined){
        return undefined;
      }

      return {
        type: 'statement',
        id: this.id,
        latex: this.latex,
        domain: this.domain.serialize(),
        shouldGraph: this.shouldGraph,
        color: this.color
      };
    };

    model.requestParse = function () {
      this.list.triggerAddExp(this.getParsableObject());
    };

    model.requestUnparse = function () {
      this.list.triggerRemoveExp(this.id);
    };

    model.getState = function() {
      var state = {
        id: this.id,
        latex: this.latex,
        domain: this.domain.serialize(),
        userRequestedGraphing: this.userRequestedGraphing,
        color: this.color
      };
 
     // TODO - change this to state.slider = this.slider.serialize() but can't
     // do that until we convert all previously saved graphs to have a slider
     // object rather than three global properties. We either need to do that
     // or we need to make the setState() function backwards compatible.
     if (this.slider) {
       state.sliderMin = this.slider.min;
       state.sliderMax = this.slider.max;
       state.sliderInterval = this.slider.step;
     }
 
     return state;
    };
    
    model.onFormulaUpdate = function () {
      var formula = this.formula;
      
      this.setProperty('error', formula.error ? formula.error : '');
      this.setProperty('isGraphable', formula.is_graphable);
      this.setProperty('dependent', formula.assignment);
      this.setProperty('isTableable', formula.is_tableable);
      
      // delay instantiation of a slider for this expression until we need one.
      // once created, the slider object won't be destroyed. The view for the
      // slider will though. The slider sticks around to save information about
      // limits. They'd get reset each time if we didn't keep the slider.
      if (formula.is_slidable && !this.slider) {
        this.createSliderModel();
      }
    };
    
    model.createSliderModel = function () {
      this.slider = SliderModel.deserialize({
        min: this.sliderMin !== undefined ? this.sliderMin : -10,
        max: this.sliderMax !== undefined ? this.sliderMax : 10,
        step: this.sliderInterval,
        value: this.formula.simple_constant,
        is_animatable: this.formula.is_animatable,
        playDirection: 1
      });

      var id = this.id;
      
      
      var list = this.list;

      this.slider.observe('step', function () {
        var oldStep = this.slider.getOldProperty('step');
        var newStep = this.slider.getProperty('step');
          
        UndoRedo.addTransaction({
          type: UndoRedo.RESPONSE_TO_CHANGE,
          undo: function() {
            list.getItemById(id).slider.setProperty('step', oldStep);
          },
          redo: function() {
            list.getItemById(id).slider.setProperty('step', newStep);
          }
        });
      }.bind(this));
        
      this.slider.observe('min', function () {
        var oldMin = this.slider.getOldProperty('min');
        var newMin = this.slider.getProperty('min');
        var oldValue = this.slider.getProperty('value');
        var oldLatex = newMin > oldValue ? this.latex : null;
        var newLatex = newMin > oldValue ? this._computeNewLatex(oldLatex, newMin) : null;
          
        UndoRedo.addTransaction({
          type: UndoRedo.CAUSE_OF_CHANGE,
          undo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('min', oldMin);
            if (oldLatex) {
              expression.setProperty('latex', oldLatex);
            }
          },
          redo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('min', newMin);
            if (newLatex) {
              expression.setProperty('latex', newLatex);
            }
          }
        });
      }.bind(this));
        
      this.slider.observe('max', function () {
        var oldMax = this.slider.getOldProperty('max');
        var newMax = this.slider.getProperty('max');
        var oldValue = this.slider.getProperty('value');
        var oldLatex = newMax < oldValue ? this.latex : null;
        var newLatex = newMax < oldValue ? this._computeNewLatex(oldLatex, newMax) : null;
          
        UndoRedo.addTransaction({
          type: UndoRedo.CAUSE_OF_CHANGE,
          undo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('max', oldMax);
            if (oldLatex) {
              expression.setProperty('latex', oldLatex);
            }
          },
          redo: function () {
            var expression =  list.getItemById(id);
            expression.slider.setProperty('max', newMax);
            if (newLatex) {
              expression.setProperty('latex', newLatex);
            }
          }
        });
      }.bind(this));
        
      this.slider.observe('value', function () {
        var newValue = this.slider.getProperty('value');

        // check if the new value is too big for the slider limits. If so,
        // we adjust the slider limits to enclose the value.
        var oldLimitValue=null;
        var narrowLimit = "";
        if (newValue < this.slider.min) {
          narrowLimit = "min";
          oldLimitValue = this.slider.min;
        } else if (newValue > this.slider.max) {
          narrowLimit = "max";
          oldLimitValue = this.slider.max;
        }

        if (narrowLimit) {
          UndoRedo.addTransaction({
            type: UndoRedo.BATCHED_CHANGE,
            undo: function() {
              var expression = list.getItemById(id);
              expression.slider.setProperty(narrowLimit, oldLimitValue);
            },
            redo: function() {
              var expression = list.getItemById(id);
              expression.slider.setProperty(narrowLimit, newValue);
            }
          });
        }
          
        // only update latex if change from slider view. if the value
        // changed from the user typing latex, then the latex will already be
        // updated and this will return early. If it's from the slider view,
        // the latex will not have updated, so let's update it now. We're
        // compressing multiple slider thumb moves into a single undo event.
        var oldLatex = this.latex;
        var newLatex = this._computeNewLatex(oldLatex, newValue);
        if (oldLatex === newLatex) return;

        UndoRedo.addTransaction({
          type: UndoRedo.CAUSE_OF_CHANGE,
          compressWith: "<commit_slider_value>",
          recordChange: false,
          undo: function() {
            var expression = list.getItemById(id);
            expression.setProperty('latex', oldLatex);
          },
          redo: function() {
            var expression = list.getItemById(id);
            expression.setProperty('latex', newLatex);
          }
        });
      }.bind(this));
    };

    model.isEmpty = function() {
      var latex = this.latex;
      return !latex || latex.split(" ").join("") === "";
    };
  });
  
  return ExpressionObject;
});

define('expressions/text',['require','pjs','./abstractitem'],function(require) {
  var P = require('pjs');
  var AbstractItemModel = require('./abstractitem');

  var TextObject = P(AbstractItemModel, function(model, _super) {
    model.isText = true;
    
    model.init = function (state, list) {
      _super.init.call(this, state, list);
      
      if (!this.text) this.text = '';
      this.observe('text', this.onStateDidChange.bind(this));
    };
    
    model.isEmpty = function() {
      return this.text.split(" ").join("") === "";
    };
    
    model.getState = function() {
      return {
        id: this.id,
        text: this.text
      };
    };
  });
  
  return TextObject;
});

//Utilities for tracking feature usage.
//Not just using straight event tracking because we want to do things like:
// * Record only the discovery of a feature
// * Record only a sub-sample of feature uses
define('lib/track_feature',['require'],function(require) {
  
  var discovered = {};

  var discover = function(name){
    if(discovered.hasOwnProperty(name)) return;
    discovered[name] = true;
  };

  var use = function(name){
    sample_usage(name, 1);
  };

  var sample_usage = function(name, n){
    //n should be n integer >= 1
    //Feature usage will be reported 1/n of the time, with a property which records the current n
    //In analytics, summing over this property should give a good estimate of total uses
    //Setting n = 1 will report every instance
    discover(name); //Always report if it's the first usage in a session
    if(Math.random() > 1/n) return;
    var params = {};
    params['E('+name+')'] = n;
  };

  return {
    discover: discover,
    use: use,
    sample_usage: sample_usage
  };
});

/* big.js v1.0.1 https://github.com/MikeMcl/big.js/LICENCE */
;(function ( global ) {
    

    /*
      big.js v1.0.1
      A small, fast Javascript library for arbitrary-precision arithmetic with decimal numbers. 
      https://github.com/MikeMcl/big.js/
      Copyright (c) 2012 Michael Mclaughlin <M8ch88l@gmail.com>
      MIT Expat Licence
    */

    /****************************** EDITABLE DEFAULTS **********************************/


    // The default values below must be integers within the stated ranges (inclusive).

    /*
     * The maximum number of decimal places of the results of methods involving
     * division, i.e. 'div' and 'sqrt', and 'pow' with negative exponents.
     */
    Big['DP'] = 20;                                  // 0 to MAX_DP

    /*
     * The rounding mode used when rounding to the above decimal places.
     *
     * 0 Round towards zero (i.e. truncate, no rounding).               (ROUND_DOWN     )
     * 1 Round to nearest neighbour. If equidistant, round up.          (ROUND_HALF_UP  )
     * 2 Round to nearest neighbour. If equidistant, to even neighbour. (ROUND_HALF_EVEN)
     */
    Big['RM'] = 1;                                   // 0, 1 or 2

        // The maximum value of 'Big.DP'.
    var MAX_DP = 1E6,                                // 0 to 1e+6

        // The maximum magnitude of the exponent argument to the 'pow' method.
        MAX_POWER = 1E6,                             // 1 to 1e+6

        /*
         * The exponent value at and beneath which 'toString' returns exponential notation.
         * Javascript's Number type: -7
         * -1e+6 is the minimum recommended exponent value of a 'Big'.
         */
        TO_EXP_NEG = -7,                             // 0 to -1e+6

        /*
         * The exponent value at and above which 'toString' returns exponential notation.
         * Javascript's Number type: 21
         * 1e+6 is the maximum recommended exponent value of a 'Big', though there is no
         * enforcing or checking of a limit.
         */
        TO_EXP_POS = 21,                             // 0 to 1e+6


    /***********************************************************************************/

        P = Big.prototype,
        isValid = /^-?\d+(?:\.\d+)?(?:e[+-]?\d+)?$/i,
        ONE = new Big(1);


    // CONSTRUCTOR


    /*
     * The exported function.
     * Create and return a new instance of a 'Big' object.
     *
     * n {number|string|Big} A numeric value.
     */
    function Big( n ) {
        var i, j, nL,
            x = this;

        // Enable constructor usage without new.
        if ( !(x instanceof Big) ) {
            return new Big( n )
        }

        // Duplicate.
        if ( n instanceof Big ) {
            x['s'] = n['s'];
            x['e'] = n['e'];
            x['c'] = n['c'].slice();
            return
        }

        // Minus zero?
        if ( n === 0 && 1 / n < 0 ) {
            n = '-0'
        // Ensure 'n' is string and check validity.
        } else if ( !isValid.test(n += '') ) {
            throw NaN
        }

        // Determine sign.
        x['s'] = n.charAt(0) == '-' ? ( n = n.slice(1), -1 ) : 1;

        // Decimal point?
        if ( ( i = n.indexOf('.') ) > -1 ) {
            n = n.replace( '.', '' )
        }

        // Exponential form?
        if ( ( j = n.search(/e/i) ) > 0 ) {

            // Determine exponent.
            if ( i < 0 ) {
                i = j
            }
            i += +n.slice( j + 1 );
            n = n.substring( 0, j )

        } else if ( i < 0 ) {

            // Integer.
            i = n.length
        }

        // Determine leading zeros.
        for ( j = 0; n.charAt(j) == '0'; j++ ) {
        }

        if ( j == ( nL = n.length ) ) {

            // Zero.
            x['c'] = [ x['e'] = 0 ]
        } else {

            // Determine trailing zeros.
            for ( ; n.charAt(--nL) == '0'; ) {
            }

            x['e'] = i - j - 1;
            x['c'] = [];

            // Convert string to array of digits (without leading and trailing zeros).
            for ( i = 0; j <= nL; x['c'][i++] = +n.charAt(j++) ) {
            }
        }
    }


    // PRIVATE FUNCTIONS


    /*
     * Round 'Big' 'x' to a maximum of 'dp' decimal places using rounding mode
     * 'rm'. (Called by 'div', 'sqrt' and 'round'.)
     *
     * x {Big} The 'Big' to round.
     * dp {number} Integer, 0 to MAX_DP inclusive.
     * rm {number} 0, 1 or 2 ( ROUND_DOWN, ROUND_HALF_UP or ROUND_HALF_EVEN )
     * [more] {boolean} Whether the result of division was truncated.
     */
    function rnd( x, dp, rm, more ) {
        var xc = x['c'],
            i = x['e'] + dp + 1;

        if ( rm !== 0 && rm !== 1 && rm !== 2 ) {
            throw '!Big.RM!'
        }

        // 'xc[i]' is the digit after the digit that may be rounded up.
        rm = rm && ( xc[i] > 5 || xc[i] == 5 &&
          ( rm == 1 || more || i < 0 || xc[i + 1] != null || xc[i - 1] & 1 ) );

        if ( i < 1 || !xc[0] ) {
            x['c'] = rm
              // 1, 0.1, 0.01, 0.001, 0.0001 etc.
              ? ( x['e'] = -dp, [1] )
              // Zero.
              : [ x['e'] = 0 ];
        } else {

            // Remove any digits after the required decimal places.
            xc.length = i--;

            // Round up?
            if ( rm ) {

                // Rounding up may mean the previous digit has to be rounded up and so on.
                for ( ; ++xc[i] > 9; ) {
                    xc[i] = 0;

                    if ( !i-- ) {
                        ++x['e'];
                        xc.unshift(1)
                    }
                }
            }

            // Remove trailing zeros.
            for ( i = xc.length; !xc[--i]; xc.pop() ) {
            }
        }

        return x
    }


    // PROTOTYPE/INSTANCE METHODS


    /*
     * Return
     * 1 if the value of this 'Big' is greater than the value of 'Big' 'y',
     * -1 if the value of this 'Big' is less than the value of 'Big' 'y', or
     * 0 if they have the same value,
     */
    P['cmp'] = function ( y ) {
        var xNeg,
            x = this,
            xc = x['c'],
            yc = ( y = new Big( y ) )['c'],
            i = x['s'],
            j = y['s'],
            k = x['e'],
            l = y['e'];

        // Either zero?
        if ( !xc[0] || !yc[0] ) {
            return !xc[0] ? !yc[0] ? 0 : -j : i
        }

        // Signs differ?
        if ( i != j ) {
            return i
        }
        xNeg = i < 0;

        // Compare exponents.
        if ( k != l ) {
            return k > l ^ xNeg ? 1 : -1
        }

        // Compare digit by digit.
        for ( i = -1,
              j = ( k = xc.length ) < ( l = yc.length ) ? k : l;
              ++i < j; ) {

            if ( xc[i] != yc[i] ) {
                return xc[i] > yc[i] ^ xNeg ? 1 : -1
            }
        }

        // Compare lengths.
        return k == l ? 0 : k > l ^ xNeg ? 1 : -1
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' divided by the
     * value of 'Big' 'y', rounded, if necessary, to a maximum of 'Big.DP'
     * decimal places using rounding mode 'Big.RM'.
     */
    P['div'] = function ( y ) {
        var x = this,
            dvd = x['c'],
            dvs = ( y = new Big(y) )['c'],
            s = x['s'] == y['s'] ? 1 : -1,
            dp = Big['DP'];

        if ( dp !== ~~dp || dp < 0 || dp > MAX_DP ) {
            throw '!Big.DP!'
        }

        // Either 0?
        if ( !dvd[0] || !dvs[0] ) {

            // Both 0?
            if ( dvd[0] == dvs[0] ) {
                throw NaN
            }

            // 'dvs' is 0?
            if ( !dvs[0] ) {
                // Throw +-Infinity.
                throw s / 0
            }

            // 'dvd' is 0. Return +-0.
            return new Big( s * 0 )
        }


        var dvsL, dvsT, next, cmp, remI,
            dvsZ = dvs.slice(),
            dvdI = dvsL = dvs.length,
            dvdL = dvd.length,
            rem = dvd.slice( 0, dvsL ),
            remL = rem.length,
            quo = new Big(ONE),
            qc = quo['c'] = [],
            qi = 0,
            digits = dp + ( quo['e'] = x['e'] - y['e'] ) + 1;

        quo['s'] = s;
        s = digits < 0 ? 0 : digits;

        // Create version of divisor with leading zero.
        dvsZ.unshift(0);

        // Add zeros to make remainder as long as divisor.
        for ( ; remL++ < dvsL; rem.push(0) ) {
        }

        do {

            // 'next' is how many times the divisor goes into the current remainder.
            for ( next = 0; next < 10; next++ ) {

                // Compare divisor and remainder.
                if ( dvsL != ( remL = rem.length ) ) {
                    cmp = dvsL > remL ? 1 : -1
                } else {
                    for ( remI = -1, cmp = 0; ++remI < dvsL; ) {

                        if ( dvs[remI] != rem[remI] ) {
                            cmp = dvs[remI] > rem[remI] ? 1 : -1;
                            break
                        }
                    }
                }

                // Subtract divisor from remainder (if divisor < remainder).
                if ( cmp < 0 ) {

                    // Remainder cannot be more than one digit longer than divisor.
                    // Equalise lengths using divisor with extra leading zero?
                    for ( dvsT = remL == dvsL ? dvs : dvsZ; remL; ) {

                        if ( rem[--remL] < dvsT[remL] ) {

                            for ( remI = remL;
                                  remI && !rem[--remI];
                                  rem[remI] = 9 ) {
                            }
                            --rem[remI];
                            rem[remL] += 10
                        }
                        rem[remL] -= dvsT[remL]
                    }
                    for ( ; !rem[0]; rem.shift() ) {
                    }
                } else {
                    break
                }
            }

            // Add the 'next' digit to the result array.
            qc[qi++] = cmp ? next : ++next;

            // Update the remainder.
            rem[0] && cmp
              ? ( rem[remL] = dvd[dvdI] || 0 )
              : ( rem = [ dvd[dvdI] ] )

        } while ( ( dvdI++ < dvdL || rem[0] != null ) && s-- );

        // Leading zero? Do not remove if result is simply zero (qi == 1).
        if ( !qc[0] && qi != 1) {

            // There can't be more than one zero.
            qc.shift();
            quo['e']--;
        }

        // Round?
        if ( qi > digits ) {
            rnd( quo, dp, Big['RM'], rem[0] != null )
        }

        return quo
    }


    /*
     * Return a new 'Big' whose value is the value of this 'Big' minus the value
     * of 'Big' 'y'.
     */
    P['minus'] = function ( y ) {
        var d, i, j, xLTy,
            x = this,
            a = x['s'],
            b = ( y = new Big( y ) )['s'];

        // Signs differ?
        if ( a != b ) {
            return y['s'] = -b, x['plus'](y)
        }

        var xc = x['c'],
            xe = x['e'],
            yc = y['c'],
            ye = y['e'];

        // Either zero?
        if ( !xc[0] || !yc[0] ) {

            // 'y' is non-zero?
            return yc[0]
              ? ( y['s'] = -b, y )
              // 'x' is non-zero?
              : new Big( xc[0]
                ? x
                // Both are zero.
                : 0 )
        }

        // Determine which is the bigger number.
        // Prepend zeros to equalise exponents.
        if ( xc = xc.slice(), a = xe - ye ) {
            d = ( xLTy = a < 0 ) ? ( a = -a, xc ) : ( ye = xe, yc );

            for ( d.reverse(), b = a; b--; d.push(0) ) {
            }
            d.reverse()
        } else {

            // Exponents equal. Check digit by digit.
            j = ( ( xLTy = xc.length < yc.length ) ? xc : yc ).length;

            for ( a = b = 0; b < j; b++ ) {

                if ( xc[b] != yc[b] ) {
                    xLTy = xc[b] < yc[b];
                    break
                }
            }
        }

        // 'x' < 'y'? Point 'xc' to the array of the bigger number.
        if ( xLTy ) {
            d = xc, xc = yc, yc = d;
            y['s'] = -y['s']
        }

        /*
         * Append zeros to 'xc' if shorter. No need to add zeros to 'yc' if shorter
         * as subtraction only needs to start at 'yc.length'.
         */
        if ( ( b = -( ( j = xc.length ) - yc.length ) ) > 0 ) {

            for ( ; b--; xc[j++] = 0 ) {
            }
        }

        // Subtract 'yc' from 'xc'.
        for ( b = yc.length; b > a; ){

            if ( xc[--b] < yc[b] ) {

                for ( i = b; i && !xc[--i]; xc[i] = 9 ) {
                }
                --xc[i];
                xc[b] += 10
            }
            xc[b] -= yc[b]
        }

        // Remove trailing zeros.
        for ( ; xc[--j] == 0; xc.pop() ) {
        }

        // Remove leading zeros and adbust exponent accordingly.
        for ( ; xc[0] == 0; xc.shift(), --ye ) {
        }

        if ( !xc[0] ) {

            // Result must be zero.
            xc = [ye = 0]
        }

        return y['c'] = xc, y['e'] = ye, y
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' modulo the
     * value of 'Big' 'y'.
     */
    P['mod'] = function ( y ) {
        y = new Big( y );
        var c,
            x = this,
            i = x['s'],
            j = y['s'];

        if ( !y['c'][0] ) {
            throw NaN
        }

        x['s'] = y['s'] = 1;
        c = y['cmp'](x) == 1;
        x['s'] = i, y['s'] = j;

        return c
          ? new Big(x)
          : ( i = Big['DP'], j = Big['RM'],
            Big['DP'] = Big['RM'] = 0,
              x = x['div'](y),
                Big['DP'] = i, Big['RM'] = j,
                  this['minus']( x['times'](y) ) )
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' plus the value
     * of 'Big' 'y'.
     */
    P['plus'] = function ( y ) {
        var d,
            x = this,
            a = x['s'],
            b = ( y = new Big( y ) )['s'];

        // Signs differ?
        if ( a != b ) {
            return y['s'] = -b, x['minus'](y)
        }

        var xe = x['e'],
            xc = x['c'],
            ye = y['e'],
            yc = y['c'];

        // Either zero?
        if ( !xc[0] || !yc[0] ) {

            // 'y' is non-zero?
            return yc[0]
              ? y
              : new Big( xc[0]

                // 'x' is non-zero?
                ? x

                // Both are zero. Return zero.
                : a * 0 )
        }

        // Prepend zeros to equalise exponents.
        // Note: Faster to use reverse then do unshifts.
        if ( xc = xc.slice(), a = xe - ye ) {
            d = a > 0 ? ( ye = xe, yc ) : ( a = -a, xc );

            for ( d.reverse(); a--; d.push(0) ) {
            }
            d.reverse()
        }

        // Point 'xc' to the longer array.
        if ( xc.length - yc.length < 0 ) {
            d = yc, yc = xc, xc = d
        }

        /*
         * Only start adding at 'yc.length - 1' as the
         * further digits of 'xc' can be left as they are.
         */
        for ( a = yc.length, b = 0; a;
             b = ( xc[--a] = xc[a] + yc[a] + b ) / 10 ^ 0, xc[a] %= 10 ) {
        }

        // No need to check for zero, as +x + +y != 0 && -x + -y != 0

        if ( b ) {
            xc.unshift(b);
            ++ye
        }

         // Remove trailing zeros.
        for ( a = xc.length; xc[--a] == 0; xc.pop() ) {
        }

        return y['c'] = xc, y['e'] = ye, y
    };


    /*
     * Return a 'Big' whose value is the value of this 'Big' raised to the power
     * 'e'. If 'e' is negative, round, if necessary, to a maximum of 'Big.DP'
     * decimal places using rounding mode 'Big.RM'.
     *
     * e {number} Integer, -MAX_POWER to MAX_POWER inclusive.
     */
    P['pow'] = function ( e ) {
        var isNeg = e < 0,
            x = new Big(this),
            y = ONE;

        if ( e !== ~~e || e < -MAX_POWER || e > MAX_POWER ) {
            throw '!pow!'
        }

        for ( e = isNeg ? -e : e; ; ) {

            if ( e & 1 ) {
                y = y['times'](x)
            }
            e >>= 1;

            if ( !e ) {
                break
            }
            x = x['times'](x)
        }

        return isNeg ? ONE['div'](y) : y
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' rounded, if
     * necessary, to a maximum of 'dp' decimal places using rounding mode 'rm'.
     * If 'dp' is not specified, round to 0 decimal places.
     * If 'rm' is not specified, use 'Big.RM'.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     * [rm] 0, 1 or 2 ( i.e. ROUND_DOWN, ROUND_HALF_UP or ROUND_HALF_EVEN )
     */
    P['round'] = function ( dp, rm ) {
        var x = new Big(this);

        if ( dp == null ) {
            dp = 0
        } else if ( dp !== ~~dp || dp < 0 || dp > MAX_DP ) {
            throw '!round!'
        }
        rnd( x, dp, rm == null ? Big['RM'] : rm );

        return x
    };


    /*
     * Return a new 'Big' whose value is the square root of the value of this
     * 'Big', rounded, if necessary, to a maximum of 'Big.DP' decimal places
     * using rounding mode 'Big.RM'.
     */
    P['sqrt'] = function () {
        var estimate, r, approx,
            x = this,
            xc = x['c'],
            i = x['s'],
            e = x['e'],
            half = new Big('0.5');

        // Zero?
        if ( !xc[0] ) {
            return new Big(x)
        }

        // Negative?
        if ( i < 0 ) {
            throw NaN
        }

        // Estimate.
        i = Math.sqrt( x.toString() );

        // Math.sqrt underflow/overflow?
        // Pass 'x' to Math.sqrt as integer, then adjust the exponent of the result.
        if ( i == 0 || i == 1 / 0 ) {
            estimate = xc.join('');

            if ( !( estimate.length + e & 1 ) ) {
                estimate += '0'
            }

            r = new Big( Math.sqrt(estimate).toString() );
            r['e'] = ( ( ( e + 1 ) / 2 ) | 0 ) - ( e < 0 || e & 1 )
        } else {
            r = new Big( i.toString() )
        }

        i = r['e'] + ( Big['DP'] += 4 );

        // Newton-Raphson loop.
        do {
            approx = r;
            r = half['times']( approx['plus']( x['div'](approx) ) )
        } while ( approx['c'].slice( 0, i ).join('') !==
                       r['c'].slice( 0, i ).join('') );

        rnd( r, Big['DP'] -= 4, Big['RM'] );

        return r
    };


    /*
     * Return a new 'Big' whose value is the value of this 'Big' times the value
     * of 'Big' 'y'.
     */
    P['times'] = function ( y ) {
        var c,
            x = this,
            xc = x['c'],
            yc = ( y = new Big( y ) )['c'],
            a = xc.length,
            b = yc.length,
            i = x['e'],
            j = y['e'];

        y['s'] = x['s'] == y['s'] ? 1 : -1;

        // Either 0?
        if ( !xc[0] || !yc[0] ) {

            return new Big( y['s'] * 0 )
        }

        y['e'] = i + j;

        if ( a < b ) {
            c = xc, xc = yc, yc = c, j = a, a = b, b = j
        }

        for ( j = a + b, c = []; j--; c.push(0) ) {
        }

        // Multiply!
        for ( i = b - 1; i > -1; i-- ) {

            for ( b = 0, j = a + i;
                  j > i;
                  b = c[j] + yc[i] * xc[j - i - 1] + b,
                  c[j--] = b % 10 | 0,
                  b = b / 10 | 0 ) {
            }

            if ( b ) {
                c[j] = ( c[j] + b ) % 10
            }
        }

        b && ++y['e'];

        // Remove any leading zero.
        !c[0] && c.shift();

        // Remove trailing zeros.
        for ( j = c.length; !c[--j]; c.pop() ) {
        }

        return y['c'] = c, y
    };


    /*
     * Return a string representing the value of this 'Big'.
     * Return exponential notation if this 'Big' has a positive exponent equal
     * to or greater than 'TO_EXP_POS', or a negative exponent equal to or less
     * than 'TO_EXP_NEG'.
     */
    P['toString'] = P['valueOf'] = function () {
        var x = this,
            e = x['e'],
            str = x['c'].join(''),
            strL = str.length;

        // Exponential notation?
        if ( e <= TO_EXP_NEG || e >= TO_EXP_POS ) {
            str = str.charAt(0) + ( strL > 1 ?  '.' + str.slice(1) : '' ) +
              ( e < 0 ? 'e' : 'e+' ) + e

        // Negative exponent?
        } else if ( e < 0 ) {

        // Prepend zeros.
            for ( ; ++e; str = '0' + str ) {
            }
            str = '0.' + str

        // Positive exponent?
        } else if ( e > 0 ) {

            if ( ++e > strL ) {

                // Append zeros.
                for ( e -= strL; e-- ; str += '0' ) {
                }
            } else if ( e < strL ) {
                str = str.slice( 0, e ) + '.' + str.slice(e)
            }

        // Exponent zero.
        } else if ( strL > 1 ) {
            str = str.charAt(0) + '.' + str.slice(1)
        }

        // Avoid '-0'
        return x['s'] < 0 && x['c'][0] ? '-' + str : str
    };


    /*
     ***************************************************************************
     *
     * If 'toExponential', 'toFixed', 'toPrecision' and 'format' are not
     * required they can safely be commented-out or deleted. No redundant code
     * will be left. 'format' is used only by 'toExponential', 'toFixed' and
     * 'toPrecision'.
     *
     ***************************************************************************
     */
     

    /*
     * PRIVATE FUNCTION
     *
     * Return a string representing the value of 'Big' 'x' in normal or
     * exponential notation to a fixed number of decimal places or significant
     * digits 'dp'.
     * (Called by toString, toExponential, toFixed and toPrecision.)
     *
     * x {Big} The 'Big' to format.
     * dp {number} Integer, 0 to MAX_DP inclusive.
     * toE {number} undefined (toFixed), 1 (toExponential) or 2 (toPrecision).
     */
    function format( x, dp, toE ) {
        // The index (in normal notation) of the digit that may be rounded up.
        var i = dp - ( x = new Big(x) )['e'],
            c = x['c'];

        // Round?
        if ( c.length > ++dp ) {
            rnd( x, i, Big['RM'] )
        }

        // Recalculate 'i' if toFixed as 'x.e' may have changed if value rounded up.
        i = !c[0] ? i + 1 : toE ? dp : ( c = x['c'], x['e'] + i + 1 );

        // Append zeros?
        for ( ; c.length < i; c.push(0) ) {
        }
        i = x['e'];

        /*
         * 'toPrecision' returns exponential notation if the number of
         * significant digits specified is less than the number of digits
         * necessary to represent the integer part of the value in normal
         * notation.
         */
        return toE == 1 || toE == 2 && ( dp <= i || i <= TO_EXP_NEG )

            // Exponential notation.
            ? ( x['s'] < 0 && c[0] ? '-' : '' ) + ( c.length > 1
              ? ( c.splice( 1, 0, '.' ), c.join('') )
              : c[0] ) + ( i < 0 ? 'e' : 'e+' ) + i

            // Normal notation.
            : x.toString()
    }


    /*
     * Return a string representing the value of this 'Big' in exponential
     * notation to 'dp' fixed decimal places and rounded, if necessary, using
     * 'Big.RM'.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     */
    P['toExponential'] = function ( dp ) {

        if ( dp == null ) {
            dp = this['c'].length - 1
        } else if ( dp !== ~~dp || dp < 0 || dp > MAX_DP ) {
            throw '!toExp!'
        }

        return format( this, dp, 1 )
    };


    /*
     * Return a string representing the value of this 'Big' in normal notation
     * to 'dp' fixed decimal places and rounded, if necessary, using 'Big.RM'.
     *
     * [dp] {number} Integer, 0 to MAX_DP inclusive.
     */
    P['toFixed'] = function ( dp ) {
        var str,
            x = this,
            neg = TO_EXP_NEG,
            pos = TO_EXP_POS;

        TO_EXP_NEG = -( TO_EXP_POS = 1 / 0 );

        if ( dp == null ) {
            str = x.toString()
        } else if ( dp === ~~dp && dp >= 0 && dp <= MAX_DP ) {
            str = format( x, x['e'] + dp );

            // (-0).toFixed() is '0', but (-0.1).toFixed() is '-0'.
            // (-0).toFixed(1) is '0.0', but (-0.01).toFixed(1) is '-0.0'.
            if ( x['s'] < 0 && x['c'][0] && str.indexOf('-') < 0 ) {
                // As e.g. -0.5 if rounded to -0 will cause toString to omit the minus sign.
                str = '-' + str
            }
        }
        TO_EXP_NEG = neg, TO_EXP_POS = pos;

        if ( !str ) {
            throw '!toFix!'
        }

        return str
    };


    /*
     * Return a string representing the value of this 'Big' to 'sd' significant
     * digits and rounded, if necessary, using 'Big.RM'. If 'sd' is less than
     * the number of digits necessary to represent the integer part of the value
     * in normal notation, then use exponential notation.
     *
     * sd {number} Integer, 1 to MAX_DP inclusive.
     */
    P['toPrecision'] = function ( sd ) {

        if ( sd == null ) {
            return this.toString()
        } else if ( sd !== ~~sd || sd < 1 || sd > MAX_DP ) {
            throw '!toPre!'
        }

        return format( this, sd - 1, 2 )
    };


    // EXPORT


    // Node and other CommonJS-like environments that support module.exports.
    if ( typeof module !== 'undefined' && module.exports ) {
        module.exports = Big

    //AMD.
    } else if ( typeof define == 'function' && define.amd ) {
        define('vendor/big',[], function () {
            return Big
        })

    //Browser.
    } else {
        global['Big'] = Big
    }

})( this );

define('big',['require','vendor/big'],function(require){
  var Big = require('vendor/big');
  Big.prototype.equals = function (x) { return this.cmp(x) === 0; };
  return Big;
});

define('expressions/table',['require','underscore','pjs','lib/underscore_model','graphing/columnmode','lib/track_feature','big','./abstractitem','./colors','undoredo'],function(require) {
  var _ = require('underscore');
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');
  var COLUMNMODE = require('graphing/columnmode');
  var Feature = require('lib/track_feature');
  var Big = require('big');
  var AbstractItemModel = require('./abstractitem');
  var Colors = require('./colors');
  var UndoRedo = require('undoredo');

  var Cell = P(UnderscoreModel, function (cellModel, _super) {
    
    cellModel.init = function (column, state) {
      _super.init.call(this);
      
      this.column = column;
      
      if (state) {
        this.value = state.value;
        this.error = state.error;
      }
    };
    
    cellModel.isEmpty = function () {
      return this.value.split(' ').join("") === '';
    };
  });
  
  
  var Column = P(AbstractItemModel, function(colModel, _super) {
    
    colModel.init = function (table, index, state) {

      // backwards compatibility:
      // used to used showLine and showPoints
      // now we use hidden and columnMode
      if (state.showPoints !== undefined || state.showLine !== undefined) {
        state = JSON.parse(JSON.stringify(state)); // make copy so we don't modify passed in state

        if (state.showPoints && state.showLine) {
          state.columnMode = COLUMNMODE.POINTS_AND_LINES;
        } else if (state.showPoints) {
          state.columnMode = COLUMNMODE.POINTS;
        } else if (state.showLine) {
          state.columnMode = COLUMNMODE.LINES;
        } else {
          state.hidden = true;
          state.columnMode = COLUMNMODE.POINTS;
        }
      }

      // default values
      this.latex = '';
      this.hidden = false;
      this.columnMode = COLUMNMODE.POINTS;
      this.values = [];
      this.error = '';

      _super.init.call(this, state);

      if (!this.color) {
        this.color =  Colors.next();
      }

      // any column other than the first should generate the correct number
      // of blank cells if none are passed in.
      if (index !== 0 && this.values.length === 0 && table.columns[0].cells) {
        this.values = []; // don't want to modify array passed in through 'state'
        var len = table.columns[0].cells.length;
        for (var i=0; i<len; i++) {
          this.values.push('');
        }
      }
            
      // map cells from raw values to objects
      var self = this;
      this.cells = this.values.map(function (value) {
        return Cell(self, {value: String(value)});
      });
      delete this.values;

      this.table = table;
      this.index = index;
      
      // first column can't be graphed
      if (index === 0) {
        this.hidden = true;
      }
      
      // observers
      this.isGraphable = !this.error;
      this.observe('error', function () {
        this.setProperty('isGraphable', !this.error);
      }.bind(this));
      // TODO - probably not have selected property on the model
      this.observe('selected', this.onSelectedDidChange.bind(this));
      this.observe('color columnMode hidden latex', this.onStateChange.bind(this));
      
      // need to factor in whether the table is forcing the column hidden
      this.observe('hidden hiddenByTable', this.computeShouldGraph.bind(this));
      this.computeShouldGraph();
      this.observe('shouldGraph', this.table.requestParse.bind(this.table));
    };
    
    colModel.computeShouldGraph = function () {
      this.setProperty('shouldGraph', !this.hiddenByTable && !this.hidden);
    };
    
    colModel.onStateChange = function (property) {
      this.table.requestParse();
      
      var id = this.table.id;
      var index = this.index;
      var list = this.table.list;
      function getColumn () {
        return list.getItemById(id).columns[index];
      }
      
      var oldValue = this.getOldProperty(property);
      var newValue = this.getProperty(property);
      UndoRedo.addTransaction({
        type: UndoRedo.RESPONSE_TO_CHANGE,
        undo: function () { getColumn().setProperty(property, oldValue); },
        redo: function () { getColumn().setProperty(property, newValue); }
      });
    };
    
    colModel.isEmpty = function () {
      return this.latex.split(" ").join(" ") === "";
    };
    
    colModel.getValues = function () {
      var vals = [];
      var len = this.cells.length;
      for (var i=0; i < len; i++) {
        var val = this.cells[i].value;
        if (val === null || val === undefined) {
          vals.push('');
        } else {
          vals.push(String(val));
        }
      }
      
      return vals;
    };
    
    colModel.triggerRowChange = function () {};

    colModel.insertCell = function (index, value) {
      var cell = Cell(this, {value: value});
      this.cells.splice(index, 0, cell);
    };
    
    colModel.removeCell = function (index) {
      this.cells.splice(index, 1);
    };
    
    // it's possible to select the headers during trace, so we need
    // to make sure we focus the header too
    colModel.onSelectedDidChange = function () {
      // TODO - need a way to check if focused. Maybe check if mathquill
      // hasClass('hasCursor')
      if (this.selected && !this.focused) {
        var view = this.list.getItemView(this.table.id);
        if (!view) return;
        
        view.selectCell(0, this.index);
      }
    };
    
    function formatValuesForDisplay (values) {
      var vals = [];
      
      for (var i=0; i<values.length; i++) {
        var value = values[i];
        var val_str = '';
        if (_.isNumber(value)) {
          val_str = String(Number(Number(value).toFixed(4)));
          val_str = val_str.replace("NaN", "Undefined");
        }
  
        vals.push(val_str);
      }
      
      return vals;
    }
    
    colModel.setComputedValues = function (c_data) {
    
      //Track discovering dependent columns
      if(!c_data.error && c_data.dependent) Feature.discover('dependent table columns');

      // TODO - get the worker to pass back a blank array. It'll be important
      // for when we check that the size of the output matches the size of the
      // table. If there is a size mismatch, we must throw the computations
      // away because they are stale.
      
      // the worker thread doesn't pass back a list of values in this case.
      // we need to build list of null values
      if (c_data.values.length === 0 && c_data.error) {
        for (var i=0; i<this.cells.length-1; i++) {
          c_data.values[i] = null;
        }
      }
      

      this.setProperty('error', c_data.error);
      this.setProperty('discrete', c_data.discrete);
      this.setProperty('disabled', c_data.dependent);
      this.setErrors(c_data.values);
      
      if (c_data.dependent) {
           
        // if we haven't saved the independent values, save them now before
        // they get overwritten with the values sent back from the evaluator.
        if (!this.independentValues) {
          this.independentValues = this.getValues();
        }
            
        this.setValues(formatValuesForDisplay(c_data.values));
      } else if (this.independentValues) {
            
        // set the indepentedValues back.
        this.setValues(this.independentValues);
            
        // clear out the cached independent values.
        this.independentValues = null;
      }
    };
    
    colModel.setValues = function (values) {
      for (var i=0; i<values.length; i++) {
        this.cells[i].setProperty('value', String(values[i]));
      }
    };
    
    colModel.setErrors = function (values) {
      // if the computed value is a string, then it's an error
      for (var i=0; i<values.length; i++) {
        if (typeof values[i] === "string") {
          this.cells[i].setProperty('error', values[i]);
        } else {
          this.cells[i].setProperty('error', '');
        }
      }
    };
    
    colModel.serialize = function () {
      return {
        values: this.getValues(),
        columnMode: this.columnMode,
        hidden: this.hidden,
        id: this.id,
        color: this.color,
        latex: this.latex
      };
    };
    
  });
  
  var TableObject = P(AbstractItemModel, function(model, _super) {
    
    model.isTable = true;

    model.init = function (state, list) {
      var r, c;
      _super.init.call(this, state, list);
      
      this.list = list;
      this.selectedCell = null;
      
      // TODO - get rid of this when we upgrade states in DB
      // what we used to call 'headings' is now 'columns'
      if (this.headings) {
        this.columns = this.headings;
        delete this.headings;
      }
      
      // TODO - get rid of this when we upgrade states in DB
      // what used to be 'rows' is now transposed and part of each column
      if (this.rows) {
        for (c=0; c<this.columns.length; c++) {
          var column = this.columns[c];
          column.values = [];
          
          for (r=0; r<this.rows.length; r++) {
            column.values.push(this.rows[r][c]);
          }
        }
        
        delete this.rows;
      }
      
      // map raw columns to Column objects
      var self = this;
      if (!this.columns) this.columns = [];
      this.columns = this.columns.map(function(col_state, index){
        return Column(self, index, col_state);
      });
      
      // add a column to the right
      this.columns.push(Column(this, this.columns.length, {disabled: true}));
      
      // add a bottom row of empty values
      var lastRow = this.columns[0].cells.length;
      _.each(this.columns, function (column) {
        column.insertCell(lastRow, '');
      });
      
      // observers
      this.observe('selected', this.onSelectedChange.bind(this));
    };
    
    model.updateFolder = function () {
      _super.updateFolder.call(this);


      // TODO namespacing with the id seems kind of gross...
      if (this.getOldProperty('folder')) {
        this.getOldProperty('folder').unobserve('.' + this.id);
      }
      if (this.folder) {
        this.folder.observe(
          'hidden.' + this.id,
          this.computeColumnsHidden.bind(this)
        );
      }
      this.computeColumnsHidden();
    };
    
    model.computeColumnsHidden = function () {
      var hidden = this.folder && this.folder.hidden;
      
      _.each(this.columns, function (column) {
        column.setProperty('hiddenByTable', hidden);
      });
    };
    
    model.onSelectedChange = function () {
      if (!this.selected) {
        this.setProperty('selectedCell', null);
      }
    };
    
    model.insertColumn = function (index, column) {
    
      var id = this.id;
      var list = this.list;
      UndoRedo.addTransaction({
        type: UndoRedo.CAUSE_OF_CHANGE,
    
        undo: function () {
          var table = list.getItemById(id);
          table.__removeColumn(index);
        },
    
        redo: function () {
          var table = list.getItemById(id);
          table.__insertColumn(index, column);
          
          // need to update reference to heading so that
          // next time we press redo, we pass in the complete
          // heading info. This makes sure the next redo uses
          // the same color and id as the original column that
          // was later deleted and then restored.
          column = table.columns[index].serialize();
        }
      });
      
    };
    
    model.removeColumn = function (index) {
      
      var id = this.id;
      var column = this.columns[index].serialize();
      var list = this.list;
      UndoRedo.addTransaction({
        type: UndoRedo.CAUSE_OF_CHANGE,
    
        undo: function () {
          var table = list.getItemById(id);
          table.__insertColumn(index, column);
        },
    
        redo: function () {
          var table = list.getItemById(id);
          table.__removeColumn(index);
        }
      });
    };
    
    model.moveColumn = function (from, to) {
      var id = this.id;
      var list = this.list;
      
      UndoRedo.addTransaction({
        type: UndoRedo.CAUSE_OF_CHANGE,
        
        undo: function () {
          var table = list.getItemById(id);
          table.__moveColumn(to, from);
        },
        
        redo: function () {
          var table = list.getItemById(id);
          table.__moveColumn(from, to);
        }
      });
    };
    
    // this does the raw column insert. Called from the wrapper function that
    // makes it also work with undo redo.
    model.triggerColumnAdded = function (index) {};
    model.__insertColumn = function (index, columnData) {
      if (!columnData) {
        columnData = {};
      }

      // add column
      var column = Column(this, index, columnData);
      this.columns.splice(index, 0, column);
      
      // let every column after the insertion point know its new index
      for (var i=index+1; i<this.columns.length; i++) {
        this.columns[i].setProperty('index', i);
      }
      
      this.triggerColumnAdded(index);

      this.requestParse();
    };
    
    // this does the raw column remove. Called from the wrapper function that
    // makes it also work with undo redo.
    model.triggerColumnRemoved = function (index) {};
    model.__removeColumn = function (index) {
      
      // remove column
      this.requestUnparseColumn(index);
      this.columns.splice(index, 1);
      
      // let every column after the deletion point know its new index
      for (var i=index; i<this.columns.length; i++) {
        this.columns[i].setProperty('index', i);
      }
      
      this.triggerColumnRemoved(index);
      
      this.requestParse();
    };
    
    // this does the raw column move. Called from the wrapper function that
    // makes it also work with undo redo.
    model.triggerColumnMoved = function (from, to) {};
    model.__moveColumn = function(from, to) {
      if (from === to) return;

      var len = this.columns.length;
      var column = this.columns[from];
        
      // can't move the first or last columns
      if (from < 1 || to < 1 || from >= len-1 || to >= len-1) return;
        
      // remove from items
      this.columns.splice(from , 1);
       
      // insert back in correct spot
      this.columns.splice(to, 0, column);
      
      // insert index on each column
      for (var i=0; i<len; i++) {
        this.columns[i].setProperty('index', i);
      }
        
      // allow a view to tap into this
      this.triggerColumnMoved(from, to);
    };

    // Could try to recognize fractions and multiples of pi (or anything
    // really).
    model.getAutofillValues = function (index) {
      var i;
      var numberOfColumns = this.columns.length;
      var rowValues = [];
      for (i=0; i<numberOfColumns; i++) {
        rowValues.push('');
      }

      var firstColumn = this.columns[0].getValues();
      
      // Use big.js https://github.com/graphinc/big.js to compute exact
      // differences and sums so that autofilling decimals works.
      // big.js will throw errors if improper input is used.
      //
      // this line just ensures that there is a constant offset between
      // each value in the first column starting from the beginning up
      // right before where we want to auto fill.
      var valDiff;
      try {
        if (index > 1) {
          valDiff = Big(firstColumn[1]).minus(firstColumn[0]);
        }
        
        for (i = 2; i<index && valDiff !== undefined; i++) {
          var nextDiff = Big(firstColumn[i]).minus(firstColumn[i-1]);
          if (!valDiff.equals(nextDiff)) {
            valDiff = undefined;
          }
        }
      } catch (e) {
        valDiff = undefined;
      }

      // add valDiff to the previous row to figure out what the autocomplete
      // value should be
      if (valDiff !== undefined) {
        rowValues[0] = valDiff.plus(firstColumn[index-1]).toString();
      }
      
      return rowValues;
    };
    
    model.setComputedValues = function (columns_data) {
      for (var i=0; i<columns_data.length; i++) {
        this.columns[i].setComputedValues(columns_data[i]);
      }
    };

    model.triggerRowAdded = function (index){};
    model.insertRow = function (index, values) {
      
      for (var i=0; i<this.columns.length; i++) {
        this.columns[i].insertCell(index, values[i]);
      }

      this.triggerRowAdded(index);

      var id = this.id;
      var list = this.list;
      UndoRedo.addTransaction({
        type: UndoRedo.RESPONSE_TO_CHANGE,
        undo: function () {
          list.getItemById(id).removeRow(index);
        },
        redo: function () {
          list.getItemById(id).insertRow(index, values);
        }
      });
      
      // TODO - only parse this row
      this.requestParse();
    };
    
    model.triggerRowRemoved = function (index) {};
    model.removeRow = function (index) {
      var values = [];
      for (var i=0; i<this.columns.length; i++) {
        values.push(this.columns[i].cells[index].value);
        this.columns[i].removeCell(index);
      }
      
      this.triggerRowRemoved(index);
      
      var id = this.id;
      var list = this.list;
      UndoRedo.addTransaction({
        type: UndoRedo.RESPONSE_TO_CHANGE,
        undo: function () {
          list.getItemById(id).insertRow(index, values);
        },
        redo: function () {
          list.getItemById(id).removeRow(index);
        }
      });
      
      // TODO - don't need it now, but sameday may need to unparse the row
    };

    model.getParsableObject = function () {

      var columns = this.columns.map(function (column){
        
        // serialize column to pure JSON
        var obj = column.serialize();
        
        // use shouldGraph rather than hidden when deciding if to graph
        obj.hidden = !column.shouldGraph;
        
        // pop off blank bottom row
        obj.values.pop();
        
        return obj;
      });
      
      // popoff blank right column
      columns.pop();

      return {
        type: 'table',
        id: this.id,
        columns: columns
      };
    };

    model.requestParse = function () {
      this.list.triggerAddExp(this.getParsableObject());
    };
    
    model.requestUnparse = function () {
      var ids = [this.id];
      for (var i=0; i<this.columns.length; i++) {
        ids.push(this.columns[i].id);
      }
      
      this.list.triggerRemoveExps(ids);
    };
    
    model.requestUnparseColumn = function (index) {
      this.list.triggerRemoveExp(this.columns[index].id);
    };

    model.getState = function() {

      // serialize each column
      var columns = this.columns.map(function(column) {
        var data = column.serialize();
       
        // pop off blank bottom row
        data.values.pop();
       
        // TODO - do we want to do this? Might be better for loadup if
        // we save the previous values along with wether or not the column
        // was disabled. If the evaluator ever changes, we can convert
        // old graph states or just let the new system overwrite the values like
        // it does now. The two big complaints I have is that computed columns
        // show up with an 'empty' underline temporarily and the table icon
        // flickers if the column is actually continuous rather than discrete.
        // if column is disabled, all values blanked
        // TODO - convert old graph states to have '' instead of null.
        if (column.disabled) {
          data.values = data.values.map(function(){return ''});
        }
       
        return data;
      });
      
      // pop off blank right column
      columns.pop();
     
      return {
        id: this.id,
        columns: columns
      };
    };

    model.isEmpty = function() {
      return false;
    };
  });

  return TableObject;
});

define('expressions/folder',['require','pjs','./abstractitem'],function (require) {
  var P = require('pjs');
  var AbstractItemModel = require('./abstractitem');

  var FolderObject = P(AbstractItemModel, function(model, _super) {
    model.isFolder = true;

    model.init = function (state, list) {
      _super.init.call(this, state, list);

      if (!this.title) this.title = '';
      this.observe('title', this.onStateDidChange.bind(this));
      if (!this.memberIds) this.memberIds = [];
      this.hidden = !!this.hidden;
      this.collapsed = !!this.collapsed;
    };

    model.getState = function () {
      return {
        id: this.id,
        type: 'folder',
        title: this.title,
        memberIds: this.memberIds,
        hidden: this.hidden,
        collapsed: this.collapsed
      };
    };

    model.addItem = function (item) {
      this.memberIds.push(item.id);
      item.setProperty('folder', this);
    };

    model.removeItem = function (item) {
      item.setProperty('folder', undefined);
      this.memberIds = this.memberIds.filter(function (id) {
        return id !== item.id;
      });
    };
  });

  return FolderObject;
});
define('expressions/list',['require','pjs','lib/underscore_model','./expression','./text','./table','./folder','undoredo'],function(require) {
  var P = require('pjs');
  var UnderscoreModel = require('lib/underscore_model');
  var ExpressionObject = require('./expression');
  var TextObject = require('./text');
  var TableObject = require('./table');
  var FolderObject = require('./folder');
  var UndoRedo = require('undoredo');
  var ExpressionListModel = P(UnderscoreModel, function (model, _super) {

    model.init = function () {
      _super.init.call(this);
      
      this.__items = [];
      this.__itemIds = {};
    };

    model.getItemByIndex = function (index) {
      return this.__items[index];
    };

    model.getItemById = function(id) {
      return this.__itemIds[id];
    };

    model.triggerItemAdded = function () {};
    model.insertItemAt = function (index, item, insideSetState) {
      
      var item_id = String(item.id);
      if (this.__itemIds.hasOwnProperty(item_id)) {
        throw Error('Item with id \'' + item_id + '\' is already in list');
      }
      
      // add item to list
      this.__itemIds[item_id] = item;
      this.__items.splice(index, 0, item);
            
      // if we're doing a setState, then we don't want the  rest of this
      // function to execute. The setState will handle the undo/redo. The
      // setState will also deal with the added item on its own, so we'd
      // duplicate setup code if we called .triggerItemAdded(). It'll also
      // parse the new item, so we don't need to do that here.
      if (insideSetState) return;
           
      // allow view to tap into this
      this.triggerItemAdded(index, item);
      
      // request that expressions get evaluated
      if (typeof item.requestParse === 'function') item.requestParse();
      
      // add to undo/redo
      var self = this;
      var constructor = item.constructor;
      var state = item.getState();
      UndoRedo.addTransaction({
        type: UndoRedo.RESPONSE_TO_CHANGE,
        undo: function () {
          self.removeItemAt(index);
        },
        redo: function () {
          self.insertItemAt(index, constructor(state, self));
        }
      });
    };

    model.addItem = function (obj) {
      var lastObject = this.getItemByIndex(this.getItemCount() - 1);
      // Replace empty expressions
      if (
        lastObject &&
        //TODO - remove headings after DB updated
        !(lastObject.text || lastObject.columns || lastObject.headings) &&
        lastObject.latex === ''
      ) {
        this.removeItemAt(this.getItemCount()-1); //pop off last
      }

      this.insertItemAt(this.getItemCount(), obj); //push to end
    };
    
    model.updateItemById = function (id, properties) {
      this.getItemById(id).setProperties(properties);
    };

    model.triggerItemRemoved = function (index, item) {};
    model.removeItemAt = function (index) {
      UndoRedo.oneTransaction(function () {
        var item = this.__items[index];
        var self = this;
        if (item.isFolder) {
          item.memberIds.forEach(function (id) {
            self.removeItemAt(self.getItemById(id).index);
          });
        }
        
        this.__items.splice(index, 1);
        var item_id = String(item.id);
        delete this.__itemIds[item_id];

        // request that expressions get unevaluated
        if (typeof item.requestUnparse === 'function') item.requestUnparse();

        // allow a view to tap into this
        this.triggerItemRemoved(index, item);
        
        var constructor = item.constructor;
        var state = item.getState();
        var folderId;
        if (item.folder) {
          folderId = item.folder.id;
          item.folder.removeItem(item);
          item.setProperty('folder', undefined);
        }
        
        UndoRedo.addTransaction({
          type: UndoRedo.RESPONSE_TO_CHANGE,
          undo: function () {
            var newItem = constructor(state, self);
            self.insertItemAt(index, newItem);
            if (folderId !== undefined) {
              self.getItemById(folderId).addItem(newItem);
            }
          },
          redo: function () {
            self.removeItemAt(index);
          }
        });
      }.bind(this));
    };
    
    model.triggerItemMoved = function (from, to){};
    model.moveItemTo = function(a, b) {
      var self = this;

      var manipulator = function (from, to) {
        if (from === to) return;

        var len = self.getItemCount();
        var item = self.__items[from];
        
        // check that the numbers are within range
        if (from < 0 || to < 0 || from >= len || to >= len) return;
        
        // remove from items
        self.__items.splice(from , 1);
        
        // insert back in correct spot
        self.__items.splice(to, 0, item);
        
        // allow a view to tap into this
        self.triggerItemMoved(from, to);
      };

      // add to undo/redo
      UndoRedo.addTransaction({
        type: UndoRedo.CAUSE_OF_CHANGE,
        undo: function () {
          manipulator(b, a);
        },
        redo: function () {
          manipulator(a, b);
        }
      });
    };
    model.moveItemsTo = function(a, b, n){
      UndoRedo.oneTransaction(function () {
        var i;
        if (b >= a && b < a+n) return;
        if(a < b){
          for(i = 0; i < n; i++){
            this.moveItemTo(a, b);
          }
        } else{
          for(i = 0; i < n; i++){
            this.moveItemTo(a + i, b + i);
          }
        }
      }.bind(this));
    };
    
    model.getItemCount = function () {
      return this.__items.length;
    };

    model.isEmpty = function() {
      var len = this.getItemCount();
      if ( len === 0) return true;
      if ( len > 1) return false;

      // TODO - maybe this should be this.getItemByIndex(0).isEmpty(). Only
      // problem I see there is that tables aren't ever considered empty. Not
      // sure if we consider expression list empty if it only contains an
      // empty text.
      return this.getItemByIndex(0).latex === '';
    };

    model.getState = function() {
      var list_state = [];
      var len = this.getItemCount();

      for (var i=0; i<len; i++) {
        list_state.push(this.getItemByIndex(i).getState());
      }

      return {list: list_state};
    };

    model.batchEvaluation = function(fn){
      fn();
    };
    model.triggerCompleteState = function(){};
    model.triggerSetState = function (list) {};
    model.setState = function(state) {
      var i;
      var list_content = [];
      var eval_state = [];
      var folders = [];
      var obj;

      for (i=0; i<state.list.length; i++) {
        var expState = state.list[i];
        
        // Start rendering UI as shell until we know if it's on screen
        expState.renderShell = true;
        
        obj = this.fromState(expState);
        
        if (!obj) continue;
        
        if (obj.isFolder) folders.push(obj);
        
        list_content.push(obj);
      }

      // clear list and add all items
      this.__items = [];
      this.__itemIds = {};
      for (i=0; i<list_content.length; i++) {
        this.insertItemAt(i, list_content[i], true);
      }

      // Tell expressions about their parent folders.
      var self = this;
      folders.forEach(function (folder) {
        folder.memberIds.forEach(function (id) {
          self.getItemById(id).setProperty('folder', folder);
        });
      });

      // Need expressions to know about their folders before we send them
      // to the worker, so we have all information needed to know whether they
      // should graph.
      for (i = 0; i < list_content.length; i++) {
        obj = list_content[i];
        if (obj.getParsableObject) eval_state.push(obj.getParsableObject());
      }

      // allow the view to tap into this
      this.triggerSetState(list_content);

      // allow the evaluator to tap into this
      this.triggerCompleteState(eval_state);
    };
    
    // Factory method for making a single expression object of the appropriate
    // type from a serialized state.
    model.fromState = function(itemState) {
      if (itemState.text !== undefined) {
        return TextObject(itemState, this);
      }
      if (itemState.columns !== undefined || itemState.headings !== undefined ) {
        // TODO - remove headings after DB updated
        return TableObject(itemState, this);
      }

      if (itemState.type === 'folder') return FolderObject(itemState, this);

      // Expression object
      var valid_graph_modes = ['default', 'always', 'never'];
      
      if (valid_graph_modes.indexOf(itemState.userRequestedGraphing) === -1) {
        if (itemState.hasOwnProperty('graphed')) {
          itemState.userRequestedGraphing = !!itemState.graphed ?
            'always' :
            'never'
          ;
        } else {
          itemState.userRequestedGraphing = 'default';
        }
      }
      
      return ExpressionObject(itemState, this);
    };
    
    model.triggerRemoveExps = function () {};
    model.triggerRemoveExp = function () {};
    model.triggerAddExp = function () {};
  });


  return ExpressionListModel;
});

define('lib/underscore_view',['require','jquery','underscore','./underscore_model','pjs'],function(require){
var $ = require('jquery');
var _ = require('underscore');
var UnderscoreModel = require('./underscore_model');
var P = require('pjs');

var UnderscoreView = P(UnderscoreModel, function(view){
  
  view.$ = function (selector) {
    var $node = $(this.__domNode);
    if (!selector) {
     return $node;
    } else {
      return $node.filter(selector).add($node.find(selector));
    }
  };

  // methods to adding view to dom. these call .didInsertElement()
  // automatically
  var makeInsertFn = function (methodName) {
    return function (selector) {
      if (!this.__domNode) _render.call(this);

      $(selector)[methodName](this.$());
      this.didInsertElement();
      return this.$();
    };
  };

  view.appendTo = makeInsertFn('append');
  view.replace = makeInsertFn('replaceWith');
  view.prependTo = makeInsertFn('prepend');
  view.insertAfter = makeInsertFn('after');
  view.insertBefore = makeInsertFn('before');

  view.remove = function () {
    this.$().remove();
    this.destruct();
  };
  
  // should be overriden and used to cleanup any resources this view has
  // aquired. Most often, that means remove any observers set and any child
  // views created.
  view.destruct = function () {};
  
  // Called when the view has been rendered, but before its DOM node has been
  // inserted into the document. This is a good time to attach child views and
  // event listeners.
  view.didCreateElement = function () {};
  
  // for this to be called, must insert this.$() into dom using one of the
  // methods above. If not, you must call .didInsertElement() yourself.
  view.didInsertElement = function () {};
  
  // this is the information that will be made available to the underscore template
  view.getTemplateParams = function () {return {};};
  
  // tap into these if you want deep control of how a complete rerender happens.
  // one thing these are useful for are saving/restoring temporary data within
  // the view that will get wiped out when the html is regenerated.
  view.beforeRerender = function () {};
  view.afterRerender = function () {};

  // will render only if something has changed
  view.rerender = function () {
    var oldDomNode = this.__domNode;
    var newParams = this.getTemplateParams();
    if (_.isEqual(newParams, this.__lastRenderParams)) return;

    this.beforeRerender();

    _render.call(this);

    if (oldDomNode && $.contains(document, oldDomNode)) {
      this.replace(oldDomNode);
    }

    this.afterRerender();
  };
  
  view.setDomNode = function (node) {
    this.__domNode = node[0] ? node[0] : node;
    this.didInsertElement();
  };

  // private
  var _render = function () {
    var params = this.getTemplateParams();
    var html = this.template(params);
    var $node = $(html);
    
    this.__domNode = $node[0];
    this.__lastRenderParams = params;
    
    this.didCreateElement();
  };

});
return UnderscoreView;
});

define('expressions/dragdrop',['require','jquery','pjs','tipsy'],function(require){
  var $ = require('jquery');
  var P = require('pjs');
  var Tipsy = require('tipsy');

  var DragDrop = P(function(dragdrop){

    // methods to be filled in by subclass
    dragdrop.toggleStyling = function(isDragging) {};
    dragdrop.onDragStart = function (evt, view) {};
    dragdrop.onDragStop = function (evt) {};
    dragdrop.commitDragState = function(dragState) {};
    dragdrop.updateScroll = function () {};
    dragdrop.computeDragPosition = function (x,y) { return {x:x, y:y} };
    dragdrop.computeDragState = function (list, dragPosition) { return {} };
    dragdrop.previewDragState = function(dragState) {};
    dragdrop.buildDragList = function () {};

    dragdrop.init = function(expr_list){
      this.expressions = expr_list;
      this.active = false;
    };
    
    dragdrop.start = function(evt, view){
      if(evt.touches.length !== 1) return;
      this.active = true;
      this.exppanel = this.expressions.$('#exppanel');
      
      this.setupEventListeners(evt);
      this.onDragStart(evt, view);

      this.dragList = this.buildDragList();
      this.toggleStyling(true);
      this.drag(evt.touches[0].x, evt.touches[0].y); //Do first drag
      
      // disable tipsy while dragging
      Tipsy.addDisableLock();
    };

    dragdrop.setupEventListeners = function(evt){
      // save the touch identifier so that multitouch doesn't mess us up. Also
      // create a function that allows us to lookup the touch we care about.
      var touch_identifier = evt.touches[0].identifier;
      function getTouch (evt) {
        for (var i=0; i < evt.touches.length; i++) {
          var touch = evt.touches[i];
          if (touch.identifier === touch_identifier) {
            return touch;
          }
        }
      }

      var self = this;

      // listen for mouse movements and tell DragDrop about them.
      $(document).on('tapmove.dragdrop', function (evt) {
        // touch must still be around
        var touch = getTouch(evt);
        if (!touch) return;
        self.drag(touch.x, touch.y);
      });
      
      // listen for mouse ups and tell DragDrop about them.
      $(document).on('tapend.dragdrop', function (evt) {
        // touch must not be around
        var touch = getTouch(evt);
        if (touch) return;
        self.stop();
        evt.handle('dragdrop');
      });

      //add event listener on exppanel.scroll
      this.exppanel.on('scroll.dragdrop', this.drag.bind(this));
    };

    dragdrop.stop = function(evt){
      this.active = false;

      //Clear listeners
      $(document).off('.dragdrop');

      //Get rid of preview styling
      this.toggleStyling(false);

      //Commit changes to model
      this.commitDragState(this.dragState);

      this.onDragStop(evt);
      
      // reenable tipsy after dragging
      Tipsy.removeDisableLock();
    };

    dragdrop.drag = function(x, y){
      if (!this.active) return;
      
      //Need to cache mouse position for scroll-triggered udpates
      if (typeof(x) === 'number') this.mouseX = x;
      if (typeof(y) === 'number') this.mouseY = y;
      
      this.updateScroll();

      var dragPosition = this.computeDragPosition(this.mouseX, this.mouseY);
      this.dragState = this.computeDragState(this.dragList, dragPosition);
      this.previewDragState(this.dragState);
    };
  });

  // TODO - any kind of user interaction (undo, typing, etc) should call
  // finishDrag to prevent us from getting in a weird state where we're dragging
  // an expression that doesn't exist.

  return DragDrop;
});
define('expressions/dragdrop_expressions',['require','jquery','underscore','lib/browser','pjs','undoredo','./dragdrop'],function(require){
  var $ = require('jquery');
  var _ = require('underscore');
  var Browser = require('lib/browser');
  var P = require('pjs');
  var UndoRedo = require('undoredo');
  var DragDrop = require('./dragdrop');

  var DragDropExpressions = P(DragDrop, function(dragdrop, _super){
    
    dragdrop.toggleStyling = function(isDragging){
      this.exppanel.toggleClass('isDragging', isDragging);
      this.draggedView.$().toggleClass('dragging', isDragging);
      if(!isDragging){
        //Remove things that are set by preview code
        this.draggedView.$().removeClass('overFolder');
        $('.expressionitem').css('transform', 'none');
      }
    };
    
    dragdrop.onDragStart = function (evt, view) {
      this.expressions.setSelected(null);
      this.exppanel = this.expressions.$('#exppanel');
      
      $(document.activeElement).blur();
      evt.preventDefault();

      this.draggedView = view;
      this.draggedViewHeight = view.$().outerHeight();

      this.panelTop = this.exppanel.offset().top;
      this.panelHeight = this.exppanel.height();
      this.panelBottom = this.panelTop + this.panelHeight;

      this.grabOffset = view.$().offset().top - evt.touches[0].y;
      this.grabY = this.computeDragPosition(evt.touches[0].x, evt.touches[0].y).y;
      this.grabIndex = view.model.index;
      this.draggedViewCount = 1;

      if(view.model.isFolder){
        this.draggedViewCount += view.model.memberIds.length;
        this.dropCollapsed = view.model.collapsed; //Cache whether folder is collapsed before collapsing
        view.model.setProperty('collapsed', true);
      }
    };
    
    dragdrop.onDragStop = function (evt) {
      clearTimeout(this.scrollTimeout);

      //Select the expression we just dragged
      this.expressions.setSelected(this.draggedView.model);
    };

    dragdrop.buildDragList = function(){
      var self = this;
      var expressions = this.expressions.getItemsByIndexRange(0, Infinity);

      var list = [{
        y: -Infinity,
        index: 0,
        folder: undefined
      }];

      var lastItem = [{
        y: Infinity,
        index: 0,
        folder: undefined
      }];

      expressions.forEach(function(expression){
        if(expression.id === self.draggedView.model.id) return;
        if(expression.folder && expression.folder.collapsed) return;
        if(expression.folder && self.draggedView.model.isFolder) return;

        //Figure out which expressions are included in this drag item
        var view = self.expressions.getItemView(expression.id);
        var belowGrabbedView = (expression.index > self.grabIndex);
        var elements = view.$();
        if(expression.isFolder && (expression.collapsed || self.draggedView.model.isFolder)){
          expression.memberIds.forEach(function(id){
            elements.push(self.expressions.getItemView(id).$()[0]);
          });
        }
        
        //Compute dimensions of the expression(s), removing draggedView from list
        var offset = (belowGrabbedView ? -self.draggedViewHeight : 0);
        var height = view.$().height();
        var top = view.$().position().top + offset;

        //Compute indexes for before and after the expression(s)
        var indexOffset = (belowGrabbedView ? -1 : 0); //-self.draggedViewCount : 0);
        var indexBefore = expression.index + indexOffset;
        var indexAfter = indexBefore + elements.length;

        //Compute folder insertion behavior
        var topFolder, midFolder;
        if(!self.draggedView.model.isFolder){
          topFolder = expression.folder;
          midFolder = (expression.isFolder ? expression : expression.folder);
        }

        //Record what happens when dragging past the top of the expression
        list.push({
          y: top,
          index: indexBefore,
          folder: topFolder
        });

        //Record what happens when dragging past the midpoint of the expression
        list.push({
          y: top + height / 2,
          index: indexAfter,
          folder: midFolder,

          elements: elements, //TODO - should include all elements dragged past
          offset: offset
        });

        //Record what happens when dragging past the bottom of the expression
        //Only appended to list if this was the last item
        lastItem = {
          y: top + height,
          index: indexAfter,
          folder: undefined
        };

      });
      list.push(lastItem);

      return list;
    };
    
    // allows expression list to scroll drag above or below it
    dragdrop.updateScroll = function() {
      clearTimeout(this.scrollTimeout);
      if(!this.active) return;
      var scrollSpeed = 0;

      //Use being over top of list (into header bar) as cue to start scrolling up
      scrollSpeed = Math.min(scrollSpeed, (this.mouseY - this.panelTop));

      //Use bottom 30 pixels as cue to start scrolling down  30px is smaller than one equation,
      //But still big enough to trigger easily
      scrollSpeed = Math.max(scrollSpeed, (this.mouseY - this.panelBottom + 30));

      //Adjust the speed based on the expressions list height.
      //A 30 pixel offset should get us to the other side in about 1 second of 30hz updates
      //30 pixels * 30 updates = 900
      scrollSpeed = (scrollSpeed * this.panelHeight / 900);

      if(scrollSpeed){
        this.exppanel.scrollTop(this.exppanel.scrollTop() + scrollSpeed);
        this.scrollTimeout = setTimeout(this.updateScroll.bind(this), 30);
      }
    };

    //Compute position of the dragged view in terms of the scrolled list
    dragdrop.computeDragPosition = function(x, y) {
      //Clamp effective mouse position to edges of panel
      y = Math.max(y, Math.min(y, this.panelBottom), this.panelTop);

      //Make position relative to the panel
      y -= this.panelTop;

      //Add offset for where element was grabbed
      y += this.grabOffset;

      //Compensate for scrolling
      return {x:NaN, y: y+this.exppanel.scrollTop()};
    };

    //Takes a list of states, which each includes the y value at which it starts,
    //as well as the index and the folder which the dragged item would have it it
    //is dropped below that line.
    dragdrop.computeDragState = function(list, dragPosition){
      function sortMethod (item) {
        return item.y;
      }
      
      var index = _.sortedIndex(list, {y:dragPosition.y}, sortMethod) - 1;//See where we would be inserted
      return {
        list: list,
        index: list[index].index,
        folder: list[index].folder,
        dragY: dragPosition.y
      };
    };

    //Update model to reflect new dragState
    dragdrop.commitDragState = function(dragState){
      var self = this;
      UndoRedo.oneTransaction(function(){
        var draggedModel = self.draggedView.model;

        //Update ordering
        self.expressions.model.moveItemsTo(self.grabIndex, dragState.index, self.draggedViewCount);

        //Update folder membership
        var newFolder = dragState.folder;
        var oldFolder = draggedModel.folder;
        if(newFolder !== oldFolder){
          UndoRedo.addTransaction({
            type: UndoRedo.CAUSE_OF_CHANGE,
            redo: function(){
              if(oldFolder) oldFolder.removeItem(draggedModel);
              if(newFolder) newFolder.addItem(draggedModel);
            },
            undo: function(){
              if(newFolder) newFolder.removeItem(draggedModel);
              if(oldFolder) oldFolder.addItem(draggedModel);
            }
          });
        }

        //Restore folder collapsed state
        if(draggedModel.isFolder){
          draggedModel.setProperty('collapsed', self.dropCollapsed); //Restore collapsed state
        }
      });
    };

    //Display preview of dragState, but don't commit changes
    dragdrop.previewDragState = function(dragState){
      var self = this;

      //Preview height and folder membership of dragged item
      this.draggedView.$().css("transform", Browser.translateRule(0, dragState.dragY - this.grabY));
      this.draggedView.$().toggleClass('overFolder', !!dragState.folder);

      //Update transforms for items above and below dragged view
      _.each(dragState.list, function(item){
        if(item.elements){
          var offset = item.offset + (item.index > dragState.index ? self.draggedViewHeight : 0);
          item.elements.css('transform', Browser.translateRule(0, offset));
        }
      });
    };
  });

  return DragDropExpressions;
});

define('expressions/dragdrop_columns',['require','jquery','underscore','lib/browser','pjs','./dragdrop'],function(require){
  var $ = require('jquery');
  var _ = require('underscore');
  var Browser = require('lib/browser');
  var P = require('pjs');
  var DragDrop = require('./dragdrop');

  var DragDropColumns = P(DragDrop, function(dragdrop, _super){

    dragdrop.toggleStyling = function(isDragging){
      this.draggedCells.toggleClass('dragging', isDragging);
      if(!isDragging){
        $('.expressiontable td').css('transform', 'none');
      }
    };
    
    dragdrop.onDragStart = function (evt, view) {
      this.draggedView = view;
      this.draggedCells = $();
      this.tableView = view.tableView;
      
      // deselect cell when dragging
      this.tableView.model.setProperty('selectedCell', null);
      
      this.draggedViewWidth = view.$().outerWidth();

      var firstColumn = this.tableView.$('tr.header td:first-child');
      var lastColumn = this.tableView.$('tr.header td:last-child');
      this.minDragX = firstColumn.offset().left + firstColumn.outerWidth();
      this.maxDragX = lastColumn.offset().left - this.draggedViewWidth;
      
      this.grabOffset = view.$().offset().left - evt.touches[0].x;
      this.grabX = this.computeDragPosition(evt.touches[0].x, evt.touches[0].y).x;
      this.grabIndex = view.model.index;
      
      this.expressions.setProperty('draggingColumn', true);
    };
    
    dragdrop.onDragStop = function (evt) {
      this.expressions.setProperty('draggingColumn', false);
    };

    dragdrop.buildDragList = function(){
      var self = this;
      var columnViews = this.tableView.columnViews.slice(1); //remove first one, it's not allowed to move
          columnViews.pop(); // remove the last one (it's always empty)
          
      var scrollLeft = 0;
      
      var list = [{
        x: -Infinity,
        index: 1
      }];

      var lastItem = [{
        x: Infinity,
        index: 1
      }];

      columnViews.forEach(function(views){
        var view = views[0];
        var cells = $(views.map(function (view) {return view.$()[0]}));
        
        if(view === self.draggedView) {
          self.draggedCells = cells;
          return;
        }
        
        var column = view.model;
        
        //Figure out which expressions are included in this drag item
        var belowGrabbedView = (column.index > self.grabIndex);
        
        //Compute dimensions of the expression(s), removing draggedView from list
        var offset = (belowGrabbedView ? -self.draggedViewWidth : 0);
        var width = view.$().outerWidth();
        var left = view.$().offset().left + scrollLeft + offset;

        //Compute indexes for before and after the expression(s)
        var indexOffset = (belowGrabbedView ? -1 : 0); //-self.draggedViewCount : 0);
        var indexBefore = column.index + indexOffset;
        var indexAfter = indexBefore + 1;

        //Record what happens when dragging past the top of the expression
        list.push({
          x: left,
          index: indexBefore
        });

        //Record what happens when dragging past the midpoint of the expression
        list.push({
          x: left + width/2,
          index: indexAfter,
          offset: offset,
          views: cells
        });

        //Record what happens when dragging past the end of items
        //Only appended to list if this was the last item
        lastItem = {
          x: left + width,
          index: indexAfter
        };

      });
      list.push(lastItem);
      
      return list;
    };

    dragdrop.computeDragPosition = function(x, y){
      //Add offset for where element was grabbed
      x += this.grabOffset;

      //Clamp effective mouse position to edges of table
      x = Math.max(this.minDragX, Math.min(this.maxDragX, x));
      
      
      return {x:x, y:NaN};
    };

    dragdrop.computeDragState = function(list, dragPosition){
      function sortMethod (item) {
        return item.x;
      }
      
      var index = _.sortedIndex(list, {x:dragPosition.x}, sortMethod) - 1;//See where we would be inserted
      return {
        list: list,
        index: list[index].index,
        dragX: dragPosition.x
      };
    };

    //Update model to reflect new dragState
    dragdrop.commitDragState = function(dragState){
      var table = this.tableView.model;
      table.moveColumn(this.grabIndex, dragState.index);
    };

    //Display preview of dragState, but don't commit changes
    dragdrop.previewDragState = function(dragState){
      var self = this;

      //Preview height and folder membership of dragged item
      this.draggedCells.css("transform", Browser.translateRule(dragState.dragX - this.grabX, 0));

      //Update transforms for items above and below dragged view
      _.each(dragState.list, function(item){
        if(item.views){
          var offset = item.offset + (item.index > dragState.index ? self.draggedViewWidth : 0);
          item.views.css('transform', Browser.translateRule(offset, 0));
        }
      });
    };
  });

  return DragDropColumns;
});
define('loadcss!css/add_expression', function(){});
define('main/popover_view',['require','jquery','pjs','lib/underscore_view'],function(require){
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  
  var allPopovers = [];
  
  function handleIsVisibleChange (changedPopover) {
     // hide all other popovers when this one becomes visible
    if (changedPopover.isVisible) {
      allPopovers.forEach(function (popover) {
        if (popover !== changedPopover) {
          popover.closePopover();
        }
      });
        
      $(document).on('tapstart.popover-' + changedPopover.popoverNumber, function (evt) {
        changedPopover.setProperty('isVisible', !changedPopover.eventShouldClosePopover(evt));
      });
    } else {
      $(document).off('tapstart.popover-' + changedPopover.popoverNumber);
    }
  }
  
  var PopoverView = P(UnderscoreView, function(view, _super){
        
    view.init = function () {
      _super.init.call(this);
      this.isVisible = false;
      
      allPopovers.push(this);
      
      this.popoverNumber = allPopovers.length;
      
      this.observe('isVisible', function () {
        handleIsVisibleChange(this);
        this.renderIsVisible();
      }.bind(this));
    };
    
    view.setupOpenButton = function (openButton, on) {
      this.openButton = openButton;
      this.openButton.on(on, this.onBtnPressed.bind(this));
    };
    
    view.didInsertElement = function () {
      this.renderIsVisible();
    };
  
    view.renderIsVisible = function () {
      this.$().toggle(this.isVisible);
      if (this.openButton) this.openButton.toggleClass('active', this.isVisible);
    };

    // don't do anything if we're inside the popover or if we're inside the openButton
    view.eventShouldClosePopover = function (evt) {
      return !this.eventIsWithinPopover(evt);
    };
    
    view.eventIsWithinPopover = function (evt) {
      var $target = $(evt.target);
      return $target.closest(this.$()).length || $target.closest(this.openButton).length;
    };
    
    view.onBtnPressed = function (evt) {
      var $target = $(evt.target);
      
      // this is a popover whose built inside of the button. act like we didn't
      // press the button
      if ($target.closest('[popover]').length) {
        return;
      }
      
      // pressed the open/close button
      if ($target.closest(this.openButton).length) {
        this.togglePopover();
        return;
      }
    };
    
    view.togglePopover = function () {
      this.setProperty('isVisible', !this.isVisible);
    };

    view.closePopover = function () {
      this.setProperty('isVisible', false);
    };


  });
  
  return PopoverView;
});
define('template',['underscore', 'text'], function(_, text){
  var buildMap = {};

  return {
    load: function(name, req, onLoad, config){
      var text_name = "template_src/" + name + ".underscore";
      text.get(req.toUrl(text_name), function(template_source){
        var template = _.template(template_source);
        if(config.isBuild){
          buildMap[name] = template.source;
        }
        onLoad(template);
      });
    },

    write: function(pluginName, moduleName, write){
      if (moduleName in buildMap) {
        var template = (buildMap[moduleName]);
        write(
          "define('" +
            pluginName + '!' + moduleName + "', " +
            "['underscore'], " +
            "function(_) {return " + template + ";}" +
          ");"
        );
      }
      /*else{
        console.log("ERROR - failed to find template " + moduleName + " in buildMap");
      }*/
    }
  };
});

define('template!add_expression', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="add-expression-dropdown popover bottom" popover="true">\n <span class="arrow"></span>\n\n ';
 _.each(expression_types, function(type){
;__p+='\n   <div class=\'new-item do-not-blur action-new'+
(type)+
'\' id=\'new-'+
(type)+
'\'>\n      <i class=\'icon-new-'+
(type)+
' expression-icon\'></i>\n      '+
(type)+
'\n    </div>\n ';
})
;__p+='\n\n</div>\n';
}
return __p;
};});
define('expressions/add_expression',['require','loadcss!css/add_expression','pjs','main/config','main/popover_view','lib/track_feature','template!add_expression','./expression','./table','./text','./folder'],function(require){
  require('loadcss!css/add_expression');
  
  var P = require('pjs');
  var Config = require('main/config');
  var PopoverView = require('main/popover_view');
  var Feature = require('lib/track_feature');
  var template = require('template!add_expression');
  var ExpressionObject = require('./expression');
  var TableObject = require('./table');
  var TextObject = require('./text');
  var FolderObject = require('./folder');
  
  var AddExpressionView = P(PopoverView, function(view, _super){

    view.template = template;
        
    view.init = function (listView) {
      _super.init.call(this);
      
      this.listView = listView;
      this.list = listView.model;
    };

    view.getTemplateParams = function(){
      var params = _super.getTemplateParams();

      var types = ['expression', 'text', 'table'];
      if(Config.get('folders')) types.push('folder');
      params.expression_types = types;
      return params;
    };
    
    view.didInsertElement = function() {
      _super.didInsertElement.call(this);
      
      this.$('.action-newexpression').on('tap', this.newMath.bind(this));
      this.$('.action-newtext').on('tap', this.newText.bind(this));
      this.$('.action-newfolder').on('tap', this.newFolder.bind(this));
      this.$('.action-newtable').on('tap', this.newTable.bind(this));
    };

    view.newMath = function() {
      this.insertItem(ExpressionObject({selected: true, latex: ''}, this.list));
    };

    view.newText = function() {
      this.insertItem(TextObject({selected: true, text: ''}, this.list));
    };

    view.newFolder = function () {
      this.insertItem(FolderObject({selected: true}, this.list));
    };

    view.newTable = function() {
      var properties = {selected: true, latex:''};
      properties.columns = [
        {
          latex:"x",
          values:[1]
        },
        {
          latex:"y",
          values:['']
        }
      ];

      // create a new expression and populate it
      var obj = TableObject(properties, this.list);
      this.insertItem(obj);
      this.listView.getSelectedView().addFocus('cell', 1, 1);

      Feature.use('create table');
    };

    view.insertItem = function(obj){
      
      // close the popover
      this.setProperty('isVisible', false);
      
      var item = this.listView.getLastFocusedItem();
      if(!item) item = this.listView.getFirstVisibleItem();
      var index = (item ? item.index + 1 : this.list.getItemCount()); //If we have an item, insert after it

      this.list.insertItemAt(index, obj);
      this.listView.getSelectedView().addFocus();
    };

  });
  
  return AddExpressionView;
});

define('template!toast', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="toast-container">\n  <span class="toast">\n    <span class="msg variable-msg"></span>\n    <a class="undo action-undo">undo</a>\n  </span>\n</div>';
}
return __p;
};});
//generates a toast (little message near the top of the page)
// lets you do things like switch back into edit-list mode
define('main/toast',['require','jquery','pjs','lib/underscore_view','undoredo','template!toast'],function (require) {
  
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var UndoRedo = require('undoredo');
  var template = require('template!toast');
  
  var ToastView = P(UnderscoreView, function (toast, _super) {
    toast.template = template;
    
    toast.didCreateElement = function () {
      var self = this;
      
      // hide toast when UndoRedo 
      UndoRedo.changesCallbacks.push(function () {
        self.hide();
      });
  
      this.$('.action-undo').on('tap', function () {
        if (self.callback) {
          UndoRedo.undo();
          self.callback();
          self.hide();
        }
      });
      
      // start off hidden
      this.$().toggle(false);
    };
    
    // str: string in the toast message
    // cb: a function that gets called if the "undo" button is pressed
    toast.show = function (str, cb) {
      clearTimeout(this.hideTimeout);
      this.$().fadeIn('fast');
      
      this.$('.variable-msg').text(str);
      this.callback = cb;

      // hide after 6 seconds
      var self = this;
      this.hideTimeout = setTimeout(function () {
        self.hide();
      }, 6000);
    };
    
    toast.hide = function () {
      clearTimeout(this.hideTimeout);
      
      this.$().fadeOut('fast');
      this.cb = undefined;
    };
  });

  // for now, toast is a singleton class. It's not the best, but it was already a singleton when it was
  // part of UndoRedo and it makes it really easy to get at from other parts of the code. If we feel like
  // it's worth passing a reference to the Toast through all compoenents, then we can do that too...
  var toastView = new ToastView();
  $(function () {
    toastView.appendTo('#sliding-interior');
  });

  return toastView;
});

define('main/resize',['require','lib/browser','jquery'],function(require){
var Browser = require('lib/browser');
var $ = require('jquery');
var triggeredResizeDuringAnimation = false;
var runningAnimations = 0;

function animationIsRunning () {
  return runningAnimations !== 0;
}

// tells the Resize module to not allow resizes until an animation is complete.
// passes back a deferred so that we can take action when animation is over.
// this animation stuff is hopefully a temporary solution and will get replaced
// by an animation system that allows us to start/stop/monitor css animations.
function waitForCSSAnimation (target, propRegExp) {
  if (Browser.IS_IE9) {
    // They're not getting a transition, so we aren't getting an end event.
    triggerResize();
    return;
  }
  // allows us to pass in jquery object, dom node, or string selector
  var $target = $(target);
  target = $target[0];
  
  animationStarted();
  triggerResize();
  
  var deferred = $.Deferred();
  var events = 'transitionend webkitTransitionEnd MSTransitionEnd';
  
  function onAnimationEnd (evt) {
    // must have the exact target
    if (evt.target !== target) {
      return;
    }
    
    // must have the correct property if we specify a regexp
    if (propRegExp && !evt.originalEvent.propertyName.match(propRegExp)) {
      return;
    }
    
    $target.off(events);
    animationEnded();
    deferred.resolve();
  }

  $target.on(events, onAnimationEnd);
  return deferred;
}

function animationStarted () {
  runningAnimations++;
}

function animationEnded () {
  runningAnimations--;

  if (!animationIsRunning() && triggeredResizeDuringAnimation) {
    triggeredResizeDuringAnimation = false;
    triggerResize();
  }
}

// call all the resize callbacks
function triggerResize () {
  if (animationIsRunning()) {
    triggeredResizeDuringAnimation = true;
    return;
  }
  
  for (var i=0; i<callbacks.length; i++) {
    callbacks[i]();
  }
}

// registers a callback to be called when triggerResize is called
var callbacks = [];
function registerCallback (callback) {
  callbacks.push(callback);
}

// stores the current screen size at all times
var currentScreen = {};

// stores the full size for our window (when soft keyboard is hidden)
var fullScreen = {};

var triggerResizeTimeout;
function monitorWindowSize () {
  
  // handle some mobile specific code
  if (Browser.IS_MOBILE) {
    var focused = $(document.activeElement);
    if (focused.filter('input,textarea').length === 0) {
      $(window).scrollTop(0).scrollLeft(0);
    }
  
    if (focused.filter('input:hidden, textarea:hidden').length) {
      // hack to get jquery to remove focus from hidden input.
      // the following steps work for all tested mobile devices.
      //
      // step 1) add an input textbox to body and focus it.
      // step 2) make that textbox disabled and readonly.
      // step 3) blur the textbox and remove from the dom.
      $('<input />').appendTo('body').focus()
      .attr({
        readonly: 'readonly',
        disabled: 'true'
      })
      .blur().remove();
    }
  }
  
  // desktop specific code
  else {
    $(window).scrollTop(0).scrollLeft(0);
  }
    
  // check if anything actually updated
  var w = window.innerWidth + $(window).scrollLeft();
  var h = window.innerHeight + $(window).scrollTop();
  if (w !== currentScreen.width || h !== currentScreen.height) {
    currentScreen.width = w;
    currentScreen.height = h;
    
    // update full size if we're supposed to refresh it or if it hasn't been
    // set yet.
    if (!stickyFullScreen || !fullScreen.width || !fullScreen.height) {
      fullScreen.width = w;
      fullScreen.height = h;
    }
    
    if (monitoring) {
      
      // update immediately on mobile browsers. more responsive and the resize
      // event on mobile browsers is usually a discrete one-time action.
      if (Browser.IS_MOBILE) {
        triggerResize();
      }
      
      // throttle how quickly we triggerResize for desktop. We can have many
      // updates in a row and only want to triggerResize for the last one.
      else {
        clearTimeout(triggerResizeTimeout);
        triggerResizeTimeout = setTimeout(triggerResize, 100);
      }
    }
  }
}

// if stickyFullScreen, we keep the original size of the page inside of the
// 'fullScreen' property
var stickyFullScreen = false;
function init (options) {
  stickyFullScreen = options && options.stickyFullScreen;
  
  // check the initial size
  monitorWindowSize();
  
  // We call the monitorWindowSize() function every 100ms because the
  // window::onResize event just isn't reliable enough. In some browsers
  // (e.g. mobile safari) the event randomly gets dropped.
  setInterval(monitorWindowSize, 100);
  
  // We also call the monitorWindowSize() function on window resize in order
  // to be a little more responsive in most cases
  $(window).resize(function () {
    monitorWindowSize();
  });
}

var monitoring = false;
function monitor () {
  monitoring = true;
  triggerResize();
}
return {
  trigger: triggerResize,
  register: registerCallback,
  fullScreen: fullScreen,
  currentScreen: currentScreen,
  init: init,
  monitor: monitor,
  animationIsRunning: animationIsRunning,
  animationStarted: animationStarted,
  animationEnded: animationEnded,
  waitForCSSAnimation: waitForCSSAnimation
};

});

define('lib/keys',['require'],function (require) {

  var Keys = function () {

    // based on http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#fixed-virtual-key-codes
    var table = {
      8:  this.BACKSPACE = 'Backspace',
      9:  this.TAB = 'Tab',
      13: this.ENTER = 'Enter',
      16: this.SHIFT = 'Shift',
      17: this.CONTROL = 'Control',
      18: this.ALT = 'Alt',
      20: this.CAPSLOCK = 'CapsLock',
      27: this.ESCAPE = 'Esc',
      32: this.SPACEBAR = 'Space',
      33: this.PAGEUP = 'PageUp',
      34: this.PAGEDOWN = 'PageDown',
      35: this.END = 'End',
      36: this.HOME = 'Home',
      37: this.LEFT = 'Left',
      38: this.UP = 'Up',
      39: this.RIGHT = 'Right',
      40: this.DOWN = 'Down',
      46: this.DELETE = 'Del'
    };
  
    this.lookup = function (evt) {
      return table[evt.which];
    };
  };
  
  return new Keys();
});
/* global jQuery */
;(function($) {

  $.fn.extend({

    scrollVisible: function (elms, topOffset, bottomOffset) {
  
      if (elms && elms.length) {
  
        topOffset = topOffset || 0;
        bottomOffset = bottomOffset || 0;
  
        var view_top = this.offset().top + topOffset;
        var view_height = this.outerHeight() + bottomOffset - topOffset;
      
        //set the first top and bottom
        var elms_top = $(elms[0]).offset().top;
        var elms_bottom = $(elms).outerHeight() + elms_top;
  
        //loop through all other elements to find combined top/bottom
        elms.each( function () {
          var elm = $(this);
          var top = elm.offset().top;
          var bottom = elm.outerHeight() + top;
  
          if( top < elms_top) elms_top = top;
          if( bottom > elms_bottom ) elms_bottom = bottom;
        });
  
        var value = -this.scrollTop();
  
        //adjust for the offset of "this"
        elms_top -= view_top + value;
        elms_bottom -= view_top + value;
  
        var min = -elms_top;
        var max = view_height - elms_bottom;
  
        if (value > max && value < min)	{
          //do nothing
        } else if (elms_bottom - elms_top > view_height) {
          // do nothing
          // the content is larger than the viewport and we'll just get in the
          // way of the browser. The browser will put the correct part of the
          // content in view based on which part of the content has focus.
        } else if (value > max) {
          this.scrollTop(-max);
        } else if (value < min) {
          this.scrollTop(-min);
        }
      }
  
      return this;
    }
  });

})(jQuery);


define("lib/jquery.scrollvisible", function(){});

define('loadcss!css/new_expression', function(){});
define('template!new_expression', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="expressionitem new-expression opened">\n  <div class=\'new-math-div do-not-blur action-newmath\'>\n    <div class=\'new-expression-fade\'></div>\n  </div>\n\n  <span\n     class="tab"\n  >\n     <span class=\'num variable-index\'>2</span>\n     <div class=\'tab-interior\'></div>\n  </span>\n\n</div>\n';
}
return __p;
};});
define('expressions/new_expression',['require','loadcss!css/new_expression','pjs','lib/underscore_view','template!new_expression','./expression'],function(require){
  require('loadcss!css/new_expression');
  
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var template = require('template!new_expression');
  var ExpressionObject = require('./expression');
  
  var NewExpressionView = P(UnderscoreView, function(view, _super){

    view.template = template;
        
    view.init = function (listView) {
      _super.init.call(this);
      this.observe('index', this.updateIndex.bind(this));
      this.listView = listView;
    };
    
    view.didInsertElement = function() {
      // update the index now and observe any changes
      this.updateIndex();
      
      this.$('.action-newmath').on('tap', this.newMath.bind(this));
    };

    view.updateIndex = function () {
      this.$('.variable-index').text(this.index);
    };

    view.newMath = function() {
      var constructor = ExpressionObject;
      var properties = {selected:true, latex:''};
      var obj = constructor(properties, this.listView.model);
      this.listView.model.insertItemAt(this.listView.model.getItemCount(), obj);
      this.listView.getSelectedView().addFocus();
    };

  });

  return NewExpressionView;
});

/*
 * Renders expression items visible in the viewport by setting their "renderShell" property to false.
 * On desktop, also renders off-screen expression in the background if all viewport expressions are shown.
 *
 * NOTE: ideally this shouldn't poll, but listen to events on the expression list to know when items have
 *       been added/deleted, or the viewport has changed.
 */
define('expressions/renderviewport',['require','jquery','main/timermodules','lib/browser'],function(require){
var $ = require('jquery');
var TimerModules = require('main/timermodules');
var Browser = require('lib/browser');

TimerModules.add('expressions.renderviewport', (function(expressions, grapher) {
  var $exppanel   = null;
  var expPanelTop = null;

  var lastScrollStableTime = 0;
  var lastScrollHeight     = 0;
  var lastScrollTop        = 0;

  function getUnrenderedViewportItems() {
    // Cache #exppanel
    if (!$exppanel) {
      $exppanel = $('#exppanel');
      if (!$exppanel.length) {
        $exppanel = null;
        return [];
      }
      expPanelTop = $exppanel.offset().top;
    }

    var unrenderedViewportItems = [];

    // Wait for scroll bar to settle down for 300ms
    var scrollTop    = $exppanel.scrollTop(),
        scrollHeight = $exppanel.height();
    if (scrollTop == lastScrollTop && scrollHeight == lastScrollHeight) {
      var time = new Date().getTime();
      if (lastScrollStableTime === 0) {
        lastScrollStableTime = time;
      } else if (time - lastScrollStableTime > 300) {
        var first = expressions.expressionAtPoint(5, expPanelTop),
            last  = expressions.expressionAbovePoint(5, expPanelTop + scrollHeight);
        if (first && last) {
          expressions.getItemsByIndexRange(first.index, last.index).forEach(function(item) {
            if (item.renderShell) {
              unrenderedViewportItems.push(item);
            }
          });
        }
      }
    } else {
      lastScrollTop        = scrollTop;
      lastScrollHeight     = scrollHeight;
      lastScrollStableTime = 0;
    }

    return unrenderedViewportItems;
  }

  function renderItems(unrenderedViewportItems) {
    var i;
    
    if (unrenderedViewportItems.length) {
      // If viewport items need to be rendered, then render them all
      // (with a 10ms pause in-between to help them display in view order)
      i=0;
      unrenderedViewportItems.forEach(function(item) {
        (function(item) {
          setTimeout(function() {
            item.setProperty('renderShell', false);
          }, i * 10);
        })(item, i++);
      });
    } else {
      // Otherwise, if not mobile, just render first unrendered item (as long as we're not slowly redrawing.)
      //
      // We can't do this on mobile as iPad 3 doesn't correctly update any expressions rendered off-screen
      // (it renders white boxes instead.)
      if (!Browser.IS_MOBILE && !grapher.redraw_slowly_timeout) {
        var len = expressions.model.getItemCount();
        for (i=0; i < len; ++i) {
          var item = expressions.model.getItemByIndex(i);
          if (item.renderShell) {
            item.setProperty('renderShell', false);
            break;
          }
        }
      }
    }
  }

  return function() {
    renderItems(getUnrenderedViewportItems());
  };
}));
});

define('expressions/list_view',['require','jquery','underscore','pjs','main/config','tipsy','lib/underscore_view','lib/touchtracking','expressions/dragdrop_expressions','expressions/dragdrop_columns','./add_expression','main/toast','undoredo','main/resize','lib/keys','lib/jquery.scrollvisible','./new_expression','./renderviewport','./expression'],function (require) {
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var Config = require('main/config');
  require('tipsy');
  var UnderscoreView = require('lib/underscore_view');
  var touchtracking = require('lib/touchtracking');
  var DragDropExpressions = require('expressions/dragdrop_expressions');
  var DragDropColumns = require('expressions/dragdrop_columns');
  var AddExpressionView = require('./add_expression');
  var Toast = require('main/toast');

  var UndoRedo = require('undoredo');
  var Resize = require('main/resize');
  var Keys = require('lib/keys');

  require('lib/jquery.scrollvisible');
  var NewExpressionView = require('./new_expression');
  require('./renderviewport');
  var ExpressionObject = require('./expression');
  
  var ExpressionListView = P(UnderscoreView, function (view, _super) {
    view.__itemViews = {};
    view.__lastFocusedItem = null;
    view.__playbackTimer = undefined;
    view.__playbackSliders = [];
    view.__latexChangeCallbacks = [];
    view.keypadView = null;

    view.isTablet = Config.get('tablet');

    // Overridden by Calc.
    // TODO: copied and pasted over from list_view_tablet, but this feels really dirty
    // There's got to be a better way to do this.
    view.triggerClearGraph = function () {};

    view.getTemplateParams = function (){
      return  {
        IS_TABLET: this.isTablet
      };
    };

    view.toggleAllSliders = function () {
      if (this.__playbackSliders.length > 0) {
        this.stopAllSliders();
      } else {
        this.playAllSliders();
      }
    };

    view.playAllSliders = function () {
      for (var key in this.__itemViews) {
        if (this.__itemViews[key].hasOwnProperty('sliderView') &&
            this.__itemViews[key].sliderView
        ) {
          this.__itemViews[key].sliderView.play();
        }
      }
    };

    view.stopAllSliders = function () {
      for (var key in this.__itemViews) {
        if (this.__itemViews[key].hasOwnProperty('sliderView') &&
            this.__itemViews[key].sliderView
        ) {
          this.__itemViews[key].sliderView.stop();
        }
      }
    };

    view.onPlaySlider = function (exprId) {
      clearTimeout(this.__playbackTimer);

      view.__playbackSliders.push(this.getItemView(exprId).sliderView);

      this.sliderPlayStep();
    };

    view.sliderPlayStep = function () {
      var self = this;
      this.model.batchEvaluation(function(){
        _.each(self.__playbackSliders, function (sliderView) {
          sliderView.playStep();
        });
      });
      this.__playbackTimer = setTimeout(this.sliderPlayStep.bind(this), 40);
    };

    view.onStopSlider = function (exprId) {
      var index = this.__playbackSliders.indexOf(this.getItemView(exprId).sliderView);
      if (index !== -1) {
        this.__playbackSliders.splice(index, 1);
      }
      if (this.__playbackSliders.length === 0) {
        clearTimeout(this.__playbackTimer);
      }
    };

    view.onStartMovingPoint = function (id) {
      var movedExpr = this.model.getItemById(id);
      var moveIds = movedExpr && movedExpr.formula && movedExpr.formula.move_ids;
      if (!moveIds) return;
      for (var i = 0; i < moveIds.length; i++) {
        if (moveIds[i] === undefined) continue;
        this.getItemView(moveIds[i]).sliderView.setProperty(
          'isMoving',
          true
        );
        this.getItemView(moveIds[i]).sliderView.stop();
      }
    };

    view.onStopMovingPoint = function (id) {
      var movedExpr = this.model.getItemById(id);
      var moveIds = movedExpr && movedExpr.formula && movedExpr.formula.move_ids;
      if (!moveIds) return;
      for (var i = 0; i < moveIds.length; i++) {
        if (moveIds[i] === undefined) continue;
        this.getItemView(moveIds[i]).sliderView.setProperty(
          'isMoving',
          false
        );
      }
    };

    view.onMovePoint = function (id, values) {
      var movedExpr = this.model.getItemById(id);
      var moveIds = movedExpr.formula && movedExpr.formula.move_ids;
      if (!moveIds) return;

      var expr, val;
      for (var i = 0; i < values.length; i++) {
        if (moveIds[i] === undefined) continue;
        expr = this.model.getItemById(moveIds[i]);
        if (expr && expr.slider) {
          val = expr.slider.computeSnappedValue(values[i]);
          expr.slider.setProperty('value', val);
        }
      }
      this.setSelected(null);
    };

    view.onLatexChange = function (latex) {
      _.each(this.__latexChangeCallbacks, function (cb) { cb(latex); });
    };

    view.init = function (model) {
      _super.init.call(this);
      this.model = model;
      this.model.triggerItemAdded = this.onItemAdded.bind(this);
      this.model.triggerItemRemoved = this.onItemRemoved.bind(this);
      this.model.triggerItemMoved = this.onItemMoved.bind(this);
      this.model.triggerSetState = this.onSetState.bind(this);
      
      // an optimization so that we don't compare entire items when changing
      // selectedItem property.
      this.setPropertyComparator('selectedItem', function (a,b) {
        return a === b;
      });
      
      this.observe('itemFocused', this.renderItemFocused.bind(this));
      this.observe('editListMode', this.renderEditListMode.bind(this));

      // ensure selected expression is visible on selection change and focused
      // expression is visible on keypress
      this.observe('selectedItem', this.selectedItemChanged.bind(this));
      $(document).on('keypress', '#exppanel', this.ensureActiveChildIsVisible.bind(this));

      this.dragdrop_expressions = DragDropExpressions(this);
      this.dragdrop_columns = DragDropColumns(this);
    };

    //when sliding a slider, we want to temporarily pad the bottom enough that things don't move around
    view.padLastExpression = function(padding) {
      var $lastExp = this.$('.expressionitem.new-expression');
      $lastExp.removeClass('animating').css('margin-bottom', + padding + 'px');
    };

    view.unpadLastExpression = function() {
      var $lastExp = this.$('.expressionitem.new-expression');
      $lastExp.addClass('animating').css('margin-bottom', '0');
    };

    view.padLastExpressionUntilTapEnd = function(padding){
      var self = this;
      this.padLastExpression(padding);
      $(document).on('tapend.animating-bottom', function() {
        self.unpadLastExpression();
        $(document).off('tapend.animating-bottom');
      });
    };
    
    view.updateWidth = function () {
      var exppanel = this.$('#exppanel');
      var maxWidth = 0;
      var minWidth = parseInt(exppanel.css('min-width'), 10);
     
      exppanel.scrollLeft(0);
      
      function includeWidth ($element) {
        var main = $element.find('.main');
        if (!main.length) return;

        var width = main.outerWidth() + main.offset().left + 5;
        if (width > maxWidth) maxWidth = width;
      }
      
      if (this.itemFocused) {
        var selected = this.getSelectedView();
        if (selected) {
          includeWidth(selected.$());
        }
      }
      
      if (this.editListMode || this.draggingColumn) {
         this.$('.expressiontable').each(function () {
           includeWidth($(this));
         });
      }

      if (maxWidth < minWidth) {
        maxWidth = minWidth;
      }

      var collapse_slowly = parseInt(exppanel.css('max-width'), 10) > maxWidth;
      if (collapse_slowly) {
        exppanel.addClass('collapse-slowly');
        setTimeout(function () {
          exppanel.removeClass('collapse-slowly');
        }, 0.5);
      } else {
        exppanel.removeClass('collapse-slowly');
      }
      
      exppanel.css('max-width', maxWidth);
    };
    

    view.onItemAdded = function (index, item) {
      //update index for newExpressionView
      if (this.newExpressionView) {
        this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
      }
      
      // if we've started adding items to dom, add this item. Otherwise,
      // the view will be created when the ExpressionListView is inserted
      // into the dom
      if (this.$items) {
        var view = this.createItemView(item);
        if (view) {
          if (index === 0) {
            view.prependTo(this.$items); // beginning
          } else if (index === this.model.getItemCount()-1) {
            view.appendTo(this.$items); //end
          } else { //somewhere in the middle
            view.insertAfter(this.$items.children(':nth-child('+ index +')'));
          }
        }

        // observe selected
        item.observe('selected.listview', this.observeItemSelected.bind(this));
        if (item.selected) {
          this.observeItemSelected('selected', item);
        }
        
        var len = this.model.getItemCount();
        for (var i=index; i<len; i++) {
          this.model.getItemByIndex(i).setProperty('index', i);
        }
        
        this.updateWidth();
      }
    };
    
    view.onItemRemoved = function (index, item) {
      var item_id = String(item.id);
      
      if (this.selectedItem === item) {
        this.setProperty('selectedItem', null);
      }
      
      item.unobserve('.listview');
            
      // update index on newExpressionView
      if (this.newExpressionView) {
        this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
      }
      
      // remove item view from dom
      var view = this.__itemViews[item_id];
      if (view) {
        view.remove();
        delete this.__itemViews[item_id];
        
        var len = this.model.getItemCount();
        for (var i=index; i<len; i++) {
          this.model.getItemByIndex(i).setProperty('index', i);
        }
      }
      
      this.updateWidth();
    };
    
    view.onItemMoved = function (from, to) {
      // update index of each affected item
      var min_affected = Math.min(from,to);
      var max_affected = Math.max(from,to);
      for (var i = min_affected; i <= max_affected; i++) {
        this.model.getItemByIndex(i).setProperty('index', i);
      }
        
      // move view to correct spot
      var view = this.getItemView(this.model.getItemByIndex(to).id);
      if (view) {
        var $items = this.$items;
        // put at beginning
        if (to === 0) {
          $items.prepend(view.$());
        }
          
        // put at end
        else if (to === this.model.getItemCount() - 1) {
          $items.append(view.$());
        }
          
        // put somewhere in middle
        else {
          
          // must add 1 to index if to > from. This is because the from spot will
          // get plucked out and inserted after the to spot. Means we need to
          // search one deeper into sibling list to find the correct node to
          // insert after.
          var child_index = to + ( to > from ? 1 : 0);
          view.$().insertAfter($items.children(':nth-child('+ child_index +')'));
        }
      }
    };
    
    view.onSetState = function (list) {
      // destroy item views
      //TODO - could do a destruct() and remove all at once from dom for optimization.
      for (var id in this.__itemViews) {
        if (this.__itemViews.hasOwnProperty(id)) this.__itemViews[id].remove();
      }
      
      this.__itemViews = {};
      this.selectedItem = null;
      
      // update index on newExpressionView
      if (this.newExpressionView) {
        this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
      }
          
      // make all the views at once and insert one large structure
      this.createAllItemViews();
    };
    
    view.renderItemFocused = function () {
      $('body').toggleClass('ITEM-FOCUSED', !!this.itemFocused);
    };
    
    // MUST OVERRIDE
    view.instantiateItemView = function (item) {};

    view.createItemView = function (item) {
      var view = this.instantiateItemView(item);
      var item_id = String(item.id);
      
      if (view) {
        this.__itemViews[item_id] = view;
        
        // add some triggers to the view
        var self = this;
        view.triggerDelete = function(){self.onDelete(view)};
        view.triggerEnterPressed = function(){self.onEnterPressed(view)};
        view.triggerUpPressed = function(){self.onUpPressed(view)};
        view.triggerDownPressed = function(){self.onDownPressed(view)};
        view.triggerBackspacePressed = function(){self.onBackspacePressed(view)};
        view.triggerDelPressed = function(){self.onDelPressed(view)};
      }
      
      return view;
    };
    view.createAllItemViews = function () {
      
      // only do this if we've been added to the dom
      if (!this.$items) return;
      
      var len = this.model.getItemCount();
      for (var i=0; i<len; i++) {
        var item = this.model.getItemByIndex(i);
        var view = this.createItemView(item);
        if (view) {
          view.appendTo(this.$items);
          //TODO - generate only the html

          item.setProperty('index', i);
          
          // observe selected
          item.observe('selected.listview', this.observeItemSelected.bind(this));
          if (item.selected) {
            this.observeItemSelected('selected', item);
          }
        }
      }
      
      //TODO - insert large structure at once
      
      //TODO - assign the nodes for each view based on the structure
      
      //Focus if something is selected
      var selected = this.getSelectedView();
      if(selected) {selected.addFocus();}
      
      this.updateWidth();
    };
    
    // holds a copy of the each item's view for later reference

    view.getItemView = function (id) {
      return this.__itemViews[String(id)];
    };
    
    view.onDelete = function (view) {
      var self = this;
      var animationDuration = 0.2;
      view.$().css({
        'transition': animationDuration + 's',
        'opacity': '0',
        'transform': "scale(.1, .1)"
      });
      setTimeout(function() {
        UndoRedo.oneTransaction(function(){
          self.model.removeItemAt(view.model.index);
          if (self.model.getItemCount() === 0) {
            var new_exp = ExpressionObject(undefined, self.model);
            self.model.insertItemAt(0, new_exp);
          }
        });
      }, 1000*animationDuration);
    };

    view.onUpPressed = function (view) {
      // nothing above
      if (view.model.index === 0) return;
      
      this.selectPrevExpression(view.model);
      this.getSelectedView().addFocus('end');
    };

    view.onDownPressed = function (view) {
      this.selectNextExpression(view.model);
      this.getSelectedView().addFocus('start');
    };
    
    view.onBackspacePressed = function (view) {
      this.upwardDeleteExpression(view.model);
      this.getSelectedView().addFocus('end');
    };
    
    view.onDelPressed = function (view) {
      this.downwardDeleteExpression(view.model);
      this.getSelectedView().addFocus('start');
    };

    view.onEnterPressed = function (view) {
      var obj = ExpressionObject({ selected:true }, this.model);
      this.model.insertItemAt(view.model.index + 1, obj);
      if (view.model.isFolder && !view.model.collapsed) {
        view.model.addItem(obj);
      }
      if (view.model.folder) view.model.folder.addItem(obj);
      this.getSelectedView().addFocus();
    };
    
    view.expressionsVisible = true;
    view.hideExpressions = function() {
      // deselect expression
      this.setSelected(null);

      $('#show-expressions-tab').show();

      this.setProperty('expressionsVisible', false);
      //remove the tab and transform the whole thing off the screen
      $('#hide-expressions-tab').hide();
      $(document.activeElement).blur();
      $('body').addClass('fullscreen');
      Resize.trigger();
    };

    view.showExpressions = function() {
      this.setProperty('expressionsVisible', true);
      $(document.activeElement).blur();
      $('#show-expressions-tab').hide();
      $('#exppanel-outer').addClass('opening');
      setTimeout(function() {
        $('body').removeClass('fullscreen');
        $('#exppanel-outer').removeClass('opening');
        if ($('#grapher').position().left > 0) {
          Resize.trigger();
        }
      }, 300);
    };
    
    view.renderEditListMode = function () {
      var $editListBtn = this.$('.edit-list-btn');
      var $body = $('body');
      var self = this;
      
      if (this.editListMode) {
        $editListBtn.addClass('btn-primary');
        $editListBtn.text('done');
        $editListBtn.removeClass('tooltip');
        
        $body.addClass('EDIT-LIST-MODE');
        
        this.setSelected(null);
        this.stopAllSliders();
        
        // listen for a tapstart event to close edit-list-mode
        $(document).on('tapstart.edit-list-mode', function (evt) {
          if (
            $(evt.target).closest('#exppanel').length === 0 &&
            $(evt.target).closest('.options-menu').length === 0 &&
            $(evt.target).closest('#expression-top-bar').length === 0
          ) {
            self.setProperty('editListMode', false);
          }
        });
        
      } else {
        $editListBtn.removeClass('btn-primary');
        $editListBtn.addClass('tooltip');
        $editListBtn.html('<i class="icon-settings" />');
        
        $body.removeClass('EDIT-LIST-MODE');
        
        // don't listen for the event to close edit-list-mode anymore
        $(document).off('.edit-list-mode');
      }
    };

    /*
    * EVENTS
    */
    view.onFocusIn = function (evt) {

      //it's possible to add focus to an expression even when the expressions are hidden.
      // Most prominently: if you click a curve to select it and then type
      // If that happens, we want to show the expression that's being edited, so pop back out the expressions list
      if (!this.expressionsVisible) {
        this.showExpressions();
      }

      var target = $(evt.target);
      var inMathquill = target.closest('.mathquill-rendered-math').length !== 0;
      var inEditableMathquill = target.closest('.mathquill-editable').length !== 0;
      var inText = target.closest('.expressiontext').length !== 0;
        
      if (inMathquill || inEditableMathquill || inText) {
        // in case we're in list mode, get out of it!
        this.setProperty('editListMode', false);
        this.setProperty('itemFocused', true);
      } else {
        this.setProperty('itemFocused', false);
      }

      this.setProperty('needFakeKeypad', inMathquill || inEditableMathquill);
      // editDisabled happens when you're in the dependent column of a table,
      // and you want the keypad arrows to move around, but there's nothing
      // useful that you can type.
      this.setProperty('editDisabled', inMathquill && !inEditableMathquill);

      clearTimeout(this.fakeKeypadTimeout);
    };
    
    view.onFocusOut = function () {
      clearTimeout(this.fakeKeypadTimeout);
      // setTimeout here is used to coalesce calls to onFocusOut and onFocusIn
      // that happen in the same tick. This happens, e.g. when a new
      // expression is created, and we move focus from the previous expression
      // to it.
      this.fakeKeypadTimeout = setTimeout(function () {

        // Mathquill does something weird where it triggers a focusout on
        // render, but nothing actually happens to focus. To combat that, and
        // anything else similar, we check if we still have a focused
        // expression. If so, just ignore this event.
        var selected = this.getSelectedView();
        if (selected && selected.isFocused()) return;

        this.setProperty('itemFocused', false);
        this.setProperty('needFakeKeypad', false);
        this.setProperty('editDisabled', false);
      }.bind(this), 0);
    };
    
    view.offset = function () {
      return this.$().offset();
    };

    view.setBottom = function (bottom) {
      var oldBottom = this.$().height() - this.$().offset().top;
      this.$().css('bottom', bottom + 'px');

      //If the user is currently in a mouse interaction and the height
      //is increasing, pad the last expression until they end their interaction to
      //prevent things from moving under them
      if (bottom < oldBottom && touchtracking.isTapActive()){
        this.padLastExpressionUntilTapEnd(oldBottom - bottom);
      }
    };

    view.didInsertElement = function () {
      var self = this;
      _super.didInsertElement.call(this);
      
      this.addExpressionView = AddExpressionView(this);
      this.addExpressionView.appendTo(this.$());
      this.addExpressionView.setupOpenButton(this.$('.action-add-expression'), 'tap');

      this.$items = this.$('.template-expressioneach');
      Resize.trigger();

      //
      //listen for scroll && add class when scrolled
      //
      this.$('#exppanel').scroll(function(evt) {
        $('#expression-top-bar').toggleClass(
          'expressions-scrolled',
          $(evt.target).scrollTop() > 0
        );
      });
      
      //
      // for iPad & nexus, listen for taps in the empty area underneath an expression and defocus
      // because that doesn't happen automatically. The way I'm detecting such a tap is by checking if the
      // event is within an .expressionitem. If it's not, we're assuming the tap is within empty space.
      //
      this.$('#exppanel').on('tapstart', function(evt) {
        // avoids losing focus when on desktop and we mouseDown on the scrollbar. If we want to lose foucs in
        // that case, this line is perfect to remove. If we want something more robust to detect that we're
        // on the scrollbar, we might be able to check x position of the event compared to the width of the
        // inner content.
        if (evt.device === 'mouse') return;
        
        if ($(evt.target).closest('.expressionitem').length === 0) {
          $(document.activeElement).blur();
        }
      });
      
      //the below should happen automatically, but doesn't on iPad / android
      //this lets you defocus the currently focused expression by clicking the 'Expressions' header
      $('#expression-top-bar').on('tapstart', function(evt) {
        if (evt.wasHandled()) return;
        
        self.setSelected(null);
      });


      this.$().on('tap', '.action-clearall', function () {
        self.triggerClearGraph();
        Toast.show("Graph cleared.", function() {
          self.setProperty('editListMode', true);
        });
      });

      this.$().on('tap', '.action-undo', function () {
        UndoRedo.undo();
      });

      this.$().on('tap', '.action-redo', function () {
        UndoRedo.redo();
      });

      this.$().on('focusout', this.onFocusOut.bind(this));
      this.$().on('focusin',  this.onFocusIn.bind(this));
      this.$('.action-toggleeditlistmode').on('tap', function () {
       self.setProperty('editListMode', !self.editListMode);
      });
      this.$('.action-hideexpressions').on('tap', this.hideExpressions.bind(this));
      this.$('.action-showexpressions').on('tap', this.showExpressions.bind(this));
      $('body').on('keydown', this.handleKeyDown.bind(this));
      
      this.$().on('tapstart', '.action-hamburger', function () {
        $('body').toggleClass('resources-open');
        Resize.waitForCSSAnimation('#sliding-interior', /transform/);
      });
      
      this.renderItemFocused();
      this.renderEditListMode();
      
      this.newExpressionView = NewExpressionView(this);
      this.newExpressionView.replace(this.$('.template-newexpression'));
      this.newExpressionView.setProperty('index', this.model.getItemCount()+1);
     
      // whenever mathquill renders
      this.$().on('render', function (evt) {
        self.updateWidth();
      });
      
      // these things all factor into how wide the expression list is, so we watch them
      this.observe('editListMode itemFocused selectedItem draggingColumn', function () {
        self.updateWidth();
      });
      
      this.createAllItemViews();
    };

    view.selectedItemChanged = function() {
      if (this.selectedItem) {
        this.__lastFocusedItem = this.selectedItem.id;
      }
      this.ensureActiveChildIsVisible();
    };

    //note: this will return undefined if an invalid id is passed, 
    //which will happen if, for example, the last item was deleted
    //or no item has been focused yet
    view.getLastFocusedItem = function() {
      return this.getItemById(this.__lastFocusedItem);
    };


    view.getFirstVisibleItem = function() {
      var top = this.$().position().top;
      var el = this.expressionAtPoint(0, top);
      
      if (!el) {
        return this.getItemByIndex(0);
      }
      //make sure it's fully visible
      if (this.getItemView(el.id).$().position().top < 0) {
        el = this.getItemByIndex(el.index+1);
      }
      return el;
    };

    view.appendBlankExpression = function() {
      this.newExpressionView.newMath();
    };

    // Find the view for the selected expression and scroll that expression
    // into view. If the expression doesn't have a view yet, we'll let the
    // view call this once it's inserted into the dom. If there is no selected
    // view, then check if there's a focused view. If so, scroll that until
    // it's visible
    view.ensureActiveChildIsVisible = function(){
  
      // if an item is selected, try to force it into view
      if (this.selectedItem) {
        var selectedView = this.getItemView(this.selectedItem.id);
        if (selectedView) {
          this.$('#exppanel').scrollVisible(selectedView.$(), 0, -75);
        }
      }
      
      // otherwise, if an item is focused, try to force it into view
      else {
        var $focused = $(document.activeElement);
        var $expression = $focused.closest('.expressionitem');
        if ($expression.length) {
          this.$('#exppanel').scrollVisible($expression, 0, -20);
        }
      }
      
    };
      
    view.handleKeyDown = function(evt) {
      // make sure nothing has focus
      if (document.activeElement && document.activeElement !== document.body) {
        return;
      }
      
      // make sure event didn't happen from within expression list
      if ($(evt.target).closest('#exppanel').length) {
        return;
      }

      var selected = this.getSelectedView();
      if (selected && selected.isFocused()) {
        selected.processMissedKeyEvent(evt);
        return;
      }
      if (!selected) {
        return;
      }

      var key = Keys.lookup(evt);
      switch (key) {
        case Keys.UP:
          evt.preventDefault();
          this.selectPrevExpression(selected.model);
          break;
          
        case Keys.DOWN:
          evt.preventDefault();
          this.selectNextExpression(selected.model, true);
          break;
        case Keys.ESCAPE:
          evt.preventDefault();
          this.setSelected(null);
          break;
            
        case Keys.RIGHT:
        case Keys.TAB:
          evt.preventDefault();
          if (selected) {
            if (selected.model.isTable) {
              selected.addFocus('cell', 0, 0);
            } else {
              selected.addFocus('start');
            }
          }
          break;
          
        case Keys.LEFT:
          evt.preventDefault();
          if (selected) {
            if (selected.model.isTable) {
              selected.addFocus('cell', 0, selected.model.columns.length - 1);
            } else {
              selected.addFocus('end');
            }
          }
          break;
          
        case Keys.BACKSPACE:
          evt.preventDefault();
          if(selected){
            this.upwardDeleteExpression(selected.model);
          }
          break;
          
        case Keys.DELETE:
          evt.preventDefault();
          if(selected){
            this.downwardDeleteExpression(selected.model);
          }
          break;
          
        case Keys.ENTER:
          evt.preventDefault();
          if (selected) {
            var obj = ExpressionObject({ selected:true }, this.model);
            this.model.insertItemAt(selected.model.index + 1, obj);
            this.getItemView(obj.id).addFocus('end');
          }
          break;
          
        default:
          //ignore things like ctrl-copy, ctrl-paste, alt-tab, shift
          if (evt.metaKey ||
              evt.ctrlKey ||
              key === Keys.SHIFT ||
              key === Keys.SPACEBAR
          ) {
            return;
          }

          if (selected) {
            if (selected.model.isTable) {
              // do nothing since we don't know where to type
            } else {
              selected.addFocus('end');
            }
          }
      }
    };
      
    /*
    * PUBLIC METHODS
    */

    view.getWidth = function() {
      return this.$().children('#exppanel').outerWidth();
    };

    view.observeItemSelected = function (property, item) {
      var selected = item.selected;
      if(!selected && this.selectedItem === item){
        this.setProperty('selectedItem', null);
      } else if (selected && !this.selectedItem) {
        this.setProperty('selectedItem', item);
      } else if (selected && this.selectedItem !== item) {
        this.selectedItem.setProperty('selected', false);
        this.setProperty('selectedItem', item);
      }
    };

    view.isSelected = function (id) {
      var selected = this.getSelected();

      if (selected && selected.isTable) {
        var selectedCell = selected.selectedCell;
        if (selectedCell) {
          selected = selected.columns[selectedCell.column];
        } else {
          selected = null;
        }
      }

      return selected && selected.id.toString();
    };

    view.getSelected = function() {
      return this.selectedItem;
    };
    
    view.getSelectedView = function () {
      var selected = this.getSelected();
      if (selected) {
        var view = this.getItemView(selected.id);
        return view;
      }
      
      return null;
    };

    view.setSelected = function(i) {
      var nextSelected = i;

      if (typeof i === 'number')  nextSelected = this.model.getItemByIndex(i);
      if (nextSelected) {
        nextSelected.setProperty('selected', true);
      } else {
        var selected = this.getSelected();
        if (selected) selected.setProperty('selected', false);
      }
    };
    
    view.upwardDeleteExpression = function (expression) {
      var index = expression.index;
      var prev = this.model.getItemByIndex(index - 1);
      var self = this;
      
      if (prev) {
        this.setSelected(prev);
        this.model.removeItemAt(index);
      }
      
      // first, but not only expression
      else if (this.model.getItemCount() > 1) {
        this.setSelected(1);
        this.model.removeItemAt(index);
      }
        
      // only expression
      else {
        UndoRedo.oneTransaction(function(){
          self.model.removeItemAt(0);
          self.model.insertItemAt(0, ExpressionObject(undefined, self.model));
          self.setSelected(0);
        });
      }
    };
    
    view.downwardDeleteExpression = function (expression) {
      var index = expression.index;
      var next = this.model.getItemByIndex(index + 1);
      var self = this;
      
      if (next) {
        this.setSelected(next);
        this.model.removeItemAt(index);
      }
      
      // last, but not only expression
      else if (this.model.getItemCount() > 1) {
        this.setSelected(index-1);
        this.model.removeItemAt(index);
      }
      
      // only expression
      else {
        UndoRedo.oneTransaction(function(){
          self.model.removeItemAt(0);
          self.model.insertItemAt(0, ExpressionObject(undefined, self.model));
          self.setSelected(0);
        });
      }
    };
    
    view.selectPrevExpression = function (expression) {
      if (!expression) return;
      
      var index = expression.index;
      var prev = this.model.getItemByIndex(index - 1);

      if (prev) {
        prev.setProperty('selected', true);

        // check if this was an empty last expression
        // if so, remove it
        if (index + 1 === this.model.getItemCount() && expression.isEmpty()) {
          this.model.removeItemAt(index);
        }
      }
    };
 
     view.selectNextExpression = function (expression, dontCreateNew) {
       if (!expression) return;

       var index = expression.index;
       var next = this.model.getItemByIndex(index + 1);

       if (next) {
         next.setProperty('selected', true);
       } else if(!dontCreateNew) {
         var obj = ExpressionObject({ selected:true }, this.model);
         this.model.insertItemAt(index + 1, obj);
       }
     };

     view.getItemsByIndexRange = function (min, max) {
       min = Math.max(0, min);
       max = Math.min(this.model.getItemCount()-1 , max);
       
       var arr=[];
       for (var i=min; i<=max; i++) {
         arr.push(this.model.getItemByIndex(i));
       }
       return arr;
     };
     
     view.getItemByIndex = function(index) {
       var items = this.getItemsByIndexRange(index, index);
       if (!items.length) return null;
       
       return items[0];
     };

     // TODO - should put this on the model itself. fine for now
     view.getItemById = function(id) {
       return this.model.getItemById(id);
     };
     
     // TODO - figure out if this should be separate from getItemById
     // and if so, figure out a more efficient way to do this. Probably
     // should have each item add/remove it's children from this list. Or
     // we could know the parent's id jump straight to the parent. A way to
     // do that would be for the child's id to be prefixed by the parent's id.
     view.getChildItemById = function (id) {
       if (id === null) return null;
              
       var len = this.model.getItemCount();
       for (var i=0; i<len; i++) {
         var item = this.model.getItemByIndex(i);
         
         // tables are the only ones that can have children
         if (item.isTable) {
           var columns = item.columns;
           for (var j=0; j<columns.length; j++) {
             if (String(columns[j].id) === String(id)) {
               return columns[j];
             }
           }
         }
       }
       
       return null;
     };

    /*
    * Does a binary search to find the .expressionitem that is at the point
    */
    view.expressionAtPoint = function (x, y) { //TODO - always return view and move out of expression list.
      var lo = 0;
      var hi = this.model.getItemCount()-1;

      while (lo<=hi) {
        var mid = lo + Math.floor((hi-lo)/2);
        var exp = this.model.getItemByIndex(mid);
        var view = this.getItemView(exp.id);
        var rect = view && view.getBounds();

        if (!rect || rect.top > y) {
          hi = mid - 1;
        } else if (rect.bottom < y) {
          lo = mid + 1;
        } else {
          return exp;
        }
      }

      return null;
    };

    /*
    * Finds the first expression at or above the point
    */
    view.expressionAbovePoint = function (x, y, getDom, ignoreIndex) {
      //TODO - always return view and move out of here...
      var lo = 0;
      var hi = this.model.getItemCount() - 1;
      var found=null;

      while (lo<=hi) {
        var mid = lo + Math.floor((hi - lo)/2);
        
        if (ignoreIndex && mid === ignoreIndex) {
          if (mid < hi) {
            mid++;
          } else if (mid > lo){
            mid--;
          } else {
            return (getDom) ? $() :  null;
          }
        }
        
        var exp = this.model.getItemByIndex(mid);
        var view = this.getItemView(exp.id);
        var rect = view && view.getBounds();

        if (!rect || rect.top > y) {
          hi = mid - 1;
        } else {
          lo = mid + 1;
          found = exp;
        }
      }

      if (found) return (getDom) ? this.getItemView(found.id).$() : found;

      return (getDom) ? $() :  null;
    };
    
    view.getActiveMathquill = function () {
      return $(document.activeElement).closest('.mathquill-editable');
    };

    view.onProjectorModeChange = function() {
      for (var id in this.__itemViews) {
        if (this.__itemViews.hasOwnProperty(id)) {
          this.__itemViews[id].onProjectorModeChange();
        }
      }
    };

    view.onChange = function(changes) {
      var id;

      for (id in changes) {
        if (!changes.hasOwnProperty(id)) continue;
        
        var expression = this.getItemById(id);
        if (expression) {
          
          if (expression.constructor === ExpressionObject) {
            var formula = changes[id];
            if (!formula) continue;
            
            var view = this.getItemView(expression.id);
            if (expression.loading === false && view && view.doAnimate === undefined) {
              view.setProperty('doAnimate', true);
            }

            expression.setProperty('loading', false);
            expression.setProperty('formula', formula);
          } else if (expression.isTable) {
            var table_data = changes[id];
            expression.setComputedValues(table_data);
          }
        }
      }
    };
  });
  
  return ExpressionListView;
});

define('expressions/abstract_icon',['require','jquery','lib/underscore_view','pjs','lib/keys'],function(require){
  var $ = require('jquery');
  var UnderscoreView = require('lib/underscore_view');
  var P = require('pjs');
  var Keys = require('lib/keys');

  var icon_count = 0;
  
  var AbstractIconView = P(UnderscoreView, function (view, _super) {
    
    view.init = function (parentView) {
      this.parentView = parentView;
      this.model = parentView.model;
      
      _super.init.call(this);
      this.optionsmenu_guid = (++icon_count);

      // model.error is a message; this.error is boolean whether we care about
      // the error. One time we don't care is if the model is empty.
      this.model.observe('error.iconview', this.renderErrorTooltip.bind(this));
      this.observe('error', this.renderErrorTooltip.bind(this));

      this.observe('error errorStable', this.computeErrorShown.bind(this));
      this.observe('errorShown', this.renderErrorShown.bind(this));
    };
    
    view.destruct = function () {
      this.model.unobserve('.iconview');
    };
       
    view.computeErrorShown = function () {
      this.setProperty('errorShown', this.error && this.errorStable);
    };
    
    view.renderErrorTooltip = function () {
      var error = this.error ? this.model.error : '';
      this.$().closest('.variable-errortooltip').attr('tooltip', error);
    };

    view.renderErrorShown = function () {
      this.$().toggleClass('error', !!this.errorShown);
    };

    view.didInsertElement = function () {
      this.renderErrorShown();
      this.renderErrorTooltip();
    };
    
    // defined in subclass
    view.createOptionsMenuView = function () {};
    
    view.toggleOptions = function() {
      if (this.error) {
        this.hideOptions();
        return;
      }
      if (this.optionsShown) {
        this.hideOptions();
        return;
      }
      
      this.optionsShown = true;

      // Add options menu to #main. workaround bug with "-webkit-scrolling-overflow: touch" and child "position:
      // relative" elements not respecting z-index
      // see: "-webkit-overflow-scrolling: touch is messing up z-index stacking"
      // [http://code.google.com/p/chromium/issues/detail?id=128325]
      this.optionsMenu = this.createOptionsMenuView(); //defined in subclass
      
      // TODO - temporary until we have a better popup menu manager
      window.opened_options_menu = this;

      var id = this.optionsmenu_guid;
      
      // ipad sends out a scroll event when you tapstart on the button that
      // opens the context menu. We want that first scroll event to be
      // ignored, so we add the listener after a slight timeout to give the
      // first scroll event time to pass through.
      setTimeout(function(){
        //make sure options menu hasn't closed before the timeout fires
        if (this.optionsShown) {
          $('#exppanel').on("scroll.options-menu-" + id, function(evt) {
            this.hideOptions();
          }.bind(this));
        }
      }.bind(this), 0);
      
      $(document).on("keydown.options-menu-" + id, function (e) {
        if (Keys.lookup(e) === Keys.ESCAPE) {
          this.hideOptions();
        }
      }.bind(this));
            
      $(document).on("tapstart.options-menu-" + id, function (e) {
        
        // close this unless:
        // * we click on the icon again (will handle that separately)
        // * we click insde the context-menu (that's been moved to the body)
     
        // we click inside the context menu (but not on the "close" button)
        if ($(e.target).closest('.options-menu').length) return;
     
        // we click within this view again
        if ( $(e.target).closest(this.$()).length) return;

        this.hideOptions();

      }.bind(this));
    };
    
    view.hideOptions = function() {
      var id = this.optionsmenu_guid;
      $(document).off("tapstart.options-menu-" + id);
      $(document).off("keydown.options-menu-" + id);
      $('#exppanel').off("scroll.options-menu-" + id);
      this.optionsShown = false;
      
      if (this.optionsMenu) {
        this.optionsMenu.remove();
        this.optionsMenu = null;
      }
      
      // TODO - temporary until we have a better popup menu manager
      if (window.opened_options_menu === this) {
        window.opened_options_menu = null;
      }
    },
    
    view.onDisplayChange = function () {
      var error = this.model.error ? true : false;
      if (this.model.isEmpty()) error = false;
      
      //next sequence of code will only add the errorStable property
      //if the error value hasn't changed within the last 500ms
      if (error !== this.error) {
        this.setProperty('errorStable',false);
        this.__errorTime = new Date().getTime();
        setTimeout(this.onDisplayChange.bind(this), 100);
      } else if (this.__errorTime + 500 < new Date().getTime()) {
        this.setProperty('errorStable', true);
      } else if (!this.errorStable) {
        setTimeout(this.onDisplayChange.bind(this), 100);
      }

      this.setProperty('error', error);
    };
    
  });
 
  return AbstractIconView;
});

define('template!expression_options_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'exp-color-menu options-menu\'>\n  <div class="template-colorsview"></div>\n</div>';
}
return __p;
};});
define('loadcss!css/color_menu', function(){});
define('template!color_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="color-menu do-not-blur">\n  ';
 _.each(colors, function (color) { 
;__p+='\n    <span class="color-option"\n          color="'+
( color )+
'"\n          style="background: '+
( color )+
'"\n          handleevent="true">\n          <i class=\'icon-check\'></i>\n    </span>\n  ';
 }) 
;__p+='\n</div>';
}
return __p;
};});
define('expressions/color_menu_view',['require','loadcss!css/color_menu','jquery','pjs','lib/underscore_view','./colors','template!color_menu'],function(require){
  require('loadcss!css/color_menu');
  
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var Colors = require('./colors');
  
  var template = require('template!color_menu');
 
  var ExpressionColorsView = P(UnderscoreView, function (view, _super) {
    view.template = template,
    
    view.init = function (expression) {
      _super.init.call(this);
      this.expression = expression;
      this.expression.observe('color.colorview', this.renderSelectedColor.bind(this));
      this.expression.observe('userRequestedGraphing.colorview', this.renderSelectedColor.bind(this));
    };
    
    view.destruct = function () {
      this.expression.unobserve('.colorview');
    };
    
    view.renderSelectedColor = function () {
      var color = this.expression.color;
      this.$('.color-option').removeClass('selected');
      if (this.expression.userRequestedGraphing !== 'never') {
        this.$('.color-option[color="'+color+'"]').addClass('selected');
      }
    };
    
    view.didInsertElement = function () {
      this.$().on('tap tapstart', '.color-option', this.onSelectColor.bind(this));
      this.renderSelectedColor();
    };

    view.getTemplateParams = function () {
      return {
        colors: Colors.all
      };
    };

    view.onSelectColor = function (evt) {
      // when using mouse, fire on 'tapStart' and when on touch we
      // fire on the 'tap' event.
      if (evt.type === 'tap' && evt.device === 'mouse') return;
      if (evt.type === 'tapstart' && evt.device === 'touch') return;

      var color = $(evt.target).closest('.color-option').attr('color');
      if (
        //clicking on the selected color turns off graph
        color === this.expression.color &&
        this.expression.userRequestedGraphing !== 'never' &&
        (!this.expression.table) //except in a table
      ) {
        this.expression.setProperty('userRequestedGraphing', 'never');
      } else {
        this.expression.setProperty('color', color);
        this.expression.setProperty('userRequestedGraphing', 'default');
      }
    };
    
  });
  
  return ExpressionColorsView;
});

define('expressions/expression_options_view',['require','pjs','lib/underscore_view','template!expression_options_menu','./color_menu_view'],function(require){
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var template = require('template!expression_options_menu');
  var ColorMenuView = require('./color_menu_view');
    
  var ExpressionOptionsMenuView = P(UnderscoreView, function (view, _super) {
    view.template = template;
    
    view.init = function (expression) {
      this.expression = expression;
    };
    
    view.destruct = function () {
      if (this.colorsView) {
        this.colorsView.remove();
        this.colorsView = null;
      }
    };
    
    view.didInsertElement = function () {
      // this view has a nested template. We instantiate the color picker
      // and replace a placeholder element within the html.
      this.colorsView = ColorMenuView(this.expression);
      this.colorsView.replace(this.$('.template-colorsview'));
    };
    
  });

  return ExpressionOptionsMenuView;
});

define('template!expression_icon', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="icon graph-icon variable-colorcss variable-errortooltip tipsy-sticky">\n\t<i class=\'icon-play\'></i>\n\t<i class=\'icon-pause\'></i>\n</span>\n';
}
return __p;
};});
define('expressions/expression_icon_view',['require','pjs','expressions/abstract_icon','./expression_options_view','math/comparators','template!expression_icon'],function(require){
  var P = require('pjs');
  var AbstractIconView = require('expressions/abstract_icon');
  var ExpressionOptionsMenuView = require('./expression_options_view');
  var Comparators = require('math/comparators');
  var template = require('template!expression_icon');

  var ExpressionIconView = P(AbstractIconView, function (view, _super) {
    view.template = template;
    
    view.init = function (parentView) {
      _super.init.call(this, parentView);
      this.expression = this.model;
      
      this.expression.observe('formula.iconview', this.onDisplayChange.bind(this));
      this.expression.observe('shouldGraph.iconview', this.onDisplayChange.bind(this));
      this.parentView.observe('isPlaying.iconview', this.onDisplayChange.bind(this));
      this.expression.observe('isGraphable.iconview', this.renderUngraphable.bind(this));
      this.expression.observe('loading.iconview', this.renderLoading.bind(this));
      this.expression.observe('color.iconview', this.renderColorCSS.bind(this));
    };
    
    view.destruct = function () {
      _super.destruct.call(this);
      
      this.expression.unobserve('.iconview');
    };
    
    view.renderUngraphable = function () {
      this.$().toggleClass('ungraphable', !this.expression.isGraphable);
    };

    view.renderLoading = function () {
      this.$().toggleClass('loading', !!this.expression.loading);
    };
    
    view.renderColorCSS = function() {
      this.$('.variable-colorcss').css({
        'border-color' : this.expression.color,
        'background' : this.expression.color
      });
    };
    
    view.didInsertElement = function () {
      var self = this;
      _super.didInsertElement.call(this);
      
      this.renderLoading();
      this.renderUngraphable();
      this.renderColorCSS();
      this.onDisplayChange();

      this.$icon = this.$('.icon');

      var handleIconTapped = function(evt, device){
        if(evt.wasHandled('dragdrop')) return; //Don't toggle if we were handled by dragdrop
        if(evt.device !== device) return;

        if (self.parentView.listView.editListMode) {
          if (self.expression.isGraphable) {
            self.toggleOptions();
          }
        } else if (self.expression.formula.is_animatable) {
          self.toggleIsPlaying();
        } else {
          self.toggleGraphShown();
        }
      };

      this.$().closest('.action-icon-mouse').on('tap', function(evt){
        handleIconTapped(evt, 'mouse');
      });

      this.$().closest('.action-icon-touch').on('tap', function(evt){
        handleIconTapped(evt, 'touch');
      });
    };

    // TODO - consider userRequestedGraphing being part of the expression's
    // view not it's model. Not sure on that because whether the expression
    // is graphed might be model worthy.
    view.isGraphShown = function () {
      return this.expression.userRequestedGraphing !== "never";
    };

    view.toggleIsPlaying = function () {
      if (this.parentView.isPlaying) {
        this.parentView.sliderView.stop();
      } else {
        this.parentView.sliderView.play();
      }
    };

    view.toggleGraphShown = function() {
      if (!this.model.isGraphable) return;
      if (this.errorShown) return;

      // Trying to edit whether a graph is shown in a hidden folder should
      // show the folder.
      if (this.model.folder && this.model.folder.hidden) {
        this.model.folder.setProperty('hidden', false);
        return;
      }

      if (this.isGraphShown()) {
        this.expression.setProperty("userRequestedGraphing", "never");
      } else {
        this.expression.setProperty("userRequestedGraphing", "always");
      }
    };

    view.createOptionsMenuView = function () {
      var optionsView = ExpressionOptionsMenuView(this.expression);
      optionsView.appendTo(this.$().closest('.expressionitem'));
      return optionsView;
    };
    
    view.onDisplayChange = function () {
      _super.onDisplayChange.call(this);
      if (!this.$icon) return;
      
      var formula = this.expression.formula;
      var icon_class = '';
      
      if (formula.is_animatable) {
        if (this.parentView.isPlaying) {
          icon_class = 'animate-pause';
        } else {
          icon_class = 'animate-play';
        }
      } else if (this.error || !formula.is_graphable) {
        icon_class = '';
      } else {

        var shouldGraph = this.expression.shouldGraph;
        var operator = formula.operator;
        var shaded = Comparators.table[operator].direction !== 0;
        var dotted = Comparators.table[operator].inclusive === false;
              
        if (!shouldGraph) {
          icon_class = 'graph-hidden';
        } else if (formula.move_ids) {
          icon_class = 'graph-movable-point';
        } else if (formula.is_point_list) {
          icon_class = 'graph-point';
        } else if (formula.is_shade_between) {
          // TODO - missing icon for this
          icon_class = 'graph-shaded-inequality';
        } else if (!dotted && !shaded) {
          icon_class = 'graph-function';
        } else if (!dotted && shaded) {
          // TODO - missing icon for this
          icon_class = 'graph-shaded-inequality';
        } else if (dotted && !shaded) {
          icon_class = 'graph-inequality';
        } else if (dotted && shaded) {
          icon_class = 'graph-shaded-inequality';
        }
      }
      
      // efficently changes the class of the icon
      if (this.rendered_icon_class === icon_class) return;
      if (this.rendered_icon_class) {
        this.$icon.removeClass(this.rendered_icon_class);
      }
      this.rendered_icon_class = icon_class;
      if (icon_class) {
        this.$icon.addClass(icon_class);
      }
      
    };
  });
  
  return ExpressionIconView;
});

define('template!evaluation_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="evaluation do-blur" handleEvent="true">\n  <table>\n    <tr>\n      <th class="action-selectevaluation">\n        <span class="template-dependentlabelhtml"></span>\n        <span class="equals">=</span>\n      </th>\n      <td class="text-selectable template-evaluationshtml"></td>\n    </tr>\n  </table>\n</div>';
}
return __p;
};});

define('expressions/evaluation',['require','pjs','lib/underscore_view','template!evaluation_view'],function(require){
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var template = require('template!evaluation_view');

  var EvaluationView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.init = function (domain) {
      _super.init.call(this);
      this.evaluations = [];

      this.observe('dependentLabel', this.renderDependent.bind(this));
      this.observe('evaluations', this.renderEvaluations.bind(this));
    };

    view.renderDependent = function () {
      this.$('.template-dependentlabelhtml').html(this.dependentLabel);
    };
    
    view.renderEvaluations = function () {
      var vals = this.evaluations;
      var vals_str = [];

      for (var i=0; i<vals.length; i++) {
        var f_val = vals[i];
        if (f_val.val === false) {
          f_val.val = 'false';
        } else if (isNaN(f_val.val)) {
          f_val.val = 'undefined';
        } else if (f_val.val === true) {
          f_val.val = 'true';
        } else if (Math.abs(f_val.val) < 1e-15) {
          f_val.val = 0;
        } else if (vals.length === 1) {
          f_val.val = Number(f_val.val.toPrecision(8));
        } else {
          f_val.val = Number(f_val.val.toPrecision(6));
        }

        vals_str.push(f_val.val);
      }

      if (vals_str.length === 0) return "";
      var output = vals_str.join('<span class="or">or</span>');
      
      this.$('.template-evaluationshtml').html(output);
    };

    view.didInsertElement = function () {
      this.renderDependent();
      this.renderEvaluations();
      
      this.$('.action-selectevaluation').on('tap', this.onSelectEvaluation.bind(this));
    };

      
    view.onSelectEvaluation = function () {
      var numberElement = this.$('td')[0];
      var range = document.createRange();
      range.selectNodeContents(numberElement);
      window.getSelection().removeAllRanges();
      window.getSelection().addRange(range);
    };

  });
  return EvaluationView;
});

define('template!domain_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="domain do-blur" handleEvent="true">\n  \n  <div class="edit-domain variable-invalid graph-input-container">\n    <table>\n      <tr>\n        <td>\n          <span class="before-input"></span>\n          <input type="number" limit="min" />\n          <span class="after-input"></span>\n        </td>\n        <td class="text">≤</td>\n        <td class="text">t</td>\n        <td class="text">≤</td>\n        <td>\n          <span class="before-input"></span>\n          <input type="number" limit="max" />\n          <span class="after-input"></span>\n        </td>\n      </tr>\n    </table>\n  </div>\n  \n  <div class="display-domain">\n    <span class="variable-min"></span> ≤ t ≤ <span class="variable-max"></span>    \n  </div>\n\n</div>';
}
return __p;
};});
define('expressions/domain_view',['require','jquery','lib/underscore_view','pjs','template!domain_view','lib/keys'],function(require){
  var $ = require('jquery');
  var UnderscoreView = require('lib/underscore_view');
  var P = require('pjs');
  var template = require('template!domain_view');
  var Keys = require('lib/keys');

var DomainView = P(UnderscoreView, function (view, _super) {
  view.template = template;

  view.init = function (domain) {
    _super.init.call(this);

    this.domain = domain;

    this.domain.observe('min.domainview', this.renderMin.bind(this));
    this.domain.observe('max.domainview', this.renderMax.bind(this));
    this.setProperty('editing', false);
    this.setProperty('invalid', !this.domain.isValid());
    this.observe('invalid', this.renderInvalid.bind(this));
    this.observe('editing', this.renderEditing.bind(this));
    this.storeLastValidDomain();
  };

  view.checkInvalid = function () {
    var min = parseFloat(this.$('input[limit=min]').attr('value'));
    var max = parseFloat(this.$('input[limit=max]').attr('value'));

    var invalid = ( !isFinite(min) || !isFinite(max) || min>=max);
    this.setProperty('invalid', invalid);
  };
  
  view.destruct = function () {
    this.domain.unobserve('.domainview');
  };
  
  view.storeLastValidDomain = function () {
    if (this.domain.isValid()) {
      this.lastValidDomain = this.domain.serialize();
    }
  };
  
  view.renderInvalid = function () {
    this.$('.edit-domain').toggleClass('invalid', !!this.invalid);
  };
  
  view.renderEditing = function () {
    var editing = this.getProperty('editing');
    this.$().toggleClass('editing-domain', !!editing);
  };
  
  view.renderMin = function () {
    var min = this.domain.min;
    this.$('input[limit=min]').val(min);
    this.$('.variable-min').text(min);
  };
  
  view.renderMax = function () {
    var max = this.domain.max;
    this.$('input[limit=max]').val(max);
    this.$('.variable-max').text(max);
  };

  view.didInsertElement = function () {
    this.$('input').on('focusin', this.focusIn.bind(this))
                   .on('focusout', this.focusOut.bind(this))
                   .on('keydown keyup keypress', this.handleUserInput.bind(this));
    this.$('.display-domain').on('tap', this.onEditLimit.bind(this));
    this.renderEditing();
    this.renderMin();
    this.renderMax();
  };

  view.onEditLimit = function (evt) {
    evt.preventDefault();
    var $target = $(evt.toElement);
    this.setProperty('editing', true);
    if ($target.hasClass('variable-max')) {
      this.$('input[limit="max"]').focus().select();
    } else {
      this.$('input[limit="min"]').focus().select();
    }
  };

  view.stopEditing = function () {
    if (!this.domain.isValid() && this.lastValidDomain) {
      this.domain.setProperty('min', this.lastValidDomain.min);
      this.domain.setProperty('max', this.lastValidDomain.max);
    }
    this.setProperty('editing', false);
  };

  // blur input when enter pressed
  view.handleUserInput = function(evt) {
     if (Keys.lookup(evt) === Keys.ENTER) {
      $(document.activeElement).blur();
    } else {
      this.checkInvalid();
    }
  };

  // went straight into a focus, so don't save
  view.focusIn = function(evt) {
    clearTimeout(this.saveAfterBlurTimeout);
    this.checkInvalid();
  };

  // if we don't focus into one of the other boxes really soon,
  // we'll just act like the save button was pressed. This is
  // a sideeffect of focusin being fired AFTER focusout. Temporarily,
  // nothing is focused and we can't tell if focus is about to be
  // placed or not.
  view.focusOut = function(evt) {
    var self = this;
    this.save(evt.target);
    this.saveAfterBlurTimeout = setTimeout(function() {
      clearTimeout(self.saveAfterBlurTimeout);
      self.stopEditing();
    }, 1);
    this.checkInvalid();
  };

  view.save = function(node) {
    if (node) {
      var target = $(node);
      var value = parseFloat(target.attr('value'));

      if (target.attr('limit') === 'min') {
        // set the new min
        if (value < this.domain.max) {
          this.domain.setProperty('min', value);
        // reset the value since it's invalid
        } else {
          target.attr('value', this.domain.min);
        }
      } else if (target.attr('limit') === 'max') {
        // set the new max
        if (value > this.domain.min) {
          this.domain.setProperty('max', value);
        // reset the value since it's invalid
        } else {
          target.attr('value', this.domain.max);
        }
      }
      this.storeLastValidDomain();
    }
  };
});

return DomainView;
});

define('loadcss!css/slider', function(){});
define('main/focus',['require'],function (require) {
  // The point of this right now is to allow settings, subheader, etc. to
  // take focus from the expressions list. Leaving it very simple since its
  // current needs are simple.
  return {
    // overridden by calc*.js to remove focus from the expressions list.
    takeFocus: function () {}
  };
});
define('template!slider_view', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="slider-container" tapboundary="true">\n\n  <div class="do-blur slider" handleEvent="true">\n    <div class="minLabel template-minlabelhtml">\n    </div>\n    <div class="maxLabel">\n      <span class="template-maxlabelhtml"></span>\n    </div>\n    <div class="track action-moveslider">\n      <div class="ticks template-tickmarkhtml"></div>\n      <div class="graphic"></div>\n    </div>\n    <div class="zeroMarker action-moveslider">\n      <div class="graphic"></div>\n    </div>\n    <div class="thumb action-startdragging" disablescroll="true">\n      <div class="graphic"></div>\n      <div class="center"></div>\n    </div>\n  </div>\n  \n  <div class="slider-speed-container do-not-blur" handleEvent="true">\n    <span class="action-slower" >&laquo;</span>\n    <span class="variable-speed"></span>\n    <span class="action-faster">&raquo;</span>\n  </div>\n\n  <div class="slider_menu do-blur graph-input-container" handleEvent="true">\n    <table>\n      <tr>\n        <td>\n          <span class="before-input"></span>\n            <input class="slider_min" limit="min" type="number">\n          <span class="after-input"></span>\n    ';
 /*
      Need to be careful with unescaped html insertion. This html is generated
      from user input by mathquill, so we"re relying on mathquill to escape
      html as necessary.
    */ 
;__p+='\n        </td>\n        <td class="text">\n          ≤\n        </td>\n        <td class="template-dependentlabelhtml text"></td>\n        <td class="text">≤</td>\n        <td>\n          <span class="before-input"></span>\n            <input class="slider_max" limit="max" type="number">\n          <span class="after-input"></span>\n        \n        </td>\n        <td class="step text">step:</td>\n        <td> \n          <span class="before-input"></span>\n            <input class="slider_interval" limit="step" type="number">\n          <span class="after-input"></span>\n        </td>\n      </tr>\n    </table>\n  </div>\n  \n</span>';
}
return __p;
};});
define('expressions/slider_view',['require','loadcss!css/slider','jquery','pjs','lib/rounding','lib/underscore_view','main/focus','template!slider_view','main/config','underscore','lib/keys'],function(require) {
  require('loadcss!css/slider');
  
  var $ = require('jquery');
  var P = require('pjs');
  var Rounding = require('lib/rounding');
  var UnderscoreView = require('lib/underscore_view');
  var Focus = require('main/focus');
  var template = require('template!slider_view');
  var Config = require('main/config');
  var _ = require('underscore');
  var Keys = require('lib/keys');

  var label2html = function(num) {
    var onum=num;
    var str = String(num).split("-").join("");

    if (str.length > 4 || str.indexOf("e") != -1) {
      // size of input
      var digits = Math.floor(Math.log(Math.abs(num))/Math.LN10);

      // move the decimial over to the unit's place
      num = num/Math.pow(10, digits);

      // round to 1 sig figs
      num = Math.round(num);

      if (Math.abs(num) >= 10) {
        digits++;
        if (num < 0) {
          num = -1;
        } else {
          num = 1;
        }
      }

      if (digits >= -3 && digits <= 3) {
        str = String(onum);
        if (str.indexOf("0.") === 0) {
          str = str.substr(1);
        } else if (str.indexOf("-0.") === 0) {
          str = "-" + str.substr(2);
        }

        return str.substr(0, 5);
      }

      return num + "\u00D7" + "10<span class='sup'>" + digits + "</span> ";
    } else {
      return String(num);
    }
  };

  var SliderView = P(UnderscoreView, function(view, _super) {
    view.template = template;
    view.animationSpeeds = [0.05, 0.1, 0.15, 0.2, 0.35, 0.5, 0.75, 1, 1.5, 2, 3.5, 5, 7.5, 10, 15, 20];
    view.animationSpeedIndex = 7;

    view.init = function (slider, parentView) {
      _super.init.call(this);
      this.slider = slider;
      this.parentView = parentView;
      
      // we hold a local copy of the slider's value. this allows us to
      // throttle how quickly we set the value back to the slider.
      this.value = this.slider.value;
      
      // if the slider's value changes, we immediately overwrite our local
      // copy of the variable with the new official value.
      this.slider.observe('value', function () {
        this.setProperty('value', this.slider.value);
      }.bind(this));

      this.editing = false;
    
      // Watch changes to the properties while we edit the slider.
      this.slider.observe('min.sliderview max.sliderview', this.renderThumbPosition.bind(this));
      this.observe('value', this.renderThumbPosition.bind(this));
      
      this.slider.observe('min.sliderview max.sliderview', this.renderZeroMarker.bind(this));
      this.slider.observe('min.sliderview max.sliderview step.sliderview', this.renderTickMarks.bind(this));
      this.slider.observe('min.sliderview', this.renderMin.bind(this));
      this.slider.observe('max.sliderview', this.renderMax.bind(this));
      this.slider.observe('step.sliderview', this.renderStep.bind(this));
      this.observe('dependentLabel', this.renderDependent.bind(this));
      this.observe('editing', this.renderEditing.bind(this));
      this.observe('editing', this.stop.bind(this));
      this.observe('invalid', this.renderInvalid.bind(this));
      this.observe('dragging', this.renderDragging.bind(this));
      this.parentView.observe('isPlaying', this.renderAnimating.bind(this));
      this.parentView.observe('isPlaying', this.setTransient.bind(this));
      this.observe('dragging isMoving', this.setTransient.bind(this));
      this.observe('animationSpeedIndex', this.renderAnimationSpeed.bind(this));
    };

    view.renderAnimationSpeed = function () {
      var text = this.animationSpeeds[this.animationSpeedIndex] + 'x';
      this.$('.variable-speed').text(text);
      this.$('.action-slower').toggleClass('disabled', this.animationSpeedIndex === 0);
      this.$('.action-faster').toggleClass('disabled',
        this.animationSpeedIndex === this.animationSpeeds.length - 1
      );
    };

    view.setTransient = function () {
      this.setProperty(
        'transient',
        this.dragging || this.parentView.isPlaying || this.isMoving
      );
    };
    
    view.destruct = function () {
      this.slider.unobserve('.sliderview');
    };
    
    view.renderDependent = function () {
      this.$('.template-dependentlabelhtml').html(this.dependentLabel);
    };
    
    view.renderDragging = function () {
      this.$('.thumb').toggleClass('down', !!this.dragging);
    };

    view.renderStep = function () {
      this.$('input[limit=step]').val(this.slider.step);
    };
    
    view.renderMin = function () {
      this.$('.template-minlabelhtml').html(label2html(this.slider.min));
      this.$('input[limit=min]').val(this.slider.min);
    };
    
    view.renderMax = function () {
      this.$('.template-maxlabelhtml').html(label2html(this.slider.max));
      this.$('input[limit=max]').val(this.slider.max);
    };

    view.renderEditing = function () {
      this.$().toggleClass('editing-limits', this.editing);
    };
    
    view.renderInvalid = function () {
      this.$('.slider_menu').toggleClass('invalid', !!this.invalid);
    };

    view.renderThumbPosition = function() {
      var left;
      var min = this.slider.min;
      var max = this.slider.max;
      var val = this.value;
      
      if (val <= min) {
        left = 0;
      } else if (val >= max) {
        left = 100;
      } else {
        left = (val - min)/(max - min) * 100;
      }

      this.$('.thumb').css('left', left + "%");
    };
    
    view.renderZeroMarker = function() {
      var t = (0 - this.slider.min)/(this.slider.max - this.slider.min);
      var css = {};
      if (t >= 0 && t <= 1) {
        var left = t*100;
        css.display = "block";
        css.left = left + '%';
      } else {
        css.display = "none";
      }
      
      this.$('.zeroMarker').css(css);
    };

    view.renderTickMarks = function() {
      var step = this.slider.step;
      var min = this.slider.min;
      var max = this.slider.max;
      
      var percent = 100*step/(max - min);
      if (percent < 3) percent = 0; // don't draw too many ticks

      var html = "";
      if (percent > 0 && percent < 100) {
        for (var i=percent; i<100; i += percent) {
          html += '<div class="tick" style="left:' + i + '%"></div>';
        }
      }

      this.$('.template-tickmarkhtml').html(html);
    };

    view.getDimensions = function() {
      var track = this.$('.track');
      var trackLeft = track.offset().left;
      var trackRight = trackLeft + track.width();
      return {
        trackLeft: trackLeft,
        trackRight: trackRight
      };
    };

    view.animateSlower = function () {
      if (this.animationSpeedIndex > 0) {
        this.setProperty('animationSpeedIndex', this.animationSpeedIndex - 1);
      }
    };

    view.animateFaster = function () {

      if (this.animationSpeedIndex < this.animationSpeeds.length - 1) {
        this.setProperty('animationSpeedIndex', this.animationSpeedIndex + 1);
      }
    };

    view.didInsertElement = function() {

      // setup event handlers
      this.$('.action-startdragging').on('tapstart', this.onStartDragging.bind(this));
      this.$('.action-moveslider').on('tap', function (evt) {
        var touch = evt.changedTouches[0];
        this.stop();
        this.setValueByTouch(touch);
        this.commitSliderValue();
      }.bind(this));
      
      this.$().on('focusout', this.focusOut.bind(this));
      this.$().on('focusin', this.focusIn.bind(this));
      this.$().on('keydown', this.keyDown.bind(this));
      this.$('input[limit]').on('keypress keydown keyup', this.checkInvalid.bind(this));

      this.$('.action-play').on('tap', this.play.bind(this));

      this.$('.action-faster').on('tap', this.animateFaster.bind(this));
      this.$('.action-slower').on('tap', this.animateSlower.bind(this));

      //Editing from main view - only active when using mouse
      this.$().on('tap', '.minLabel', this.onEditMin.bind(this));
      this.$().on('tap', '.maxLabel', this.onEditMax.bind(this));

      this.renderTickMarks();
      this.renderThumbPosition();
      this.renderZeroMarker();
      this.renderDependent();
      this.renderMin();
      this.renderMax();
      this.renderStep();
      this.renderAnimationSpeed();
 
      this.checkInvalid();
    };
    
    view.setValueByTouch = function (touch) {

      // properties of the slider
      var min = this.slider.min;
      var max = this.slider.max;

      // figures out where the slider is located on the screen.
      var dimensions = this.getDimensions();
      
      var left = dimensions.trackLeft;
      var right = dimensions.trackRight;
      var width = right - left;
      var pixel_units = (max-min)/width;
      
      // figures out the percent 0%-100% of the thumbs position
      var t = Math.min(1, Math.max(0,(touch.pageX - left)/width));
        
      var val = min*(1 - t) + max*t;
      if (val <= min ) val = min;
      else if (val >= max) val = max;
      else {

        // round to a pretty number
        val = Rounding.bestRound(val, pixel_units );

        // snap to the step interval
        val = this.slider.computeSnappedValue(val);
        
        if (val<min) val=min;
        else if(val>max) val=max;
      }

      this.setProperty('value', val);
    };

    view.onStartDragging = function(evt) {

      // only start dragging if this is the first touch
      if (evt.touches.length !== 1) return;

      // updated by eli. On Android it's especially noticeable, but in general
      // it feels like we want to defocus expressions we're sliding a slider
      // unintended positive side effect:
      // also improves performance, since we don't need to stream POIs while sliding
      Focus.takeFocus();
      
      var self = this;

      // Stop any slider animation
      this.stop();
      
      var getTouchByIdentifier = function (evt, identifier) {
        var touches = evt.touches;
        var touch = null;
        
        for (var i=0; i<touches.length; i++) {
          if (touches[i].identifier === identifier) {
            touch = touches[i];
          }
        }
        
        return touch;
      };
      
	  var throttleInterval = 10;
	  if (navigator.userAgent.toLowerCase().indexOf('ios')!=-1) { throttleInterval=30; }
      var commitSliderValueThrottled = _.throttle(self.commitSliderValue.bind(self), throttleInterval);

      self.setProperty('dragging', true);
      
      var touchIdentifier = evt.changedTouches[0].identifier;
      var onMouseMove = function(evt) {
        
        // lookup the touch that started this
        var touch = getTouchByIdentifier(evt, touchIdentifier);
        if (!touch) return;
                
        self.setValueByTouch(touch);
        
        // We commit the slider's value manually here instead of using an
        // observer on 'value' because we need precise control of when the
        // value is committed. When the user types in mathquill, that causes
        // a change in the sliders value. We don't want that change to get
        // routed back into commitSliderValue(). If it did, the user would never
        // be able to type decimals. When they typed "a=1.", the
        // commitSliderValue() function would turn that into "a=1" again.
        commitSliderValueThrottled();
      };

      var stopDragging = function () {
        $(document).off('tapmove', onMouseMove);
        $(document).off('tapend tapcancel', onMouseUp);

        self.setProperty('dragging', false);
      };

      var onMouseUp = function(evt) {
        
        // checks if the touch that started the slider is still around. If so,
        // don't do anything here. A different touch must have lifted.
        var touch = getTouchByIdentifier(evt, touchIdentifier);
        if (touch) return;
        
        stopDragging();
        self.commitSliderValue();
      };

      $(document).on('tapmove', onMouseMove);
      $(document).on('tapend tapcancel', onMouseUp);
    };

    view.commitSliderValue = function() {
      this.slider.setProperty('value', this.value);
    };
    
    view.checkInvalid = function () {
      var min = parseFloat(this.$('input[limit=min]').attr('value'));
      var max = parseFloat(this.$('input[limit=max]').attr('value'));
      var step = this.$('input[limit=step]').attr('value');
          step = step === '' ? 0 : parseFloat(step);
      
      var invalid = ( !isFinite(min) || !isFinite(max) || min>=max || step < 0 || step > (max-min));
      this.setProperty('invalid', invalid);
    };

    // blur input when enter pressed
    view.keyDown = function(evt) {
      if (Keys.lookup(evt) === Keys.ENTER) {
        $(document.activeElement).blur();
      } else {
        this.checkInvalid();
      }
    },

    // went straight into a focus, so don't save
    view.focusIn = function(evt) {
      this.stop();
      clearTimeout(this.saveAfterBlurTimeout);
      this.checkInvalid();
    },

    // if we don't focus into one of the other boxes really soon,
    // we'll just act like the save button was pressed. This is
    // a sideeffect of focusin being fired AFTER focusout. Temporarily,
    // nothing is focused and we can't tell if focus is about to be
    // placed or not.
    view.focusOut = function(evt) {
      var self = this;
      this.save(evt.target);

      this.saveAfterBlurTimeout = setTimeout(function() {
        clearTimeout(self.saveAfterBlurTimeout);
        self.onClose();
      }, 1);
      
      this.checkInvalid();
    },

    view.save = function(node) {

      if (node) {
        var target = $(node);
        var value = parseFloat(target.attr('value'));

        if (target.hasClass('slider_min')) {

          // set the new min
          if (value < this.slider.max) {
            this.slider.setProperty('min', value);

          // reset the value since it's invalid
          } else {
            target.attr('value', this.slider.min);
          }

        } else if (target.hasClass('slider_max')) {

          // set the new min
          if (value > this.slider.min) {
            this.slider.setProperty('max', value);

          // reset the value since it's invalid
          } else {
            target.attr('value', this.slider.max);
          }

        } else if (target.hasClass('slider_interval')) {

          // set the new step interval
          if (value >= 0) {
            this.slider.setProperty('step', value);

            // invalid step intervals get set to blank
          } else {
            target.attr('value', this.slider.step);
          }
        }
      }
    };

    view.onClose = function() {
      this.setProperty('editing', false);
    };

    view.onEditMin = function(evt) {
      this.setProperty('editing', true);
      evt.preventDefault();
      this.$('.slider_min').focus().select();
    };

    view.onEditMax = function(evt) {
      this.setProperty('editing', true);
      evt.preventDefault();
      this.$('.slider_max').focus().select();
    };

    view.play = function() {
      this.animationTargetValue = this.slider.value; //Animate target value smoothly, and just round displayed value
      this.parentView.setProperty('isPlaying', true);
    };

    view.renderAnimating = function () {
      if (this.slider.step < 0) {
        this.stop();
        return;
      }
      this.parentView.$().toggleClass('isPlaying', !!this.parentView.isPlaying);
    };

    view.playStep = function () {
      if(this.dragging){
        // User is dragging the slider during playback. Don't update the value
        // but keep the timeout alive until we are told to stop.
        this.animationTargetValue = this.slider.value;
        return;
      }

      //PingPong behavior
      if (this.animationTargetValue >= this.slider.max) {
        this.slider.setProperty('playDirection', -1);
      } else if (this.animationTargetValue <= this.slider.min) {
        this.slider.setProperty('playDirection', +1);
      }

      var animationStep = (this.slider.max - this.slider.min) / 200;

      animationStep *= this.animationSpeeds[this.animationSpeedIndex];

      //Animate target without accumulating rounding error
      this.animationTargetValue += animationStep * this.slider.playDirection;

      var newValue = this.slider.computeSnappedValue(this.animationTargetValue); //Always snap to slider markers
      if(!this.slider.step){
        //If no markers, snap to a reasonable decimal close to the animation target
        newValue = Rounding.shortestDecimalBetween(newValue - animationStep * 0.1, newValue + animationStep * 0.1);
      }

      //don't exceed the endpoints
      newValue = Math.max(this.slider.min, Math.min(this.slider.max, newValue));

      //commit the change to the slider
      this.slider.setProperty('value', newValue);
    };

    view.stop = function() {
      this.parentView.setProperty('isPlaying', false);
    };

  });
  
  return SliderView;
});

define('template!prompt_sliders', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class="create_sliders action-createslider" handleEvent="true">\n  <span class="msg">add slider:</span>\n  <span class="btns">\n    ';
 _.each(variables, function (variable) { 
;__p+='\n      <div class="slider_btn_container" var_name="'+
( variable.name )+
'" >\n        <div class="btn btn-primary btn-small">'+
( variable.label )+
'</div>\n      </div>\n    ';
 }) 
;__p+='\n              \n    ';
 if (variables.length > 1) { 
;__p+='\n      <div class="slider_btn_container all">\n        <div class="btn btn-small btn-success all">all!</div>\n      </div>\n    ';
 } 
;__p+='\n  </span>\n</div>';
}
return __p;
};});
define('expressions/promptslider_view',['require','jquery','pjs','lib/underscore_view','main/focus','template!prompt_sliders'],function(require) {
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var Focus = require('main/focus');
  var template = require('template!prompt_sliders');

  var PromptSliderView = P(UnderscoreView, function (view, _super) {

    view.template = template;
    
    view.init = function (expressionView) {
      _super.init.call(this);
      
      this.variables = [];
      this.expressionView = expressionView;
      this.observe('variables', this.rerender.bind(this));
    };
    
    view.didInsertElement = function () {
      this.$('.action-createslider').on('tap', this.onCreateSlider.bind(this));
    };
    
    view.getTemplateParams = function () {
      var vars = this.variables;
      var formattedVariables = [];
      for (var i=0; i<4 && i<vars.length; i++) {
        var v = vars[i];
        var vName, vHtml = v.split('{').join('').split('}').join('').split('_');
        
        if (vHtml.length > 1) {
          vName = vHtml[0] + "_{" + vHtml[1] + "}";
          vHtml = vHtml[0] + "<sub>" + vHtml[1] + "</sub>";
        } else {
          vName = vHtml[0];
          vHtml = vHtml[0];
        }
        
        formattedVariables.push({ name:vName, label:vHtml });
      }

      return {variables: formattedVariables};
    };

    view.onCreateSlider = function(evt) {

      // this action feels like it should defocus expressions
      Focus.takeFocus();

      var dom = $(evt.target).closest('.slider_btn_container');
      if (!dom.length) return;

      var vars;
      if (dom.hasClass('all')) {
        vars = this.variables.slice();
      } else {
        vars = [dom.attr('var_name')];
      }

      if (!vars.length) return;

      this.expressionView.createSliders(vars);
    };
    
  });

  return PromptSliderView;
});

define('loadcss!vendor_css/mathquill/mathquill', function(){});
/**
 * Copyleft 2010-2011 Jay and Han (laughinghan@gmail.com)
 *   under the GNU Lesser General Public License
 *     http://www.gnu.org/licenses/lgpl.html
 * Project Website: http://mathquill.com
 */

(function() {

var $ = jQuery,
  undefined,
  _, //temp variable of prototypes
  mqCmdId = 'mathquill-command-id',
  mqBlockId = 'mathquill-block-id',
  min = Math.min,
  max = Math.max;

var __slice = [].slice;

function noop() {}

/**
 * sugar to make defining lots of commands easier.
 * TODO: rethink this.
 */
function bind(cons /*, args... */) {
  var args = __slice.call(arguments, 1);
  return function() {
    return cons.apply(this, args);
  };
}

/**
 * a development-only debug method.  This definition and all
 * calls to `pray` will be stripped from the minified
 * build of mathquill.
 *
 * This function must be called by name to be removed
 * at compile time.  Do not define another function
 * with the same name, and only call this function by
 * name.
 */
function pray(message, cond) {
  if (!cond) throw new Error('prayer failed: '+message);
}
var P = (function(prototype, ownProperty, undefined) {
  // helper functions that also help minification
  function isObject(o) { return typeof o === 'object'; }
  function isFunction(f) { return typeof f === 'function'; }

  function P(_superclass /* = Object */, definition) {
    // handle the case where no superclass is given
    if (definition === undefined) {
      definition = _superclass;
      _superclass = Object;
    }

    // C is the class to be returned.
    // There are three ways C will be called:
    //
    // 1) We call `new C` to create a new uninitialized object.
    //    The behavior is similar to Object.create, where the prototype
    //    relationship is set up, but the ::init method is not run.
    //    Note that in this case we have `this instanceof C`, so we don't
    //    spring the first trap. Also, `args` is undefined, so the initializer
    //    doesn't get run.
    //
    // 2) A user will simply call C(a, b, c, ...) to create a new object with
    //    initialization.  This allows the user to create objects without `new`,
    //    and in particular to initialize objects with variable arguments, which
    //    is impossible with the `new` keyword.  Note that in this case,
    //    !(this instanceof C) springs the return trap at the beginning, and
    //    C is called with the `new` keyword and one argument, which is the
    //    Arguments object passed in.
    //
    // 3) For internal use only, if new C(args) is called, where args is an
    //    Arguments object.  In this case, the presence of `new` means the
    //    return trap is not sprung, but the initializer is called if present.
    //
    //    You can also call `new C([a, b, c])`, which is equivalent to `C(a, b, c)`.
    //
    //  TODO: the Chrome inspector shows all created objects as `C` rather than `Object`.
    //        Setting the .name property seems to have no effect.  Is there a way to override
    //        this behavior?
    function C(args) {
      var self = this;
      if (!(self instanceof C)) return new C(arguments);
      if (args && isFunction(self.init)) self.init.apply(self, args);
    }

    // set up the prototype of the new class
    // note that this resolves to `new Object`
    // if the superclass isn't given
    var proto = C[prototype] = new _superclass();

    // other variables, as a minifier optimization
    var _super = _superclass[prototype];
    var extensions;

    // set the constructor property on the prototype, for convenience
    proto.constructor = C;

    C.mixin = function(def) {
      C[prototype] = P(C, def)[prototype];
      return C;
    }

    return (C.open = function(def) {
      extensions = {};

      if (isFunction(def)) {
        // call the defining function with all the arguments you need
        // extensions captures the return value.
        extensions = def.call(C, proto, _super, C, _superclass);
      }
      else if (isObject(def)) {
        // if you passed an object instead, we'll take it
        extensions = def;
      }

      // ...and extend it
      if (isObject(extensions)) {
        for (var ext in extensions) {
          if (ownProperty.call(extensions, ext)) {
            proto[ext] = extensions[ext];
          }
        }
      }

      // if there's no init, we assume we're inheriting a non-pjs class, so
      // we default to applying the superclass's constructor.
      if (!isFunction(proto.init)) {
        proto.init = function() { _superclass.apply(this, arguments); };
      }

      return C;
    })(definition);
  }

  // ship it
  return P;

  // as a minifier optimization, we've closured in a few helper functions
  // and the string 'prototype' (C[p] is much shorter than C.prototype)
})('prototype', ({}).hasOwnProperty);
/*************************************************
 * Textarea Manager
 *
 * An abstraction layer wrapping the textarea in
 * an object with methods to manipulate and listen
 * to events on, that hides all the nasty cross-
 * browser incompatibilities behind a uniform API.
 *
 * Design goal: This is a *HARD* internal
 * abstraction barrier. Cross-browser
 * inconsistencies are not allowed to leak through
 * and be dealt with by event handlers. All future
 * cross-browser issues that arise must be dealt
 * with here, and if necessary, the API updated.
 *
 * Organization:
 * - key values map and stringify()
 * - manageTextarea()
 *    + defer() and flush()
 *    + event handler logic
 *    + attach event handlers and export methods
 ************************************************/

var manageTextarea = (function() {
  // The following [key values][1] map was compiled from the
  // [DOM3 Events appendix section on key codes][2] and
  // [a widely cited report on cross-browser tests of key codes][3],
  // except for 10: 'Enter', which I've empirically observed in Safari on iOS
  // and doesn't appear to conflict with any other known key codes.
  //
  // [1]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#keys-keyvalues
  // [2]: http://www.w3.org/TR/2012/WD-DOM-Level-3-Events-20120614/#fixed-virtual-key-codes
  // [3]: http://unixpapa.com/js/key.html
  var KEY_VALUES = {
    8: 'Backspace',
    9: 'Tab',

    10: 'Enter', // for Safari on iOS

    13: 'Enter',

    16: 'Shift',
    17: 'Control',
    18: 'Alt',
    20: 'CapsLock',

    27: 'Esc',

    32: 'Spacebar',

    33: 'PageUp',
    34: 'PageDown',
    35: 'End',
    36: 'Home',

    37: 'Left',
    38: 'Up',
    39: 'Right',
    40: 'Down',

    45: 'Insert',

    46: 'Del',

    144: 'NumLock'
  };

  // To the extent possible, create a normalized string representation
  // of the key combo (i.e., key code and modifier keys).
  function stringify(evt) {
    var which = evt.which || evt.keyCode;
    var keyVal = KEY_VALUES[which];
    var key;
    var modifiers = [];

    if (evt.ctrlKey) modifiers.push('Ctrl');
    if (evt.originalEvent && evt.originalEvent.metaKey) modifiers.push('Meta');
    if (evt.altKey) modifiers.push('Alt');
    if (evt.shiftKey) modifiers.push('Shift');

    key = keyVal || String.fromCharCode(which);

    if (!modifiers.length && !keyVal) return key;

    modifiers.push(key);
    return modifiers.join('-');
  }

  // create a textarea manager that calls callbacks at useful times
  // and exports useful public methods
  return function manageTextarea(el, opts) {
    var keydown = null;
    var keypress = null;

    if (!opts) opts = {};
    var textCallback = opts.text || noop;
    var keyCallback = opts.key || noop;
    var pasteCallback = opts.paste || noop;
    var onCut = opts.cut || noop;

    var textarea = $(el);
    var target = $(opts.container || textarea);

    // defer() runs fn immediately after the current thread.
    // flush() will run it even sooner, if possible.
    // flush always needs to be called before defer, and is called a
    // few other places besides.
    var timeout, deferredFn;

    function defer(fn) {
      timeout = setTimeout(fn);
      deferredFn = fn;
    }

    function flush() {
      if (timeout) {
        clearTimeout(timeout);
        timeout = undefined;
        deferredFn();
      }
    }

    target.bind('keydown keypress input keyup focusout paste', flush);


    // -*- public methods -*- //
    function select(text) {
      flush();

      textarea.val(text);
      if (text) textarea[0].select();
    }

    // -*- helper subroutines -*- //

    // Determine whether there's a selection in the textarea.
    // This will always return false in IE < 9, which don't support
    // HTMLTextareaElement::selection{Start,End}.
    function hasSelection() {
      var dom = textarea[0];

      if (!('selectionStart' in dom)) return false;
      return dom.selectionStart !== dom.selectionEnd;
    }

    function popText(callback) {
      var text = textarea.val();
      textarea.val('');
      if (text) callback(text);
    }

    function handleKey() {
      keyCallback(stringify(keydown), keydown);
    }

    // -*- event handlers -*- //
    function onKeydown(e) {
      keydown = e;
      keypress = null;

      handleKey();
    }

    function onKeypress(e) {
      // call the key handler for repeated keypresses.
      // This excludes keypresses that happen directly
      // after keydown.  In that case, there will be
      // no previous keypress, so we skip it here
      if (keydown && keypress) handleKey();

      keypress = e;

      defer(function() {
        // If there is a selection, the contents of the textarea couldn't
        // possibly have just been typed in.
        // This happens in browsers like Firefox and Opera that fire
        // keypress for keystrokes that are not text entry and leave the
        // selection in the textarea alone, such as Ctrl-C.
        // Note: we assume that browsers that don't support hasSelection()
        // also never fire keypress on keystrokes that are not text entry.
        // This seems reasonably safe because:
        // - all modern browsers including IE 9+ support hasSelection(),
        //   making it extremely unlikely any browser besides IE < 9 won't
        // - as far as we know IE < 9 never fires keypress on keystrokes
        //   that aren't text entry, which is only as reliable as our
        //   tests are comprehensive, but the IE < 9 way to do
        //   hasSelection() is poorly documented and is also only as
        //   reliable as our tests are comprehensive
        // If anything like #40 or #71 is reported in IE < 9, see
        // b1318e5349160b665003e36d4eedd64101ceacd8

        //updated by Eli
        //in Safari, when text is selected inside of the textarea
        //and then a key is pressed, there's a brief moment where
        //the new text is selected. This circumvents that problem, by
        //trying again a moment later
        //this should be a no-op except in Safari
        //NOTE / TODO: this still seems to introduce a problem with vertical
        //alignment. In DCG, try:
        // * type "1"
        // * highlight the "1"
        // * type "/"
        // note that vertical alignment of the icon is broken
        // it's only fixed when another action is taken that changes
        // vertical alignment (i.e. a division inside of one of the
        // division signs)
        if (hasSelection()) {
          setTimeout(function() {
            if (!hasSelection())
              popText(textCallback);
          });
        } else {
          popText(textCallback);
        }

        if (hasSelection()) return;

        popText(textCallback);
      });
    }

    function onBlur() { keydown = keypress = null; }

    function onPaste(e) {
      // browsers are dumb.
      //
      // In Linux, middle-click pasting causes onPaste to be called,
      // when the textarea is not necessarily focused.  We focus it
      // here to ensure that the pasted text actually ends up in the
      // textarea.
      //
      // It's pretty nifty that by changing focus in this handler,
      // we can change the target of the default action.  (This works
      // on keydown too, FWIW).
      //
      // And by nifty, we mean dumb (but useful sometimes).
      textarea.focus();

      defer(function() {
        popText(pasteCallback);
      });
    }

    // -*- attach event handlers -*- //
    target.bind({
      keydown: onKeydown,
      keypress: onKeypress,
      focusout: onBlur,
      cut: onCut,
      paste: onPaste
    });

    // -*- export public methods -*- //
    return {
      select: select
    };
  };
}());
var Parser = P(function(_, _super, Parser) {
  // The Parser object is a wrapper for a parser function.
  // Externally, you use one to parse a string by calling
  //   var result = SomeParser.parse('Me Me Me! Parse Me!');
  // You should never call the constructor, rather you should
  // construct your Parser from the base parsers and the
  // parser combinator methods.

  function parseError(stream, message) {
    if (stream) {
      stream = "'"+stream+"'";
    }
    else {
      stream = 'EOF';
    }

    throw 'Parse Error: '+message+' at '+stream;
  }

  _.init = function(body) { this._ = body; };

  _.parse = function(stream) {
    return this.skip(eof)._(stream, success, parseError);

    function success(stream, result) { return result; }
  };

  // -*- primitive combinators -*- //
  _.or = function(alternative) {
    pray('or is passed a parser', alternative instanceof Parser);

    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      return self._(stream, onSuccess, failure);

      function failure(newStream) {
        return alternative._(stream, onSuccess, onFailure);
      }
    });
  };

  _.then = function(next) {
    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      return self._(stream, success, onFailure);

      function success(newStream, result) {
        var nextParser = (next instanceof Parser ? next : next(result));
        pray('a parser is returned', nextParser instanceof Parser);
        return nextParser._(newStream, onSuccess, onFailure);
      }
    });
  };

  // -*- optimized iterative combinators -*- //
  _.many = function() {
    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      var xs = [];
      while (self._(stream, success, failure));
      return onSuccess(stream, xs);

      function success(newStream, x) {
        stream = newStream;
        xs.push(x);
        return true;
      }

      function failure() {
        return false;
      }
    });
  };

  _.times = function(min, max) {
    if (arguments.length < 2) max = min;
    var self = this;

    return Parser(function(stream, onSuccess, onFailure) {
      var xs = [];
      var result = true;
      var failure;

      for (var i = 0; i < min; i += 1) {
        result = self._(stream, success, firstFailure);
        if (!result) return onFailure(stream, failure);
      }

      for (; i < max && result; i += 1) {
        result = self._(stream, success, secondFailure);
      }

      return onSuccess(stream, xs);

      function success(newStream, x) {
        xs.push(x);
        stream = newStream;
        return true;
      }

      function firstFailure(newStream, msg) {
        failure = msg;
        stream = newStream;
        return false;
      }

      function secondFailure(newStream, msg) {
        return false;
      }
    });
  };

  // -*- higher-level combinators -*- //
  _.result = function(res) { return this.then(succeed(res)); };
  _.atMost = function(n) { return this.times(0, n); };
  _.atLeast = function(n) {
    var self = this;
    return self.times(n).then(function(start) {
      return self.many().map(function(end) {
        return start.concat(end);
      });
    });
  };

  _.map = function(fn) {
    return this.then(function(result) { return succeed(fn(result)); });
  };

  _.skip = function(two) {
    return this.then(function(result) { return two.result(result); });
  };

  // -*- primitive parsers -*- //
  var string = this.string = function(str) {
    var len = str.length;
    var expected = "expected '"+str+"'";

    return Parser(function(stream, onSuccess, onFailure) {
      var head = stream.slice(0, len);

      if (head === str) {
        return onSuccess(stream.slice(len), head);
      }
      else {
        return onFailure(stream, expected);
      }
    });
  };

  var regex = this.regex = function(re) {
    pray('regexp parser is anchored', re.toString().charAt(1) === '^');

    var expected = 'expected '+re;

    return Parser(function(stream, onSuccess, onFailure) {
      var match = re.exec(stream);

      if (match) {
        var result = match[0];
        return onSuccess(stream.slice(result.length), result);
      }
      else {
        return onFailure(stream, expected);
      }
    });
  };

  var succeed = Parser.succeed = function(result) {
    return Parser(function(stream, onSuccess) {
      return onSuccess(stream, result);
    });
  };

  var fail = Parser.fail = function(msg) {
    return Parser(function(stream, _, onFailure) {
      return onFailure(stream, msg);
    });
  };

  var letter = Parser.letter = regex(/^[a-z]/i);
  var letters = Parser.letters = regex(/^[a-z]*/i);
  var digit = Parser.digit = regex(/^[0-9]/);
  var digits = Parser.digits = regex(/^[0-9]*/);
  var whitespace = Parser.whitespace = regex(/^\s+/);
  var optWhitespace = Parser.optWhitespace = regex(/^\s*/);

  var any = Parser.any = Parser(function(stream, onSuccess, onFailure) {
    if (!stream) return onFailure(stream, 'expected any character');

    return onSuccess(stream.slice(1), stream.charAt(0));
  });

  var all = Parser.all = Parser(function(stream, onSuccess, onFailure) {
    return onSuccess('', stream);
  });

  var eof = Parser.eof = Parser(function(stream, onSuccess, onFailure) {
    if (stream) return onFailure(stream, 'expected EOF');

    return onSuccess(stream, stream);
  });
});
/*************************************************
 * Base classes of the MathQuill virtual DOM tree
 *
 * Only doing tree node manipulation via these
 * adopt/ disown methods guarantees well-formedness
 * of the tree.
 ************************************************/

/**
 * MathQuill virtual-DOM tree-node abstract base class
 */
var Node = P(function(_) {
  _.prev = 0;
  _.next = 0;
  _.parent = 0;
  _.firstChild = 0;
  _.lastChild = 0;

  _.children = function() {
    return Fragment(this.firstChild, this.lastChild);
  };

  _.eachChild = function(fn) {
    return this.children().each(fn);
  };

  _.foldChildren = function(fold, fn) {
    return this.children().fold(fold, fn);
  };

  _.adopt = function(parent, prev, next) {
    Fragment(this, this).adopt(parent, prev, next);
    return this;
  };

  _.disown = function() {
    Fragment(this, this).disown();
    return this;
  };
});

/**
 * An entity outside the virtual tree with one-way pointers (so it's only a
 * "view" of part of the tree, not an actual node/entity in the tree) that
 * delimits a doubly-linked list of sibling nodes.
 * It's like a fanfic love-child between HTML DOM DocumentFragment and the Range
 * classes: like DocumentFragment, its contents must be sibling nodes
 * (unlike Range, whose contents are arbitrary contiguous pieces of subtrees),
 * but like Range, it has only one-way pointers to its contents, its contents
 * have no reference to it and in fact may still be in the visible tree (unlike
 * DocumentFragment, whose contents must be detached from the visible tree
 * and have their 'parent' pointers set to the DocumentFragment).
 */
var Fragment = P(function(_) {
  _.first = 0;
  _.last = 0;

  _.init = function(first, last) {
    pray('no half-empty fragments', !first === !last);

    if (!first) return;

    pray('first node is passed to Fragment', first instanceof Node);
    pray('last node is passed to Fragment', last instanceof Node);
    pray('first and last have the same parent',
         first.parent === last.parent);

    this.first = first;
    this.last = last;
  };

  function prayWellFormed(parent, prev, next) {
    pray('a parent is always present', parent);
    pray('prev is properly set up', (function() {
      // either it's empty and next is the first child (possibly empty)
      if (!prev) return parent.firstChild === next;

      // or it's there and its next and parent are properly set up
      return prev.next === next && prev.parent === parent;
    })());

    pray('next is properly set up', (function() {
      // either it's empty and prev is the last child (possibly empty)
      if (!next) return parent.lastChild === prev;

      // or it's there and its next and parent are properly set up
      return next.prev === prev && next.parent === parent;
    })());
  }

  _.adopt = function(parent, prev, next) {
    prayWellFormed(parent, prev, next);

    var self = this;
    self.disowned = false;

    var first = self.first;
    if (!first) return this;

    var last = self.last;

    if (prev) {
      // NB: this is handled in the ::each() block
      // prev.next = first
    } else {
      parent.firstChild = first;
    }

    if (next) {
      next.prev = last;
    } else {
      parent.lastChild = last;
    }

    self.last.next = next;

    self.each(function(el) {
      el.prev = prev;
      el.parent = parent;
      if (prev) prev.next = el;

      prev = el;
    });

    return self;
  };

  _.disown = function() {
    var self = this;
    var first = self.first;

    // guard for empty and already-disowned fragments
    if (!first || self.disowned) return self;

    self.disowned = true;

    var last = self.last;
    var parent = first.parent;

    prayWellFormed(parent, first.prev, first);
    prayWellFormed(parent, last, last.next);

    if (first.prev) {
      first.prev.next = last.next;
    } else {
      parent.firstChild = last.next;
    }

    if (last.next) {
      last.next.prev = first.prev;
    } else {
      parent.lastChild = first.prev;
    }

    return self;
  };

  _.each = function(fn) {
    var self = this;
    var el = self.first;
    if (!el) return self;

    for (;el !== self.last.next; el = el.next) {
      if (fn.call(self, el) === false) break;
    }

    return self;
  };

  _.fold = function(fold, fn) {
    this.each(function(el) {
      fold = fn.call(this, fold, el);
    });

    return fold;
  };
});
/*************************************************
 * Abstract classes of math blocks and commands.
 ************************************************/

var uuid = (function() {
  var id = 0;

  return function() { return id += 1; };
})();

/**
 * Math tree node base class.
 * Some math-tree-specific extensions to Node.
 * Both MathBlock's and MathCommand's descend from it.
 */
var MathElement = P(Node, function(_) {
  _.init = function(obj) {
    this.id = uuid();
    MathElement[this.id] = this;
  };

  _.toString = function() {
    return '[MathElement '+this.id+']';
  };

  _.bubble = function(event /*, args... */) {
    var args = __slice.call(arguments, 1);

    for (var ancestor = this; ancestor; ancestor = ancestor.parent) {
      var res = ancestor[event] && ancestor[event].apply(ancestor, args);
      if (res === false) break;
    }

    return this;
  };

  _.postOrder = function(fn /*, args... */) {
    if (typeof fn === 'string') {
      var methodName = fn;
      fn = function(el) {
        if (methodName in el) el[methodName].apply(el, arguments);
      };
    }

    (function recurse(desc) {
      desc.eachChild(recurse);
      fn(desc);
    })(this);
  };

  _.jQ = $();
  _.jQadd = function(jQ) { this.jQ = this.jQ.add(jQ); };

  this.jQize = function(html) {
    // Sets the .jQ of the entire math subtree rooted at this command.
    // Expects .createBlocks() to have been called already, since it
    // calls .html().
    var jQ = $(html);

    function jQadd(el) {
      if (el.getAttribute) {
        var cmdId = el.getAttribute('mathquill-command-id');
        var blockId = el.getAttribute('mathquill-block-id');
        if (cmdId) MathElement[cmdId].jQadd(el);
        if (blockId) MathElement[blockId].jQadd(el);
      }
    }
    function traverse(el) {
      for (el = el.firstChild; el; el = el.nextSibling) {
        jQadd(el);
        if (el.firstChild) traverse(el);
      }
    }

    for (var i = 0; i < jQ.length; i += 1) {
      jQadd(jQ[i]);
      traverse(jQ[i]);
    }
    return jQ;
  };

  _.finalizeInsert = function() {
    var self = this;
    self.postOrder('finalizeTree');

    // note: this order is important.
    // empty elements need the empty box provided by blur to
    // be present in order for their dimensions to be measured
    // correctly in redraw.
    self.postOrder('blur');

    // adjust context-sensitive spacing
    self.postOrder('respace');
    if (self.next.respace) self.next.respace();
    if (self.prev.respace) self.prev.respace();

    self.postOrder('redraw');
    self.bubble('redraw');
    self.bubble('redraw');
  };
});

/**
 * Commands and operators, like subscripts, exponents, or fractions.
 * Descendant commands are organized into blocks.
 */
var MathCommand = P(MathElement, function(_, _super) {
  _.init = function(ctrlSeq, htmlTemplate, textTemplate) {
    var cmd = this;
    _super.init.call(cmd);

    if (!cmd.ctrlSeq) cmd.ctrlSeq = ctrlSeq;
    if (htmlTemplate) cmd.htmlTemplate = htmlTemplate;
    if (textTemplate) cmd.textTemplate = textTemplate;
  };

  // obvious methods
  _.replaces = function(replacedFragment) {
    replacedFragment.disown();
    this.replacedFragment = replacedFragment;
  };
  _.isEmpty = function() {
    return this.foldChildren(true, function(isEmpty, child) {
      return isEmpty && child.isEmpty();
    });
  };

  _.parser = function() {
    var block = latexMathParser.block;
    var self = this;

    return block.times(self.numBlocks()).map(function(blocks) {
      self.blocks = blocks;

      for (var i = 0; i < blocks.length; i += 1) {
        blocks[i].adopt(self, self.lastChild, 0);
      }

      return self;
    });
  };

  // createBefore(cursor) and the methods it calls
  _.createBefore = function(cursor) {
    var cmd = this;
    var replacedFragment = cmd.replacedFragment;

    cmd.createBlocks();
    MathElement.jQize(cmd.html());
    if (replacedFragment) {
      replacedFragment.adopt(cmd.firstChild, 0, 0);
      replacedFragment.jQ.appendTo(cmd.firstChild.jQ);
    }

    cursor.jQ.before(cmd.jQ);
    cursor.prev = cmd.adopt(cursor.parent, cursor.prev, cursor.next);

    cmd.finalizeInsert(cursor);

    cmd.placeCursor(cursor);
  };
  _.createBlocks = function() {
    var cmd = this,
      numBlocks = cmd.numBlocks(),
      blocks = cmd.blocks = Array(numBlocks);

    for (var i = 0; i < numBlocks; i += 1) {
      var newBlock = blocks[i] = MathBlock();
      newBlock.adopt(cmd, cmd.lastChild, 0);
    }
  };
  _.respace = noop; //placeholder for context-sensitive spacing
  _.placeCursor = function(cursor) {
    //append the cursor to the first empty child, or if none empty, the last one
    cursor.appendTo(this.foldChildren(this.firstChild, function(prev, child) {
      return prev.isEmpty() ? prev : child;
    }));
  };

  // remove()
  _.remove = function() {
    this.disown()
    this.jQ.remove();

    this.postOrder(function(el) { delete MathElement[el.id]; });

    return this;
  };

  // methods involved in creating and cross-linking with HTML DOM nodes
  /*
    They all expect an .htmlTemplate like
      '<span>&0</span>'
    or
      '<span><span>&0</span><span>&1</span></span>'

    See html.test.js for more examples.

    Requirements:
    - For each block of the command, there must be exactly one "block content
      marker" of the form '&<number>' where <number> is the 0-based index of the
      block. (Like the LaTeX \newcommand syntax, but with a 0-based rather than
      1-based index, because JavaScript because C because Dijkstra.)
    - The block content marker must be the sole contents of the containing
      element, there can't even be surrounding whitespace, or else we can't
      guarantee sticking to within the bounds of the block content marker when
      mucking with the HTML DOM.
    - The HTML not only must be well-formed HTML (of course), but also must
      conform to the XHTML requirements on tags, specifically all tags must
      either be self-closing (like '<br/>') or come in matching pairs.
      Close tags are never optional.

    Note that &<number> isn't well-formed HTML; if you wanted a literal '&123',
    your HTML template would have to have '&amp;123'.
  */
  _.numBlocks = function() {
    var matches = this.htmlTemplate.match(/&\d+/g);
    return matches ? matches.length : 0;
  };
  _.html = function() {
    // Render the entire math subtree rooted at this command, as HTML.
    // Expects .createBlocks() to have been called already, since it uses the
    // .blocks array of child blocks.
    //
    // See html.test.js for example templates and intended outputs.
    //
    // Given an .htmlTemplate as described above,
    // - insert the mathquill-command-id attribute into all top-level tags,
    //   which will be used to set this.jQ in .jQize().
    //   This is straightforward:
    //     * tokenize into tags and non-tags
    //     * loop through top-level tokens:
    //         * add #cmdId attribute macro to top-level self-closing tags
    //         * else add #cmdId attribute macro to top-level open tags
    //             * skip the matching top-level close tag and all tag pairs
    //               in between
    // - for each block content marker,
    //     + replace it with the contents of the corresponding block,
    //       rendered as HTML
    //     + insert the mathquill-block-id attribute into the containing tag
    //   This is even easier, a quick regex replace, since block tags cannot
    //   contain anything besides the block content marker.
    //
    // Two notes:
    // - The outermost loop through top-level tokens should never encounter any
    //   top-level close tags, because we should have first encountered a
    //   matching top-level open tag, all inner tags should have appeared in
    //   matching pairs and been skipped, and then we should have skipped the
    //   close tag in question.
    // - All open tags should have matching close tags, which means our inner
    //   loop should always encounter a close tag and drop nesting to 0. If
    //   a close tag is missing, the loop will continue until i >= tokens.length
    //   and token becomes undefined. This will not infinite loop, even in
    //   production without pray(), because it will then TypeError on .slice().

    var cmd = this;
    var blocks = cmd.blocks;
    var cmdId = ' mathquill-command-id=' + cmd.id;
    var tokens = cmd.htmlTemplate.match(/<[^<>]+>|[^<>]+/g);

    pray('no unmatched angle brackets', tokens.join('') === this.htmlTemplate);

    // add cmdId to all top-level tags
    for (var i = 0, token = tokens[0]; token; i += 1, token = tokens[i]) {
      // top-level self-closing tags
      if (token.slice(-2) === '/>') {
        tokens[i] = token.slice(0,-2) + cmdId + '/>';
      }
      // top-level open tags
      else if (token.charAt(0) === '<') {
        pray('not an unmatched top-level close tag', token.charAt(1) !== '/');

        tokens[i] = token.slice(0,-1) + cmdId + '>';

        // skip matching top-level close tag and all tag pairs in between
        var nesting = 1;
        do {
          i += 1, token = tokens[i];
          pray('no missing close tags', token);
          // close tags
          if (token.slice(0,2) === '</') {
            nesting -= 1;
          }
          // non-self-closing open tags
          else if (token.charAt(0) === '<' && token.slice(-2) !== '/>') {
            nesting += 1;
          }
        } while (nesting > 0);
      }
    }
    return tokens.join('').replace(/>&(\d+)/g, function($0, $1) {
      return ' mathquill-block-id=' + blocks[$1].id + '>' + blocks[$1].join('html');
    });
  };

  // methods to export a string representation of the math tree
  _.latex = function() {
    return this.foldChildren(this.ctrlSeq, function(latex, child) {
      return latex + '{' + (child.latex() || ' ') + '}';
    });
  };
  _.textTemplate = [''];
  _.text = function() {
    var i = 0;
    return this.foldChildren(this.textTemplate[i], function(text, child) {
      i += 1;
      var child_text = child.text();
      if (text && this.textTemplate[i] === '('
          && child_text[0] === '(' && child_text.slice(-1) === ')')
        return text + child_text.slice(1, -1) + this.textTemplate[i];
      return text + child.text() + (this.textTemplate[i] || '');
    });
  };
});

/**
 * Lightweight command without blocks or children.
 */
var Symbol = P(MathCommand, function(_, _super) {
  _.init = function(ctrlSeq, html, text) {
    if (!text) text = ctrlSeq && ctrlSeq.length > 1 ? ctrlSeq.slice(1) : ctrlSeq;

    _super.init.call(this, ctrlSeq, html, [ text ]);
  };

  _.parser = function() { return Parser.succeed(this); };
  _.numBlocks = function() { return 0; };

  _.replaces = function(replacedFragment) {
    replacedFragment.remove();
  };
  _.createBlocks = noop;
  _.latex = function(){ return this.ctrlSeq; };
  _.text = function(){ return this.textTemplate; };
  _.placeCursor = noop;
  _.isEmpty = function(){ return true; };
});

/**
 * Children and parent of MathCommand's. Basically partitions all the
 * symbols and operators that descend (in the Math DOM tree) from
 * ancestor operators.
 */
var MathBlock = P(MathElement, function(_) {
  _.join = function(methodName) {
    return this.foldChildren('', function(fold, child) {
      return fold + child[methodName]();
    });
  };
  _.latex = function() { return this.join('latex'); };
  _.text = function() {
    return this.firstChild === this.lastChild ?
      this.firstChild.text() :
      '(' + this.join('text') + ')'
    ;
  };
  _.isEmpty = function() {
    return this.firstChild === 0 && this.lastChild === 0;
  };
  _.focus = function() {
    this.jQ.addClass('hasCursor');
    this.jQ.removeClass('empty');

    return this;
  };
  _.blur = function() {
    this.jQ.removeClass('hasCursor');
    if (this.isEmpty())
      this.jQ.addClass('empty');

    return this;
  };
});

/**
 * Math tree fragment base class.
 * Some math-tree-specific extensions to Fragment.
 */
var MathFragment = P(Fragment, function(_, _super) {
  _.init = function(first, last) {
    // just select one thing if only one argument
    _super.init.call(this, first, last || first);
    this.jQ = this.fold($(), function(jQ, child){ return child.jQ.add(jQ); });
  };
  _.latex = function() {
    return this.fold('', function(latex, el){ return latex + el.latex(); });
  };
  _.remove = function() {
    this.jQ.remove();

    this.each(function(el) {
      el.postOrder(function(desc) {
        delete MathElement[desc.id];
      });
    });

    return this.disown();
  };
});
/*********************************************
 * Root math elements with event delegation.
 ********************************************/

function createRoot(container, root, textbox, editable) {
  var contents = container.contents().detach();

  if (!textbox) {
    container.addClass('mathquill-rendered-math');
  }

  root.jQ = $('<span class="mathquill-root-block"/>').appendTo(container.attr(mqBlockId, root.id));
  root.revert = function() {
    container.empty().unbind('.mathquill')
      .removeClass('mathquill-rendered-math mathquill-editable mathquill-textbox')
      .append(contents);
  };

  var cursor = root.cursor = Cursor(root);

  root.renderLatex(contents.text());

  var is_ios = navigator.userAgent.match(/(iPad|iPhone|iPod)/i) !== null;
  var is_android = navigator.userAgent.match(/(Android|Silk|Kindle)/i) !== null;
  
  var textareaSpan = root.textarea = (is_ios || is_android) ?
      $('<span class="textarea"><span tabindex=0></span></span>')
    : $('<span class="textarea"><textarea></textarea></span>'),
    textarea = textareaSpan.children();

  /******
   * TODO [Han]: Document this
   */
  var textareaSelectionTimeout, prevLatex;
  root.selectionChanged = function() {
    if (textareaSelectionTimeout === undefined) {
      textareaSelectionTimeout = setTimeout(setTextareaSelection);
    }
    forceIERedraw(container[0]);
  };
  function setTextareaSelection() {
    textareaSelectionTimeout = undefined;
    var latex = cursor.selection ? '$'+cursor.selection.latex()+'$' : '';
    if (latex === prevLatex) return;
    textareaManager.select(latex);
    prevLatex = latex;
    root.triggerSpecialEvent('selectionChanged');
  }

  //prevent native selection except textarea
  container.bind('selectstart.mathquill', function(e) {
    if (e.target !== textarea[0]) e.preventDefault();
    e.stopPropagation();
  });

  //drag-to-select event handling
  var anticursor, blink = cursor.blink;
  container.bind('mousedown.mathquill', function(e) {
    function mousemove(e) {
      cursor.seek($(e.target), e.pageX, e.pageY);

      if (cursor.prev !== anticursor.prev
          || cursor.parent !== anticursor.parent) {
        cursor.selectFrom(anticursor);
      }

      e.preventDefault();
    }

    // docmousemove is attached to the document, so that
    // selection still works when the mouse leaves the window.
    function docmousemove(e) {
      // [Han]: i delete the target because of the way seek works.
      // it will not move the mouse to the target, but will instead
      // just seek those X and Y coordinates.  If there is a target,
      // it will try to move the cursor to document, which will not work.
      // cursor.seek needs to be refactored.
      delete e.target;

      return mousemove(e);
    }

    function mouseup(e) {
      anticursor = undefined;
      cursor.blink = blink;
      if (!cursor.selection) {
        if (editable) {
          cursor.show();
        }
        else {
          textareaSpan.detach();
        }
      }

      // delete the mouse handlers now that we're not dragging anymore
      container.unbind('mousemove', mousemove);
      $(e.target.ownerDocument).unbind('mousemove', docmousemove).unbind('mouseup', mouseup);
    }

    setTimeout(function() { if (root.blurred) textarea.focus(); });
      // preventDefault won't prevent focus on mousedown in IE<9
      // that means immediately after this mousedown, whatever was
      // mousedown-ed will receive focus
      // http://bugs.jquery.com/ticket/10345

    cursor.blink = noop;
    cursor.seek($(e.target), e.pageX, e.pageY);

    anticursor = {parent: cursor.parent, prev: cursor.prev, next: cursor.next};

    if (!editable) container.prepend(textareaSpan);

    container.mousemove(mousemove);
    $(e.target.ownerDocument).mousemove(docmousemove).mouseup(mouseup);

    e.preventDefault();
  });

  if (!editable) {
    var textareaManager = manageTextarea(textarea, { container: container });
    container.bind('cut paste', false).bind('copy', setTextareaSelection)
      .prepend('<span class="selectable">$'+root.latex()+'$</span>');
    textarea.blur(function() {
      cursor.clearSelection();
      setTimeout(detach); //detaching during blur explodes in WebKit
    });
    function detach() {
      textareaSpan.detach();
    }
    return;
  }

  var textareaManager = manageTextarea(textarea, {
    container: container,
    key: function(key, evt) {
      cursor.parent.bubble('onKey', key, evt);
    },
    text: function(text) {
      cursor.parent.bubble('onText', text);
    },
    cut: function(e) {
      if (cursor.selection) {
        setTimeout(function() {
          cursor.prepareEdit();
          cursor.parent.bubble('redraw');
          root.triggerSpecialEvent('render');
        });
      }

      e.stopPropagation();
      root.triggerSpecialEvent('render');
    },
    paste: function(text) {
      // FIXME HACK the parser in RootTextBlock needs to be moved to
      // Cursor::writeLatex or something so this'll work with
      // MathQuill textboxes
      if (text.slice(0,1) === '$' && text.slice(-1) === '$') {
        text = text.slice(1, -1);
      }

      cursor.writeLatex(text).show();
      root.triggerSpecialEvent('render');
    }
  });

  container.prepend(textareaSpan);

  //root CSS classes
  container.addClass('mathquill-editable');
  if (textbox)
    container.addClass('mathquill-textbox');

  //focus and blur handling
  textarea.focus(function(e) {
    root.blurred = false;
    if (!cursor.parent)
      cursor.appendTo(root);
    cursor.parent.jQ.addClass('hasCursor');
    if (cursor.selection) {
      cursor.selection.jQ.removeClass('blur');
      setTimeout(root.selectionChanged); //re-select textarea contents after tabbing away and back
    }
    else
      cursor.show();
  }).blur(function(e) {
    root.blurred = true;
    cursor.hide().parent.blur();
    if (cursor.selection)
      cursor.selection.jQ.addClass('blur');
  }).blur();

  container.bind('select_all', function(e) {
    cursor.prepareMove().appendTo(root);
    while (cursor.prev) cursor.selectLeft();
  })
  .bind('custom_paste', function(e, text) {
    if (text.slice(0,1) === '$' && text.slice(-1) === '$') {
      text = text.slice(1, -1);
    }

    cursor.writeLatex(text).show();
    root.triggerSpecialEvent('render');
  });
}

var RootMathBlock = P(MathBlock, function(_, _super) {
  _.latex = function() {
    return _super.latex.call(this).replace(/(\\[a-z]+) (?![a-z])/ig,'$1');
  };
  _.text = function() {
    return this.foldChildren('', function(text, child) {
      return text + child.text();
    });
  };
  _.renderLatex = function(latex) {
    var all = Parser.all;
    var eof = Parser.eof;

    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);
    this.firstChild = this.lastChild = 0;
    if (block) {
      block.children().adopt(this, 0, 0);
    }

    var jQ = this.jQ;

    if (block) {
      var html = block.join('html');
      jQ.html(html);
      MathElement.jQize(jQ);
      this.finalizeInsert();
    }
    else {
      jQ.empty();
    }

    this.cursor.parent = this;
    this.cursor.prev = this.lastChild;
    this.cursor.next = 0;
  };
  _.renderSliderLatex = function(latex) {
    function makeCmd(ch) {
      var cmd;
      var code = ch.charCodeAt(0);
      if ((65 <= code && code <= 90) || (97 <= code && code <= 122))
        cmd = Variable(ch);
      else {
        if (CharCmds[ch] || LatexCmds[ch])
          cmd = (CharCmds[ch] || LatexCmds[ch])(ch);
        else {
          cmd = VanillaSymbol(ch);
        }
      }
      return cmd;
    }

    // valid assignment left-hand-sides: https://github.com/graphinc/knox/blob/27709c6066a544f160123a6bd775829ec8cd7080/frontend/graph/public/assets/grapher/jison/latex.jison#L13-L15
    var matches = /^([a-z])(?:_([a-z0-9]|\{[a-z0-9]+\}))?=([-0-9.]+)$/i.exec(latex);

    pray('valid restricted slider LaTeX', matches);
    var letter = matches[1];
    var subscript = matches[2];
    var value = matches[3];

    this.firstChild = this.lastChild = 0;

    letter = Variable(letter);

    if (subscript) {
      var sub = LatexCmds._('_');
      var subBlock = MathBlock().adopt(sub, 0, 0);
      sub.blocks = [ subBlock ];
      if (subscript.length === 1) {
        makeCmd(subscript).adopt(subBlock, subBlock.lastChild, 0);
      }
      else {
        for (var i = 1; i < subscript.length - 1; i += 1) {
          makeCmd(subscript.charAt(i)).adopt(subBlock, subBlock.lastChild, 0);
        }
      }
    }

    letter.adopt(this, this.lastChild, 0);
    if (sub) sub.adopt(this, this.lastChild, 0);
    LatexCmds['=']('=').adopt(this, this.lastChild, 0);
    for (var i = 0, l = value.length; i < l; i += 1) {
      var ch = value.charAt(i);
      var cmd = makeCmd(ch);
      cmd.adopt(this, this.lastChild, 0);
    }

    var jQ = this.jQ;

    var html = this.join('html');
    jQ.html(html);
    MathElement.jQize(jQ);
    //this.finalizeInsert();

    this.cursor.parent = this;
    this.cursor.prev = this.lastChild;
    this.cursor.next = 0;
  };
  _.up = function() { this.triggerSpecialEvent('upPressed'); };
  _.down = function() { this.triggerSpecialEvent('downPressed'); };
  _.moveOutOf = function(dir) { this.triggerSpecialEvent(dir+'Pressed'); };
  _.onKey = function(key, e) {
    switch (key) {
    case 'Ctrl-Shift-Backspace':
    case 'Ctrl-Backspace':
      while (this.cursor.prev || this.cursor.selection) {
        this.cursor.backspace();
      }
      break;

    case 'Shift-Backspace':
    case 'Backspace':
      this.cursor.backspace();
      this.triggerSpecialEvent('render');
      break;

    // Tab or Esc -> go one block right if it exists, else escape right.
    case 'Esc':
    case 'Tab':
      var parent = this.cursor.parent;
      // cursor is in root editable, continue default
      if (parent === this.cursor.root) return;

      this.cursor.prepareMove();
      if (parent.next) {
        // go one block right
        this.cursor.prependTo(parent.next);
      } else {
        // get out of the block
        this.cursor.insertAfter(parent.parent);
      }
      break;

    // Shift-Tab -> go one block left if it exists, else escape left.
    case 'Shift-Tab':
    case 'Shift-Esc':
      var parent = this.cursor.parent;
      //cursor is in root editable, continue default
      if (parent === this.cursor.root) return;

      this.cursor.prepareMove();
      if (parent.prev) {
        // go one block left
        this.cursor.appendTo(parent.prev);
      } else {
        //get out of the block
        this.cursor.insertBefore(parent.parent);
      }
      break;

    // Prevent newlines from showing up
    case 'Enter': this.triggerSpecialEvent('enterPressed'); break;


    // End -> move to the end of the current block.
    case 'End':
      this.cursor.prepareMove().appendTo(this.cursor.parent);
      break;

    // Ctrl-End -> move all the way to the end of the root block.
    case 'Ctrl-End':
      this.cursor.prepareMove().appendTo(this);
      break;

    // Shift-End -> select to the end of the current block.
    case 'Shift-End':
      while (this.cursor.next) {
        this.cursor.selectRight();
      }
      break;

    // Ctrl-Shift-End -> select to the end of the root block.
    case 'Ctrl-Shift-End':
      while (this.cursor.next || this.cursor.parent !== this) {
        this.cursor.selectRight();
      }
      break;

    // Home -> move to the start of the root block or the current block.
    case 'Home':
      this.cursor.prepareMove().prependTo(this.cursor.parent);
      break;

    // Ctrl-Home -> move to the start of the current block.
    case 'Ctrl-Home':
      this.cursor.prepareMove().prependTo(this);
      break;

    // Shift-Home -> select to the start of the current block.
    case 'Shift-Home':
      while (this.cursor.prev) {
        this.cursor.selectLeft();
      }
      break;

    // Ctrl-Shift-Home -> move to the start of the root block.
    case 'Ctrl-Shift-Home':
      while (this.cursor.prev || this.cursor.parent !== this) {
        this.cursor.selectLeft();
      }
      break;

    case 'Left': this.cursor.moveLeft(); break;
    case 'Shift-Left': this.cursor.selectLeft(); break;
    case 'Ctrl-Left': break;
    case 'Meta-Left': break;

    case 'Right': this.cursor.moveRight(); break;
    case 'Shift-Right': this.cursor.selectRight(); break;
    case 'Ctrl-Right': break;
    case 'Meta-Right': break;

    case 'Up': this.cursor.moveUp(); break;
    case 'Down': this.cursor.moveDown(); break;

    case 'Shift-Up':
      if (this.cursor.prev) {
        while (this.cursor.prev) this.cursor.selectLeft();
      } else {
        this.cursor.selectLeft();
      }

    case 'Shift-Down':
      if (this.cursor.next) {
        while (this.cursor.next) this.cursor.selectRight();
      }
      else {
        this.cursor.selectRight();
      }

    case 'Ctrl-Up': break;
    case 'Meta-Up': break;
    case 'Ctrl-Down': break;
    case 'Meta-Down': break;

    case 'Ctrl-Shift-Del':
    case 'Ctrl-Del':
      while (this.cursor.next || this.cursor.selection) {
        this.cursor.deleteForward();
      }
      this.triggerSpecialEvent('render');
      break;

    case 'Shift-Del':
    case 'Del':
      this.cursor.deleteForward();
      this.triggerSpecialEvent('render');
      break;

    case 'Meta-A':
    case 'Ctrl-A':
      //so not stopPropagation'd at RootMathCommand
      if (this !== this.cursor.root) return;

      this.cursor.prepareMove().appendTo(this);
      while (this.cursor.prev) this.cursor.selectLeft();
      break;

    default:
      return false;
    }
    e.preventDefault();
    return false;
  };
  _.onText = function(ch) {
    //Hack by Eli: don't exponentiate if there's nothing before the cursor
    if ((ch == '^' || ch == '_') && !this.cursor.prev) return;

    //Hack #2 by Eli: if you type '+' or '-' or '=' in an exponent or subscript, break out of it
    if ((ch == '+' || ch == '=' || ch == '-' || ch == '<' || ch == '>') && (this.cursor.parent.parent.ctrlSeq === '^' || this.cursor.parent.parent.ctrlSeq === '_')
      && !this.cursor.next && this.cursor.prev
    ) {
      this.cursor.moveRight();
    }

    //Hack #3 by Eli: if you type "^" just after a superscript, behave as though you just pressed up
    if (ch === '^' && this.cursor.prev instanceof SupSub && 
      //note: need both of these, because if it's a superscript and subscript,
      //those could appear in either order
      (this.cursor.prev.ctrlSeq === '^' || this.cursor.prev.prev.ctrlSeq === '^')) {
      this.cursor.moveUp();
      return;
    }
    
    //Hack #4 by Eli: if you type "^" just _before_ a superscript, behave as though you just pressed up
    if (ch === '^' && this.cursor.next instanceof SupSub && 
      //note: need both of these, because if it's a superscript and subscript,
      //those could appear in either order
      (this.cursor.next.ctrlSeq === '^' || (this.cursor.next.next && this.cursor.next.next.ctrlSeq === '^'))) {
      this.cursor.moveUp();
      return;
    }
    
    
    if (ch === '_' && this.cursor.prev instanceof SupSub && 
      //note: need both of these, because if it's a superscript and subscript,
      //those could appear in either order
      (this.cursor.prev.ctrlSeq === '_' || this.cursor.prev.prev.ctrlSeq === '_')) {
      this.cursor.moveDown();
      return;
    }



    this.cursor.write(ch);
    this.triggerSpecialEvent('render');
    return false;
  };

  //triggers a special event occured:
  //  1) pressed up and was at 'top' of equation
  //  2) pressed down and was at 'bottom' of equation
  //  3) pressed backspace and equation was empty
  //  4) the equation was rendered
  //  5) etc
  _.triggerSpecialEvent = function(eventName) {
    var jQ = this.jQ;
    setTimeout(function(){ jQ.trigger(eventName); }, 1);
  };
});

var RootMathCommand = P(MathCommand, function(_, _super) {
  _.init = function(cursor) {
    _super.init.call(this, '$');
    this.cursor = cursor;
  };
  _.htmlTemplate = '<span class="mathquill-rendered-math">&0</span>';
  _.createBlocks = function() {
    this.firstChild =
    this.lastChild =
      RootMathBlock();

    this.blocks = [ this.firstChild ];

    this.firstChild.parent = this;

    var cursor = this.firstChild.cursor = this.cursor;
    this.firstChild.onText = function(ch) {
      if (ch !== '$' || cursor.parent !== this)
        cursor.write(ch);
      else if (this.isEmpty()) {
        cursor.insertAfter(this.parent).backspace()
          .insertNew(VanillaSymbol('\\$','$')).show();
      }
      else if (!cursor.next)
        cursor.insertAfter(this.parent);
      else if (!cursor.prev)
        cursor.insertBefore(this.parent);
      else
        cursor.write(ch);

      return false;
    };
  };
  _.latex = function() {
    return '$' + this.firstChild.latex() + '$';
  };
});

var RootTextBlock = P(MathBlock, function(_) {
  _.renderLatex = function(latex) {
    var self = this
    var cursor = self.cursor;
    self.jQ.children().slice(1).remove();
    self.firstChild = self.lastChild = 0;
    cursor.show().appendTo(self);

    var regex = Parser.regex;
    var string = Parser.string;
    var eof = Parser.eof;
    var all = Parser.all;

    // Parser RootMathCommand
    var mathMode = string('$').then(latexMathParser)
      // because TeX is insane, math mode doesn't necessarily
      // have to end.  So we allow for the case that math mode
      // continues to the end of the stream.
      .skip(string('$').or(eof))
      .map(function(block) {
        // HACK FIXME: this shouldn't have to have access to cursor
        var rootMathCommand = RootMathCommand(cursor);

        rootMathCommand.createBlocks();
        var rootMathBlock = rootMathCommand.firstChild;
        block.children().adopt(rootMathBlock, 0, 0);

        return rootMathCommand;
      })
    ;

    var escapedDollar = string('\\$').result('$');
    var textChar = escapedDollar.or(regex(/^[^$]/)).map(VanillaSymbol);
    var latexText = mathMode.or(textChar).many();
    var commands = latexText.skip(eof).or(all.result(false)).parse(latex);

    if (commands) {
      for (var i = 0; i < commands.length; i += 1) {
        commands[i].adopt(self, self.lastChild, 0);
      }

      var html = self.join('html');
      MathElement.jQize(html).appendTo(self.jQ);

      this.finalizeInsert();
    }
  };
  _.onKey = RootMathBlock.prototype.onKey;
  _.onText = function(ch) {
    this.cursor.prepareEdit();
    if (ch === '$')
      this.cursor.insertNew(RootMathCommand(this.cursor));
    else
      this.cursor.insertNew(VanillaSymbol(ch));

    return false;
  };
});
/***************************
 * Commands and Operators.
 **************************/

var CharCmds = {}, LatexCmds = {}; //single character commands, LaTeX commands

var scale, // = function(jQ, x, y) { ... }
//will use a CSS 2D transform to scale the jQuery-wrapped HTML elements,
//or the filter matrix transform fallback for IE 5.5-8, or gracefully degrade to
//increasing the fontSize to match the vertical Y scaling factor.

//ideas from http://github.com/louisremi/jquery.transform.js
//see also http://msdn.microsoft.com/en-us/library/ms533014(v=vs.85).aspx

  forceIERedraw = noop,
  div = document.createElement('div'),
  div_style = div.style,
  transformPropNames = {
    transform:1,
    WebkitTransform:1,
    MozTransform:1,
    OTransform:1,
    msTransform:1
  },
  transformPropName;

for (var prop in transformPropNames) {
  if (prop in div_style) {
    transformPropName = prop;
    break;
  }
}

if (transformPropName) {
  scale = function(jQ, x, y) {
    jQ.css(transformPropName, 'scale('+x+','+y+')');
  };
}
else if ('filter' in div_style) { //IE 6, 7, & 8 fallback, see https://github.com/laughinghan/mathquill/wiki/Transforms
  forceIERedraw = function(el){ el.className = el.className; };
  scale = function(jQ, x, y) { //NOTE: assumes y > x
    x /= (1+(y-1)/2);
    jQ.css('fontSize', y + 'em');
    if (!jQ.hasClass('matrixed-container')) {
      jQ.addClass('matrixed-container')
      .wrapInner('<span class="matrixed"></span>');
    }
    var innerjQ = jQ.children()
    .css('filter', 'progid:DXImageTransform.Microsoft'
        + '.Matrix(M11=' + x + ",SizingMethod='auto expand')"
    );
    function calculateMarginRight() {
      jQ.css('marginRight', (innerjQ.width()-1)*(x-1)/x + 'px');
    }
    calculateMarginRight();
    var intervalId = setInterval(calculateMarginRight);
    $(window).load(function() {
      clearTimeout(intervalId);
      calculateMarginRight();
    });
  };
}
else {
  scale = function(jQ, x, y) {
    jQ.css('fontSize', y + 'em');
  };
}

var Style = P(MathCommand, function(_, _super) {
  _.init = function(ctrlSeq, tagName, attrs) {
    _super.init.call(this, ctrlSeq, '<'+tagName+' '+attrs+'>&0</'+tagName+'>');
  };
});

//fonts
LatexCmds.mathrm = bind(Style, '\\mathrm', 'span', 'class="roman font"');
LatexCmds.mathit = bind(Style, '\\mathit', 'i', 'class="font"');
LatexCmds.mathbf = bind(Style, '\\mathbf', 'b', 'class="font"');
LatexCmds.mathsf = bind(Style, '\\mathsf', 'span', 'class="sans-serif font"');
LatexCmds.mathtt = bind(Style, '\\mathtt', 'span', 'class="monospace font"');
//text-decoration
LatexCmds.underline = bind(Style, '\\underline', 'span', 'class="non-leaf underline"');
LatexCmds.overline = LatexCmds.bar = bind(Style, '\\overline', 'span', 'class="non-leaf overline"');

var SupSub = P(MathCommand, function(_, _super) {
  _.init = function(ctrlSeq, tag, text) {
    _super.init.call(this, ctrlSeq, '<'+tag+' class="non-leaf"><span class="non-leaf '+tag+'">&0</span></'+tag+'>', [ text ]);
  };
  _.finalizeTree = function() {
    //TODO: use inheritance
    pray('SupSub is only _ and ^',
      this.ctrlSeq === '^' || this.ctrlSeq === '_'
    );

    if (this.prev instanceof BigSymbol && this.prev.ctrlSeq !== '\\int ') {
      var bigSym = this.prev, block = this.firstChild;
      if (this.ctrlSeq === '_') {
        block.adopt(bigSym, 0, bigSym.firstChild);
        $('<span class="from"></span>').append(block.jQ.removeClass('sub'))
        .appendTo(bigSym.jQ);
        bigSym.down = block;
        block.up = insertAfterUnlessAtBeginning;
      }
      else {
        block.adopt(bigSym, bigSym.lastChild, 0);
        $('<span class="to"></span>').append(block.jQ.removeClass('sup'))
        .prependTo(bigSym.jQ);
        bigSym.up = block;
        block.down = insertAfterUnlessAtBeginning;
      }
      this.disown();
      this.respace = noop; // don't let SupSub::respace reset the .up/.down ptrs
      return;
    }

    if (this.ctrlSeq === '_') {
      this.down = this.firstChild;
      this.firstChild.up = insertBeforeUnlessAtEnd;
    }
    else {
      this.up = this.firstChild;
      this.firstChild.down = insertBeforeUnlessAtEnd;
    }
  };
  function insertAfterUnlessAtBeginning(cursor) {
    // cursor.insertAfter(cmd), unless cursor at the beginning of block, and every
    // ancestor cmd is at the beginning of every ancestor block
    var cmd = this.parent, ancestorCmd = cursor;
    do {
      if (ancestorCmd.prev) {
        cursor.insertAfter(cmd);
        return false;
      }
      ancestorCmd = ancestorCmd.parent.parent;
    } while (ancestorCmd !== cmd);
    cursor.insertBefore(cmd);
    return false;
  }
  function insertBeforeUnlessAtEnd(cursor) {
    // cursor.insertBefore(cmd), unless cursor at the end of block, and every
    // ancestor cmd is at the end of every ancestor block
    var cmd = this.parent, ancestorCmd = cursor;
    do {
      if (ancestorCmd.next) {
        cursor.insertBefore(cmd);
        return false;
      }
      ancestorCmd = ancestorCmd.parent.parent;
    } while (ancestorCmd !== cmd);
    cursor.insertAfter(cmd);
    return false;
  }
  _.latex = function() {
    if (this.ctrlSeq === '_' && this.respaced) return '';

    var latex = '';

    if (this.ctrlSeq === '^' && this.next.respaced) {
      var block = this.next.firstChild.latex();
      if (block.length === 1) latex += '_' + block;
      else latex += '_{' + block + '}';
    }

    var block = this.firstChild.latex();
    if (block.length === 1) latex += this.ctrlSeq + block;
    else latex += this.ctrlSeq + '{' + (block || ' ') + '}';

    return latex;
  };
  _.redraw = function() {
    if (this.prev)
      this.prev.respace();
    //SupSub::respace recursively calls respace on all the following SupSubs
    //so if prev is a SupSub, no need to call respace on this or following nodes
    if (!(this.prev instanceof SupSub)) {
      this.respace();
      //and if next is a SupSub, then this.respace() will have already called
      //this.next.respace()
      if (this.next && !(this.next instanceof SupSub))
        this.next.respace();
    }
  };
  _.respace = function() {
    if (
      this.prev.ctrlSeq === '\\int ' || (
        this.prev instanceof SupSub && this.prev.ctrlSeq != this.ctrlSeq
        && this.prev.prev && this.prev.prev.ctrlSeq === '\\int '
      )
    ) {
      if (!this['int']) {
        this['int'] = true;
        this.jQ.addClass('int');
      }
    }
    else {
      if (this['int']) {
        this['int'] = false;
        this.jQ.removeClass('int');
      }
    }

    this.respaced = this.prev instanceof SupSub && this.prev.ctrlSeq != this.ctrlSeq && !this.prev.respaced;
    if (this.respaced) {
      var fontSize = +this.jQ.css('fontSize').slice(0,-2),
        prevWidth = this.prev.jQ.outerWidth(),
        thisWidth = this.jQ.outerWidth();
      this.jQ.css({
        left: (this['int'] && this.ctrlSeq === '_' ? -.25 : 0) - prevWidth/fontSize + 'em',
        marginRight: .1 - min(thisWidth, prevWidth)/fontSize + 'em'
          //1px extra so it doesn't wrap in retarded browsers (Firefox 2, I think)
      });
    }
    else if (this['int'] && this.ctrlSeq === '_') {
      this.jQ.css({
        left: '-.25em',
        marginRight: ''
      });
    }
    else {
      this.jQ.css({
        left: '',
        marginRight: ''
      });
    }

    if (this.respaced) {
      if (this.ctrlSeq === '^') this.down = this.firstChild.down = this.prev.firstChild;
      else this.up = this.firstChild.up = this.prev.firstChild;
    }
    else if (this.next.respaced) {
      if (this.ctrlSeq === '_') this.up = this.firstChild.up = this.next.firstChild;
      else this.down = this.firstChild.down = this.next.firstChild;
    }
    else {
      if (this.ctrlSeq === '_') {
        delete this.up;
        this.firstChild.up = insertBeforeUnlessAtEnd;
      }
      else {
        delete this.down;
        this.firstChild.down = insertBeforeUnlessAtEnd;
      }
    }

    if (this.next instanceof SupSub)
      this.next.respace();

    return this;
  };

  _.onKey = function(key, e) {
    if (this.getCursor().parent.parent !== this) return;

    switch (key) {
    case 'Tab':
      if (this.next.respaced) {
        this.getCursor().prepareMove().prependTo(this.next.firstChild);
        e.preventDefault();
        return false;
      }
      break;
    case 'Shift-Tab':
      if (this.respaced) {
        this.getCursor().prepareMove().appendTo(this.prev.firstChild);
        e.preventDefault();
        return false;
      }
      break;
    case 'Left':
      if (!this.getCursor().prev && this.respaced) {
        this.getCursor().prepareMove().insertBefore(this.prev);
        return false;
      }
      break;
    case 'Right':
      if (!this.getCursor().next && this.next.respaced) {
        this.getCursor().prepareMove().insertAfter(this.next);
        return false;
      }
    }
  };
  _.getCursor = function() {
    var cursor;
    for (var ancestor = this.parent; !cursor; ancestor = ancestor.parent) {
      cursor = ancestor.cursor;
    }
    this.getCursor = function() { return cursor; };
    return this.getCursor();
  };
});

LatexCmds.subscript =
LatexCmds._ = bind(SupSub, '_', 'sub', '_');

LatexCmds.superscript =
LatexCmds.supscript =
LatexCmds['^'] = bind(SupSub, '^', 'sup', '**');

var Fraction =
LatexCmds.frac =
LatexCmds.dfrac =
LatexCmds.cfrac =
LatexCmds.fraction = P(MathCommand, function(_, _super) {
  _.ctrlSeq = '\\frac';
  _.htmlTemplate =
      '<span class="fraction non-leaf">'
    +   '<span class="numerator">&0</span>'
    +   '<span class="denominator">&1</span>'
    +   '<span style="display:inline-block;width:0">&nbsp;</span>'
    + '</span>'
  ;
  _.textTemplate = ['(', '/', ')'];
  _.finalizeTree = function() {
    this.up = this.lastChild.up = this.firstChild;
    this.down = this.firstChild.down = this.lastChild;
  };
});

var LiveFraction =
LatexCmds.over =
CharCmds['/'] = P(Fraction, function(_, _super) {
  _.createBefore = function(cursor) {
    if (!this.replacedFragment) {
      var prev = cursor.prev;
      if (prev instanceof TextBlock || prev instanceof Fraction) {
        prev = prev.prev;
      }
      else {
        while (prev &&
          !(
            prev instanceof BinaryOperator ||
            prev instanceof TextBlock ||
            prev instanceof BigSymbol ||
            prev instanceof Fraction ||
            prev.ctrlSeq === ',' ||
            prev.ctrlSeq === ':' ||
            prev.ctrlSeq === '\\space '
          ) //lookbehind for operator
        )
          prev = prev.prev;

        if (prev instanceof BigSymbol && prev.next instanceof SupSub) {
          prev = prev.next;
          if (prev.next instanceof SupSub && prev.next.ctrlSeq != prev.ctrlSeq)
            prev = prev.next;
        }
      }

      if (prev !== cursor.prev) {
        this.replaces(MathFragment(prev.next || cursor.parent.firstChild, cursor.prev));
        cursor.prev = prev;
      }
    }
    _super.createBefore.call(this, cursor);
  };
});

var SquareRoot =
LatexCmds.sqrt =
LatexCmds['√'] = P(MathCommand, function(_, _super) {
  _.ctrlSeq = '\\sqrt';
  _.htmlTemplate =
      '<span class="non-leaf">'
    +   '<span class="scaled sqrt-prefix">&radic;</span>'
    +   '<span class="non-leaf sqrt-stem">&0</span>'
    + '</span>'
  ;
  _.textTemplate = ['sqrt(', ')'];
  _.parser = function() {
    return latexMathParser.optBlock.then(function(optBlock) {
      return latexMathParser.block.map(function(block) {
        var nthroot = NthRoot();
        nthroot.blocks = [ optBlock, block ];
        optBlock.adopt(nthroot, 0, 0);
        block.adopt(nthroot, optBlock, 0);
        return nthroot;
      });
    }).or(_super.parser.call(this));
  };
  _.redraw = function() {
    var block = this.lastChild.jQ;
    scale(block.prev(), 1, block.innerHeight()/+block.css('fontSize').slice(0,-2) - .1);
  };
});


var NthRoot =
LatexCmds.nthroot = P(SquareRoot, function(_, _super) {
  _.htmlTemplate =
      '<sup class="nthroot non-leaf">&0</sup>'
    + '<span class="scaled">'
    +   '<span class="sqrt-prefix scaled">&radic;</span>'
    +   '<span class="sqrt-stem non-leaf">&1</span>'
    + '</span>'
  ;
  _.textTemplate = ['sqrt[', '](', ')'];
  _.latex = function() {
    return '\\sqrt['+this.firstChild.latex()+']{'+this.lastChild.latex()+'}';
  };
  _.onKey = function(key, e) {
    if (this.getCursor().parent.parent !== this) return;

    switch (key) {
    case 'Right':
      if (this.getCursor().next) return;
    case 'Tab':
      if (this.getCursor().parent === this.firstChild) {
        this.getCursor().prepareMove().prependTo(this.lastChild);
        e.preventDefault();
        return false;
      }
      break;
    case 'Left':
      if (this.getCursor().prev) return;
    case 'Shift-Tab':
      if (this.getCursor().parent === this.lastChild) {
        this.getCursor().prepareMove().appendTo(this.firstChild);
        e.preventDefault();
        return false;
      }
    }
  };
  _.getCursor = SupSub.prototype.getCursor;
});

// Round/Square/Curly/Angle Brackets (aka Parens/Brackets/Braces)
var Bracket = P(MathCommand, function(_, _super) {
  _.init = function(open, close, ctrlSeq, end) {
    _super.init.call(this, '\\left'+ctrlSeq,
        '<span class="non-leaf">'
      +   '<span class="scaled paren">'+open+'</span>'
      +   '<span class="non-leaf">&0</span>'
      +   '<span class="scaled paren">'+close+'</span>'
      + '</span>',
      [open, close]);
    this.end = '\\right'+end;
  };
  _.jQadd = function() {
    _super.jQadd.apply(this, arguments);
    var jQ = this.jQ;
    this.bracketjQs = jQ.children(':first').add(jQ.children(':last'));
  };
  //When typed, auto-expand paren to end of block
  _.finalizeTree = function() {
    if (this.firstChild.isEmpty() && this.next) {
      var nextAll = MathFragment(this.next, this.parent.lastChild).disown();
      nextAll.adopt(this.firstChild, 0, 0);
      nextAll.jQ.appendTo(this.firstChild.jQ);
    }
  };
  _.placeCursor = function(cursor) {
    cursor.prependTo(this.firstChild);
  };
  _.latex = function() {
    return this.ctrlSeq + this.firstChild.latex() + this.end;
  };
  _.redraw = function() {
    var blockjQ = this.firstChild.jQ;

    var height = blockjQ.outerHeight()/+blockjQ.css('fontSize').slice(0,-2);

    scale(this.bracketjQs, min(1 + .2*(height - 1), 1.2), 1.05*height);
  };
});

LatexCmds.left = P(MathCommand, function(_) {
  _.parser = function() {
    var regex = Parser.regex;
    var string = Parser.string;
    var regex = Parser.regex;
    var succeed = Parser.succeed;
    var block = latexMathParser.block;
    var optWhitespace = Parser.optWhitespace;

    return optWhitespace.then(regex(/^(?:[([|]|\\\{)/))
      .then(function(open) {
        if (open.charAt(0) === '\\') open = open.slice(1);

        var cmd = CharCmds[open]();

        return latexMathParser
          .map(function (block) {
            cmd.blocks = [ block ];
            block.adopt(cmd, 0, 0);
          })
          .then(string('\\right'))
          .skip(optWhitespace)
          .then(regex(/^(?:[\])|]|\\\})/))
          .then(function(close) {
            if (close.slice(-1) !== cmd.end.slice(-1)) {
              return Parser.fail('open doesn\'t match close');
            }

            return succeed(cmd);
          })
        ;
      })
    ;
  };
});

LatexCmds.right = P(MathCommand, function(_) {
  _.parser = function() {
    return Parser.fail('unmatched \\right');
  };
});

LatexCmds.lbrace =
CharCmds['{'] = bind(Bracket, '{', '}', '\\{', '\\}');
LatexCmds.langle =
LatexCmds.lang = bind(Bracket, '&lang;','&rang;','\\langle ','\\rangle ');

// Closing bracket matching opening bracket above
var CloseBracket = P(Bracket, function(_, _super) {
  _.createBefore = function(cursor) {
    // if I'm replacing a selection fragment, just wrap in parens
    if (this.replacedFragment) return _super.createBefore.call(this, cursor);

    // elsewise, if my parent is a matching open-paren, then close it here,
    // i.e. move everything after me in the open-paren to after the parens
    var openParen = cursor.parent.parent;
    if (openParen.ctrlSeq === this.ctrlSeq) {
      if (cursor.next) {
        var nextAll = MathFragment(cursor.next, openParen.firstChild.lastChild).disown();
        nextAll.adopt(openParen.parent, openParen, openParen.next);
        nextAll.jQ.insertAfter(openParen.jQ);
        if (cursor.next.respace) cursor.next.respace();
      }
      cursor.insertAfter(openParen);
      openParen.bubble('redraw');
    }
    // or if not, make empty paren group and put cursor inside it
    // (I think this behavior is weird - Han)
    else {
      _super.createBefore.call(this, cursor);
      cursor.appendTo(this.firstChild); // FIXME HACK
    }
  };
  _.finalizeTree = noop;
  _.placeCursor = function(cursor) {
    this.firstChild.blur();
    cursor.insertAfter(this);
  };
});

LatexCmds.rbrace =
CharCmds['}'] = bind(CloseBracket, '{','}','\\{','\\}');
LatexCmds.rangle =
LatexCmds.rang = bind(CloseBracket, '&lang;','&rang;','\\langle ','\\rangle ');

var parenMixin = function(_, _super) {
  _.init = function(open, close) {
    _super.init.call(this, open, close, open, close);
  };
};

var Paren = P(Bracket, parenMixin);

LatexCmds.lparen =
CharCmds['('] = bind(Paren, '(', ')');
LatexCmds.lbrack =
LatexCmds.lbracket =
CharCmds['['] = bind(Paren, '[', ']');

var CloseParen = P(CloseBracket, parenMixin);

LatexCmds.rparen =
CharCmds[')'] = bind(CloseParen, '(', ')');
LatexCmds.rbrack =
LatexCmds.rbracket =
CharCmds[']'] = bind(CloseParen, '[', ']');

var Pipes =
LatexCmds.lpipe =
LatexCmds.rpipe =
CharCmds['|'] = P(Paren, function(_, _super) {
  _.init = function() {
    _super.init.call(this, '|', '|');
  }

  _.createBefore = function(cursor) {
    if (!cursor.next && cursor.parent.parent && cursor.parent.parent.end === this.end && !this.replacedFragment)
      cursor.insertAfter(cursor.parent.parent);
    else
      MathCommand.prototype.createBefore.call(this, cursor);
  };
  _.finalizeTree = noop;
});

// DISABLED in DCG
var TextBlock =
LatexCmds.text =
LatexCmds.textnormal =
LatexCmds.textrm =
LatexCmds.textup =
LatexCmds.textmd = P(MathCommand, function(_, _super) {
  _.ctrlSeq = '\\text';
  _.htmlTemplate = '<span class="text">&0</span>';
  _.replaces = function(replacedText) {
    if (replacedText instanceof MathFragment)
      this.replacedText = replacedText.remove().jQ.text();
    else if (typeof replacedText === 'string')
      this.replacedText = replacedText;
  };
  _.textTemplate = ['"', '"'];
  _.parser = function() {
    // TODO: correctly parse text mode
    var string = Parser.string;
    var regex = Parser.regex;
    var optWhitespace = Parser.optWhitespace;
    return optWhitespace
      .then(string('{')).then(regex(/^[^}]*/)).skip(string('}'))
      .map(function(text) {
        var cmd = TextBlock();
        cmd.createBlocks();
        var block = cmd.firstChild;
        for (var i = 0; i < text.length; i += 1) {
          var ch = VanillaSymbol(text.charAt(i));
          ch.adopt(block, block.lastChild, 0);
        }
        return cmd;
      })
    ;
  };
  _.createBlocks = function() {
    //FIXME: another possible Law of Demeter violation, but this seems much cleaner, like it was supposed to be done this way
    this.firstChild =
    this.lastChild =
      InnerTextBlock();

    this.blocks = [ this.firstChild ];

    this.firstChild.parent = this;
  };
  _.finalizeInsert = function() {
    //FIXME HACK blur removes the TextBlock
    this.firstChild.blur = function() { delete this.blur; return this; };
    _super.finalizeInsert.call(this);
  };
  _.createBefore = function(cursor) {
    _super.createBefore.call(this, this.cursor = cursor);

    if (this.replacedText)
      for (var i = 0; i < this.replacedText.length; i += 1)
        this.write(this.replacedText.charAt(i));
  };
  _.write = function(ch) {
    this.cursor.insertNew(VanillaSymbol(ch));
  };
  _.onKey = function(key, e) {
    //backspace and delete and ends of block don't unwrap
    if (!this.cursor.selection &&
      (
        (key === 'Backspace' && !this.cursor.prev) ||
        (key === 'Del' && !this.cursor.next)
      )
    ) {
      if (this.isEmpty())
        this.cursor.insertAfter(this);

      return false;
    }
  };
  _.onText = function(ch) {
    this.cursor.prepareEdit();
    if (ch !== '$')
      this.write(ch);
    else if (this.isEmpty())
      this.cursor.insertAfter(this).backspace().insertNew(VanillaSymbol('\\$','$'));
    else if (!this.cursor.next)
      this.cursor.insertAfter(this);
    else if (!this.cursor.prev)
      this.cursor.insertBefore(this);
    else { //split apart
      var next = TextBlock(MathFragment(this.cursor.next, this.firstChild.lastChild));
      next.placeCursor = function(cursor) { //FIXME HACK: pretend no prev so they don't get merged
        this.prev = 0;
        delete this.placeCursor;
        this.placeCursor(cursor);
      };
      next.firstChild.focus = function(){ return this; };
      this.cursor.insertAfter(this).insertNew(next);
      next.prev = this;
      this.cursor.insertBefore(next);
      delete next.firstChild.focus;
    }
    this.cursor.root.triggerSpecialEvent('render');
    return false;
  };
});

var InnerTextBlock = P(MathBlock, function(_, _super) {
  _.blur = function() {
    this.jQ.removeClass('hasCursor');
    if (this.isEmpty()) {
      var textblock = this.parent, cursor = textblock.cursor;
      if (cursor.parent === this)
        this.jQ.addClass('empty');
      else {
        cursor.hide();
        textblock.remove();
        if (cursor.next === textblock)
          cursor.next = textblock.next;
        else if (cursor.prev === textblock)
          cursor.prev = textblock.prev;

        cursor.show().parent.bubble('redraw');
      }
    }
    return this;
  };
  _.focus = function() {
    _super.focus.call(this);

    var textblock = this.parent;
    if (textblock.next.ctrlSeq === textblock.ctrlSeq) { //TODO: seems like there should be a better way to move MathElements around
      var innerblock = this,
        cursor = textblock.cursor,
        next = textblock.next.firstChild;

      next.eachChild(function(child){
        child.parent = innerblock;
        child.jQ.appendTo(innerblock.jQ);
      });

      if (this.lastChild)
        this.lastChild.next = next.firstChild;
      else
        this.firstChild = next.firstChild;

      next.firstChild.prev = this.lastChild;
      this.lastChild = next.lastChild;

      next.parent.remove();

      if (cursor.prev)
        cursor.insertAfter(cursor.prev);
      else
        cursor.prependTo(this);

      cursor.parent.bubble('redraw');
    }
    else if (textblock.prev.ctrlSeq === textblock.ctrlSeq) {
      var cursor = textblock.cursor;
      if (cursor.prev)
        textblock.prev.firstChild.focus();
      else
        cursor.appendTo(textblock.prev.firstChild);
    }
    return this;
  };
});


function makeTextBlock(latex, tagName, attrs) {
  return P(TextBlock, {
    ctrlSeq: latex,
    htmlTemplate: '<'+tagName+' '+attrs+'>&0</'+tagName+'>'
  });
}

LatexCmds.em = LatexCmds.italic = LatexCmds.italics =
LatexCmds.emph = LatexCmds.textit = LatexCmds.textsl =
  makeTextBlock('\\textit', 'i', 'class="text"');
LatexCmds.strong = LatexCmds.bold = LatexCmds.textbf =
  makeTextBlock('\\textbf', 'b', 'class="text"');
LatexCmds.sf = LatexCmds.textsf =
  makeTextBlock('\\textsf', 'span', 'class="sans-serif text"');
LatexCmds.tt = LatexCmds.texttt =
  makeTextBlock('\\texttt', 'span', 'class="monospace text"');
LatexCmds.textsc =
  makeTextBlock('\\textsc', 'span', 'style="font-variant:small-caps" class="text"');
LatexCmds.uppercase =
  makeTextBlock('\\uppercase', 'span', 'style="text-transform:uppercase" class="text"');
LatexCmds.lowercase =
  makeTextBlock('\\lowercase', 'span', 'style="text-transform:lowercase" class="text"');

// input box to type a variety of LaTeX commands beginning with a backslash
// DISABLED in DCG
var LatexCommandInput =
P(MathCommand, function(_, _super) {
  _.ctrlSeq = '\\';
  _.replaces = function(replacedFragment) {
    this._replacedFragment = replacedFragment.disown();
    this.isEmpty = function() { return false; };
  };
  _.htmlTemplate = '<span class="latex-command-input non-leaf">\\<span>&0</span></span>';
  _.textTemplate = ['\\'];
  _.createBlocks = function() {
    _super.createBlocks.call(this);
    this.firstChild.focus = function() {
      this.parent.jQ.addClass('hasCursor');
      if (this.isEmpty())
        this.parent.jQ.removeClass('empty');

      return this;
    };
    this.firstChild.blur = function() {
      this.parent.jQ.removeClass('hasCursor');
      if (this.isEmpty())
        this.parent.jQ.addClass('empty');

      return this;
    };
  };
  _.createBefore = function(cursor) {
    _super.createBefore.call(this, cursor);
    this.cursor = cursor.appendTo(this.firstChild);
    if (this._replacedFragment) {
      var el = this.jQ[0];
      this.jQ =
        this._replacedFragment.jQ.addClass('blur').bind(
          'mousedown mousemove', //FIXME: is monkey-patching the mousedown and mousemove handlers the right way to do this?
          function(e) {
            $(e.target = el).trigger(e);
            return false;
          }
        ).insertBefore(this.jQ).add(this.jQ);
    }
  };
  _.latex = function() {
    return '\\' + this.firstChild.latex() + ' ';
  };
  _.onKey = function(key, e) {
    if (key === 'Tab' || key === 'Enter') {
      this.renderCommand();
      this.cursor.root.triggerSpecialEvent('render');
      e.preventDefault();
      return false;
    }
  };
  _.onText = function(ch) {
    if (ch.match(/[a-z]/i)) {
      this.cursor.prepareEdit();
      this.cursor.insertNew(VanillaSymbol(ch));
      return false;
    }
    this.renderCommand();
    if (ch === ' ' || (ch === '\\' && this.firstChild.isEmpty())) {
      this.cursor.root.triggerSpecialEvent('render');
      return false;
    }
  };
  _.renderCommand = function() {
    this.jQ = this.jQ.last();
    this.remove();
    if (this.next) {
      this.cursor.insertBefore(this.next);
    } else {
      this.cursor.appendTo(this.parent);
    }

    var latex = this.firstChild.latex(), cmd;
    if (!latex) latex = 'backslash';
    this.cursor.insertCmd(latex, this._replacedFragment);
  };
});

var Binomial =
LatexCmds.binom =
LatexCmds.binomial = P(MathCommand, function(_, _super) {
  _.ctrlSeq = '\\binom';
  _.htmlTemplate =
      '<span class="paren scaled">(</span>'
    + '<span class="non-leaf">'
    +   '<span class="array non-leaf">'
    +     '<span>&0</span>'
    +     '<span>&1</span>'
    +   '</span>'
    + '</span>'
    + '<span class="paren scaled">)</span>'
  ;
  _.textTemplate = ['choose(',',',')'];
  _.redraw = function() {
    var blockjQ = this.jQ.eq(1);

    var height = blockjQ.outerHeight()/+blockjQ.css('fontSize').slice(0,-2);

    var parens = this.jQ.filter('.paren');
    scale(parens, min(1 + .2*(height - 1), 1.2), 1.05*height);
  };
});

var Choose =
LatexCmds.choose = P(Binomial, function(_) {
  _.createBefore = LiveFraction.prototype.createBefore;
});

var Vector =
LatexCmds.vector = P(MathCommand, function(_, _super) {
  _.ctrlSeq = '\\vector';
  _.htmlTemplate = '<span class="array"><span>&0</span></span>';
  _.latex = function() {
    return '\\begin{matrix}' + this.foldChildren([], function(latex, child) {
      latex.push(child.latex());
      return latex;
    }).join('\\\\') + '\\end{matrix}';
  };
  _.text = function() {
    return '[' + this.foldChildren([], function(text, child) {
      text.push(child.text());
      return text;
    }).join() + ']';
  }
  _.createBefore = function(cursor) {
    _super.createBefore.call(this, this.cursor = cursor);
  };
  _.onKey = function(key, e) {
    var currentBlock = this.cursor.parent;

    if (currentBlock.parent === this) {
      if (key === 'Enter') { //enter
        var newBlock = MathBlock();
        newBlock.parent = this;
        newBlock.jQ = $('<span></span>')
          .attr(mqBlockId, newBlock.id)
          .insertAfter(currentBlock.jQ);
        if (currentBlock.next)
          currentBlock.next.prev = newBlock;
        else
          this.lastChild = newBlock;

        newBlock.next = currentBlock.next;
        currentBlock.next = newBlock;
        newBlock.prev = currentBlock;
        this.bubble('redraw').cursor.appendTo(newBlock);

        e.preventDefault();
        return false;
      }
      else if (key === 'Tab' && !currentBlock.next) {
        if (currentBlock.isEmpty()) {
          if (currentBlock.prev) {
            this.cursor.insertAfter(this);
            delete currentBlock.prev.next;
            this.lastChild = currentBlock.prev;
            currentBlock.jQ.remove();
            this.bubble('redraw');

            e.preventDefault();
            return false;
          }
          else
            return;
        }

        var newBlock = MathBlock();
        newBlock.parent = this;
        newBlock.jQ = $('<span></span>').attr(mqBlockId, newBlock.id).appendTo(this.jQ);
        this.lastChild = newBlock;
        currentBlock.next = newBlock;
        newBlock.prev = currentBlock;
        this.bubble('redraw').cursor.appendTo(newBlock);

        e.preventDefault();
        return false;
      }
      else if (e.which === 8) { //backspace
        if (currentBlock.isEmpty()) {
          if (currentBlock.prev) {
            this.cursor.appendTo(currentBlock.prev)
            currentBlock.prev.next = currentBlock.next;
          }
          else {
            this.cursor.insertBefore(this);
            this.firstChild = currentBlock.next;
          }

          if (currentBlock.next)
            currentBlock.next.prev = currentBlock.prev;
          else
            this.lastChild = currentBlock.prev;

          currentBlock.jQ.remove();
          if (this.isEmpty())
            this.cursor.deleteForward();
          else
            this.bubble('redraw');

          e.preventDefault();
          return false;
        }
        else if (!this.cursor.prev) {
          e.preventDefault();
          return false;
        }
      }
    }
  };
});
/**********************************
 * Symbols and Special Characters
 *********************************/

var Variable = P(Symbol, function(_, _super) {
  _.init = function(ch, html) {
    _super.init.call(this, ch, '<var>'+(html || ch)+'</var>');
  }
  _.createBefore = function(cursor) {
    //want the longest possible autocommand, so assemble longest series of letters (Variables) first
    var ctrlSeq = this.ctrlSeq;
    for (var i = 0, prev = cursor.prev; i < MAX_AUTOCMD_LEN - 1 && prev && prev instanceof Variable; i += 1, prev = prev.prev)
      ctrlSeq = prev.ctrlSeq + ctrlSeq;
    //then test if there's an autocommand here, starting with the longest possible and slicing
    while (ctrlSeq.length) {
      if (AutoCmds.hasOwnProperty(ctrlSeq)) {
        for (var i = 1; i < ctrlSeq.length; i += 1) cursor.backspace();
        cursor.insertNew(LatexCmds[ctrlSeq](ctrlSeq));
        return;
      }
      ctrlSeq = ctrlSeq.slice(1);
    }
    _super.createBefore.apply(this, arguments);
  };
  _.respace =
  _.finalizeTree = function() {
    //TODO: in better architecture, should be done in createBefore and backspace
    //respace is called too often, inefficient

    //want the longest possible autocommand, so assemble longest series of letters (Variables)
    var ctrlSeq = this.ctrlSeq;
    if (ctrlSeq.length > 1) return;
    for (var prev = this.prev; prev instanceof Variable && prev.ctrlSeq.length === 1; prev = prev.prev)
      ctrlSeq = prev.ctrlSeq + ctrlSeq;
    for (var next = this.next; next instanceof Variable && next.ctrlSeq.length === 1; next = next.next)
      ctrlSeq += next.ctrlSeq;

    //removeClass from all the things before figuring out what's an autocmd, if any
    MathFragment(prev.next || this.parent.firstChild, next.prev || this.parent.lastChild)
    .each(function(el) {
      el.jQ.removeClass('un-italicized last');
      delete el.isFirstLetter;
      delete el.isLastLetter;
    });

    //test if there's an autocommand here, going through substrings from longest to shortest
    outer: for (var i = 0, first = prev.next || this.parent.firstChild; i < ctrlSeq.length; i += 1, first = first.next) {
      for (var len = min(MAX_UNITALICIZED_LEN, ctrlSeq.length - i); len > 0; len -= 1) {
        if (UnItalicizedCmds.hasOwnProperty(ctrlSeq.slice(i, i + len))) {
          first.isFirstLetter = true;
          for (var j = 0, letter = first; j < len; j += 1, letter = letter.next) {
            letter.jQ.addClass('un-italicized');
            var last = letter;
          }
          last.isLastLetter = true;
          if (!(last.next instanceof SupSub || last.next instanceof Bracket))
            last.jQ.addClass('last');
          i += len - 1;
          first = last;
          continue outer;
        }
      }
    }
  };
  _.latex = function() {
    return (
      this.isFirstLetter ? '\\' + this.ctrlSeq :
      this.isLastLetter ? this.ctrlSeq + ' ' :
      this.ctrlSeq
    );
  };
  _.text = function() {
    var text = this.ctrlSeq;
    if (this.prev && !(this.prev instanceof Variable)
        && !(this.prev instanceof BinaryOperator))
      text = '*' + text;
    if (this.next && !(this.next instanceof BinaryOperator)
        && !(this.next.ctrlSeq === '^'))
      text += '*';
    return text;
  };
});

var UnItalicized = P(Symbol, function(_, _super) {
  _.init = function(fn) {
    this.ctrlSeq = fn;
  };
  _.createBefore = function(cursor) {
    cursor.writeLatex(this.ctrlSeq).show();
  };
  _.parser = function() {
    var fn = this.ctrlSeq;
    var block = MathBlock();
    for (var i = 0; i < fn.length; i += 1) {
      Variable(fn.charAt(i)).adopt(block, block.lastChild, 0);
    }
    return Parser.succeed(block.children());
  };
});

//backslashless commands, words where adjacent letters (Variables)
//that form them automatically are turned into commands
var UnItalicizedCmds = {
  ln: 1,
  log: 1,
  min: 1,
  nCr: 1,
  nPr: 1,
  gcd: 1,
  lcm: 1,
  //spanish gcd & lcm
  mcm: 1,
  mcd: 1,

  ceil: 1,
  exp: 1,
  abs: 1,
  max: 1,
  mod: 1,
  gcf: 1,
  hcf: 1,
  exp: 1,
  floor: 1,
  sign: 1,
  round: 1
}, MAX_UNITALICIZED_LEN = 9, AutoCmds = {
  sqrt: 1,
  nthroot: 1,
  sum: 1,
  prod: 1,
  pi: 1,
  phi: 1,
  tau: 1,
  gamma: 1,
  theta: 1
}, MAX_AUTOCMD_LEN = 7;

(function() {
  var trigs = { sin: 1, cos: 1, tan: 1, sec: 1, cosec: 1, csc: 1, cotan: 1, cot: 1, ctg: 1 };
  for (var trig in trigs) {
    UnItalicizedCmds[trig] =
    UnItalicizedCmds['arc'+trig] =
    UnItalicizedCmds[trig+'h'] =
    UnItalicizedCmds['arc'+trig+'h'] = 1;
  }

  for (var fn in UnItalicizedCmds)
    LatexCmds[fn] = UnItalicized;
}());

var VanillaSymbol = P(Symbol, function(_, _super) {
  _.init = function(ch, html) {
    _super.init.call(this, ch, '<span>'+(html || ch)+'</span>');
  };
});

CharCmds[' '] = bind(VanillaSymbol, '\\space ', ' ');

LatexCmds.prime = CharCmds["'"] = bind(VanillaSymbol, "'", '&prime;');

// does not use Symbola font
var NonSymbolaSymbol = P(Symbol, function(_, _super) {
  _.init = function(ch, html) {
    _super.init.call(this, ch, '<span class="nonSymbola">'+(html || ch)+'</span>');
  };
});

LatexCmds['@'] = NonSymbolaSymbol;
LatexCmds['&'] = bind(NonSymbolaSymbol, '\\&', '&amp;');
LatexCmds['%'] = bind(NonSymbolaSymbol, '\\%', '%');

//the following are all Greek to me, but this helped a lot: http://www.ams.org/STIX/ion/stixsig03.html

//lowercase Greek letter variables
LatexCmds.alpha =
LatexCmds.beta =
LatexCmds.gamma =
LatexCmds.delta =
LatexCmds.zeta =
LatexCmds.eta =
LatexCmds.theta =
LatexCmds.iota =
LatexCmds.kappa =
LatexCmds.mu =
LatexCmds.nu =
LatexCmds.xi =
LatexCmds.rho =
LatexCmds.sigma =
LatexCmds.tau =
LatexCmds.chi =
LatexCmds.psi =
LatexCmds.omega = P(Variable, function(_, _super) {
  _.init = function(latex) {
    _super.init.call(this,'\\'+latex+' ','&'+latex+';');
  };
});

//why can't anybody FUCKING agree on these
LatexCmds.phi = //W3C or Unicode?
  bind(Variable,'\\phi ','&#981;');

LatexCmds.phiv = //Elsevier and 9573-13
LatexCmds.varphi = //AMS and LaTeX
  bind(Variable,'\\varphi ','&phi;');

LatexCmds.epsilon = //W3C or Unicode?
  bind(Variable,'\\epsilon ','&#1013;');

LatexCmds.epsiv = //Elsevier and 9573-13
LatexCmds.varepsilon = //AMS and LaTeX
  bind(Variable,'\\varepsilon ','&epsilon;');

LatexCmds.piv = //W3C/Unicode and Elsevier and 9573-13
LatexCmds.varpi = //AMS and LaTeX
  bind(Variable,'\\varpi ','&piv;');

LatexCmds.sigmaf = //W3C/Unicode
LatexCmds.sigmav = //Elsevier
LatexCmds.varsigma = //LaTeX
  bind(Variable,'\\varsigma ','&sigmaf;');

LatexCmds.thetav = //Elsevier and 9573-13
LatexCmds.vartheta = //AMS and LaTeX
LatexCmds.thetasym = //W3C/Unicode
  bind(Variable,'\\vartheta ','&thetasym;');

LatexCmds.upsilon = //AMS and LaTeX and W3C/Unicode
LatexCmds.upsi = //Elsevier and 9573-13
  bind(Variable,'\\upsilon ','&upsilon;');

//these aren't even mentioned in the HTML character entity references
LatexCmds.gammad = //Elsevier
LatexCmds.Gammad = //9573-13 -- WTF, right? I dunno if this was a typo in the reference (see above)
LatexCmds.digamma = //LaTeX
  bind(Variable,'\\digamma ','&#989;');

LatexCmds.kappav = //Elsevier
LatexCmds.varkappa = //AMS and LaTeX
  bind(Variable,'\\varkappa ','&#1008;');

LatexCmds.rhov = //Elsevier and 9573-13
LatexCmds.varrho = //AMS and LaTeX
  bind(Variable,'\\varrho ','&#1009;');

//Greek constants, look best in un-italicised Times New Roman
LatexCmds.pi = LatexCmds['\u03C0'] = bind(NonSymbolaSymbol,'\\pi ','&pi;');
LatexCmds.theta = LatexCmds['\u03B8'] = bind(NonSymbolaSymbol,'\\theta ','&theta;');
LatexCmds.lambda = bind(NonSymbolaSymbol,'\\lambda ','&lambda;');

//uppercase greek letters

LatexCmds.Upsilon = //LaTeX
LatexCmds.Upsi = //Elsevier and 9573-13
LatexCmds.upsih = //W3C/Unicode "upsilon with hook"
LatexCmds.Upsih = //'cos it makes sense to me
  bind(Symbol,'\\Upsilon ','<var style="font-family: serif">&upsih;</var>'); //Symbola's 'upsilon with a hook' is a capital Y without hooks :(

//other symbols with the same LaTeX command and HTML character entity reference
LatexCmds.Gamma =
LatexCmds.Delta =
LatexCmds.Theta =
LatexCmds.Lambda =
LatexCmds.Xi =
LatexCmds.Pi =
LatexCmds.Sigma =
LatexCmds.Phi =
LatexCmds.Psi =
LatexCmds.Omega =
LatexCmds.forall = P(VanillaSymbol, function(_, _super) {
  _.init = function(latex) {
    _super.init.call(this,'\\'+latex+' ','&'+latex+';');
  };
});

// symbols that aren't a single MathCommand, but are instead a whole
// Fragment. Creates the Fragment from a LaTeX string
var LatexFragment = P(MathCommand, function(_) {
  _.init = function(latex) { this.latex = latex; };
  _.createBefore = function(cursor) { cursor.writeLatex(this.latex); };
  _.parser = function() {
    var frag = latexMathParser.parse(this.latex).children();
    return Parser.succeed(frag);
  };
});

// for what seems to me like [stupid reasons][1], Unicode provides
// subscripted and superscripted versions of all ten Arabic numerals,
// as well as [so-called "vulgar fractions"][2].
// Nobody really cares about most of them, but some of them actually
// predate Unicode, dating back to [ISO-8859-1][3], apparently also
// known as "Latin-1", which among other things [Windows-1252][4]
// largely coincides with, so Microsoft Word sometimes inserts them
// and they get copy-pasted into MathQuill.
//
// (Irrelevant but funny story: Windows-1252 is actually a strict
// superset of the "closely related but distinct"[3] "ISO 8859-1" --
// see the lack of a dash after "ISO"? Completely different character
// set, like elephants vs elephant seals, or "Zombies" vs "Zombie
// Redneck Torture Family". What kind of idiot would get them confused.
// People in fact got them confused so much, it was so common to
// mislabel Windows-1252 text as ISO-8859-1, that most modern web
// browsers and email clients treat the MIME charset of ISO-8859-1
// as actually Windows-1252, behavior now standard in the HTML5 spec.)
//
// [1]: http://en.wikipedia.org/wiki/Unicode_subscripts_and_superscripts
// [2]: http://en.wikipedia.org/wiki/Number_Forms
// [3]: http://en.wikipedia.org/wiki/ISO/IEC_8859-1
// [4]: http://en.wikipedia.org/wiki/Windows-1252
LatexCmds['\u00b9'] = bind(LatexFragment, '^1');
LatexCmds['\u00b2'] = bind(LatexFragment, '^2');
LatexCmds['\u00b3'] = bind(LatexFragment, '^3');
LatexCmds['\u00bc'] = bind(LatexFragment, '\\frac14');
LatexCmds['\u00bd'] = bind(LatexFragment, '\\frac12');
LatexCmds['\u00be'] = bind(LatexFragment, '\\frac34');
LatexCmds['\u2152'] = bind(LatexFragment, '\\frac{1}{10}');
LatexCmds['\u2153'] = bind(LatexFragment, '\\frac13');
LatexCmds['\u2154'] = bind(LatexFragment, '\\frac23');


var BinaryOperator = P(Symbol, function(_, _super) {
  _.init = function(ctrlSeq, html, text) {
    _super.init.call(this,
      ctrlSeq, '<span class="binary-operator">'+html+'</span>', text
    );
  };
  _.createBefore = function(cursor) {
    var ctrlSeq = cursor.prev.ctrlSeq + this.ctrlSeq;
    if (ctrlSeq === '<=')
      cursor.backspace().insertNew(BinaryOperator('\\le ', '&le;'));
    else if (ctrlSeq === '>=')
      cursor.backspace().insertNew(BinaryOperator('\\ge ', '&ge;'));
    else
      _super.createBefore.apply(this, arguments);
  };
});

var PlusMinus = P(BinaryOperator, function(_) {
  _.init = VanillaSymbol.prototype.init;

  _.respace = function() {
    if (!this.prev) {
      this.jQ[0].className = '';
    }
    else if (
      this.prev instanceof BinaryOperator &&
      this.next && !(this.next instanceof BinaryOperator)
    ) {
      this.jQ[0].className = 'unary-operator';
    }
    else {
      this.jQ[0].className = 'binary-operator';
    }
    return this;
  };
});

LatexCmds['+'] = bind(PlusMinus, '+', '+');
//yes, these are different dashes, I think one is an en dash and the other is a hyphen
LatexCmds['\u2013'] = LatexCmds['\u2212'] = LatexCmds['-'] = bind(PlusMinus, '-', '&minus;');
LatexCmds['\u00B1'] = LatexCmds.pm = LatexCmds.plusmn = LatexCmds.plusminus =
  bind(PlusMinus,'\\pm ','&plusmn;');
LatexCmds.mp = LatexCmds.mnplus = LatexCmds.minusplus =
  bind(PlusMinus,'\\mp ','&#8723;');

CharCmds['*'] = LatexCmds.sdot = LatexCmds.cdot =
  bind(BinaryOperator, '\\cdot ', '&middot;');
//semantically should be &sdot;, but &middot; looks better

LatexCmds['='] = bind(BinaryOperator, '=', '=');
LatexCmds['<'] = bind(BinaryOperator, '<', '&lt;');
LatexCmds['>'] = bind(BinaryOperator, '>', '&gt;');

LatexCmds.notin =
LatexCmds.sim =
LatexCmds.cong =
LatexCmds.equiv =
LatexCmds.oplus =
LatexCmds.otimes = P(BinaryOperator, function(_, _super) {
  _.init = function(latex) {
    _super.init.call(this, '\\'+latex+' ', '&'+latex+';');
  };
});

LatexCmds.times = bind(BinaryOperator, '\\times ', '&times;', '[x]');

LatexCmds['\u00F7'] = LatexCmds.div = LatexCmds.divide = LatexCmds.divides =
  bind(BinaryOperator,'\\div ','&divide;', '[/]');

LatexCmds['\u2260'] = LatexCmds.ne = LatexCmds.neq = bind(BinaryOperator,'\\ne ','&ne;');

LatexCmds.ast = LatexCmds.star = LatexCmds.loast = LatexCmds.lowast =
  bind(BinaryOperator,'\\ast ','&lowast;');
  //case 'there4 = // a special exception for this one, perhaps?
LatexCmds.therefor = LatexCmds.therefore =
  bind(BinaryOperator,'\\therefore ','&there4;');

LatexCmds.cuz = // l33t
LatexCmds.because = bind(BinaryOperator,'\\because ','&#8757;');

LatexCmds.prop = LatexCmds.propto = bind(BinaryOperator,'\\propto ','&prop;');

LatexCmds['\u2248'] = LatexCmds.asymp = LatexCmds.approx = bind(BinaryOperator,'\\approx ','&asymp;');

LatexCmds.lt = bind(BinaryOperator,'<','&lt;');

LatexCmds.gt = bind(BinaryOperator,'>','&gt;');

LatexCmds['\u2264'] = LatexCmds.le = LatexCmds.leq = bind(BinaryOperator,'\\le ','&le;');

LatexCmds['\u2265'] = LatexCmds.ge = LatexCmds.geq = bind(BinaryOperator,'\\ge ','&ge;');

LatexCmds.isin = LatexCmds['in'] = bind(BinaryOperator,'\\in ','&isin;');

LatexCmds.ni = LatexCmds.contains = bind(BinaryOperator,'\\ni ','&ni;');

LatexCmds.notni = LatexCmds.niton = LatexCmds.notcontains = LatexCmds.doesnotcontain =
  bind(BinaryOperator,'\\not\\ni ','&#8716;');

LatexCmds.sub = LatexCmds.subset = bind(BinaryOperator,'\\subset ','&sub;');

LatexCmds.sup = LatexCmds.supset = LatexCmds.superset =
  bind(BinaryOperator,'\\supset ','&sup;');

LatexCmds.nsub = LatexCmds.notsub =
LatexCmds.nsubset = LatexCmds.notsubset =
  bind(BinaryOperator,'\\not\\subset ','&#8836;');

LatexCmds.nsup = LatexCmds.notsup =
LatexCmds.nsupset = LatexCmds.notsupset =
LatexCmds.nsuperset = LatexCmds.notsuperset =
  bind(BinaryOperator,'\\not\\supset ','&#8837;');

LatexCmds.sube = LatexCmds.subeq = LatexCmds.subsete = LatexCmds.subseteq =
  bind(BinaryOperator,'\\subseteq ','&sube;');

LatexCmds.supe = LatexCmds.supeq =
LatexCmds.supsete = LatexCmds.supseteq =
LatexCmds.supersete = LatexCmds.superseteq =
  bind(BinaryOperator,'\\supseteq ','&supe;');

LatexCmds.nsube = LatexCmds.nsubeq =
LatexCmds.notsube = LatexCmds.notsubeq =
LatexCmds.nsubsete = LatexCmds.nsubseteq =
LatexCmds.notsubsete = LatexCmds.notsubseteq =
  bind(BinaryOperator,'\\not\\subseteq ','&#8840;');

LatexCmds.nsupe = LatexCmds.nsupeq =
LatexCmds.notsupe = LatexCmds.notsupeq =
LatexCmds.nsupsete = LatexCmds.nsupseteq =
LatexCmds.notsupsete = LatexCmds.notsupseteq =
LatexCmds.nsupersete = LatexCmds.nsuperseteq =
LatexCmds.notsupersete = LatexCmds.notsuperseteq =
  bind(BinaryOperator,'\\not\\supseteq ','&#8841;');


//sum, product, coproduct, integral
var BigSymbol = P(Symbol, function(_, _super) {
  _.init = function(ch, html) {
    _super.init.call(this, ch, '<span class="large-operator non-leaf"><big>'+html+'</big></span>');
    //FIXME HACK
    if (ch !== '\\int ')
      this.placeCursor = function(cursor) {
        cursor.writeLatex('^{}_{n=}').appendTo(this.firstChild).show();
      };
  };
  _.isEmpty = MathCommand.prototype.isEmpty;
  _.latex = function() {
    var fromLatex = this.firstChild ? '_'+simplify(this.firstChild.latex()) : '',
      toLatex = this.lastChild ? '^'+simplify(this.lastChild.latex()) : '';
    return this.ctrlSeq + fromLatex + toLatex;

    function simplify(latex) {
      return latex.length === 1 ? latex : '{' + (latex || ' ') + '}';
    }
  };
});

LatexCmds['\u2211'] = LatexCmds.sum = LatexCmds.summation = bind(BigSymbol,'\\sum ','&sum;');
LatexCmds['\u220F'] = LatexCmds.prod = LatexCmds.product = bind(BigSymbol,'\\prod ','&prod;');
LatexCmds.coprod = LatexCmds.coproduct = bind(BigSymbol,'\\coprod ','&#8720;');
/*LatexCmds['∫'] = LatexCmds['int'] = LatexCmds.integral = P(BigSymbol, function(_) {
  _.init = function() {
    Symbol.prototype.init.call(this, '\\int ', '<big>&int;</big>');
  };
});*/


/*

//the canonical sets of numbers
LatexCmds.N = LatexCmds.naturals = LatexCmds.Naturals =
  bind(VanillaSymbol,'\\mathbb{N}','&#8469;');

LatexCmds.P =
LatexCmds.primes = LatexCmds.Primes =
LatexCmds.projective = LatexCmds.Projective =
LatexCmds.probability = LatexCmds.Probability =
  bind(VanillaSymbol,'\\mathbb{P}','&#8473;');

LatexCmds.Z = LatexCmds.integers = LatexCmds.Integers =
  bind(VanillaSymbol,'\\mathbb{Z}','&#8484;');

LatexCmds.Q = LatexCmds.rationals = LatexCmds.Rationals =
  bind(VanillaSymbol,'\\mathbb{Q}','&#8474;');

LatexCmds.R = LatexCmds.reals = LatexCmds.Reals =
  bind(VanillaSymbol,'\\mathbb{R}','&#8477;');

LatexCmds.C =
LatexCmds.complex = LatexCmds.Complex =
LatexCmds.complexes = LatexCmds.Complexes =
LatexCmds.complexplane = LatexCmds.Complexplane = LatexCmds.ComplexPlane =
  bind(VanillaSymbol,'\\mathbb{C}','&#8450;');

LatexCmds.H = LatexCmds.Hamiltonian = LatexCmds.quaternions = LatexCmds.Quaternions =
  bind(VanillaSymbol,'\\mathbb{H}','&#8461;');

//spacing
LatexCmds.quad = LatexCmds.emsp = bind(VanillaSymbol,'\\quad ','    ');
LatexCmds.qquad = bind(VanillaSymbol,'\\qquad ','        ');
spacing special characters, gonna have to implement this in LatexCommandInput::onText somehow
case ',':
  return VanillaSymbol('\\, ',' ');
case ':':
  return VanillaSymbol('\\: ','  ');
case ';':
  return VanillaSymbol('\\; ','   ');
case '!':
  return Symbol('\\! ','<span style="margin-right:-.2em"></span>');

//binary operators
LatexCmds.diamond = bind(VanillaSymbol, '\\diamond ', '&#9671;');
LatexCmds.bigtriangleup = bind(VanillaSymbol, '\\bigtriangleup ', '&#9651;');
LatexCmds.ominus = bind(VanillaSymbol, '\\ominus ', '&#8854;');
LatexCmds.uplus = bind(VanillaSymbol, '\\uplus ', '&#8846;');
LatexCmds.bigtriangledown = bind(VanillaSymbol, '\\bigtriangledown ', '&#9661;');
LatexCmds.sqcap = bind(VanillaSymbol, '\\sqcap ', '&#8851;');
LatexCmds.triangleleft = bind(VanillaSymbol, '\\triangleleft ', '&#8882;');
LatexCmds.sqcup = bind(VanillaSymbol, '\\sqcup ', '&#8852;');
LatexCmds.triangleright = bind(VanillaSymbol, '\\triangleright ', '&#8883;');
LatexCmds.odot = bind(VanillaSymbol, '\\odot ', '&#8857;');
LatexCmds.bigcirc = bind(VanillaSymbol, '\\bigcirc ', '&#9711;');
LatexCmds.dagger = bind(VanillaSymbol, '\\dagger ', '&#0134;');
LatexCmds.ddagger = bind(VanillaSymbol, '\\ddagger ', '&#135;');
LatexCmds.wr = bind(VanillaSymbol, '\\wr ', '&#8768;');
LatexCmds.amalg = bind(VanillaSymbol, '\\amalg ', '&#8720;');

//relationship symbols
LatexCmds.models = bind(VanillaSymbol, '\\models ', '&#8872;');
LatexCmds.prec = bind(VanillaSymbol, '\\prec ', '&#8826;');
LatexCmds.succ = bind(VanillaSymbol, '\\succ ', '&#8827;');
LatexCmds.preceq = bind(VanillaSymbol, '\\preceq ', '&#8828;');
LatexCmds.succeq = bind(VanillaSymbol, '\\succeq ', '&#8829;');
LatexCmds.simeq = bind(VanillaSymbol, '\\simeq ', '&#8771;');
LatexCmds.mid = bind(VanillaSymbol, '\\mid ', '&#8739;');
LatexCmds.ll = bind(VanillaSymbol, '\\ll ', '&#8810;');
LatexCmds.gg = bind(VanillaSymbol, '\\gg ', '&#8811;');
LatexCmds.parallel = bind(VanillaSymbol, '\\parallel ', '&#8741;');
LatexCmds.bowtie = bind(VanillaSymbol, '\\bowtie ', '&#8904;');
LatexCmds.sqsubset = bind(VanillaSymbol, '\\sqsubset ', '&#8847;');
LatexCmds.sqsupset = bind(VanillaSymbol, '\\sqsupset ', '&#8848;');
LatexCmds.smile = bind(VanillaSymbol, '\\smile ', '&#8995;');
LatexCmds.sqsubseteq = bind(VanillaSymbol, '\\sqsubseteq ', '&#8849;');
LatexCmds.sqsupseteq = bind(VanillaSymbol, '\\sqsupseteq ', '&#8850;');
LatexCmds.doteq = bind(VanillaSymbol, '\\doteq ', '&#8784;');
LatexCmds.frown = bind(VanillaSymbol, '\\frown ', '&#8994;');
LatexCmds.vdash = bind(VanillaSymbol, '\\vdash ', '&#8870;');
LatexCmds.dashv = bind(VanillaSymbol, '\\dashv ', '&#8867;');

//arrows
LatexCmds.longleftarrow = bind(VanillaSymbol, '\\longleftarrow ', '&#8592;');
LatexCmds.longrightarrow = bind(VanillaSymbol, '\\longrightarrow ', '&#8594;');
LatexCmds.Longleftarrow = bind(VanillaSymbol, '\\Longleftarrow ', '&#8656;');
LatexCmds.Longrightarrow = bind(VanillaSymbol, '\\Longrightarrow ', '&#8658;');
LatexCmds.longleftrightarrow = bind(VanillaSymbol, '\\longleftrightarrow ', '&#8596;');
LatexCmds.updownarrow = bind(VanillaSymbol, '\\updownarrow ', '&#8597;');
LatexCmds.Longleftrightarrow = bind(VanillaSymbol, '\\Longleftrightarrow ', '&#8660;');
LatexCmds.Updownarrow = bind(VanillaSymbol, '\\Updownarrow ', '&#8661;');
LatexCmds.mapsto = bind(VanillaSymbol, '\\mapsto ', '&#8614;');
LatexCmds.nearrow = bind(VanillaSymbol, '\\nearrow ', '&#8599;');
LatexCmds.hookleftarrow = bind(VanillaSymbol, '\\hookleftarrow ', '&#8617;');
LatexCmds.hookrightarrow = bind(VanillaSymbol, '\\hookrightarrow ', '&#8618;');
LatexCmds.searrow = bind(VanillaSymbol, '\\searrow ', '&#8600;');
LatexCmds.leftharpoonup = bind(VanillaSymbol, '\\leftharpoonup ', '&#8636;');
LatexCmds.rightharpoonup = bind(VanillaSymbol, '\\rightharpoonup ', '&#8640;');
LatexCmds.swarrow = bind(VanillaSymbol, '\\swarrow ', '&#8601;');
LatexCmds.leftharpoondown = bind(VanillaSymbol, '\\leftharpoondown ', '&#8637;');
LatexCmds.rightharpoondown = bind(VanillaSymbol, '\\rightharpoondown ', '&#8641;');
LatexCmds.nwarrow = bind(VanillaSymbol, '\\nwarrow ', '&#8598;');

//Misc
*/
LatexCmds.space = bind(VanillaSymbol, '\\space ', '&nbsp;');
/*
LatexCmds.ldots = bind(VanillaSymbol, '\\ldots ', '&#8230;');
LatexCmds.cdots = bind(VanillaSymbol, '\\cdots ', '&#8943;');
LatexCmds.vdots = bind(VanillaSymbol, '\\vdots ', '&#8942;');
LatexCmds.ddots = bind(VanillaSymbol, '\\ddots ', '&#8944;');
LatexCmds.surd = bind(VanillaSymbol, '\\surd ', '&#8730;');
LatexCmds.triangle = bind(VanillaSymbol, '\\triangle ', '&#9653;');
LatexCmds.ell = bind(VanillaSymbol, '\\ell ', '&#8467;');
LatexCmds.top = bind(VanillaSymbol, '\\top ', '&#8868;');
LatexCmds.flat = bind(VanillaSymbol, '\\flat ', '&#9837;');
LatexCmds.natural = bind(VanillaSymbol, '\\natural ', '&#9838;');
LatexCmds.sharp = bind(VanillaSymbol, '\\sharp ', '&#9839;');
LatexCmds.wp = bind(VanillaSymbol, '\\wp ', '&#8472;');
LatexCmds.bot = bind(VanillaSymbol, '\\bot ', '&#8869;');
LatexCmds.clubsuit = bind(VanillaSymbol, '\\clubsuit ', '&#9827;');
LatexCmds.diamondsuit = bind(VanillaSymbol, '\\diamondsuit ', '&#9826;');
LatexCmds.heartsuit = bind(VanillaSymbol, '\\heartsuit ', '&#9825;');
LatexCmds.spadesuit = bind(VanillaSymbol, '\\spadesuit ', '&#9824;');

//variable-sized
LatexCmds.oint = bind(VanillaSymbol, '\\oint ', '&#8750;');
LatexCmds.bigcap = bind(VanillaSymbol, '\\bigcap ', '&#8745;');
LatexCmds.bigcup = bind(VanillaSymbol, '\\bigcup ', '&#8746;');
LatexCmds.bigsqcup = bind(VanillaSymbol, '\\bigsqcup ', '&#8852;');
LatexCmds.bigvee = bind(VanillaSymbol, '\\bigvee ', '&#8744;');
LatexCmds.bigwedge = bind(VanillaSymbol, '\\bigwedge ', '&#8743;');
LatexCmds.bigodot = bind(VanillaSymbol, '\\bigodot ', '&#8857;');
LatexCmds.bigotimes = bind(VanillaSymbol, '\\bigotimes ', '&#8855;');
LatexCmds.bigoplus = bind(VanillaSymbol, '\\bigoplus ', '&#8853;');
LatexCmds.biguplus = bind(VanillaSymbol, '\\biguplus ', '&#8846;');

//delimiters
LatexCmds.lfloor = bind(VanillaSymbol, '\\lfloor ', '&#8970;');
LatexCmds.rfloor = bind(VanillaSymbol, '\\rfloor ', '&#8971;');
LatexCmds.lceil = bind(VanillaSymbol, '\\lceil ', '&#8968;');
LatexCmds.rceil = bind(VanillaSymbol, '\\rceil ', '&#8969;');
LatexCmds.slash = bind(VanillaSymbol, '\\slash ', '&#47;');
LatexCmds.opencurlybrace = bind(VanillaSymbol, '\\opencurlybrace ', '&#123;');
LatexCmds.closecurlybrace = bind(VanillaSymbol, '\\closecurlybrace ', '&#125;');

//various symbols

LatexCmds.caret = bind(VanillaSymbol,'\\caret ','^');
LatexCmds.underscore = bind(VanillaSymbol,'\\underscore ','_');
LatexCmds.backslash = bind(VanillaSymbol,'\\backslash ','\\');
LatexCmds.vert = bind(VanillaSymbol,'|');
LatexCmds.perp = LatexCmds.perpendicular = bind(VanillaSymbol,'\\perp ','&perp;');
LatexCmds.nabla = LatexCmds.del = bind(VanillaSymbol,'\\nabla ','&nabla;');
LatexCmds.hbar = bind(VanillaSymbol,'\\hbar ','&#8463;');

LatexCmds.AA = LatexCmds.Angstrom = LatexCmds.angstrom =
  bind(VanillaSymbol,'\\text\\AA ','&#8491;');

LatexCmds.ring = LatexCmds.circ = LatexCmds.circle =
  bind(VanillaSymbol,'\\circ ','&#8728;');

LatexCmds.bull = LatexCmds.bullet = bind(VanillaSymbol,'\\bullet ','&bull;');

LatexCmds.setminus = LatexCmds.smallsetminus =
  bind(VanillaSymbol,'\\setminus ','&#8726;');

LatexCmds.not = //bind(Symbol,'\\not ','<span class="not">/</span>');
LatexCmds['¬'] = LatexCmds.neg = bind(VanillaSymbol,'\\neg ','&not;');

LatexCmds['…'] = LatexCmds.dots = LatexCmds.ellip = LatexCmds.hellip =
LatexCmds.ellipsis = LatexCmds.hellipsis =
  bind(VanillaSymbol,'\\dots ','&hellip;');

LatexCmds.converges =
LatexCmds.darr = LatexCmds.dnarr = LatexCmds.dnarrow = LatexCmds.downarrow =
  bind(VanillaSymbol,'\\downarrow ','&darr;');

LatexCmds.dArr = LatexCmds.dnArr = LatexCmds.dnArrow = LatexCmds.Downarrow =
  bind(VanillaSymbol,'\\Downarrow ','&dArr;');

LatexCmds.diverges = LatexCmds.uarr = LatexCmds.uparrow =
  bind(VanillaSymbol,'\\uparrow ','&uarr;');

LatexCmds.uArr = LatexCmds.Uparrow = bind(VanillaSymbol,'\\Uparrow ','&uArr;');

LatexCmds.to = bind(BinaryOperator,'\\to ','&rarr;');

LatexCmds.rarr = LatexCmds.rightarrow = bind(VanillaSymbol,'\\rightarrow ','&rarr;');

LatexCmds.implies = bind(BinaryOperator,'\\Rightarrow ','&rArr;');

LatexCmds.rArr = LatexCmds.Rightarrow = bind(VanillaSymbol,'\\Rightarrow ','&rArr;');

LatexCmds.gets = bind(BinaryOperator,'\\gets ','&larr;');

LatexCmds.larr = LatexCmds.leftarrow = bind(VanillaSymbol,'\\leftarrow ','&larr;');

LatexCmds.impliedby = bind(BinaryOperator,'\\Leftarrow ','&lArr;');

LatexCmds.lArr = LatexCmds.Leftarrow = bind(VanillaSymbol,'\\Leftarrow ','&lArr;');

LatexCmds.harr = LatexCmds.lrarr = LatexCmds.leftrightarrow =
  bind(VanillaSymbol,'\\leftrightarrow ','&harr;');

LatexCmds.iff = bind(BinaryOperator,'\\Leftrightarrow ','&hArr;');

LatexCmds.hArr = LatexCmds.lrArr = LatexCmds.Leftrightarrow =
  bind(VanillaSymbol,'\\Leftrightarrow ','&hArr;');

LatexCmds.Re = LatexCmds.Real = LatexCmds.real = bind(VanillaSymbol,'\\Re ','&real;');

LatexCmds.Im = LatexCmds.imag =
LatexCmds.image = LatexCmds.imagin = LatexCmds.imaginary = LatexCmds.Imaginary =
  bind(VanillaSymbol,'\\Im ','&image;');

LatexCmds.part = LatexCmds.partial = bind(VanillaSymbol,'\\partial ','&part;');

LatexCmds.inf = LatexCmds.infin = LatexCmds.infty = LatexCmds.infinity =
  bind(VanillaSymbol,'\\infty ','&infin;');

LatexCmds.alef = LatexCmds.alefsym = LatexCmds.aleph = LatexCmds.alephsym =
  bind(VanillaSymbol,'\\aleph ','&alefsym;');

LatexCmds.xist = //LOL
LatexCmds.xists = LatexCmds.exist = LatexCmds.exists =
  bind(VanillaSymbol,'\\exists ','&exist;');
*/
LatexCmds.and = LatexCmds.land = LatexCmds.wedge =
  bind(VanillaSymbol,'\\wedge ','&and;');

LatexCmds.or = LatexCmds.lor = LatexCmds.vee = bind(VanillaSymbol,'\\vee ','&or;');
/*
LatexCmds.o = LatexCmds.O =
LatexCmds.empty = LatexCmds.emptyset =
LatexCmds.oslash = LatexCmds.Oslash =
LatexCmds.nothing = LatexCmds.varnothing =
  bind(BinaryOperator,'\\varnothing ','&empty;');

LatexCmds.cup = LatexCmds.union = bind(BinaryOperator,'\\cup ','&cup;');

LatexCmds.cap = LatexCmds.intersect = LatexCmds.intersection =
  bind(BinaryOperator,'\\cap ','&cap;');

LatexCmds.deg = LatexCmds.degree = bind(VanillaSymbol,'^\\circ ','&deg;');

LatexCmds.ang = LatexCmds.angle = bind(VanillaSymbol,'\\angle ','&ang;');
*/
// Parser MathCommand
var latexMathParser = (function() {
  function commandToBlock(cmd) {
    var block = MathBlock();
    cmd.adopt(block, 0, 0);
    return block;
  }
  function joinBlocks(blocks) {
    var firstBlock = blocks[0] || MathBlock();

    for (var i = 1; i < blocks.length; i += 1) {
      blocks[i].children().adopt(firstBlock, firstBlock.lastChild, 0);
    }

    return firstBlock;
  }

  var string = Parser.string;
  var regex = Parser.regex;
  var letter = Parser.letter;
  var any = Parser.any;
  var optWhitespace = Parser.optWhitespace;
  var succeed = Parser.succeed;
  var fail = Parser.fail;

  // Parsers yielding MathCommands
  var variable = letter.map(Variable);
  var symbol = regex(/^[^${}\\_^]/).map(VanillaSymbol);

  var controlSequence =
    regex(/^[^\\]/)
    .or(string('\\').then(
      regex(/^[a-z]+/i)
      .or(regex(/^\s+/).result(' '))
      .or(any)
    )).then(function(ctrlSeq) {
      var cmdKlass = LatexCmds[ctrlSeq];

      if (cmdKlass) {
        return cmdKlass(ctrlSeq).parser();
      }
      else {
        return fail('unknown command: \\'+ctrlSeq);
      }
    })
  ;

  var command =
    controlSequence
    .or(variable)
    .or(symbol)
  ;

  // Parsers yielding MathBlocks
  var mathGroup = string('{').then(function() { return mathSequence; }).skip(string('}'));
  var mathBlock = optWhitespace.then(mathGroup.or(command.map(commandToBlock)));
  var mathSequence = mathBlock.many().map(joinBlocks).skip(optWhitespace);

  var optMathBlock =
    string('[').then(
      mathBlock.then(function(block) {
        return block.join('latex') !== ']' ? succeed(block) : fail();
      })
      .many().map(joinBlocks).skip(optWhitespace)
    ).skip(string(']'))
  ;

  var latexMath = mathSequence;

  latexMath.block = mathBlock;
  latexMath.optBlock = optMathBlock;
  return latexMath;
})();
/********************************************
 * Cursor and Selection "singleton" classes
 *******************************************/

/* The main thing that manipulates the Math DOM. Makes sure to manipulate the
HTML DOM to match. */

/* Sort of singletons, since there should only be one per editable math
textbox, but any one HTML document can contain many such textboxes, so any one
JS environment could actually contain many instances. */

//A fake cursor in the fake textbox that the math is rendered in.
var Cursor = P(function(_) {
  _.init = function(root) {
    this.parent = this.root = root;
    var jQ = this.jQ = this._jQ = $('<span class="cursor">&zwj;</span>');

    //closured for setInterval
    this.blink = function(){ jQ.toggleClass('blink'); }

    this.upDownCache = {};
  };

  _.prev = 0;
  _.next = 0;
  _.parent = 0;
  _.show = function() {
    this.jQ = this._jQ.removeClass('blink');
    if ('intervalId' in this) //already was shown, just restart interval
      clearInterval(this.intervalId);
    else { //was hidden and detached, insert this.jQ back into HTML DOM
      if (this.next) {
        if (this.selection && this.selection.first.prev === this.prev)
          this.jQ.insertBefore(this.selection.jQ);
        else
          this.jQ.insertBefore(this.next.jQ.first());
      }
      else
        this.jQ.appendTo(this.parent.jQ);
      this.parent.focus();
    }
    this.intervalId = setInterval(this.blink, 500);
    return this;
  };
  _.hide = function() {
    if ('intervalId' in this)
      clearInterval(this.intervalId);
    delete this.intervalId;
    this.jQ.detach();
    this.jQ = $();
    return this;
  };
  _.insertAt = function(parent, prev, next) {
    var old_parent = this.parent;

    this.parent = parent;
    this.prev = prev;
    this.next = next;

    old_parent.blur(); //blur may need to know cursor's destination
  };
  _.insertBefore = function(el) {
    this.insertAt(el.parent, el.prev, el)
    this.parent.jQ.addClass('hasCursor');
    this.jQ.insertBefore(el.jQ.first());
    return this;
  };
  _.insertAfter = function(el) {
    this.insertAt(el.parent, el, el.next);
    this.parent.jQ.addClass('hasCursor');
    this.jQ.insertAfter(el.jQ.last());
    return this;
  };
  _.prependTo = function(el) {
    this.insertAt(el, 0, el.firstChild);
    this.jQ.prependTo(el.jQ);
    el.focus();
    return this;
  };
  _.appendTo = function(el) {
    this.insertAt(el, el.lastChild, 0);
    this.jQ.appendTo(el.jQ);
    el.focus();
    return this;
  };
  _.hopLeft = function() {
    this.jQ.insertBefore(this.prev.jQ.first());
    this.next = this.prev;
    this.prev = this.prev.prev;
    return this;
  };
  _.hopRight = function() {
    this.jQ.insertAfter(this.next.jQ.last());
    this.prev = this.next;
    this.next = this.next.next;
    return this;
  };
  _.moveLeftWithin = function(block) {
    if (this.prev) {
      // FIXME HACK: when moving right to left, want to go into NthRoot's body,
      // which is its lastChild.
      if (this.prev instanceof NthRoot) this.appendTo(this.prev.lastChild);
      else if (this.prev.up instanceof MathBlock) this.appendTo(this.prev.up);
      else if (this.prev.firstChild) this.appendTo(this.prev.firstChild)
      else this.hopLeft();
    }
    else {
      // unless we're at the beginning of the containing block, escape left
      if (this.parent !== block) this.insertBefore(this.parent.parent);
      else if (block.moveOutOf) block.moveOutOf('left', this);
    }
  };
  _.moveRightWithin = function(block) {
    if (this.next) {
      if (this.next.up instanceof MathBlock) this.prependTo(this.next.up);
      else if (this.next.firstChild) this.prependTo(this.next.firstChild)
      else this.hopRight();
    }
    else {
      // unless we're at the beginning of the containing block, escape left
      if (this.parent !== block) this.insertAfter(this.parent.parent);
      else if (block.moveOutOf) block.moveOutOf('right', this);
    }
  };
  _.moveLeft = function() {
    clearUpDownCache(this);

    if (this.selection)
      this.insertBefore(this.selection.first).clearSelection();
    else {
      this.moveLeftWithin(this.root);
    }
    this.root.triggerSpecialEvent('cursorMoved');
    return this.show();
  };
  _.moveRight = function() {
    clearUpDownCache(this);

    if (this.selection)
      this.insertAfter(this.selection.last).clearSelection();
    else {
      this.moveRightWithin(this.root);
    }
    this.root.triggerSpecialEvent('cursorMoved');
    return this.show();
  };

  /**
   * moveUp and moveDown have almost identical algorithms:
   * - first check next and prev, if so prepend/appendTo them
   * - else check the parent's 'up'/'down' property - if it's a function,
   *   call it with the cursor as the sole argument and use the return value.
   *
   *   Given undefined, will bubble up to the next ancestor block.
   *   Given false, will stop bubbling.
   *   Given a MathBlock,
   *     + moveUp will appendTo it
   *     + moveDown will prependTo it
   *
   */
  _.moveUp = function() { return moveUpDown(this, 'up'); };
  _.moveDown = function() { return moveUpDown(this, 'down'); };
  function moveUpDown(self, dir) {
    if (self.next[dir]) self.prependTo(self.next[dir]);
    else if (self.prev[dir]) self.appendTo(self.prev[dir]);
    else {
      var ancestorBlock = self.parent;
      do {
        var prop = ancestorBlock[dir];
        if (prop) {
          if (typeof prop === 'function') prop = ancestorBlock[dir](self);
          if (prop === false || prop instanceof MathBlock) {
            self.upDownCache[ancestorBlock.id] = { parent: self.parent, prev: self.prev, next: self.next };

            if (prop instanceof MathBlock) {
              var cached = self.upDownCache[prop.id];

              if (cached) {
                if (cached.next) {
                  self.insertBefore(cached.next);
                } else {
                  self.appendTo(cached.parent);
                }
              } else {
                var pageX = offset(self).left;
                self.appendTo(prop);
                self.seekHoriz(pageX, prop);
              }
            }
            break;
          }
        }
        ancestorBlock = ancestorBlock.parent.parent;
      } while (ancestorBlock);
    }

    return self.clearSelection().show();
  }

  _.seek = function(target, pageX, pageY) {
    clearUpDownCache(this);
    var cmd, block, cursor = this.clearSelection().show();

    block = MathElement[target.attr(mqBlockId)];
    if (block && target.hasClass('empty')) {
      cursor.prependTo(block);
      return cursor;
    }

    cmd = MathElement[target.attr(mqCmdId)];
    if (cmd instanceof Symbol) { //insert at whichever side is closer
      if (target.outerWidth() > 2*(pageX - target.offset().left))
        cursor.insertBefore(cmd);
      else
        cursor.insertAfter(cmd);

      return cursor;
    }
    if (!cmd && !block) { //if no MathQuill data, try parent, if still no, just start from the root
      target = target.parent();
      cmd = MathElement[target.attr(mqCmdId)];
      if (!cmd) {
        block = MathElement[target.attr(mqBlockId)];
        if (!block) block = cursor.root;
      }
    }

    if (cmd)
      cursor.insertAfter(cmd);
    else
      cursor.appendTo(block);

    return cursor.seekHoriz(pageX, cursor.root);
  };
  _.seekHoriz = function(pageX, block) {
    //move cursor to position closest to click
    var cursor = this;
    var dist = offset(cursor).left - pageX;
    var prevDist;

    while (dist > 0 && (cursor.prev || cursor.parent !== block)) {
      //FIXME HACK
      //with x_1^2, when the cursor is in the exponent,
      //moveLeftWithinBlock will move it in-between the subscript
      //and the exponent, which is fine, but the next call to
      //moveLeftWithinBlock will see that when moving horizontally
      //into the subscript, the cursor should go to the "top" block
      //which is in fact the exponent...ad nauseum.
      //Gosh, if only moving horizontally into a node was delegated
      //to its .moveToward() method or something.
      if (!cursor.prev && cursor.parent.parent.respaced)
        cursor.appendTo(cursor.parent.parent.prev.firstChild);
      else
        cursor.moveLeftWithin(block);
      prevDist = dist;
      dist = offset(cursor).left - pageX;
    }

    if (-dist > prevDist) cursor.moveRightWithin(block);

    return cursor;
  };
  function offset(self) {
    //in Opera 11.62, .getBoundingClientRect() and hence jQuery::offset()
    //returns all 0's on inline elements with negative margin-right (like
    //the cursor) at the end of their parent, so temporarily remove the
    //negative margin-right when calling jQuery::offset()
    //Opera bug DSK-360043
    //http://bugs.jquery.com/ticket/11523
    //https://github.com/jquery/jquery/pull/717
    var offset = self.jQ.removeClass('cursor').offset();
    self.jQ.addClass('cursor');
    return offset;
  }
  _.writeLatex = function(latex) {
    var self = this;
    clearUpDownCache(self);
    self.show().deleteSelection();

    var all = Parser.all;
    var eof = Parser.eof;

    var block = latexMathParser.skip(eof).or(all.result(false)).parse(latex);

    if (block && !block.isEmpty()) {
      block.children().adopt(self.parent, self.prev, self.next);
      var html = block.join('html');
      var jQ = MathElement.jQize(html);
      jQ.insertBefore(self.jQ);
      self.prev = block.lastChild;
      block.finalizeInsert();
      self.parent.bubble('redraw');
    }

    return this;
  };
  _.write = function(ch) {
    clearUpDownCache(this);
    return this.show().insertCh(ch);
  };
  _.insertCh = function(ch) {
    var cmd;
    if (ch.match(/^[a-z]$/i))
      cmd = Variable(ch);
    else if (cmd = CharCmds[ch] || LatexCmds[ch])
      cmd = cmd(ch);
    else
      cmd = VanillaSymbol(ch);

    if (this.selection) {
      this.prev = this.selection.first.prev;
      this.next = this.selection.last.next;
      cmd.replaces(this.selection);
      delete this.selection;
    }

    return this.insertNew(cmd);
  };
  _.insertNew = function(cmd) {
    cmd.createBefore(this);
    return this;
  };
  _.insertCmd = function(latexCmd, replacedFragment) {
    var cmd = LatexCmds[latexCmd];
    if (cmd) {
      cmd = cmd(latexCmd);
      if (replacedFragment) cmd.replaces(replacedFragment);
      this.insertNew(cmd);
    }
    else {
      cmd = TextBlock();
      cmd.replaces(latexCmd);
      cmd.firstChild.focus = function(){ delete this.focus; return this; };
      this.insertNew(cmd).insertAfter(cmd);
      if (replacedFragment)
        replacedFragment.remove();
    }
    return this;
  };
  _.unwrapGramp = function() {
    var gramp = this.parent.parent;
    var greatgramp = gramp.parent;
    var next = gramp.next;
    var cursor = this;

    var prev = gramp.prev;
    gramp.disown().eachChild(function(uncle) {
      if (uncle.isEmpty()) return;

      uncle.children()
        .adopt(greatgramp, prev, next)
        .each(function(cousin) {
          cousin.jQ.insertBefore(gramp.jQ.first());
        })
      ;

      prev = uncle.lastChild;
    });

    if (!this.next) { //then find something to be next to insertBefore
      if (this.prev)
        this.next = this.prev.next;
      else {
        while (!this.next) {
          this.parent = this.parent.next;
          if (this.parent)
            this.next = this.parent.firstChild;
          else {
            this.next = gramp.next;
            this.parent = greatgramp;
            break;
          }
        }
      }
    }
    if (this.next)
      this.insertBefore(this.next);
    else
      this.appendTo(greatgramp);

    gramp.jQ.remove();

    if (gramp.prev)
      gramp.prev.respace();
    if (gramp.next)
      gramp.next.respace();
  };
  _.backspace = function() {
    clearUpDownCache(this);
    this.show();

    if (this.deleteSelection()); // pass
    else if (this.prev) {
      if (this.prev.isEmpty()) {
        if (this.prev.ctrlSeq === '\\le ') var ins = LatexCmds['<']('<');
        else if (this.prev.ctrlSeq === '\\ge ') var ins = LatexCmds['>']('>');
        this.prev = this.prev.remove().prev;
        if (ins) this.insertNew(ins);
      }
      else if (this.prev instanceof Bracket)
        return this.appendTo(this.prev.firstChild).deleteForward();
      else
        this.selectLeft();
    }
    else if (this.parent !== this.root) {
      if (this.parent.parent.isEmpty())
        return this.insertAfter(this.parent.parent).backspace();
      else if (this.next instanceof Bracket)
        return this.prependTo(this.next.firstChild).backspace();
      else
        this.unwrapGramp();
    }
    else this.root.triggerSpecialEvent('backspacePressed');

    if (this.prev)
      this.prev.respace();
    if (this.next)
      this.next.respace();
    this.parent.bubble('redraw');

    return this;
  };
  _.deleteForward = function() {
    clearUpDownCache(this);
    this.show();

    if (this.deleteSelection()); // pass
    else if (this.next) {
      if (this.next.isEmpty())
        this.next = this.next.remove().next;
      else
        this.selectRight();
    }
    else if (this.parent !== this.root) {
      if (this.parent.parent.isEmpty())
        return this.insertBefore(this.parent.parent).deleteForward();
      else
        this.unwrapGramp();
    }
    else this.root.triggerSpecialEvent('delPressed');

    if (this.prev)
      this.prev.respace();
    if (this.next)
      this.next.respace();
    this.parent.bubble('redraw');

    return this;
  };
  _.selectFrom = function(anticursor) {
    //find ancestors of each with common parent
    var oneA = this, otherA = anticursor; //one ancestor, the other ancestor
    loopThroughAncestors: while (true) {
      for (var oneI = this; oneI !== oneA.parent.parent; oneI = oneI.parent.parent) //one intermediate, the other intermediate
        if (oneI.parent === otherA.parent) {
          left = oneI;
          right = otherA;
          break loopThroughAncestors;
        }

      for (var otherI = anticursor; otherI !== otherA.parent.parent; otherI = otherI.parent.parent)
        if (oneA.parent === otherI.parent) {
          left = oneA;
          right = otherI;
          break loopThroughAncestors;
        }

      if (oneA.parent.parent)
        oneA = oneA.parent.parent;
      if (otherA.parent.parent)
        otherA = otherA.parent.parent;
    }
    //figure out which is left/prev and which is right/next
    var left, right, leftRight;
    if (left.next !== right) {
      for (var next = left; next; next = next.next) {
        if (next === right.prev) {
          leftRight = true;
          break;
        }
      }
      if (!leftRight) {
        leftRight = right;
        right = left;
        left = leftRight;
      }
    }
    this.hide().selection = Selection(left.prev.next || left.parent.firstChild, right.next.prev || right.parent.lastChild);
    this.insertAfter(right.next.prev || right.parent.lastChild);
    this.root.selectionChanged();
  };
  _.selectLeft = function() {
    clearUpDownCache(this);
    if (this.selection) {
      if (this.selection.first === this.next) { //if cursor is at left edge of selection;
        if (this.prev) //then extend left if possible
          this.hopLeft().selection.extendLeft();
        else if (this.parent !== this.root) //else level up if possible
          this.insertBefore(this.parent.parent).selection.levelUp();
      }
      else { //else cursor is at right edge of selection, retract left if possible
        this.hopLeft();
        if (this.selection.first === this.selection.last) {
          this.clearSelection().show(); //clear selection if retracting to nothing
          return; //skip this.root.selectionChanged(), this.clearSelection() does it anyway
        }
        this.selection.retractLeft();
      }
    }
    else {
      if (this.prev)
        this.hopLeft();
      else //end of a block
        if (this.parent !== this.root)
          this.insertBefore(this.parent.parent);
        else
          return;

      this.hide().selection = Selection(this.next);
    }
    this.root.selectionChanged();
  };
  _.selectRight = function() {
    clearUpDownCache(this);
    if (this.selection) {
      if (this.selection.last === this.prev) { //if cursor is at right edge of selection;
        if (this.next) //then extend right if possible
          this.hopRight().selection.extendRight();
        else if (this.parent !== this.root) //else level up if possible
          this.insertAfter(this.parent.parent).selection.levelUp();
      }
      else { //else cursor is at left edge of selection, retract right if possible
        this.hopRight();
        if (this.selection.first === this.selection.last) {
          this.clearSelection().show(); //clear selection if retracting to nothing
          return; //skip this.root.selectionChanged(), this.clearSelection() does it anyway
        }
        this.selection.retractRight();
      }
    }
    else {
      if (this.next)
        this.hopRight();
      else //end of a block
        if (this.parent !== this.root)
          this.insertAfter(this.parent.parent);
        else
          return;

      this.hide().selection = Selection(this.prev);
    }
    this.root.selectionChanged();
  };

  function clearUpDownCache(self) {
    self.upDownCache = {};
  }

  _.prepareMove = function() {
    clearUpDownCache(this);
    return this.show().clearSelection();
  };

  _.prepareEdit = function() {
    clearUpDownCache(this);
    return this.show().deleteSelection();
  }

  _.clearSelection = function() {
    if (this.selection) {
      this.selection.clear();
      delete this.selection;
      this.root.selectionChanged();
    }
    return this;
  };
  _.deleteSelection = function() {
    if (!this.selection) return false;

    this.prev = this.selection.first.prev;
    this.next = this.selection.last.next;
    this.selection.remove();
    this.root.selectionChanged();
    return delete this.selection;
  };
});

var Selection = P(MathFragment, function(_, _super) {
  _.init = function() {
    var frag = this;
    _super.init.apply(frag, arguments);

    frag.jQwrap(frag.jQ);
  };
  _.jQwrap = function(children) {
    this.jQ = children.wrapAll('<span class="selection"></span>').parent();
      //can't do wrapAll(this.jQ = $(...)) because wrapAll will clone it
  };
  _.adopt = function() {
    this.jQ.replaceWith(this.jQ = this.jQ.children());
    return _super.adopt.apply(this, arguments);
  };
  _.clear = function() {
    this.jQ.replaceWith(this.jQ.children());
    return this;
  };
  _.levelUp = function() {
    var seln = this,
      gramp = seln.first = seln.last = seln.last.parent.parent;
    seln.clear().jQwrap(gramp.jQ);
    return seln;
  };
  _.extendLeft = function() {
    this.first = this.first.prev;
    this.first.jQ.prependTo(this.jQ);
  };
  _.extendRight = function() {
    this.last = this.last.next;
    this.last.jQ.appendTo(this.jQ);
  };
  _.retractRight = function() {
    this.first.jQ.insertBefore(this.jQ);
    this.first = this.first.next;
  };
  _.retractLeft = function() {
    this.last.jQ.insertAfter(this.jQ);
    this.last = this.last.prev;
  };
});
/*********************************************************
 * The actual jQuery plugin and document ready handlers.
 ********************************************************/

//The publicy exposed method of jQuery.prototype, available (and meant to be
//called) on jQuery-wrapped HTML DOM elements.
$.fn.mathquill = function(cmd, latex) {
  switch (cmd) {
  case 'focus':
  case 'blur':
    return this.each(function() {
      var blockId = $(this).attr(mqBlockId),
        block = blockId && MathElement[blockId];
      if (block && block.textarea)
        block.textarea.children().trigger(cmd);
    });
  case 'onKey':
  case 'onText':
    return this.each(function() {
      var blockId = $(this).attr(mqBlockId),
        block = blockId && MathElement[blockId],
        cursor = block && block.cursor;

      if (cursor) {
        cursor.parent.bubble(cmd, latex, { preventDefault: noop });
        if (block.blurred) cursor.hide().parent.blur();
      }
    });
  case 'redraw':
    return this.each(function() {
      var blockId = $(this).attr(mqBlockId),
        rootBlock = blockId && MathElement[blockId];
      if (rootBlock) {
        (function postOrderRedraw(el) {
          el.eachChild(postOrderRedraw);
          if (el.redraw) el.redraw();
        }(rootBlock));
      }
    });
  case 'revert':
    return this.each(function() {
      var blockId = $(this).attr(mqBlockId),
        block = blockId && MathElement[blockId];
      if (block && block.revert)
        block.revert();
    });
  case 'sliderLatex':
    return this.each(function() {
      var blockId = $(this).attr(mqBlockId),
        block = blockId && MathElement[blockId];
      if (block) {

        //fixes bug with highlighting everything and then setting state with latex
        //https://github.com/graphinc/knox/issues/1115
        cursor = block && block.cursor;
        if (cursor) cursor.clearSelection();
        block.renderSliderLatex(latex);
        block.triggerSpecialEvent('render');
      }
    });
  case 'latex':
    if (arguments.length > 1) {
      return this.each(function() {
        var blockId = $(this).attr(mqBlockId),
          block = blockId && MathElement[blockId];
        if (block) {
          //fixes bug with highlighting everything and then setting state with latex
          //https://github.com/graphinc/knox/issues/1115
          cursor = block && block.cursor;
          if (cursor) cursor.clearSelection();
          block.renderLatex(latex);
          block.triggerSpecialEvent('render');
        }
      });
    }

    var blockId = $(this).attr(mqBlockId),
      block = blockId && MathElement[blockId];
    return block && block.latex();
  case 'text':
    var blockId = $(this).attr(mqBlockId),
      block = blockId && MathElement[blockId];
    return block && block.text();
  case 'html':
    return this.children(':last').html().replace(/ ?hasCursor|hasCursor /, '')
      .replace(/ class=(""|(?= |>))/g, '')
      .replace(/<span class="?cursor( blink)?"?>.?<\/span>/i, '');
  case 'write':
    if (arguments.length > 1)
      return this.each(function() {
        var blockId = $(this).attr(mqBlockId),
          block = blockId && MathElement[blockId],
          cursor = block && block.cursor;

        if (cursor) {
          cursor.writeLatex(latex)
          if (block.blurred) cursor.hide().parent.blur();
        }
      });
  case 'cmd':
    if (arguments.length > 1)
      return this.each(function() {
        var blockId = $(this).attr(mqBlockId),
          block = blockId && MathElement[blockId],
          cursor = block && block.cursor;

        if (cursor) {
          cursor.show();
          if (/^\\[a-z]+$/i.test(latex)) {
            var selection = cursor.selection;
            if (selection) {
              cursor.prev = selection.first.prev;
              cursor.next = selection.last.next;
              delete cursor.selection;
            }
            cursor.insertCmd(latex.slice(1), selection);
          }
          else
            cursor.insertCh(latex);
          if (block.blurred) cursor.hide().parent.blur();
        }
      });
  case 'moveStart':
    var blockId = $(this).attr(mqBlockId),
      block = blockId && MathElement[blockId];
    if (block && block.cursor)
      block.cursor.prependTo(block);
    break;
  case 'moveEnd':
    var blockId = $(this).attr(mqBlockId),
      block = blockId && MathElement[blockId];
    if (block && block.cursor)
      block.cursor.appendTo(block);
    break;
  case 'selection':
    var blockId = $(this).attr(mqBlockId),
      block = blockId && MathElement[blockId],
      cursor = block && block.cursor;
    if (!cursor) return;
    return cursor.selection ? '$'+cursor.selection.latex()+'$' : '';
  case 'clearSelection':
    return this.each(function() {
      var blockId = $(this).attr(mqBlockId),
        block = blockId && MathElement[blockId],
        cursor = block && block.cursor;
      if (cursor) {
        cursor.clearSelection();
        if (block.blurred) cursor.hide().parent.blur();
      }
    });
  default:
    var textbox = cmd === 'textbox',
      editable = textbox || cmd === 'editable',
      RootBlock = textbox ? RootTextBlock : RootMathBlock;
    return this.each(function() {
      createRoot($(this), RootBlock(), textbox, editable);
    });
  }
};

//on document ready, mathquill-ify all `<tag class="mathquill-*">latex</tag>`
//elements according to their CSS class.
$(function() {
  $('.mathquill-editable:not(.mathquill-rendered-math)').mathquill('editable');
  $('.mathquill-textbox:not(.mathquill-rendered-math)').mathquill('textbox');
  $('.mathquill-embedded-latex').mathquill();
});


}());

define("mathquill", function(){});

define('template!expression_item', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="do-not-blur expressionitem shell">\n  <div class=\'shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="do-not-blur expressionitem">\n  <div class=\'fade-container\'>\n\n    <div class="fadeout-left"></div>\n  \n    <span class="main">\n      <span class="transient-mathquill"></span>\n      <span class="template-mathquill"></span>\n    </span>\n\n    <span class="fadeout"></span>\n    <i class="icon-remove top-level-delete action-delete" handleEvent="true"></i>\n\n    <div class="template-bottom"></div>\n  </div>\n\n  <span class="tab action-drag do-not-blur action-icon-touch"\n        handleevent="true"\n        tapboundary="true"\n        disablescroll="true"\n  >\n    <span class="num variable-index"></span>\n    <span class="tab-interior action-icon-mouse">\n      <span class="template-expricon"></span>\n    </span>\n  </span>\n\n\n  <span class="exp-actions">\n    <span class="graphic" handleEvent="true"></span>\n    <nobr>\n      <span class="action-delete delete-btn tooltip" handleEvent="true" tooltip="Delete"><i class=\'icon-remove\'></i></span>\n      <span class="action-duplicate duplicate-btn tooltip" handleEvent="true" tooltip="Duplicate"><i class=\'icon-duplicate\'></i></span>\n      <span class="action-createtable tooltip" tooltip="Convert to Table" handleEvent="true">\n        <i class=\'icon-table\'></i>\n      </span>\n    </nobr>\n  </span>\n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('expressions/abstractitem_view',['require','pjs','jquery','lib/underscore_view','undoredo'],function(require) {
  var P = require('pjs');
  var $ = require('jquery');
  var UnderscoreView = require('lib/underscore_view');
  var UndoRedo = require('undoredo');

  var AbstractItemView = P(UnderscoreView, function (view, _super) {
    view.init = function (model, listView) {
      _super.init.call(this);
      
      this.model = model;
      this.listView = listView;
      
      // do this now instead of letting renderSelected do this. If we wait
      // for renderSelected to do it, we'll end up calling rerender within a
      // already started render loop. That'll cause events to get bound twice
      // and other weird stuff will happen.
      if (this.model.selected) {
        this.model.renderShell = false;
      }
      
      this.model.observe('index.itemview', this.renderIndex.bind(this));
      this.model.observe('selected.itemview', this.renderSelected.bind(this));
      this.model.observe('renderShell.itemview', this.rerender.bind(this));
      this.model.observe('folder.itemview', this.renderFolder.bind(this));
      this.model.observe('inCollapsedFolder.itemview', this.renderCollapsedFolder.bind(this));
    };
    
    //triggered from list_view when projector mode is changed
    //override from the different item type views. right now, just text_view overrides
    view.onProjectorModeChange = function() {};

    view.destruct = function () {
      this.model.unobserve('.itemview');
    };
    
    view.getTemplateParams = function () {
      return {
        renderShell: this.model.renderShell,
        inCollapsedFolder: this.model.inCollapsedFolder
      };
    };

    view.renderIndex = function () {
      var index = this.model.index;
      this.$().attr('index', index);
      this.$('.variable-index').text(index+1);
    };

    view.renderFolder = function () {
      this.$().toggleClass('inFolder', !!this.model.folder);
    };

    view.renderCollapsedFolder = function(){
      this.$().toggleClass('inCollapsedFolder', !!this.model.inCollapsedFolder);
      // Redraw any child mathquills so they can update the size of things like parens.
      if (!this.model.inCollapsedFolder) this.$('.mathquill-rendered-math').mathquill('redraw');
    };

    view.renderSelected = function () {
      if (this.model.selected) {
        if (this.model.renderShell) {
          this.model.setProperty('renderShell', false);
        }
      }
      
      this.$().toggleClass('selected', !!this.model.selected);
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      
      var self = this;
      this.$().on('tap tapstart', function (evt) {
        // when using mouse, fire on 'tapStart' and when on touch we
        // fire on the 'tap' event.
        if (evt.type === 'tap' && evt.device === 'mouse') return;
        if (evt.type === 'tapstart' && evt.device === 'touch') return;
        
        self.onMouseSelect(evt);
      });
      
      this.$('.action-drag').on('tapstart', this.onDragPending.bind(this));
      this.$('.action-delete').on('tap', this.onDelete.bind(this));
      
      this.$().attr('expr-id', this.model.id);
      this.renderIndex();
      this.renderSelected();
      this.renderFolder();
      this.renderCollapsedFolder();
    };
  
    view.triggerDelete = function () {};
    view.triggerEnterPressed = function () {};
    view.triggerUpPressed = function () {};
    view.triggerDownPressed = function () {};
    view.triggerBackspacePressed = function () {};
    view.triggerDelPressed = function () {};
    view.onMouseSelect = function () {};

    view.onDelete = function() {
      this.triggerDelete();
    };

    view.convertTo = function (cls, state) {
      
      var obj = cls(state);
      var index = this.model.index;
      
      var list = this.model.list;
      var folder = this.model.folder;

      obj.setProperty('list', list);

      UndoRedo.oneTransaction(function(){
        list.removeItemAt(index);
        list.insertItemAt(index, obj);
        if (folder) folder.addItem(obj);
      });
      
      return obj;
    };

    view.getBounds = function () {
      var dom = this.$();
      var offset = dom.offset();
      if (!offset) return null;

      var top = offset.top;
      var height = dom.height();

      return {
        top: top,
        bottom: top + height
      };
    };
    
    // override in subclass
    view.allowDragDrop = function () {
      return true;
    };
   
    view.onDragPending = function(evt) {
      
      // clear focus when clicking expression handle
      $(document.activeElement).blur();
      
      // don't start dragging if we're not allowed to
      if (!this.allowDragDrop()) return;
      var self = this;
      this.mouseMovedTo = null;
      
      //if timeout happens or mouse moves sufficiently far, we will start dragging
      //if mouseup, then this was a tap, and we should let it do its thing

      //Start after 500ms
      var dragStartTimeout = setTimeout(function(){
        $(document).off('.dragpending');
        self.onDragStart(evt);
      }, 500);

      //Start after moving
      $(document).on('tapmove.dragpending', function(new_evt){
        // mouse has moved since tapstart. record this in case we actually do start dragging
        self.mouseMovedTo = new_evt.touches[0];
        
        var dx = evt.touches[0].x - self.mouseMovedTo.x;
        var dy = evt.touches[0].y - self.mouseMovedTo.y;
        
        // must have moved more than 3px away from tapstart position to immediately trigger drag
        if (Math.sqrt(dx*dx+dy*dy) > 3) {
          clearTimeout(dragStartTimeout);
          $(document).off('.dragpending');
          self.onDragStart(evt);
        }
      });

      //Cancel on mouseup
      $(document).on('tapend.dragpending', function(new_evt){
        clearTimeout(dragStartTimeout);
        $(document).off('.dragpending');
      });
    };
 
    view.onDragStart = function(evt) {
      // don't start dragging if we're not allowed to
      if (!this.allowDragDrop()) return;
      this.listView.dragdrop_expressions.start(evt, this);
      
      // we've moved our mouse since the initial tapstart. drag the expression to that point
      if (this.mouseMovedTo) {
        this.listView.dragdrop_expressions.drag(this.mouseMovedTo.x, this.mouseMovedTo.y);
      }
    };

    view.hideContextMenu = function () {
      // TODO - temporary until we have a better popup menu manager
      if (window.opened_options_menu) {
        window.opened_options_menu.hideOptions();
      }
    };
    
    view.processMissedKeyEvent = function (evt) {};
    view.addFocus = function (where) {};
    view.isFocused = function () {return false};
  });

  return AbstractItemView;
});

//TODO: merge expression_view_tablet and expression_view_deskopt into this file
define('expressions/expression_view',['require','jquery','pjs','main/config','./expression_icon_view','expressions/evaluation','expressions/domain_view','expressions/slider_view','expressions/promptslider_view','./expression','graphing/columnmode','main/toast','./text','./table','mathquill','lib/keys','undoredo','lib/track_feature','template!expression_item','expressions/abstractitem_view'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var Config = require('main/config');
  var ExpressionIconView = require('./expression_icon_view');
  var EvaluationView = require('expressions/evaluation');
  var DomainView = require('expressions/domain_view');
  var SliderView = require('expressions/slider_view');
  var PromptSliderView = require('expressions/promptslider_view');
  var ExpressionObject = require('./expression');
  var COLUMNMODE = require('graphing/columnmode');
  var Toast = require('main/toast');

  //For convert-to text and convert-to-table
  var TextObject = require('./text');
  var TableObject = require('./table');

  require('mathquill');
  var Keys = require('lib/keys');
  var UndoRedo = require('undoredo');
  var Feature = require('lib/track_feature');

  var template = require('template!expression_item');
  
  var AbstractItemView = require('expressions/abstractitem_view');
  
  var ExpressionView = P(AbstractItemView, function(view, _super) {
    view.template = template;

    view.playStep = function () {
      if (this.sliderView) {
        this.sliderView.playStep();
      }
    };

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);
      
      this.model.observe('formula.exprview', this.onFormulaChange.bind(this));
      this.model.observe('selected.exprview', this.onSelectedChange.bind(this));
      this.model.observe('latex.exprview', this.onLatexChange.bind(this));
      this.model.observe('dependent.exprview', this.renderDependent.bind(this));
      this.model.observe('isTableable.exprview', this.renderIsTableable.bind(this));
      
      this.observe('shouldExpand', this.observeShouldExpand.bind(this));
      this.observe('doAnimate', this.renderDoAnimate.bind(this));
      this.observe('expanded', this.renderExpanded.bind(this));

    };

    view.renderIsTableable = function(){
      this.$('.action-createtable').toggleClass('disabled', !this.model.isTableable);
    };
    
    view.destruct = function () {
      _super.destruct.call(this);
      
      this.model.unobserve('.exprview');
      
      if (this.iconView) {
        this.iconView.remove();
        this.iconView = null;
      }
         
      if (this.sliderView) {
        // Trigger our removal from the slider timer.
        this.setProperty('isPlaying', false);
        this.sliderView.remove();
        this.sliderView = null;
      }
      
      if (this.promptSliderView) {
        this.promptSliderView.remove();
        this.promptSliderView = null;
      }
      
      if (this.domainView) {
        this.domainView.remove();
        this.domainView = null;
      }
      
      if (this.evaluationView) {
        this.evaluationView.remove();
        this.evaluationView = null;
      }
    };
    
    view.renderExpanded = function () {
      this.$().toggleClass('expanded', !!this.expanded);
    };
    
    view.renderDoAnimate = function () {
      this.$().toggleClass('do-animate', !!this.doAnimate);
    };

    view.onLatexChange = function() {
      if (this.sliderView && this.sliderView.transient) {
        this.updateTransientValue();
        return;
      }

      var latex = this.model.latex;
      if (latex === '"' || latex === "'") {
        this.convertTo(TextObject, {selected:true});
        this.listView.getSelectedView().addFocus();
        return;
      }
      //call up to list_view, so that other listeners can listen
      this.listView.onLatexChange(latex);

      this.updateMathquill();
    };
    
    view.updateMathquill = function () {
      if (!this.mathquill) return;
      
      var latex = this.model.latex;
      
      if (latex !== undefined && this.mathquill.mathquill('latex') !== latex)
        this.mathquill.mathquill('latex', latex);
    };

    view.updateTransientValue = function () {
      this.$transientValue[0].innerHTML = (
        this.sliderView.value
        .toString()
        .replace('-', '<span class="unary-operator">\u2212</span>')
      );
    };

    // OVERRIDE TO CREATE APPROPRIATE CHILD VIEW. IF NOT OVERRIDDEN, THE
    // VIEW WILL SIMPLY NOT BE CREATED AT RUNTIME.
    view.createIconView = function () {
      return ExpressionIconView(this);
    };
    view.createSliderView = function () {
      return SliderView(this.model.slider, this);
    };
    view.createPromptSliderView = function () {
      return PromptSliderView(this);
    };
    view.createDomainView = function () {
      return DomainView(this.model.domain);
    };
    view.createEvaluationView = function () {
      return EvaluationView(this);
    };
        
    view.onFormulaChange = function() {
      
      // Skip this while we are rendering shell. Without this catch, we'd
      // create the child views while rendring the shells and throw them
      // away when we render fully.
      if (this.model.renderShell) return;
      
      var formula = this.model.formula;
      
      var showSlider = formula.is_slidable;
      if (this.sliderView && !showSlider) {
        this.sliderView.remove();
        this.sliderView = null;
        this.$().removeClass('hasSlider');
      } else if (!this.sliderView && showSlider) {
        this.sliderView = this.createSliderView();
        if (this.sliderView) {
          this.sliderView.appendTo(this.$('.template-bottom'));
          this.sliderView.setProperty('dependentLabel', this.getDependentLabel());
          this.$().addClass('hasSlider');
          this.sliderView.observe(
            'transient',
            this.updateTransient.bind(this)
          );
          this.observe('isPlaying', function () {
            if (this.isPlaying) {
              this.listView.onPlaySlider(this.model.id);
            } else {
              this.listView.onStopSlider(this.model.id);
            }
          }.bind(this));
        }
      }
      
      var promptCreateSlider = formula.variables.length > 0;
      if (this.promptSliderView && !promptCreateSlider) {
        this.promptSliderView.remove();
        this.promptSliderView = null;
      } else if (!this.promptSliderView && promptCreateSlider) {
        this.promptSliderView = this.createPromptSliderView();
        if (this.promptSliderView) {
          this.promptSliderView.appendTo(this.$('.template-bottom'));
        }
      }
      
      var showDomain = formula.is_parametric;
      if (this.domainView && !showDomain) {
        this.domainView.remove();
        this.domainView = null;
        this.$().removeClass('hasDomain');
      } else if (!this.domainView && showDomain) {
        this.domainView = this.createDomainView();
        if (this.domainView) {
          this.domainView.appendTo(this.$('.template-bottom'));
          this.$().addClass('hasDomain');
        }
      }
      
      var showEvaluation = formula.is_evaluable;
      if (this.evaluationView && !showEvaluation) {
        this.evaluationView.remove();
        this.evaluationView = null;
      } else if (!this.evaluationView && showEvaluation) {
        this.evaluationView = this.createEvaluationView();
        if (this.evaluationView) {
          this.evaluationView.appendTo(this.$('.template-bottom'));
          this.$().addClass('hasEvaluation');
          this.evaluationView.setProperty('dependentLabel', this.getDependentLabel());
        }
      }
      
      if (this.sliderView && !this.sliderView.transient) {
        this.model.slider.setProperty('value', formula.simple_constant);
      }
      
      if (this.promptSliderView) {
       this.promptSliderView.setProperty('variables', formula.variables);
      }
      
      if (this.evaluationView) {
        this.evaluationView.setProperty('evaluations', formula.zero_values);
      }

      var shouldExpand = !!(this.evaluationView ||
                            this.promptSliderView ||
                            this.sliderView ||
                            this.domainView);
                            
      this.setProperty('shouldExpand', shouldExpand);
    };
    
    view.renderDependent = function () {
      if (this.sliderView) {
        this.sliderView.setProperty('dependentLabel', this.getDependentLabel());
      }
      if (this.evaluationView) {
        this.evaluationView.setProperty('dependentLabel', this.getDependentLabel());
      }
    };
    
    // NOTE: this will get called once with model.renderShell = true and once
    // with model.renderShell = false. The first time, the template will
    // shortcircuit and render the bare minimum. The second time the entire
    // dom will get destroyed and rebuilt. We don't want to add any nested
    // views when model.renderShell = false because the views' dom elements will
    // get wiped out as soon as we render with model.renderShell = false. And,
    // the whole point of renderShell=true is that we want as little as
    // possible to happen at startup as possible.
    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      if (this.model.renderShell)  return;
     
      this.mathquill = this.$('.template-mathquill').mathquill('editable');
      this.$transientLhs =
        this.$('.transient-mathquill').mathquill('editable')
      ;
      this.$transientLhs.hide();
      this.$transientValue = $('<span>');
      
      this.mathquill.on(
        'render upPressed downPressed enterPressed backspacePressed delPressed keydown focusin focus',
        this.onMathquillEvent.bind(this)
      );
      this.$transientLhs.on('tapstart', this.onSelectTransient.bind(this));
      this.mathquill.mathquill('latex', this.model.latex || "");
      
      this.iconView = this.createIconView();
      if (this.iconView) {
        this.iconView.replace(this.$('.template-expricon'));
      }
      
      this.$('.action-duplicate').on('tap', this.onDuplicateWithoutFocus.bind(this));
      this.$('.action-createtable').on('tap', this.onCreateTable.bind(this));
      
      this.renderDoAnimate();
      this.renderExpanded();
      this.renderIsTableable();
      this.onFormulaChange();
    };


    view.onSelectedChange = function() {
      if (!this.model.selected && this.mathquill) {
        // take focus out of mathquill
        this.mathquill.mathquill('clearSelection').mathquill('blur');
      }
    };
    
    view.onSelectTransient = function () {
      this.stopTransient();
      this.mathquill.mathquill('focus');
    };
    
    view.onMathquillEvent = function(evt) {
      switch(evt.type) {
        case "render":
        this.model.setProperty('latex', this.mathquill.mathquill('latex'));
        return;

        case "focus":
        case "focusin":
          if (this.sliderView) this.sliderView.stop();
          this.model.setProperty('selected', true);
          return;

        case "upPressed":
        this.triggerUpPressed();
        return;

        case "downPressed":
        this.triggerDownPressed();
        return;

        case "enterPressed":
        this.triggerEnterPressed();
        return;

        case "backspacePressed":
        if (!this.model.isEmpty()) return;
        this.triggerBackspacePressed();
        return;

        case "delPressed":
        if (!this.model.isEmpty()) return;
        this.triggerDelPressed();
        return;

        case "keydown":
        if (Keys.lookup(evt) === Keys.ESCAPE) $(document.activeElement).blur();
        return;
      }
    };

    view.createSliders = function (vars) {
      // build the list of states
      // this is important, because the first time, it will generate
      // an id for us automatically. If we undo then redo, we need to
      // reusue the generated ids.
      // set slider min/max so that they don't
      // get set automatically and messup undo/redo
      var var_states = [];
      for (var i=0; i<vars.length; i++) {
        var_states.push({
          latex: vars[i] + '=1',
          sliderMin: -10, // TODO - combine this lines into:
          sliderMax: 10,   // slider: {min: -10, max: 10}
          userRequestedGraphing: "never" //don't show a circle when we create an r= slider
        });
      }

      var index = this.model.index;
      var folder = this.model.folder;
      var next_index = index + 1;

      var list = this.model.list;
      UndoRedo.addTransaction({
        type: UndoRedo.CAUSE_OF_CHANGE,

        undo: function() {
          for (var i=0; i<vars.length; i++) {
            list.removeItemAt(next_index);
          }
        },

        redo: function() {
          for (var i = var_states.length - 1; i >= 0; i--) {
            var obj = ExpressionObject(var_states[i], list);
            var_states[i].id = obj.id; // store the generated id for next time
            list.insertItemAt(next_index, obj);
            if (folder) folder.addItem(obj);
          }
        }
      });
      this.tempDisableAnimate();
    };

    view.onDuplicate = function() {
      var obj = this.onDuplicateWithoutFocus();
      var view = this.listView.getItemView(obj.id);
      view.addFocus();
    };

    view.onDuplicateWithoutFocus = function() {
      var index = this.model.index;
      var state = this.model.getState();
      state.selected = false;
      delete state.id;

      var obj = ExpressionObject(state, this.model.list);
      this.model.list.insertItemAt(index + 1, obj);
      
      var newExp = this.listView.getItemView(obj.id).$();
      newExp.css({
        transform: 'scale(0,0)',
        opacity: 0
      });
      setTimeout(function() {
        newExp.css({
          transition: '.2s',
          opacity: 1,
          transform: 'scale(1,1)'
        });
      }, 1);
      return obj;
    };

    view.onMouseSelect = function(evt) {
      if (this.listView.editListMode) return;

      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);
      
      // stop the mathquill from losing focus immediately. Only do this when
      // using mouse. When on ipad, this stops you from being able to put
      // cursor. And when on ipad, focus doesn't get lost anyways.
      if (evt.device === 'mouse') {
        evt.preventDefault();
      }
      
      var fakeEvent;
      var targetInMathquill = $(evt.target).closest('.template-mathquill').length;
      if (targetInMathquill) {
        
        // on tablet, we need to immediately put the cursor where it will
        // eventually go. Without this, mathquill will wait until the legacy
        // mousedown event (fired on a timeout) to put the cursor under the
        // touch. That causes keyboard to momentarily hide.
        if (evt.device === 'touch') {
          fakeEvent = $.event.fix(evt.originalEvent);
          fakeEvent.type = "mousedown";
          fakeEvent.pageX = evt.changedTouches[0].pageX;
          fakeEvent.pageY = evt.changedTouches[0].pageY;

          // fake mousedown and mouseup to immediately put focus
          this.mathquill.triggerHandler(fakeEvent);
          fakeEvent.type = "mouseup";
          $(document).triggerHandler(fakeEvent);
        }
        
        // let mathquill handle the event
        return;
      }
      
      /*
      * This will simualte a mousedown on the mathquill itself so that
      * you can start a mouse selection from outside of mathquill. But,
      * this doesn't make much sense for ipad because we don't do selection on
      * mousedown for ipad, we do it on click. That's because we want scroll
      * to work. We also don't want to pass the event into mathquill if it
      * originally started in mathquill.
      */
      if (evt.device === 'mouse') {
        
        // the event we're looking at is of type 'tapstart' and that means
        // nothing to mathquill. We need to turn this back into a 'mousedown'
        // so that it can handle it normally.
        fakeEvent = $.event.fix(evt.originalEvent);
  
        // pass into mathquill so it can act like it happened within mathquill
        this.mathquill.triggerHandler(fakeEvent);
      }
      
      // on ipad, we add focus to end
      else {
       this.addFocus('end');
      }
    };
    
    view.getDependentLabel = function () {
      var dependent = this.model.dependent;
      if (!dependent) return '';

      //reformat to add back in brackets if we have a subscript
      if (dependent.match(/(.*)_(.+)/)) {
        dependent = dependent.replace(/(.*)_(.+)/, "$1_{$2}");
      }

      // ask mathquill for an html version of itself
      // note: this will break for things like parentheses, which need to be
      // inserted into the dom to know their correct size we should probably
      // be passing around mathquill objects instead of strings, but this
      // works for uncomplicated mathquill
      dependent = $(
        "<span>" +
        dependent +
        "</span>"
      ).mathquill('editable').mathquill('html');

      // surround it in the right class so that it can pull in mathquill
      // stylings
      dependent = (
        "<span class='mathquill-rendered-math'>" +
        dependent +
        "</span>"
      );

      return dependent;
    };


    //the following three function determine the animation
    //and delay of the bottom area under expressions
    //that house sliders, evaluations, etc

    //temporarily disable animation on this expression
    //called after adding a slider from a button, for example
    view.tempDisableAnimate = function() {
      var self = this;
      self.setProperty('doAnimate', false);
      clearTimeout(self.restoreAnimationTimeout);
      self.restoreAnimationTimeout = setTimeout(function() {
        self.setProperty('doAnimate', true);
      }, 500);
    };

    view.observeShouldExpand = function() {
      var self = this;
      clearTimeout(self.animateTimeout);
      if (this.doAnimate) {
        self.animateTimeout = setTimeout(function() {
          self.setProperty('expanded', self.shouldExpand);
        }, 500);
      } else {
        //immediately expand/collapse when animation is disabled (initial load)
        self.setProperty('expanded', self.shouldExpand);
      }
    };

    var lhs = function (latex) {
      return latex.replace(RegExp("=[^=]+$"), "=");
    };

    view.startTransient = function () {
      this.updateTransientValue();
      this.$transientLhs.show();
      this.mathquill.hide();
      this.$transientLhs.mathquill('latex', lhs(this.model.latex));
      this.$transientLhs
        .children('.mathquill-root-block')
        .append(this.$transientValue)
      ;
    };

    view.stopTransient = function () {
      this.$transientValue.remove();
      this.$transientLhs.hide();
      this.mathquill.show();
      this.updateMathquill();
    };

    view.updateTransient = function () {
      if (this.sliderView.transient) {
        this.startTransient();
      } else {
        this.stopTransient();
      }
    };
    
    view.isFocused = function () {
      return $(document.activeElement).closest(this.mathquill).length !== 0;
    };
    
    view.addFocus = function (where) {
      if (Config.get('no_focus')) return;
      if (!this.mathquill) return;
      
      this.mathquill.mathquill('focus');
      
      if (where === 'start') {
        this.mathquill.mathquill('moveStart');
      } else if (where === 'end') {
        this.mathquill.mathquill('moveEnd');
      }
    };

    view.onCreateTable = function () {
      var formula = this.model.formula;

      Feature.use("convert to table");

      if (!this.model.isTableable) return;

      var table_info = formula.table_info;
      var index = this.model.index;
      var state = {selected : true};

      var columnMode = COLUMNMODE.POINTS_AND_LINES;
      if (formula.is_point_list || this.model.userRequestedGraphing === "never")
        columnMode = COLUMNMODE.POINTS;

      var i;
      var independent_values = [];
      var dependent_values = [];
      if(table_info.values){
        for(i = 0; i < table_info.values.length; i++){
        independent_values.push(table_info.values[i][0]);
        dependent_values.push(table_info.values[i][1]);
        }
      }
      else{
        for(i = -2; i <=2; i++){
          independent_values.push(i);
          dependent_values.push('');
        }
      }

      state.columns = [{
                          latex:table_info.independent_variable,
                          values: independent_values
                        },{
                          latex:table_info.dependent_column,
                          color: this.model.color,
                          hidden: false,
                          columnMode: columnMode,
                          values: dependent_values
                        }];

      var list = this.model.list;
      var listView = this.listView;
      listView.setProperty('editListMode', false);
      UndoRedo.oneTransaction(function(){
        if (!table_info.by_reference) {
          list.removeItemAt(index);
          index--;
        }
        
        var obj = TableObject(state, list);
        list.insertItemAt(index+1, obj);
      });

      Toast.show("Table created.", function () {
        listView.setProperty('editListMode', true);
      });

    };
  });
  
  return ExpressionView;
});

define('template!text', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="do-not-blur expressionitem expressiontext shell">\n  <div class=\'shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="do-not-blur expressiontext expressionitem">\n  <div class=\'fade-container\'>\n\n    <span class="main">\n      <textarea class="do-blur" placeholder="enter some text..."></textarea>\n    </span>\n    <i class="icon-remove top-level-delete action-delete" handleEvent="true"></i>\n\n  </div>\n\n  <span class="tab action-drag" handleEvent="true">\n    <span class=\'num variable-index\'></span>\n    <div class=\'tab-interior\'></div>\n    <i class=\'icon-text\'></i>\n  </span>\n\n  <span class=\'exp-actions\'>\n    <span class="action-delete delete-btn" handleEvent="true"><i class=\'icon-remove\'></i></span>\n    <!-- TODO? <span class="action-duplicate duplicate-btn" handleEvent="true"><i class=\'icon-duplicate\'></i></span>-->\n  </span>\n\n</div>\n\n';
 } 
;__p+='';
}
return __p;
};});
define('expressions/text_view',['require','jquery','pjs','./abstractitem_view','lib/keys','template!text'],function(require) {
  var $ = require('jquery');
  var P = require('pjs');
  var AbstractItemView = require('./abstractitem_view');
  var Keys = require('lib/keys');
  var template = require('template!text');

  var TextView = P(AbstractItemView, function(view, _super) {
    
    view.template = template;

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);
      
      this.model.observe('selected.textview', this.onSelectedChange.bind(this));
      this.model.observe('text.textview', this.renderText.bind(this));
    };
    
    view.destruct = function () {
      this.model.unobserve('.textview');
    };

    view.onProjectorModeChange = function() {
      this.fitText();
    };
    
    view.renderText = function () {
      var textarea = this.$('textarea')[0];
      if (!textarea) return;
      
      textarea.value = this.model.text;
      this.fitText();
      setTimeout(this.fitText.bind(this), 1); //TODO - do we still need this?
    };

    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      
      if (this.renderShell) return;
      
      var $textarea = this.$('textarea');
      
      $textarea.focusin(function(){
        this.model.setProperty('selected', true);
      }.bind(this));

      $textarea.bind('keydown keypress keyup change cut paste', this.onTextareaEvent.bind(this));
      
      this.renderText();
    };
    
    view.onTextareaEvent = function (evt) {
      var ta = this.$('textarea')[0];
      var ta_is_active = ta && ta === document.activeElement;
      var ta_len = ta_is_active ? ta.value.length : 0;
      var key = ta_is_active && evt.type === 'keydown' ? Keys.lookup(evt) : '';

      // pressing enter inside textarea creates a new expression underneath
      if (key === Keys.ENTER) {
          
        evt.preventDefault();
        this.triggerEnterPressed();
        return;
        
      // pressing escape removes focus
      } else if (key === Keys.ESCAPE) {
        $(document.activeElement).blur();
        return;
           
      // pressing up while at start of textarea selects expression above
      } else if (key === Keys.UP) {

        if (ta.selectionStart === 0 && ta.selectionEnd === 0) {
          evt.preventDefault();
          this.triggerUpPressed();
        }
        return;
        
      // pressing down while at end of textarea selects expression below
      } else if (key === Keys.DOWN) {

        if (ta.selectionStart === ta_len && ta.selectionEnd === ta_len) {
          evt.preventDefault();
          this.triggerDownPressed();
        }
        return;

      // pressing backspace when completely empty should delete textarea
      } else if (key === Keys.BACKSPACE) {
          
        if (ta_len === 0) {
          evt.preventDefault();
          this.triggerBackspacePressed();
        }
        return;
         
      // pressing delete when completely empty should delete textarea
      } else if (key === Keys.DELETE) {
        
        if (ta_len === 0) {
          evt.preventDefault();
          this.triggerDelPressed();
        }
        return;
          
      }
      
      // if we made it down here, then we should update the stored text value
      this.model.setProperty('text', ta.value);
    };

    view.onSelectedChange = function() {
      if (!this.model.selected) {
        var textarea = this.$('textarea')[0];
        if (textarea) textarea.blur();
      }
    };

    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);
    };
    
    view.fitText = function () {
      var $textarea = this.$('textarea');
      var textarea = $textarea[0];
      if (!textarea) return;
      
      var rows=0;
        do {
          rows++;
          $textarea.attr('rows',rows);
      } while (textarea.clientHeight < textarea.scrollHeight);
    };
    
    view.isFocused = function () {
      return $(document.activeElement).closest(this.$()).length !== 0;
    };
    
    view.addFocus = function (where) {
      var textarea = this.$('textarea')[0];
      if (!textarea) return;

      textarea.focus();
      if (where === 'end') {
        textarea.selectionStart = textarea.selectionEnd = textarea.value.length;
      } else if (where === 'start') {
        textarea.selectionStart = textarea.selectionEnd = 0;
      }
    };
        
  });

  return TextView;
});

define('template!table_icon', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<span class="icon-box variable-errortooltip tipsy-sticky action-icon do-not-blur" \n      handleevent="true"\n      disablescroll="true"\n>\n  <span class="icon graph-icon variable-colorcss"></span>\n</span>';
}
return __p;
};});
define('template!table_column_menu', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'table-column-menu options-menu\'>\n  <div class=\'triangle\'></div>\n  <div class=\'styles-div\'>\n    <div class=\'title\'>style:</div>\n    <div>\n      <span class=\'columnmode-option graph-icon table-points variable-colorcss\' mode="POINTS"></span>\n      <span class=\'columnmode-option graph-icon table-lines variable-colorcss\' mode="LINES"></span>\n      <span class=\'columnmode-option graph-icon table-points-and-lines variable-colorcss\' mode="POINTS_AND_LINES"></span>\n    </div>\n  </div>\n  <div class=\'colors-div\'>\n    <div class=\'title\'>color:</div>\n    <div class="template-colorsview"></div>\n  </div>\n</div>';
}
return __p;
};});
define('expressions/table_column_menu_view',['require','pjs','lib/underscore_view','template!table_column_menu','jquery','./color_menu_view'],function(require){
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var template = require('template!table_column_menu');
  var $ = require('jquery');
  var ColorMenuView = require('./color_menu_view');
    
  var TableColorMenuView = P(UnderscoreView, function (view, _super) {
    view.template = template;
    
    view.init = function (parentView, column) {
      _super.init.call(this);
      this.column = column;
      this.parentView = parentView;

      this.column.observe('color.columnmenuview', this.renderColorCSS.bind(this));
      this.column.observe('columnMode.columnmenuview', this.renderSelectedColumnMode.bind(this));
      this.column.observe('shouldGraph.columnmenuview', this.renderSelectedColumnMode.bind(this));
    };
    
    view.destruct = function () {
     this.column.unobserve('.columnmenuview');
    };
    
    view.renderColorCSS = function () {
      var color = this.column.color;
      this.$('.variable-colorcss').css({
        'border-color' : color,
        'background-color': color
      });
    };
    
    view.renderSelectedColumnMode = function () {
      this.$('.columnmode-option').removeClass('selected');
      
      if (this.column.shouldGraph) {
        var columnMode = this.column.columnMode;
        this.$('.columnmode-option[mode="'+columnMode+'"]').addClass('selected');
      }
    };
    
    view.didInsertElement = function () {
      this.$().on('tap tapstart', '.columnmode-option', this.onSelectColumnMode.bind(this));
      this.renderColorCSS();
      this.renderSelectedColumnMode();
      
      // this view has a nested template. We instantiate the color picker
      // and replace a placeholder element within the html.
      var colorsView = ColorMenuView(this.column);
      colorsView.replace(this.$('.template-colorsview'));
    };
    
    view.onSelectColumnMode = function (evt) {
      // when using mouse, fire on 'tapStart' and when on touch we
      // fire on the 'tap' event.
      if (evt.type === 'tap' && evt.device === 'mouse') return;
      if (evt.type === 'tapstart' && evt.device === 'touch') return;

      var columnMode = $(evt.target).closest('.columnmode-option').attr('mode');
      
      // the column is visible and we've clicked the same columnMode again; hide the column and return
      if (!this.column.hidden && this.column.columnMode === columnMode) {
        this.column.setProperty('hidden', true);
        return;
      }
     
      this.column.setProperty('columnMode', columnMode);
      this.column.setProperty('hidden', false);
      
      // making column visible should make folder visible
      var folder = this.column.table.folder;
      if (folder) {
        folder.setProperty('hidden', false);
      }
    };
    
  });
  
  return TableColorMenuView;
});

define('expressions/table_icon_view',['require','jquery','./abstract_icon','pjs','template!table_icon','graphing/columnmode','./table_column_menu_view'],function(require){
  var $ = require('jquery');
  var AbstractIconView = require('./abstract_icon');
  var P = require('pjs');
  var template = require('template!table_icon');
  var COLUMNMODE = require('graphing/columnmode');
  var TableColumnMenuView = require('./table_column_menu_view');
  
  var TableIconView = P(AbstractIconView, function (view, _super) {
    view.template = template;
    
    view.init = function (parentView) {
      _super.init.call(this, parentView);
      this.column = this.model;
      this.listView = parentView.tableView.listView;
      
      this.column.observe('color.iconview', this.renderColorCSS.bind(this));
      this.column.observe('error.iconview', this.onDisplayChange.bind(this));
      this.column.observe('columnMode.iconview', this.onDisplayChange.bind(this));
      this.column.observe('shouldGraph.iconview', this.onDisplayChange.bind(this));
    };
    
    view.destruct = function () {
      _super.destruct.call(this);
      
      this.column.unobserve('.iconview');
    };
    
    view.renderErrorShown = function () {
      this.$('.icon').toggleClass('error', !!this.errorShown);
      this.$().closest('td').toggleClass('error', !!this.errorShown);
    };
    
    view.renderColorCSS = function() {
      this.$('.variable-colorcss').css('border-color', this.column.color);
      this.$('.variable-colorcss').css('background', this.column.color);
    };
    
    view.toggleGraphShown = function() {
      if (!this.column.isGraphable) return;
      if (this.errorShown) return;

      // Trying to edit whether a graph is shown in a hidden folder should
      // show the folder.
      if (this.model.table.folder && this.model.table.folder.hidden) {
        this.model.table.folder.setProperty('hidden', false);
        return;
      }

      this.column.setProperty("hidden", !this.column.hidden);
    };
    
    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      
      var self = this;
      function handleIconTap (evt) {
        if (evt.wasHandled('dragdrop')) return;
        if (evt.wasLongheld()) return;
        
        if (self.optionsShown) {
          self.hideOptions();
          return;
        }
        
        if (self.listView.editListMode) {
          self.toggleOptions();
        } else {
          self.toggleGraphShown();
        }
      }
      
      function handleIconLongHold (evt) {
        if (self.optionsShown) return;
        self.toggleOptions(); // will create TableColumnMenuView
      }
      
      function handleIconTapStart (evt_orig) {
        if (self.optionsShown) return;
        if (evt_orig.touches.length !== 1) return;
        
        // if we lift up before moving, stop listening to moves
        $(document).on('tapend.dragdrop tapcancel.dragdrop', function () {
          $(document).off('.dragdrop');
        });
        
        $(document).on('tapmove.dragdrop', function (evt) {
          $(document).off('.dragdrop');

          if (evt.touches.length === 1 && !evt.wasLongheld()) {
            self.listView.dragdrop_columns.start(evt_orig, self.parentView);
          }
        });
      }
      
      this.$('.action-icon').on('tap', handleIconTap);
      this.$('.action-icon').on('longhold', handleIconLongHold);
      this.$('.action-icon').on('tapstart', handleIconTapStart);

      this.renderColorCSS();
      this.onDisplayChange();
      
      this.$icon = this.$('.icon');
    };
    
    view.createOptionsMenuView = function () {
      var optionsView = TableColumnMenuView(this, this.column);
       optionsView.appendTo('#main');
       
       // putting the column menu view at the topLeft of the .icon-box
       // it's up to the column menu view's css to position it beyond that
       var placeholder = this.$('.icon-box');
       var offset = placeholder.offset();
       optionsView.$().css({
         position: 'absolute',
         top: offset.top + 'px',
         left: offset.left + 'px'
       });
       
       return optionsView;
    };

    view.onDisplayChange = function () {
      _super.onDisplayChange.call(this);
      if (!this.$icon) return;
      
      var shouldGraph = this.column.shouldGraph;
      var columnMode = this.column.columnMode;
      var isGraphable = this.column.isGraphable;
      var icon_class = '';
     
      if (this.error || !isGraphable) {
        icon_class = '';
      } else {

        if (!shouldGraph) {
          icon_class = 'graph-hidden';
        } else if (columnMode === COLUMNMODE.POINTS) {
          icon_class = 'table-points';
        } else if (columnMode === COLUMNMODE.LINES) {
          icon_class = 'table-lines';
        } else if (columnMode === COLUMNMODE.POINTS_AND_LINES) {
          icon_class = 'table-points-and-lines';
        }
        
      }
      
      // efficently changes the class of the icon
      if (this.rendered_icon_class === icon_class) return;
      if (this.rendered_icon_class) {
        this.$icon.removeClass(this.rendered_icon_class);
      }
      this.rendered_icon_class = icon_class;
      if (icon_class) {
        this.$icon.addClass(icon_class);
      }
      
    };
  });
  
  return TableIconView;
});

define('template!table', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
 if (renderShell) { 
;__p+='\n\n<div class="expressionitem expressiontable shell">\n  <div class=\'shell\'></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="expressionitem expressiontable">\n    \n  <div class=\'fade-container\'>\n    \n    <span class="main">\n      <span class="fade-bottom"></span>\n      <span class="fade-right"></span>\n      \n      ';

          // store these varaibles for use in the template logic
          var rightColumn = columns.length-1;
          var bottomRow = columns[0].cells.length-1;
      
;__p+='\n\n      <table class="tabledata" cellpadding=0 cellspacing=0>\n           \n        <tr class="header">\n          ';
 _.each(columns, function (junk, c) {
          
               if (c === rightColumn) {
                 print(templates.table_cell_headerright())
               } else {
                 print(templates.table_cell_header())
               }
               
             })
          
;__p+='\n        </tr>\n        \n        ';
 _.each(columns[0].cells, function (junk, r) { 
;__p+='\n\n        <tr'+
((r === bottomRow ? ' class="footer"':''))+
'>\n          ';
 
             _.each(columns, function (junk, c) {

               if (c === rightColumn) {
               
                 if (r === bottomRow) {
                   print(templates.table_cell_bottomright())
                 } else {
                   print(templates.table_cell_bodyright())
                 }
               
               } else {
               
                 if (r === bottomRow) {
                   print(templates.table_cell_bottom())
                 } else {
                   print(templates.table_cell_body())
                 }
                 
               }
             })
          
;__p+='\n        </tr>\n        ';
 }) 
;__p+='\n          \n      </table>\n    </span>\n    \n    ';
 //covers up the right hand side of an overflowing table 
;__p+='\n    <span class="fadeout"></span>\n    <i class="icon-remove top-level-delete action-delete" handleEvent="true"></i>\n  </div>\n  \n  <span class="tab action-drag" handleEvent="true">\n    <span class=\'num variable-index\'></span>\n    <div class=\'tab-interior\'></div>\n  </span>\n\n  <span class=\'exp-actions\'>\n    <span class="action-delete delete-btn" handleEvent="true"><i class=\'icon-remove\'></i></span>\n    <!-- TODO? <span class="action-duplicate duplicate-btn" handleEvent="true"><i class=\'icon-duplicate\'></i></span>-->\n  </span>  \n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('template!table_cell_body', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<td class="non-editable empty">\n  <div class=\'interior-container\'>\n    <span class="error-indicator do-not-blur tipsy-sticky"\n          handleevent="true"\n          style="display:none"\n    >\n    </span>\n                  \n    <span class=\'mathquill-rendered-math\'></span>\n  </div>\n</td>\n';
}
return __p;
};});
define('template!table_cell_bodyright', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<td class="empty non-editable right">\n  <div class="interior-container">\n\t <span class="mathquill-rendered-math"></span>\n  </div>\n</td>\n';
}
return __p;
};});
define('template!table_cell_header', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<td class="editable">\n  <div class=\'interior-container\'>\n    <span class="template-icon"></span>\n    <span class="mathquill-rendered-math"></span>\n    <span class="fadeout"></span>\n    <span class="action-removecolumn icon-remove do-not-blur" handleevent="true"></span>\n  </div>\n</td>';
}
return __p;
};});
define('template!table_cell_headerright', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<td class="editable right">\n  <div class="interior-container">\n\t<span class="mathquill-rendered-math"></span>\n  </div>\n</td>';
}
return __p;
};});
define('template!table_cell_bottom', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<td class="empty non-editable">\n  <div class=\'interior-container\'>\n  \t<span class="mathquill-rendered-math"></span> \n  </div>\n</td>\n';
}
return __p;
};});
define('template!table_cell_bottomright', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<td class="empty non-editable right">\n  <div class="interior-container">\n\t<span class=\'mathquill-rendered-math\'></span>\n  </div>\n</td>';
}
return __p;
};});
define('expressions/table_view',['require','jquery','underscore','pjs','lib/underscore_view','undoredo','mathquill','lib/keys','./abstractitem_view','./table_icon_view','template!table','template!table_cell_body','template!table_cell_bodyright','template!table_cell_header','template!table_cell_headerright','template!table_cell_bottom','template!table_cell_bottomright'],function(require) {
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var UndoRedo = require('undoredo');
  require('mathquill');
  var Keys = require('lib/keys');

  var AbstractItemView = require('./abstractitem_view');
  var TableIconView = require('./table_icon_view');
  
  var templates = {};
  
  templates.table = require('template!table');
  templates.table_cell_body = require('template!table_cell_body');
  templates.table_cell_bodyright = require('template!table_cell_bodyright');
  templates.table_cell_header = require('template!table_cell_header');
  templates.table_cell_headerright = require('template!table_cell_headerright');
  templates.table_cell_bottom = require('template!table_cell_bottom');
  templates.table_cell_bottomright = require('template!table_cell_bottomright');
  
  var TableView = P(AbstractItemView, function(view, _super) {

    view.template = templates.table;

/* TODO - missing na observer to make this happen
 * Should work for both headings and cells
   
    onLatexChange: function () {
      this.hideContextMenu();
    }.observes('expression.headings.@each.latex'), */
   
    view.init = function (model, listView) {
      _super.init.call(this, model, listView);
      
      this.model.triggerRowRemoved = this.onRowRemoved.bind(this);
      this.model.triggerRowAdded = this.onRowAdded.bind(this);
      this.model.triggerColumnAdded = this.onColumnAdded.bind(this);
      this.model.triggerColumnRemoved = this.onColumnRemoved.bind(this);
      this.model.triggerColumnMoved = this.onColumnMoved.bind(this);
      
      this.model.observe('selectedCell.tableview', this.onSelectedCellChange.bind(this));
    };
    
    view.destruct = function () {
      this.model.unobserve('.tableview');
      
      //TODO - should delete this.model.triggerRowRemoved
      //TODO - should delete this.model.triggerRowAdded
      //TODO - should delete this.model.triggerColumnRemoved
      //TODO - should delete this.model.triggerColumnAdded
    };

    view.getTemplateParams = function () {
      return {
        columns: this.model.columns,
        renderShell: this.model.renderShell,
        templates: templates
      };
    };
    
    view.onRowRemoved = function (index) {
      if (!this.columnViews) return;
      
      // index starts at 0 for row under headers. columnViews starts at 0
      // including header. Make the adjustment here.
      var r = index+1;
      
      for (var c = 0; c < this.columnViews.length; c++) {
        var cellView = this.columnViews[c].splice(r, 1)[0];
        cellView.remove();
      }
          
      // remove the tr that housed the cells
      this.$('tr:nth-of-type('+ (r+1) +')').remove();
      
      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };
    
    view.onRowAdded = function (index) {
      if (!this.columnViews) return;

      // index starts at 0 for row under headers. columnViews starts at 0
      // including header. Make the adjustment here.
      var r = index+1;
      var cell;
      var cellView;
      var columns = this.model.columns;
      var columnCount = this.columnViews.length;
      
      // add a tr to put our cells into
      var tds = '';
      for (var i=0; i<columnCount; i++) tds += "<td></td>";
      var $tr = $('<tr>'+ tds +'</tr>');
      
      this.$('tr:nth-of-type('+r+')').after($tr);
      
      
      for (var c = 0; c < columnCount; c++) {
        cell = columns[c].cells[index];
        
        if (c+1 < columnCount) {
          cellView = CellView(cell, this);
        } else {
          cellView = RightCellView(cell, this);
        }
        
        // replace placeholder td with full view.
        cellView.replace($tr.find('td:nth-of-type('+ (c+1) +')'));
        
        this.columnViews[c].splice(r, 0, cellView);
      }
      
      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };
    
    view.onColumnRemoved = function (index) {
      if (!this.columnViews) return;
      var column = this.columnViews.splice(index, 1)[0];
      for (var i=0; i < column.length; i++) {
        column[i].remove();
      }

      var cell = this.selectedCell;

      if (cell && cell.column > index) {
        // selection was after the deleted column, so decrease selected
        // column.
        this.setProperty('selectedCell', {row: cell.row, column: cell.column-1});
      } else if (cell && cell.column === index) {
        // deleted column was selected, so we need to try to select another
        // one.

        if (this.columns.length <= index) {
          // we just deleted the last column, so we have to select the one
          // to the left of where we just deleted
          this.selectCell(cell.row, cell.column-1);
        } else {
          // we can put focus back in the column that just slid into the
          // deleteded one's place.
          this.selectCell(cell.row, cell.column);
        }
      } else {
        // don't need to do anything because the deleted column was after the
        // selected column. Or, there was no selected column.
      }

      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };

    view.onColumnAdded = function (index) {
      if (!this.columnViews) return;

      var prev_views = this.columnViews[index-1];
      var column = this.model.columns[index];
      var cells = column.cells;
      var i, views = [];
      
      // create header
      views.push(HeaderView(column, this));
      
      // create each cell for each row
      for (i=0; i<cells.length-1; i++) {
        views.push(CellView(cells[i], this));
      }
      
      // add bottom cell
      views.push(BottomCellView(cells[i], this));
      
      this.columnViews.splice(index, 0, views);
      
      // add each view into the dom by placing it after the cell to the left
      // of it.
      views.forEach(function (view, i) {
        view.insertAfter(prev_views[i].$());
      });

      // update which cell is selected
      this.model.notifyPropertyChange('selectedCell');
    };
    
    view.onColumnMoved = function (from, to) {
      if (!this.columnViews) return;
      var columnView = this.columnViews.splice(from, 1)[0];
      this.columnViews.splice(to, 0, columnView);
      
      // remove the td elements
      this.$('tr td:nth-child('+(from+1)+')').each(function () {
        var cell = $(this);
        var tr = cell.closest('tr');
        
        // remove cell and insert in correct spot
        cell.detach();
        cell.insertAfter(tr.children(':nth-child('+(to)+')'));
      });
    };
    
    view.didInsertElement = function () {
      _super.didInsertElement.call(this);
      if (this.model.renderShell) return;
      
      var self = this;
      this.$().on('focusin', function(){
        setTimeout(self.onFocusChange.bind(self),0);
      });
      this.$().on('keydown', this.onMathQuillKeydownEvent.bind(this));
      this.$().on(
        'upPressed downPressed leftPressed rightPressed enterPressed backspacePressed delPressed',
        this.onMathQuillSpecialEvent.bind(this)
      );
    
      this.columnViews = [];
    
      // all the cells are placed in the dom, but they aren't setup yet.
      // optimization: could walk through the table more efficiently to access
      // the cell's dom element rather than doing a this.findCell(r,c) every
      // time. Could walk left to right, top to bottom.
      var columns = this.model.columns;
      var columnCount = columns.length;
      var rowCount = columns[0].cells.length;
      var r,c,cell,cellView;
      
      // setup header cells
      for (c=0; c < columnCount; c++) {
        cell = columns[c];
        
        if (c+1 < columnCount) {
          cellView = HeaderView(cell, this);
        } else {
          cellView = RightHeaderView(cell, this);
        }
        
        cellView.setDomNode(this.findCell(0,c));
        this.columnViews[c] = [cellView];
      }
      
      // setup body cells
      var rightColumn = columnCount-1;
      var bottomRow = rowCount;
      
      for (r=1; r <= rowCount; r++) {
        for (c=0; c < columnCount; c++) {
          cell = columns[c].cells[r-1];
          
          if (r === bottomRow) {
            cellView = BottomCellView(cell, this);
          } else if (c === rightColumn) {
            cellView = RightCellView(cell, this);
          } else {
            cellView = CellView(cell, this);
          }

          cellView.setDomNode(this.findCell(r,c));
          
          this.columnViews[c].push(cellView);
        }
      }
      
      this.onSelectedCellChange();
    };
    
    view.onSelectedCellChange = function () {
      if (!this.columnViews) return;

      // could optimize by remembering what cell last had selected class
      this.$('table .selected').removeClass('selected');

      var cell = this.model.selectedCell;
      
      // TODO - set selectedCell = null at time the cell is deleted rather than
      // catch it here. This is a bit hacky.
      // make sure cell isn't out of range
      if (cell) {
        if (cell.column >= this.columnViews.length || cell.row >= this.columnViews[0].length) {
          this.model.selectedCell = null; //silently overwrite the property. won't fire observers
          return;
        }
      }
      
      if (cell) {
        var cellView = this.columnViews[cell.column][cell.row];
        cellView.$().addClass('selected');
      
        this.model.setProperty('selected', true);
      }
      
      // if the cell with focus isn't selected, then remove focus
      var caret = this.getCaretPosition();
      if (caret && !_.isEqual(caret, cell)) {
        if (document.activeElement) {
          document.activeElement.blur();
        }
      }
      
      // need to do this manually if the cell that's focused is not editable.
      // these handlers are what hide/show keypad.
      if (cell) {
        var input = this.findCellInput(cell.row, cell.column)[0];
        this.listView.onFocusIn({target: input});
      } else {
        this.listView.onFocusOut();
      }
      
      var no_faded_h = cell && cell.column+1 === this.model.columns.length;
      var no_faded_v = cell && cell.row === this.model.columns[0].cells.length;
      this.$().toggleClass('no-faded-h', !!no_faded_h);
      this.$().toggleClass('no-faded-v', !!no_faded_v);
      
      this.hideContextMenu();
    };


    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();
      
      var target = $(evt.target);
      var table = target.closest('table')[0];
      
      // if we're clicking on the table itself, we don't know which cell
      // we meant to click. We'll just act like we clicked the outer padding.
      // that's not terrible, because for us to reach this point, we must
      // have clicked in seemingly blank space anyways.
      if (table && evt.target === table) {
        table = null;
      }
      
      if (!table) {
        if (document.activeElement) {
          document.activeElement.blur();
        }
        
        this.model.setProperty('selectedCell', null);
        this.model.setProperty('selected', true);
        return;
      }

      var editable = target.closest('.mathquill-editable')[0];
      if (editable) return; //clicked within editable mathquill
      
      evt.preventDefault();
      editable = target.find('.template-mathquill');
      
      if (editable.length) {
        editable.mathquill('focus');

       /*
        * This will simualte a mousedown on the mathquill itself so that
        * you can start a mouse selection from outside of mathquill. But,
        * this doesn't make much sense for ipad because we don't do selection on
        * mousedown for ipad, we do it on click. That's because we want scroll
        * to work. We also don't want to pass the event into mathquill if it
        * originally started in mathquill.
        */
        if (evt.device === "mouse") {
          
          // the event we're looking at is of type 'tapstart' and that means
          // nothing to mathquill. We need to turn this back into a 'mousedown'
          // so that it can handle it normally.
          var fakeEvent = $.event.fix(evt.originalEvent);
          
          // pass into mathquill so it can act like it happened within mathquill
          editable.triggerHandler(fakeEvent);
        }
        return;
      }
      
      //select the uneditable cell
      var cell = this.getNodesCellPosition(target);
      this.selectCell(cell.row, cell.column);
    };
    
    view.getNodesCellPosition = function (node) {
      var c = node.closest('td').prevAll('td').length;
      var r = node.closest('tr').prevAll('tr').length;
      return {row: r, column: c};
    };
    
    view.getCaretPosition = function () {
      if (this.$().find(document.activeElement).length) {
        return this.getNodesCellPosition($(document.activeElement));
      } else {
        return null;
      }
    };

    view.findCell = function (r ,c) {
      return this.$('tr:nth-child('+(r+1)+') td:nth-child('+(c+1)+')');
    };

    view.findCellInput = function (r, c) {
      return this.findCell(r,c).find('.mathquill-rendered-math');
    };
    
    view.selectCell = function (r, c, selectEnd) {
      if (r < 0 || c < 0) return;
            
      var mathquill = this.findCellInput(r, c);
      if (!mathquill.length) return;
      
      var newSelectedCell = {row: r, column: c};
      this.model.setProperty('selectedCell', newSelectedCell);
      
      if (mathquill.hasClass('mathquill-editable')) {
        mathquill.mathquill('focus');
        if (selectEnd) {
         mathquill.mathquill('moveEnd');
        } else {
          mathquill.triggerHandler('select_all');
        }
      } else {
        $(document.activeElement).blur();
      }
    };
    
    view.unfocus = function () {
      var active = document.activeElement;
      if (this.$().find(active).length) {
        active.blur();
      }
    };
    
    view.processMissedKeyEvent = function (evt) {
      this.doKeyAction(Keys.lookup(evt), evt);
    };
    
    view.onMathQuillKeydownEvent = function (evt) {
      var key = Keys.lookup(evt);
      if (key === Keys.Tab || key === Keys.ESCAPE) {
        this.doKeyAction(key, evt);
      }
    };
    
    view.onMathQuillSpecialEvent = function (evt) {
      var evt_type = evt.type;
      var key = evt_type.slice(0, -('Pressed'.length));
      key = key.charAt(0).toUpperCase() + key.slice(1);
      this.doKeyAction(key, evt);
    };
    
    view.doKeyAction = function (key, evt) {
      
      // it's possible this came from a fake key event (keypad for example)
      // just create a dumby event so that evt.preventDefault() is callable.
      if (!evt) evt = $.Event();
      
      var selectedCell = this.model.selectedCell;
      var r_orig = selectedCell ? selectedCell.row : -1;
      var c_orig = selectedCell ? selectedCell.column : -1;
      
      var columns = this.model.columns;
      var totalRows = columns[0].cells.length;
      var totalCols = columns.length;
      
      var _move = function (r, c) {
        
        // try to wrap it around up one row and to the very right.
        if (r === -1) {
          this.triggerUpPressed();
        } else if ( r > totalRows) {
          this.triggerDownPressed();
        } else {
          
          // wrap around the left side. goes up a row and to the far right.
          if (c === -1) {
            c = totalCols-1;
            r--;
           
          // wrap around the right side. goes down a row and to the far left.
          } else if (c === totalCols) {
            r++;
            c=0;
          }

          this.selectCell(r, c);
          evt.preventDefault();
        }
      }.bind(this);
      
      var _deleteRow = function (r) {
        
        // don't delete the last row
        if (totalRows <= 1) return;
          
        // remove the old row
        this.model.removeRow(r_orig-1);
          
        this.selectCell(r, c_orig);
        evt.preventDefault();
      }.bind(this);
      
      var _deleteColumn = function (c) {
        // don't delete the first col, and don't delete one of last two cols
        if ( c_orig === 0 || totalCols <= 2) return;

        // remove the old row
        this.model.removeColumn(c_orig);
          
        this.selectCell(r_orig, c);
        evt.preventDefault();
      }.bind(this);
      
      switch (key) {
        
        case Keys.LEFT:  _move(r_orig, c_orig-1);  break;
        case Keys.RIGHT:  _move(r_orig, c_orig+1); break;
        case Keys.UP:  _move(r_orig-1, c_orig);    break;
        case Keys.DOWN:  _move(r_orig+1, c_orig);  break;
        
        case Keys.ENTER:
          if (r_orig < totalRows) {
            this.model.insertRow(r_orig, this.model.getAutofillValues(r_orig));
            this.selectCell(r_orig+1, c_orig);
            
          // enter in bottom row creates a new row, but puts focus back in empty row
          } else {
            this.model.insertRow(r_orig-1, this.model.getAutofillValues(r_orig-1));
            this.selectCell(r_orig, c_orig);
          }
          break;
              
        case Keys.ESCAPE:
          $(document.activeElement).blur();
          this.model.setProperty('selectedCell', null);
          break;
        
        case Keys.TAB:
          
          // if focus isn't within the table, then prevent tab default.
          if ($(document.activeElement).closest(this.$()).length === 0) {
            evt.preventDefault();
            return;
          }
          break;
  
        case Keys.BACKSPACE:
          if (r_orig === 0) {
            if(c_orig === 0){ //backspace in empty top-left cell removes whole table
              this.triggerBackspacePressed();
              UndoRedo.triggerFlash();
            }

            else if (c_orig < totalCols-1) {
              _deleteColumn(c_orig-1);
              
            // backspace from right most column simply moves left
            } else {
              _move(0, c_orig-1);
            }
          } else if (c_orig !== 0) {
            _move(r_orig, c_orig-1);
          } else if (r_orig === totalRows) {
            // backspace in bottom row simply moves up a row.
            _move(r_orig-1, c_orig);
          } else {
            _deleteRow(r_orig-1);
          }
          break;
          
        case Keys.DELETE:
          if (r_orig === 0) {
            if(c_orig === 0){
              this.triggerDelPressed();
              UndoRedo.triggerFlash();
            }
            
            // only delete column if its not on the far right
            else if (c_orig < totalCols-1) {
              _deleteColumn(c_orig);
            }
            
          } else if (r_orig >= totalRows) {
            // can't delete last row
          } else {
            _deleteRow(r_orig);
          }
          break;
      }
    };
    
    view.onFocusChange = function() {
      if (!this.model) return;
      this.model.setProperty('selectedCell', this.getCaretPosition());
    };
    
    
    view.isFocused = function () {
      return !!this.model.selectedCell;
    };

    view.addFocus = function (where, r, c) {
      if (where === 'cell') {
        this.selectCell(r,c);
      }
      
      else if (where !== 'end') {
        this.selectCell(0,0);
      }
      
      else {
        this.selectCell(this.model.columns[0].cells.length, 0);
      }
    };

  });
  
  var RightHeaderView = P(UnderscoreView, function(headerView, _super) {
    headerView.template = templates.table_cell_headerright;
    
    headerView.init = function (model, tableView) {
      _super.init.call(this);
      
      this.model = model;
      this.tableView = tableView;
    };
    
    headerView.didInsertElement = function () {
      _super.didInsertElement.call(this);
      
      this.$mathquill = this.$('.mathquill-rendered-math').mathquill('editable');

      var self = this;
      this.$().on('blur focusout', '.mathquill-rendered-math', function () {
        self.$mathquill.mathquill('clearSelection');
      });

      this.$().on('render', '.mathquill-rendered-math', function () {
        var latex = $(this).mathquill('latex');
        if (!latex) return;

        // set latex back to blank
        $(this).mathquill('latex', '');
          
        var index = self.model.index;
        self.model.table.insertColumn(index , {latex: latex});
          
        // select the new cell and put focus at end
        self.tableView.selectCell(0, index, true);
      });
    };
    
  });
  
  var HeaderView = P(UnderscoreView, function(headerView, _super) {
    headerView.template = templates.table_cell_header;
    
    headerView.init = function (model, tableView) {
      _super.init.call(this);
      this.__renderedLatex = '';
      
      this.model = model;
      this.tableView = tableView;
      
      // TODO - get rid of a need to put index in html
      this.model.observe('index.headerview', this.updateIndex.bind(this));
      this.model.observe('latex.headerview', this.onLatexChange.bind(this));
    };
    
    headerView.destruct = function () {
      this.model.unobserve('.headerview');
    };

    headerView.updateIndex = function () {
      this.$().attr('index', this.model.index);
    };
    
    headerView.onLatexChange = function () {
      if (!this.$mathquill) return;
      if (this.__renderedLatex === this.model.latex) return;
      this.__renderedLatex = this.model.latex;
      
      this.$mathquill.mathquill('latex', this.model.latex);
    };
    
    headerView.didInsertElement = function () {
      this.$mathquill = this.$('.mathquill-rendered-math').mathquill('editable');
      // TODO - move these mathquill handlers up to the table view instead of
      // assigning them on each table cell individually
      var self = this;
      this.$().on('blur focusout', '.mathquill-rendered-math', function () {
        self.$mathquill.mathquill('clearSelection');
      });
      this.$().on('tap', '.action-removecolumn', function () {
        self.model.table.removeColumn(self.model.index);
      });
      this.$().on('render', '.mathquill-rendered-math', function () {
        var oldLatex = self.model.latex;
        var newLatex = $(this).mathquill('latex');
        if (oldLatex === newLatex) return;
        
        self.__renderedLatex = newLatex;
        self.model.setProperty('latex', newLatex);
      });
      
      this.iconView = TableIconView(this);
      this.iconView.replace(this.$('.template-icon'));
      
      this.onLatexChange();
      this.updateIndex();
    };
    
  });
  
  var BaseCellView = P(UnderscoreView, function (cellView, _super) {
        
    cellView.init = function (model, tableView) {
      _super.init.call(this);
      
      this.model = model;
      this.tableView = tableView;
     
      this.__renderedDisabled = true;
      this.__renderedValue = '';
      this.__renderedError = '';
    };
    
    cellView.lookupCellPosition = function () {
      var cells = this.model.column.cells;
      var cell = this.model;
      
      return {
        row: _.indexOf(cells, cell) + 1, //because there is a header above it
        column: this.model.column.index
      };
    };
     
    cellView.onValueChange = function () {
      var value = this.model.value;
      this.$().toggleClass('empty', !value);

      if (!this.$mathquill || this.__renderedValue === value) return;
      this.__renderedValue = value;
      
      // disabled mathquill can only have simple numerical values. Just
      // set the text. Ideally .mathquill('latex', ...) would work for
      // non-editable mathquill, but it doesn't. So we can hack this
      // together by simply setting the inner contents directly.
      if (this.__renderedDisabled) {
        this.$mathquill.text(value);
      }
      
      else {
        this.$mathquill.mathquill('latex', value);
      }
    };
    
    cellView.onDisabledChange = function () {
      var disabled = !!this.model.column.disabled;
      if (!this.$mathquill || this.__renderedDisabled === disabled) return;
      this.__renderedDisabled = disabled;
      
      this.$().toggleClass('non-editable', !!disabled);
      
      // revert mathquill to not editable
      if (disabled) {
        // Ideally we'd use .mathquill('revert') but that doesn't do what
        // you'd expect. It completely gets rid of mathquill. It doesn't turn
        // an editable mathquill back to non-editable. So, we destroy the
        // mathquill and replace it with an non-editable one.
        var $newMathquill = $('<span class="mathquill-rendered-math">'+ this.model.value +'</span>');
        this.$mathquill.replaceWith($newMathquill);
        this.$mathquill = $newMathquill;
      }
      
      // make mathquill editable
      else {
        
        // TODO - The empty underline is the wrong size if we make
        // mathquill editable in the same code loop as when the td
        // is added to the dom. Not sure how to fix that.
        this.$mathquill.mathquill('editable');
      }
    };
        
    cellView.onErrorChange = function () {
      var error = this.model.error ? this.model.error : '';

      if (!this.$error || this.__renderedError === error) return;
      this.__renderedError = error;
      
      this.$error.attr('tooltip', error);
      this.$error.css('display', error ? '' : 'none');
    };
  });

  var RightCellView = P(BaseCellView, function (cellView, _super) {
    cellView.template = templates.table_cell_bodyright;
  });
  
  var BottomCellView = P(BaseCellView, function (cellView, _super) {
    cellView.template = templates.table_cell_bottom;
    
    cellView.init = function (model, tableView) {
      _super.init.call(this, model, tableView);
      
      this.model.column.observe('disabled.cellview', this.onDisabledChange.bind(this));
    };
    
    cellView.destruct = function () {
      this.model.column.unobserve('.cellview');
    };

    cellView.didInsertElement = function () {
      this.$mathquill = this.$('.mathquill-rendered-math');
    
      this.onDisabledChange();
    
      var self = this;
      this.$().on('blur focusout', '.mathquill-rendered-math', function () {
        self.$mathquill.mathquill('clearSelection');
      });

      this.$().on('render', '.mathquill-rendered-math', function () {
        var latex = $(this).mathquill('latex');
        if (latex === '') return;
        
        // add a row
        $(this).mathquill('latex', '');
        var position = self.lookupCellPosition();
        
        var table = self.model.column.table;
        
        var rowValues = [];
        for (var i=0; i < table.columns.length; i++) {
          rowValues[i] = '';
        }
        
        rowValues[position.column] = latex;
        table.insertRow(position.row-1, rowValues);
        self.tableView.selectCell(position.row, position.column, true);
      });
    };
  });
  
  var CellView = P(BaseCellView, function (cellView, _super) {
    var nextCellviewId = 0;

    cellView.template = templates.table_cell_body;
    cellView.init = function (model, tableView) {
      _super.init.call(this, model, tableView, nextCellviewId);

      this.cellviewId = nextCellviewId++;

      this.model.observe('value.cellview', this.onValueChange.bind(this));
      this.model.observe('error.cellview', this.onErrorChange.bind(this));
      this.model.column.observe('disabled.cellview' + this.cellviewId, this.onDisabledChange.bind(this));
    };
    
    cellView.destruct = function () {
      this.model.unobserve('.cellview');
      this.model.column.unobserve('disabled.cellview' + this.cellviewId);
    };
    
    cellView.didInsertElement = function () {
      this.$error = this.$('.error-indicator');
      this.$mathquill = this.$('.mathquill-rendered-math');

      this.onDisabledChange();
      this.onValueChange();
      this.onErrorChange();
            
      // TODO - move these mathquill handlers up to the table view instead of
      // assigning them on each table cell individually
      var self = this;
      this.$().on('blur focusout', '.mathquill-rendered-math', function () {
        self.$mathquill.mathquill('clearSelection');
      });

      this.$().on('render', '.mathquill-rendered-math', function () {
        var oldValue = self.model.value;
        var newValue = $(this).mathquill('latex');
        if (oldValue === newValue) return;
        self.__renderedValue = newValue;
        
        var id = self.model.column.table.id;
        var position = self.lookupCellPosition();
        var list = self.tableView.listView.model; //TODO ick
        function getCell () {
          var table = list.getItemById(id);
          var column = table.columns[position.column];
          return column.cells[position.row-1];
        }
        
        UndoRedo.addTransaction({
          type: UndoRedo.CAUSE_OF_CHANGE,
          undo: function () {
            var cell = getCell();
            cell.setProperty('value', oldValue);
            cell.column.table.requestParse();
          },
          redo: function () {
            var cell = getCell();
            cell.setProperty('value', newValue);
            cell.column.table.requestParse();
          }
        });
        
      });
    };
  });

  return TableView;
});

define('template!folder', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='';
if (renderShell) { 
;__p+='\n\n<div class="do-not-blur expressionitem expressionfolder shell">\n  <div class="shell"></div>\n</div>\n\n';
 } else { 
;__p+='\n\n<div class="do-not-blur expressionfolder expressionitem">\n  <div class="fade-container">\n\n    <span class="main">\n      <i class="icon-caret-right action-toggle-folder-collapsed" ></i>\n      <i class="icon-caret-down action-toggle-folder-collapsed" ></i>\n      <i class="icon-folder action-toggle-folder-hidden" ></i>\n      <input type="text" class="do-blur title" placeholder="untitled folder..." />\n    </span>\n    <i class="icon-remove top-level-delete action-delete" handleEvent="true"></i>\n\n  </div>\n\n  <span class="tab action-drag" handleEvent="true">\n    <span class="num variable-index"></span>\n    <div class="tab-interior"></div>\n  </span>\n\n  <span class="exp-actions">\n    <i class="icon-remove tooltip action-delete" tooltip="remove" handleEvent="true"></i>\n  </span>\n\n</div>\n\n';
 } 
;__p+='\n';
}
return __p;
};});
define('expressions/folder_view',['require','pjs','jquery','lib/keys','expressions/abstractitem_view','template!folder'],function (require) {
  var P = require('pjs');
  var $ = require('jquery');
  var Keys = require('lib/keys');
  var AbstractItemView = require('expressions/abstractitem_view');
  var template = require('template!folder');

  var FolderView = P(AbstractItemView, function(view, _super) {
    view.template = template;

    view.init = function (model, listView) {
      _super.init.call(this, model, listView);
      this.model = model;
      model.observe('hidden', this.onHiddenChanged.bind(this));
      model.observe('collapsed', this.onCollapsedChanged.bind(this));
      model.observe('text', this.renderTitle.bind(this));
    };

    view.didCreateElement = function () {
      this.$title = this.$('.title');
      this.$('.action-toggle-folder-collapsed').on(
        'tap',
        this.toggleCollapsed.bind(this)
      );
      this.$('.action-toggle-folder-hidden').on(
        'tap',
        this.toggleHidden.bind(this)
      );
      this.$title.bind('keydown keypress keyup change cut paste', this.onTitleEvent.bind(this));
      this.renderTitle();
      this.onCollapsedChanged();
      this.onHiddenChanged();
    };

    view.onTitleEvent = function (evt) {
      var ta = this.$title[0];
      var ta_is_active = ta && ta === document.activeElement;
      var ta_len = ta_is_active ? ta.value.length : 0;
      var key = ta_is_active && evt.type === 'keydown' ?
        Keys.lookup(evt) : ''
      ;

      // pressing enter inside textarea creates a new expression underneath
      if (key === Keys.ENTER) {

        evt.preventDefault();
        this.triggerEnterPressed();
        return;

      // pressing escape removes focus
      } else if (key === Keys.ESCAPE) {
        $(document.activeElement).blur();
        return;

      // pressing up while at start of textarea selects expression above
      } else if (key === Keys.UP) {

        if (ta.selectionStart === 0 && ta.selectionEnd === 0) {
          evt.preventDefault();
          this.triggerUpPressed();
        }
        return;

      // pressing down while at end of textarea selects expression below
      } else if (key === Keys.DOWN) {

        if (ta.selectionStart === ta_len && ta.selectionEnd === ta_len) {
          evt.preventDefault();
          this.triggerDownPressed();
        }
        return;

      // pressing backspace when completely empty should delete textarea
      } else if (key === Keys.BACKSPACE) {

        if (ta_len === 0) {
          evt.preventDefault();
          this.triggerBackspacePressed();
        }
        return;

      // pressing delete when completely empty should delete textarea
      } else if (key === Keys.DELETE) {

        if (ta_len === 0) {
          evt.preventDefault();
          this.triggerDelPressed();
        }
        return;

      }

      // if we made it down here, then we should update the stored text value
      this.model.setProperty('title', ta.value);
    };

    view.renderTitle = function () {
      this.$title.attr('value', this.model.title);
    };

    view.onMouseSelect = function(evt) {
      if (evt.wasHandled()) return;
      evt.handle();

      this.model.setProperty('selected', true);
    };

    view.toggleHidden = function () {
      this.model.setProperty('hidden', !this.model.hidden);
    };

    view.toggleCollapsed = function () {
      this.model.setProperty('collapsed', !this.model.collapsed);
    };

    view.onHiddenChanged = function () {
      this.$().toggleClass('hidden', !!this.model.hidden);
    };

    view.onCollapsedChanged = function () {
      this.$().toggleClass('collapsed', !!this.model.collapsed);
    };
  });

  return FolderView;
});

define('template!list', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="exppanel-outer">\n  <div id="expression-top-bar">\n  \n    ';
 if (IS_TABLET) { 
;__p+='\n      <a class=\'hamburger-btn action-hamburger\'><i class=\'icon-hamburger\'></i></a>\n    ';
 } 
;__p+='\n    <a class=\'add-expression-btn action-add-expression tooltip do-not-blur\' handleEvent="true" tooltip="Add Item"><i class=\'icon-plus\'></i><i class=\'icon-caret-down\'></i></a>\n    \n    <a class=\'btn-danger action-clearall\'>delete all</a>\n    <span class=\'center-aligned\'>\n      <a class=\'action-undo tooltip\' tooltip="Undo (ctrl+z)"><i class=\'icon-undo\'></i></a>\n      <a class=\'action-redo tooltip\' tooltip="Redo (ctrl+y)"><i class=\'icon-redo\'></i></a>\n    </span>    \n\n    <a class=\'resize-list-btn action-hideexpressions do-not-blur tooltip\' tooltip="Hide List" handleEvent="true"><i class=\'icon-hide\'></i></a>\n    \n    <a \n      class=\'edit-list-btn action-toggleeditlistmode do-not-blur tooltip\' tooltip="Edit List"\n      handleEvent="true">\n      <i class=\'icon-settings\' /></a>\n  \n  </div>\n  \n  <div class="exppanel-container">\n    <div id="exppanel">\n      <div class="expressionlist">\n        <span class="template-expressioneach"></span>\n        <div class="template-newexpression"></div>\n      </div>\n    </div>    \n  </div>\n  \n  <div id=\'show-expressions-tab\'>\n    <a class=\'resize-list-btn action-showexpressions\'>\n      <i class=\'icon-show\'></i>\n    </a>\n  </div>\n</div>\n';
}
return __p;
};});
define('expressions/list_view_desktop',['require','pjs','./list_view','tipsy','./expression_view','./text_view','./table_view','./folder_view','lib/keys','template!list'],function (require) {
  var P = require('pjs');
  var ListView = require('./list_view');
  require('tipsy');

  var ExpressionView = require('./expression_view');
  var TextView = require('./text_view');
  var TableView = require('./table_view');
  var FolderView = require('./folder_view');
  var Keys = require('lib/keys');

  var template = require('template!list');

  var ListViewDesktop = P(ListView, function (view, _super) {
    view.template = template;
    
    view.instantiateItemView = function (item) {
      if (item.isExpression) {
        return ExpressionView(item, this);
      } else if (item.isText) {
        return TextView(item, this);
      } else if (item.isTable) {
        return TableView(item, this);
      } else if (item.isFolder) {
        return FolderView(item, this);
      }
    };
        
    view.didInsertElement = function () {
      _super.didInsertElement.call(this);

      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        delegate: '.tooltip'
      });
    };

    view.handleKeydown = function (evt) {
      // We only want to catch this when the user isn't 'doing anything'
      // e.g. in a field or such.
      if (evt.target.localName === 'body' && Keys.lookup(evt) === Keys.SPACEBAR) {
        this.toggleAllSliders();
      }
    };

  });
  
  return ListViewDesktop;
});

define('main/parse_json_errors',['require','jquery'],function(require){
  var $ = require('jquery');
  var parseJSONErrors = function(jqXHR) {
    try {
      return $.parseJSON(jqXHR.responseText).errors;
    } catch(err) {
      return [{message: 'Internal Server Error.'}];
    }
  };
  return parseJSONErrors;
});
// Shim HTML5 placeholder element.
//
// https://github.com/parndt/jquery-html5-placeholder-shim

(function($) {
  // @todo Document this.
  $.extend($,{ placeholder: {
      browser_supported: function() {
        return this._supported !== undefined ?
          this._supported :
          ( this._supported = !!('placeholder' in $('<input type="text">')[0]) );
      },
      shim: function(opts) {
        var config = {
          color: '#888',
          cls: 'placeholder',
          selector: 'input[placeholder], textarea[placeholder]'
        };
        $.extend(config,opts);
        if (!this.browser_supported()) {
          $(config.selector)._placeholder_shim(config);
        }
      }
  }});

  $.extend($.fn,{
    _placeholder_shim: function(config) {
      function calcPositionCss(target)
      {
        var op = $(target).offsetParent().offset();
        var ot = $(target).offset();

        return {
          top: ot.top - op.top,
          left: ot.left - op.left,
          width: $(target).width()
        };
      }
      return this.each(function() {
        var $this = $(this);
        
        if( $this.data('placeholder') ) {
          var $ol = $this.data('placeholder');
          $ol.css(calcPositionCss($this));
          return true;
        }

        var possible_line_height = {};
        if( !$this.is('textarea') && $this.css('height') != 'auto') {
          possible_line_height = { lineHeight: $this.css('height'), whiteSpace: 'nowrap' };
        }

        var ol = $('<label />')
          .text($this.attr('placeholder'))
          .addClass(config.cls)
          .css($.extend({
            position:'absolute',
            display: 'inline',
            float:'none',
            overflow:'hidden',
            textAlign: 'left',
            color: config.color,
            cursor: 'text',
            paddingTop: $this.css('padding-top'),
            paddingLeft: $this.css('padding-left'),
            paddingRight: $this.css('padding-right'),
            paddingBottom: $this.css('padding-bottom'),
            fontSize: $this.css('font-size'),
            fontFamily: $this.css('font-family'),
            fontStyle: $this.css('font-style'),
            fontWeight: $this.css('font-weight'),
            textTransform: $this.css('text-transform'),
            backgroundColor: 'transparent',
            zIndex: 99
          }, possible_line_height))
          .css(calcPositionCss(this))
          .attr('for', this.id)
          .data('target',$this)
          .click(function(){
            $(this).data('target').focus();
          })
          .insertBefore(this);
        $this
          .data('placeholder',ol)
          .focus(function(){
            ol.hide();
          }).blur(function() {
            ol[$this.val().length ? 'hide' : 'show']();
          }).triggerHandler('blur');
        $(window)
          .resize(function() {
            var $target = ol.data('target');
            ol.css(calcPositionCss($target));
          });
      });
    }
  });
})(jQuery);

jQuery(document).add(window).bind('ready load', function() {
  if (jQuery.placeholder) {
    jQuery.placeholder.shim();
  }
});
define("vendor/jquery.html5-placeholder-shim", function(){});


define('template!unsupported_browser', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="unsupported-browser" class="modal_section"><div style=\'color:black; font-size:150%;\'>Small Screen Warning!</div><div style=\'padding:20px 0px; color:#666\'>This app works best on a tablet or a computer, but you can try it on your phone anyhow.<div style="text-align: center; margin-top: 25px; margin-bottom:-16px"><a class=\'btn action-hide do-not-blur\'>Try it!</a></div></div></div>';
}
return __p;
};});
define('template!login_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="login-dialog" class="modal_section">\n  <h1>\n    Sign In\n  </h1>\n  \n  <div class=\'bg-line\'>\n    <span>Sign in</span>\n  </div>\n  \n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n  \n  <form class="graph-login action-submit">\n    <div class="form_content_interior">\n      <label for="email">\n        <span>Email:</span>\n        <input type="email"\n          name="email"\n          class="input"\n          autofocus="autofocus"\n          required="required"\n          id="top_email"\n        />\n      </label>\n  \n      <label>\n        <span>Password:</span>\n        <input type="password"\n          name="password"\n          class="input"\n          required="required"\n          id="top_password"\n        />\n      </label>\n  \n      <span style="float: left; margin-top: 10px; margin-bottom: 10px">\n        <a href="#" class="action-recoverpassword">Forgot your password?</a>\n        <div style=\'height:10px\'></div>\n        <a href="#" class="action-createaccount">Don\'t have an account?</a>\n      </span>\n  \n      <div style="float:right; margin-right: 30px">\n        ';
 if (spinning) { 
;__p+='\n          <div class="progress_indicator progress"></div>\n        ';
 } else { 
;__p+='\n          <button type="submit" class="btn-green">Sign In!</button> \n        ';
 } 
;__p+='\n      </div>\n  \n    </div>\n  </form>\n</div>\n';
}
return __p;
};});
define('template!create_account_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="create-account-dialog" class="modal_section ';
 if (saveNext) { 
;__p+=' save-first';
 } 
;__p+='">\n  <h1>\n    Create an account ';
 if (saveNext) { 
;__p+=' to save your work! ';
 } 
;__p+='\n  </h1>\n  ';
 if (saveNext) { 
;__p+='\n    <h4 style="margin-bottom: 30px">Already have an account? <span class="action-login-then-save">Sign in</span></h4>\n  ';
 } 
;__p+='<div class=\'bg-line\'>\n    <span>enter registration data</span>\n  </div>\n  \n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n  \n  <form class="action-submit">\n    <label>\n      <span>Name:</span>\n      <input type="text"\n        name="name"\n        class="input"\n        required="required"\n        autofocus="autofocus"\n      />\n    </label>\n  \n    <div class="description">\n      This is the name we\'ll use if we feature one of your graphs\n    </div>\n  \n    <label>\n      <span>Email:</span>\n      <input type="email"\n        name="email"\n        class="input"\n        required="required"\n      />\n    </label>\n  \n    <div class="description">\n      We&rsquo;ll never share or sell your email address!\n    </div>\n  \n    <label>\n      <span>Password:</span>\n      <input type="password"\n        class="input"\n        name="password"\n        required="required"\n      />\n    </label>\n  \n    <span style="float: left; margin-top: 10px; margin-bottom: 10px">\n      <a href="#" class="action-login">Already have an account?</a>\n    </span>\n  \n    ';
 if (spinning) { 
;__p+='\n      <div class="progress_indicator progress"></div>\n    ';
 } else { 
;__p+='\n      <button type="submit" class="btn-green" style="float:right; margin-right: 30px">Create Account!</button>\n    ';
 } 
;__p+='\n      \n  </form>\n  <div class=\'notice\' style="margin-top: 30px">\n    <b>Note:</b> by clicking "Create Account," you acknowledge that you\'ve read and accept our <a href=\'terms.html\' target=\'_blank\'>Terms of Use</a>\n  </div>\n';
}
return __p;
};});
define('template!edit_account_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="edit-account-dialog" class="modal_section">\n  \n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n  \n  <form class="action-submit">\n    ';
 if (user) { 
;__p+='\n      <h1>Edit Your Account</h1>\n      <label>\n        <span>Your Name:</span>\n        <input type="text"\n          name="name"\n          class="input"\n          id="edit_name"\n          autofocus="autofocus"\n          required="required"\n          value="'+
( user.name )+
'"\n        />\n      </label>\n      ';
__p+='\n        <h1>Update password</h1>\n        <div id="update-password-fields">\n          <label>\n            <span>Current&nbsp;Password:</span>\n            <input type="password"\n              name="old_pass"\n              class="input"\n            />\n          </label>\n  \n          <label>\n            <span>New&nbsp;Password:</span>\n            <input type="password"\n              name="new_pass"\n              class="input"\n            />\n          </label>\n  \n          <label>\n            <span>Repeat&nbsp;Password:</span>\n            <input type="password"\n              name="repeat_new_pass"\n              class="input"\n            />\n          </label>\n        </div>\n      ';
__p+='\n      <br />\n      \n      ';
 if (spinning) { 
;__p+='\n        <div class="progress_indicator progress"></div>\n      ';
 } else { 
;__p+='\n        <button type="submit" class=\'btn-green\' id=\'save_graph_btn\' style="float:right; margin-right: 45px">Update Account</button>\n      ';
 } 
;__p+='\n    ';
 } 
;__p+='\n  </form>\n</div>';
}
return __p;
};});

define('template!save_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="save-dialog" class="modal_section">\n    <h1>\n      Save This Graph!\n    </h1>\n\n    <label class=\'input-label\'>\n      <div class=\'graph-title-title\'>Title: &nbsp; </div>\n      <input class="title-input"\n             name="title"\n             placeholder="[Untitled Graph]"\n             value="'+
( title )+
'"\n      >\n    </label>\n    \n\n\n\n    ';
__p+='\n    <br><br>\n\n    <div>\n    ';
 if (title) { 
;__p+='\n\n      <button type="submit" class="btn-green pull-right action-save-as">Save a New Copy</button>\n      <button type="submit" class="btn-gray pull-right action-rename">Rename Graph</button>\n\n\n    ';
 } else { 
;__p+='\n\n    <button type="submit" class="btn-green pull-right action-save-as">Save Graph!</button>\n\n    ';
 } 
;__p+='\n    </div>\n</div>';
}
return __p;
};});
define('template!recover_password_dialog', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="recover-password-dialog" class="modal_section">\n  <h1>Recover your password</h1>\n  \n  ';
 _.each(errors, function(error) { 
;__p+='\n  <div class="errors">\n      <span>'+
( error.message )+
'</span>\n  </div>\n  ';
 }) 
;__p+='\n  \n  ';
 if (sentMessage) { 
;__p+='\n    <p>Message sent. Please check your email for a password recovery link. (didn\'t work? <a href=\'#\' class="action-tryagain">try again</a>)</p>\n  ';
 } else { 
;__p+='\n  \n    <form class="action-submit">\n      <p>Please enter your email address. We will send a password recovery link to you.</p>\n  \n      <label>\n        <span>Email:</span>\n        <input type="email"\n        name="email"\n        class="input"\n        id="recover_email"\n        required="required"\n        autofocus="autofocus"\n        />\n      </label>\n      \n      <br />\n      \n      ';
 if (spinning) { 
;__p+='\n        <div class="progress_indicator progress"></div>\n      ';
 } else { 
;__p+='\n        <button type="submit" class="btn-green" style="float: right; margin-right: 30px">Recover</button>\n      ';
 } 
;__p+='\n      \n    </form>\n    <br />\n  ';
 } 
;__p+='\n  <p>Remembered your password? <a href="#" class="action-login">Sign In!</a></p>\n</div>';
}
return __p;
};});
define('main/modals_controller',['require','jquery','pjs','lib/underscore_view','main/parse_json_errors','lib/keys','vendor/jquery.html5-placeholder-shim','template!unsupported_browser','template!login_dialog','template!create_account_dialog','template!edit_account_dialog','template!save_dialog','template!recover_password_dialog'],function (require) {
  var $ = require('jquery');
  var P = require('pjs');
  var UnderscoreView = require('lib/underscore_view');
  var parseJSONErrors = require('main/parse_json_errors');
  var Keys = require('lib/keys');

  require('vendor/jquery.html5-placeholder-shim');

  var templates = {};
  templates.unsupported_browser = require('template!unsupported_browser');
  templates.login_dialog = require('template!login_dialog');
  templates.create_account_dialog = require('template!create_account_dialog');
  templates.edit_account_dialog = require('template!edit_account_dialog');
  templates.save_dialog = require('template!save_dialog');
  templates.recover_password_dialog = require('template!recover_password_dialog');

var ModalsController = P(function (c) {
  
  c.init = function (userController, graphsController) {
    this.modals = {
      unsupportedBrowserDialog: UnsupportedBrowserDialog(
        userController,
        graphsController,
        this
      ),
      loginDialog: LoginDialog(
        userController,
        graphsController,
        this
      ),
      createAccountDialog: CreateAccountDialog(
        userController,
        graphsController,
        this
      ),
      editAccountDialog: EditAccountDialog(
        userController,
        graphsController,
        this
      ),
      saveDialog: SaveDialog(
        userController,
        graphsController,
        this
      ),
      recoverPasswordDialog: RecoverPasswordDialog(
        userController,
        graphsController,
        this
      )
    };
  };
  
  c.ready = function () {
    this.modalElement = $('#state-modals');
    this.modalBackground = $('#modal_background');
    this.modalElement
      .find('.close-modal')
      .add(this.modalBackground)
      .on('tap', this.hide.bind(this))
    ;
  };
  
  c.hide = function (el) {
    try{
      //only blur if we're disappearing the focused element
      //one relevant example: feels weird to have the active mathquill blur
      //when we dismiss the "unsupported browser" modal.
      //
      //I think this is here just so that we don't end up in a weird
      //state on iPad where a focused textbox in a modal becomes hidden, but retains focus
      if ($(document.activeElement).closest(this.modalElement).length > 0) $(document.activeElement).blur();
    } catch (e){}
    
    $("input[type='password']").attr("value", "");
    //this gets called right at the beginning (complete login) before modalBackground exists
    if (this.modalBackground) {
      this.modalBackground.hide();
      this.modalElement.hide();
      
    }
    $(el).off('keydown');
  };

  c.show = function (el) {
    $(el).siblings('.modal_section').hide();
    $(el).show();
    this.modalBackground.show();
    this.modalElement.show();
    $(el).on('keydown', this.handleKeydown.bind(this));
  };
  c.handleKeydown = function (evt) {
    if (Keys.lookup(evt) === Keys.ESCAPE) {
      this.hide($(evt.currentTarget));
    }
  };
  c.$ = function () {
    return this.modalElement;
  };
  
});

var ModalDialogView = P(UnderscoreView, function (view, _super) {

  view.init = function (userController, graphsController, modalsController) {
    _super.init.call(this);
    this.errors = [];
    this.spinning = false;
    this.saved_inputs = {};
    this.initialized = false;
    this.userController = userController;
    this.graphsController = graphsController;
    this.modalsController = modalsController;
  };

  view.getTemplateParams = function () {
    return {
      errors: this.errors,
      spinning: this.spinning
    };
  };
  
  view.show = function() {
    if(!this.initialized){
      this.appendTo(this.modalsController.$());
      this.initialized = true;
    }
    this.errors = [];
    this.rerender();
    this.modalsController.show(this.$());
    // Focus first visible input
    this.$('input:visible, textarea:visible').first().focus();
    // Update position of placeholder shims.
    if ($.placeholder) $.placeholder.shim();
  };
  
  view.beforeRerender = function () {
    // save what the display value was for the .modal_section
    this.__$display = this.$().css('display');
    
    // save input values
    var self = this;
    this.$('input,textarea').each(function(){
      var name = $(this).attr('name');
      var value = $(this).val();
      
      self.saved_inputs[name] = value;
    });
  };
  
  view.afterRerender = function () {
    // must restore this if we want the modal to display. They are display:none
    // by default and that's how it'll get rerendered.
    this.$().css('display', this.__$display);
    
    // restore input values
    for (var name in this.saved_inputs) {
      this.$('[name="'+name+'"]').val(this.saved_inputs[name]);
    }
  };
  
  view.hide = function() {
    this.modalsController.hide();
  };
  
  view.processJSONErrors = function(jqXHR) {
    this.errors = parseJSONErrors(jqXHR);
  };
  
  view.startProcessingForm = function() {
    this.spinning = true;
    this.errors = [];
    this.rerender();
  };
  
  view.stopProcessingForm = function() {
    this.spinning = false;
    this.rerender();
  };
  
  view.successAnimation = function () {
    $('.success-thumb').remove();
    var img = $('<img src="ok.png" class="success-thumb btn" width="48px" height="48px" />');
    $('#main').append(img);
    setTimeout(function() {
      $('.success-thumb').fadeOut("slow");
    }, 500);
  };
});

/*
* here are the actual modal states
*/
var UnsupportedBrowserDialog = P(ModalDialogView, function(view){
  view.template = templates.unsupported_browser;
  view.didCreateElement = function() {
    this.$('.action-hide').on('tap', this.hide.bind(this));
  };
});


var LoginDialog = P(ModalDialogView, function(view) {
  view.template = templates.login_dialog;

  view.didCreateElement = function () {
    this.$('.action-submit').on('submit', this.graphLogin.bind(this));
    this.$('.action-recoverpassword').on('tap', this.recoverPassword.bind(this));
    this.$('.action-createaccount').on('tap', this.createAccount.bind(this));
  };

  view.graphLogin = function(evt) {
    //don't submit the form
    evt.preventDefault();
    var formData = $(evt.target).serialize();

    var modalsController = this.modalsController;
    this.startProcessingForm();
    this.userController.graphLogin(formData).then(
      modalsController.hide.bind(modalsController),
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };
  
  view.recoverPassword = function(evt) {
    evt.preventDefault();
    this.modalsController.modals.recoverPasswordDialog.show();
  };
  
  view.createAccount = function(evt) {
    evt.preventDefault();
    this.modalsController.modals.createAccountDialog.show();
  };
  
});

var CreateAccountDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.create_account_dialog;

  view.didCreateElement = function () {
    this.$('.action-submit').on('submit', this.submitCreateAccount.bind(this));
    this.$('.action-login').on('tap', this.login.bind(this));
    this.$('.action-login-then-save').on('tap', this.login.bind(this));
  };

  view.login = function() {
    this.modalsController.modals.loginDialog.show();
  };
  
  view.show = function () {
    this.saveNext = false;
    _super.show.call(this);
  };

  view.showThenSave = function () {
    this.saveNext = true;
    _super.show.call(this);
  };

  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);
    params.saveNext = this.saveNext;
    return params;
  };
  
  view.submitCreateAccount = function(evt) {
    evt.preventDefault();

    var formData = $(evt.target).serialize();

    this.startProcessingForm();
    var modalsController = this.modalsController;
    this.userController.createAccount(formData).then(
      modalsController.hide.bind(modalsController),
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };
  
});

var EditAccountDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.edit_account_dialog;
  
  view.didCreateElement = function () {
    this.$('.action-submit').on('submit', this.submitEdit.bind(this));
  };
  
  // whenever this becomes visible, reset the name to the current user
  view.show = function () {
    _super.show.call(this);
    var params = this.getTemplateParams();
    if (params.user) {
      this.$('input[name=name]').val(params.user.name);
    }
  };

  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);
        params.user = null;
        
    var user = this.userController.currentUser;
    if (user) {
      params.user = {
        name: user.name
      };
    }
    
    return params;
  };

  view.submitEdit = function(evt) {
    evt.preventDefault();

    var self = this;
    var formData = $(evt.target).serialize();

    this.startProcessingForm();
    this.userController.editAccount(formData).then(
      function () { self.hide(); self.successAnimation(); },
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };
  
});

var SaveDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.save_dialog,

  view.didCreateElement = function () {
    this.$('.action-save-as').on('tap', this.saveAs.bind(this));
    this.$('.action-save').on('tap', this.save.bind(this));
    this.$('.action-rename').on('tap', this.rename.bind(this));
    var self = this;
    
    this.$('.title-input').on('keypress', function (evt) {
      if (evt.which === 13) {
        evt.preventDefault();
        self.saveAs();
      }
    });

  };
  
  // whenever this becomes visible reset title to current graph's title
  view.show = function () {
    _super.show.call(this);
    var params = this.getTemplateParams();
    this.$('input[name=title]').val(params.title).focus();
    this.baseName = params.title;
  };
  
  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);
        params.user = null;
        params.title = '';
    var user = this.userController.currentUser;
    if (user) {
      params.user = {
        name: user.name
      };
    }
    
    var graph = this.graphsController.currentGraph;
    if (graph && graph.title) {
      params.title = graph.title;
    }
    
    return params;
  };

  view.save = function () {
    //console.log("save");

    var graph = this.graphsController.currentGraph.copy();
    graph.title = this.$('input[name=title]').val();
    
    this.hide();
    this.graphsController.save(graph);
  };

  view.saveAs = function () {
    //console.log("save As");
    
    var graph = this.graphsController.currentGraph.copy();
    graph.title = this.$('input[name=title]').val();
    
    this.hide();
    this.graphsController.saveAs(graph);
  };

  view.rename = function () {
    //console.log("save As");
    
    var graph = this.graphsController.currentGraph.copy();
    graph.title = this.$('input[name=title]').val();
    
    this.hide();
    this.graphsController.rename(graph);
  };
});


var RecoverPasswordDialog = P(ModalDialogView, function (view, _super) {
  view.template = templates.recover_password_dialog;

  view.getTemplateParams = function () {
    var params = _super.getTemplateParams.call(this);
    params.sentMessage = this.sentMessage;
    return params;
  };

  // will get called multiple times so only do dom instantiation
  view.didCreateElement = function () {
    this.$('.action-submit').on('submit', this.submitRecover.bind(this));
    this.$('.action-tryagain').on('tap', this.resetAgain.bind(this));
    this.$('.action-login').on('tap', this.login.bind(this));
  };
  
  view.submitRecover = function(evt) {
    evt.preventDefault();
    var self = this;
    var formData = $(evt.target).serialize();
    this.startProcessingForm();
    this.userController.recoverPassword(formData).then(
      function () { self.sentMessage = true; },
      this.processJSONErrors.bind(this)
    ).always(this.stopProcessingForm.bind(this));
  };

  view.resetAgain = function() {
    this.sentMessage = false;
    this.rerender();
  };

  view.login = function() {
    this.modalsController.modals.loginDialog.show();
  };
});

return ModalsController;
});



// Do things this way to avoid script injection, and to have the LOAD_DATA
// var available to all our other javascript written out below. Using
// jQuery, which lives in vendor (above).
define('main/load_data',['require','jquery'],function(require){
  var $ = require('jquery');
  //var load_data = $('body').data('load-data');
  //return load_data;
  var load_data={};
  if (typeof(localStorage.user)!='undefined')
    {
	load_data.graph=null;
	load_data.user=JSON.parse(localStorage.user);
	}
  else
    {
	load_data.graph=null;
	load_data.user=null;
	}
	
  /*if (typeof(localStorage.graph)!='undefined')
    {
	load_data.graph=JSON.parse(localStorage.graph);
	}
  else
    {
	load_data.graph=null;
	}*/
  
  return load_data;
});

define('main/initialize_controllers',['require','main/load_data','main/graph'],function(require){
  var LOAD_DATA = require('main/load_data');

  var Graph = require('main/graph');

  // Initialize userController and graphsController based on load data, i.e.
  // fill in currentUser, currentGraph, and initilize the graph hash
  // generator.
  var initializeControllers = function (userController, graphsController) {
    if (LOAD_DATA.user) userController.completeLogin(LOAD_DATA.user, 'load');

    if (LOAD_DATA.graph) {
      graphsController.loadGraph(Graph.fromAjax(LOAD_DATA.graph));
    } else {
      // The graph state either needs to be set or cleared to get the
      // calculator into a consistent state.
      graphsController.clearGraph();
    }
  };

  return initializeControllers;

});



define('loadcss!css/help', function(){});
define('template!help', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="help-container">\n  <div id=\'help-scrollable\' class=\'popover bottom\' popover="true">\n    <div class=\'popover-interior\'>\n      <span class=\'guider_close\'></span>\n  \n    '+"<div class='popover-title'>Variables</div><div class='popover-content resources-content'><div class='hovered'>If you want to add variable type something like a=5. There will be slider with limits. <br/>Click to minimum or to maximum to change the limits and step. <br/><br/></div></div><div class='popover-title'>Expressions</div><div class='popover-content resources-content'><div class='hovered'>Use this: <br/>^ - power, <br/>_ - lower index, <br/>/ - division, <br/>sqrt - square root, <br/>pi - Pi number, <br/>theta - argument for polar coordinates, <br/>d/dx - derivative. <br/><br/></div></div><div class='popover-title'>Tables</div><div class='popover-content resources-content'><div class='hovered'>If you want to create table click \"+\" and \"table\". In the first line you can define variable of expression based on variables that you already have. <br/><br/></div></div><div class='popover-title'>Visibility</div><div class='popover-content resources-content'><div class='hovered'>If you want to show graohics from big distance you may enable projector mode. <br/>To change the color click \"edit\".<br/><br/></div></div><div class='popover-title'>Add Functions</div><div class='popover-content resources-content'><div class='hovered'>To add new function type something like f(x)=2x or h(a,b)=2a+3b<br/><br/></div></div>";
__p+='<div class=\'arrow\'></div>\n  </div>\n</div>\n';
}
return __p;
};});

define('main/help',['require','loadcss!css/help','jquery','underscore','pjs','main/popover_view','main/parse_json_errors','main/calculator_backend','template!help','vendor/jquery.html5-placeholder-shim'],function(require){
  require('loadcss!css/help');
  
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var parseJSONErrors = require('main/parse_json_errors');
  var calculatorBackend = require('main/calculator_backend');
  var template = require('template!help');
  
  require('vendor/jquery.html5-placeholder-shim');

  /*
  * view for the help popover
  */
  
  var HelpView = P(PopoverView, function (view, _super) {
    view.template = template;
    
    view.init = function (userController, graphsController, stateController, modals) {
      _super.init.call(this);
      this.userController = userController;
      this.graphsController = graphsController;
      this.stateController = stateController;
      this.modals = modals;
    };
    
    view.renderIsVisible = function () {
      _super.renderIsVisible.call(this);
      
      if (this.isVisible) {
        if ($.placeholder) $.placeholder.shim();
        this.$('.popover-interior').css("maxHeight", this.subheaderView.popoverHeight() + "px");
      
      // becomes hidden
      } else {
        this.setErrors([]);
        this.closeSuggestion();
      }
    };

    
    view.getTemplateParams = function () {
      return {};
    };
    
    view.eventShouldClosePopover = function (evt) {
      var $target = $(evt.target);
      
      if (this.eventIsWithinPopover(evt)) {
        return false;
      }
      
      return !$target.closest("#state-modals").length &&
             $target.attr("id") != "modal_background";
    };
      
    view.setErrors = function (errors) {
      if (_.isEqual(errors, this.errors)) return;
      this.errors = errors;
      
      var div = this.$('.template-errors');
      div.children().remove();
      for (var i=0; i<errors.length; i++) {
        div.append('<div class="errors">' + errors[i].message + '</div>');
      }
    };

    view.setProcessing = function (processing) {
      if (processing === this.processing) return;
      this.processing = processing;
      
      this.$('.template-processing').toggle(processing);
    };
    
    view.setLoggedIn = function (loggedIn) {
      if (loggedIn === this.loggedIn) return;
      this.loggedIn = loggedIn;
      
      this.$('.template-unlessuser').toggle(!loggedIn);
    };
    
    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      
      this.$('#suggestions textarea').on("focus", function() {
        $(this).animate({"height": "80px"}, 200);
        $('#suggestions-expansion').show();
      });
      
      this.$('.action-closesuggestion').on('tap', this.closeSuggestion.bind(this));

      this.setErrors([]);
      this.setProcessing(false);
      this.setLoggedIn(!!this.userController.currentUser);

      var self = this;
      this.userController.observe('currentUser', function () {
        self.setLoggedIn(!!self.userController.currentUser);
      });
    };
    
    view.closeSuggestion = function() {
      this.$('#suggestions textarea').animate({"height":"33px"}, 200).attr("value", "");
      this.$('#suggestions-expansion').fadeOut(200);
      this.setProcessing(false);
      this.setErrors([]);
    };
    

     
  });

  return HelpView;
});

define('template!settings_desktop', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="settings-container" style="">\n  <div id="settings-scrollable" class="bottom popover" popover="true">\n    <div class="popover-interior">\n      <div class="popover-title">Graph Paper</div>\n      <div class="popover-content graph-paper">\n\n        <div class="btn-group fixed-width-btns action-polargrid">\n          <span class="btn" id="cartesian-grid">\n            Cartesian\n          </span>\n          <span class="btn" id="polar-grid">\n            Polar\n          </span>\n        </div>\n\n        <span id="projector-mode" class="btn-green action-projectormode">\n          <i class="icon-hdd"></i>\n          Projector<br>Mode\n        </span>\n        <label>\n          <input id="show-labels" type="checkbox" />\n          Show Labels\n        </label>\n        <br />\n        <label>\n          <input id="show-grid" type="checkbox" />\n          Show Grid Lines\n        </label>\n        <br />\n        <label>\n          <input id="show-axes" type="checkbox" />\n          Show Axes\n        </label>\n      </div>\n      <div class="popover-title interior-title">\n        Window            \n      </div>\n      <div class="popover-content window-content">\n        <div class="window" id="x-window">\n          <table class="window-range">\n            <tbody>\n              <tr>\n                <td><input id="xmin" type="number" /></td>\n                <td><span>&lt;&nbsp;<b><i>x</i></b>&nbsp;&lt;</span></td>\n                <td><input id="xmax" type="number" /></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div class="window" id="y-window">\n          <table class="window-range">\n            <tbody>\n              <tr>\n                <td><input id="ymin" type="number" /></td>\n                <td><span>&lt;&nbsp;<b><i>y</i></b>&nbsp;&lt;</span></td>\n                <td><input id="ymax" type="number" /></td>\n              </tr>\n            </tbody>\n          </table>\n        </div>\n        <div class="square-axes-button">\n          <button id="square-axes" class="btn-green disabled action-squareaxes">\n            equalize axis scales\n          </button>\n        </div>\n      </div>\n      <div class="popover-title interior-title">Trig Settings</div>\n      <div class="popover-content trig-settings">\n\n        <div class="btn-group fixed-width-btns">\n          <span class="btn active action-radianmode" id="radians">\n            radians\n          </span>\n          <span class="btn action-radianmode" id="degrees">\n            degrees\n          </span>\n        </div>\n\n        <table class="pi-labels">\n          <tbody>\n            <tr>\n              <td>\n                <b><i>x</i></b>-axis labels:\n              </td>\n              <td>\n                <div class="btn-group">\n                  <span id="x-numlabels" class="btn active action-xpilabels">\n                    1, 2, 3\n                  </span>\n                  <span id="x-pilabels" class="btn action-xpilabels">\n                    <font class="pi">π, 2π, 3π</font>\n                  </span>\n                </div>\n              </td>\n            </tr>\n            <tr>\n              <td>\n                <b><i>y</i></b>-axis labels:\n              </td>\n              <td>\n                <div class="btn-group">\n                  <span id="y-numlabels" class="btn active action-ypilabels">\n                    1, 2, 3\n                  </span>\n                  <span id="y-pilabels" class="btn action-ypilabels">\n                    <font class="pi">π, 2π, 3π</font>\n                  </span>\n                </div>\n              </td>\n            </tr>\n          </tbody>\n        </table>\n      </div>\n      <div class="arrow"></div>\n    </div>\n  </div>\n</div>';
}
return __p;
};});
define('main/settings_view',['require','jquery','underscore','pjs','main/popover_view','graphing/viewport'],function(require){
  var $ = require('jquery');
  var _ = require('underscore');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var Viewport = require('graphing/viewport');

  /*
  * view for the settings bar
  */
  var SettingsView = P(PopoverView, function (view, _super){
    view.viewport = new Viewport();
    
    view.init = function (graphController) {
      _super.init.call(this);
      
      this.graphController = graphController;
      this.grapher = graphController.manager;
      this.settings = this.grapher.settings;
    };
    
    view.closeCondition = function (evt) {
      return !$(evt.target).closest(this.openCloseBtn).length && !$(evt.target).closest("#settings-container").length;
    };
    
    view.didCreateElement = function () {
      _super.didCreateElement.call(this);
      
      var self = this;
      
      this.$('.action-squareaxes').on('tap', function (){
        self.settings.setProperty("squareAxes", true);
      });
      this.$('#show-labels').on('change', function () {
        self.settings.setProperty('showLabels', !!$(this).attr('checked'));
      });
      this.$('#show-grid').on('change', function () {
        self.settings.setProperty('showGrid', !!$(this).attr('checked'));
      });
      this.$('.action-polargrid').on('tap', function () {
        self.settings.setProperty('polarMode', !self.settings.getProperty('polarMode'));
      });
      this.$('#show-axes').on('change', function () {
        self.settings.setProperty('showAxes', !!$(this).attr('checked'));
      });
      
      this.$('#xmin, #xmax, #ymin, #ymax')
        .on('keydown keyup keypress', this.onInputKeyPress.bind(this))
        .on('focusout', this.onFocusOut.bind(this))
        .on('focusin', this.onFocusIn.bind(this));
        
      this.updateTextInputs();
    };
    
    view.addSettingsObserver = function (prop, func) {
      var f = func.bind(this);
      this.settings.observe(prop, f);
      f();
    };
    
    view.onInputKeyPress = function (evnt) {
      var xmin = parseFloat(this.$("#xmin").val());
      var xmax = parseFloat(this.$("#xmax").val());
      var ymin = parseFloat(this.$("#ymin").val());
      var ymax = parseFloat(this.$("#ymax").val());
      
      var tempViewport = new Viewport(xmin, xmax, ymin, ymax);
      this.$("#x-window").toggleClass("invalid", !tempViewport.isXValid());
      this.$("#y-window").toggleClass("invalid", !tempViewport.isYValid());
      this.settings.setProperty(
        'squareAxes',
        tempViewport.isSquare(this.grapher.screen)
      );
      this.setViewport(tempViewport);
    };
    
    view.renderProjectorMode = function () {
      var pmode = this.settings.projectorMode;
      this.$('#projector-mode').toggleClass('active', !!pmode);
    };
    
    view.renderXPiLabels = function () {
      var xpi = this.settings.xAxisPiLabels;
      this.$("#x-numlabels").toggleClass('active', !xpi);
      this.$("#x-pilabels").toggleClass('active', !!xpi);
    };
    
    view.renderYPiLabels = function () {
      var ypi = this.settings.yAxisPiLabels;
      this.$("#y-numlabels").toggleClass('active', !ypi);
      this.$("#y-pilabels").toggleClass('active', !!ypi);
    };
    
    view.renderDegreeMode = function () {
      var degrees = this.settings.degreeMode;
      this.$("#radians").toggleClass('active', !degrees);
      this.$("#degrees").toggleClass('active', !!degrees);
    };
    
    view.renderSquareAxes = function () {
      var square = this.settings.squareAxes;
      this.$("#square-axes")
          .toggleClass("disabled", !!square)
          .toggleClass("btn-success", !square);
    };
    
    view.renderShowLabels = function () {
      var checked = this.settings.showLabels;
      var checkbox = this.$('#show-labels');
      if (checked) {
        checkbox.attr('checked','checked');
      } else {
        checkbox.removeAttr('checked');
      }
    };
    
    view.renderShowGrid = function () {
      var checked = this.settings.showGrid;
      var checkbox = this.$('#show-grid');
      if (checked) {
        checkbox.attr('checked','checked');
      } else {
        checkbox.removeAttr('checked');
      }
    };
    
    view.renderPolarMode = function () {
      this.$('#cartesian-grid').toggleClass(
        'active',
        !this.settings.polarMode
      );
      this.$('#polar-grid').toggleClass('active', !!this.settings.polarMode);
      this.$('#x-pilabels, #x-numlabels, #y-pilabels, #y-numlabels').toggleClass(
        'disabled',
        !!this.settings.polarMode
      );
    };
    
    view.renderShowAxes = function () {
      var checked = this.settings.showAxes;
      var checkbox = this.$('#show-axes');
      if (checked) {
        checkbox.attr('checked','checked');
      } else {
        checkbox.removeAttr('checked');
      }
    };
    
    view.updateTextInputs = function() {
      var self = this;
      _.each(['xmin', 'xmax', 'ymin', 'ymax'], function(field) {
        if (parseFloat(self.$('#' + field).val()) !== self.viewport[field]) {
          self.$('#' + field).val(self.viewport[field]);
        }
      });
    };

    view.triggerViewportChanged = function () {};

    view.setViewport = function (newViewport) {
      if (newViewport.equals(this.viewport)) return;
      if (!newViewport.isValid()) return;
      
      this.viewport = newViewport.clone();

      // set lastChangedAxis
      var oldViewport = this.graphController.getViewport();
      if (oldViewport.ymax !== newViewport.ymax || oldViewport.ymin !== newViewport.ymin)
        this.settings.lastChangedAxis = 'y';
      if (oldViewport.xmax !== newViewport.xmax || oldViewport.xmin !== newViewport.xmin)
        this.settings.lastChangedAxis = 'x';
      
      this.updateTextInputs();
      this.graphController.setViewport(newViewport);
      
      this.triggerViewportChanged();
    };

    // FocusIn and FocusOut work together here to make sure the viewport is
    // set to an acceptable range after the viewport inputs are no longer
    // being edited.
    view.onFocusIn = function (evt) {
      clearTimeout(this.stopEditingTimeout);
    };

    view.onFocusOut = function (evt) {
      var self = this;

      this.stopEditingTimeout = setTimeout( function () {
        clearTimeout(self.stopEditingTimeout);
        self.updateTextInputs();
        
        //when we leave, reset the "error" class
        this.$("#x-window").toggleClass("invalid", !self.viewport.isXValid());
        this.$("#y-window").toggleClass("invalid", !self.viewport.isYValid());
      }, 1);
    };
    
  });

  return SettingsView;
});

define('main/settings_view_desktop',['require','pjs','template!settings_desktop','./settings_view'],function(require){
  var P = require('pjs');
  var template = require('template!settings_desktop');
  var SettingsView = require('./settings_view');

  /*
  * view for the settings bar
  */
  var SettingsViewDesktop = P(SettingsView, function (view, _super){
    view.template = template;

    view.didCreateElement = function() {
      _super.didCreateElement.call(this);

      //these feel better on tap on desktop,
      //but on tapstart in the mobile designs

      var self = this;
      this.$('.action-xpilabels').on('tap', function (){
        if (self.settings.polarMode) return;
        
        self.settings.setProperty(
          'xAxisPiLabels',
          !self.settings.xAxisPiLabels
        );
      });
      this.$('.action-ypilabels').on('tap', function (){
        if (self.settings.polarMode) return;
        
        self.settings.setProperty(
          'yAxisPiLabels',
          !self.settings.yAxisPiLabels
        );
      });
      this.$('.action-radianmode').on('tap', function (){
        self.settings.setProperty(
          'degreeMode',
          !self.settings.degreeMode
        );
      });
      this.$('.action-projectormode').on('tap', function (){
        self.settings.setProperty(
          'projectorMode',
          !self.settings.projectorMode
        );
      });

      this.addSettingsObserver('projectorMode', this.renderProjectorMode);
      this.addSettingsObserver('xAxisPiLabels', this.renderXPiLabels);
      this.addSettingsObserver('yAxisPiLabels', this.renderYPiLabels);
      this.addSettingsObserver('degreeMode', this.renderDegreeMode);
      this.addSettingsObserver('squareAxes', this.renderSquareAxes);
      this.addSettingsObserver('showLabels', this.renderShowLabels);
      this.addSettingsObserver('showGrid', this.renderShowGrid);
      this.addSettingsObserver('polarMode', this.renderPolarMode);
      this.addSettingsObserver('showAxes', this.renderShowAxes);
    };

    view.renderIsVisible = function () {
      _super.renderIsVisible.call(this);
      // becomes visible
      if (this.isVisible) {
        this.$('.popover-interior').css("maxHeight", this.subheaderView.popoverHeight() + "px");
      }
    };
  });

  return SettingsViewDesktop;
});

define('template!account_dropdown', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div id="logout_options">\n\t<div class=\'popover bottom\' popover="true">\n\t  <a class="action-editaccount">Edit Account</a>\n\t  <a class="action-logout">Sign Out</a>\t\n\n\t  <div class=\'arrow\'></div>\n\t</div>\n</div>';
}
return __p;
};});
define('main/account_dropdown',['require','loadcss!css/help','jquery','pjs','main/popover_view','template!account_dropdown'],function(require){
  require('loadcss!css/help');
  
  var $ = require('jquery');
  var P = require('pjs');
  var PopoverView = require('main/popover_view');
  var template = require('template!account_dropdown');

  /*
  * view for the account menu
  */
  
  var AccountView = P(PopoverView, function (view, _super) {
    view.template = template;
    
    view.init = function (userController, helpView, modals) {
      _super.init.call(this);

      this.helpView = helpView;
      this.userController = userController;
      this.modals = modals;
    };

    view.editAccount = function () {
      this.modals.editAccountDialog.show();
      this.closePopover();
    };
    
    view.logout = function () {
      this.userController.logout();
      this.closePopover();
    };


    view.eventShouldClosePopover = function (evt) {
      var $target = $(evt.target);
      
      if (this.eventIsWithinPopover(evt)) {
        return false;
      }
      
      return !$target.closest("#state-modals").length &&
             $target.attr("id") != "modal_background";
    };
    
    view.didCreateElement = function () {
      _super.didCreateElement.call(this);

      this.$('.action-logout').on('tap', this.logout.bind(this));
      this.$('.action-editaccount').on('tap', this.editAccount.bind(this));
    };
    
  });

  return AccountView;
});

define('loadcss!css/mygraphs', function(){});
define('text!data/resources_examples.json',[],function () { return '[{\n  "section": "Lines",\n  "examples": [\n    {\n      "title": "Slope Intercept Form",\n      "graphHash": "59qdbtnlzy",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y=mx+b", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"latex": "m=1", "domain": {"max": 10, "min": 0}, "color": "#F79646", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 3}, {"latex": "b=1", "domain": {"max": 10, "min": 0}, "color": "#8064A2", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 2}]}}\n    },\n    {\n      "title": "Point Slope Form",\n      "graphHash": "vphpgabluz",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y-y_1=m\\\\left(x-x_1\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"color": "#8064A2", "latex": "\\\\left(x_1,y_1\\\\right)", "domain": {"max": 10, "min": 0}, "id": 8, "userRequestedGraphing": "default"}, {"latex": "x_1=1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 5}, {"latex": "y_1=1", "domain": {"max": 10, "min": 0}, "color": "#C0504D", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 7}, {"latex": "m=1", "domain": {"max": 10, "min": 0}, "color": "#9BBB59", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 6}]}}\n    },\n    {\n      "title": "Two Point Form",\n      "graphHash": "slkjzmm3ly",\n      "state": {"graph":{"viewport":{"xmin":-7.023,"ymin":-4.187,"xmax":7.024,"ymax":4.186},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y-y_1=m\\\\left(x-x_1\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":12,"latex":"m=\\\\frac{y_2-y_1}{x_2-x_1}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#9BBB59"},{"id":5,"latex":"x_1=-1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":7,"latex":"y_1=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":8,"latex":"\\\\left(x_1,y_1\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"},{"id":9,"latex":"x_2=3","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":10,"latex":"y_2=2","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000","sliderMin":-10,"sliderMax":10},{"id":11,"latex":"\\\\left(x_2,y_2\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"}]}}\n    },\n    {\n      "title": "Intercept Form",\n      "graphHash": "cmz3dawdji",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\frac{y}{a}+\\\\frac{x}{b}=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":14,"latex":"a=2","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2","sliderMin":-10,"sliderMax":10},{"id":13,"latex":"b=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":15,"latex":"\\\\left(0,a\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"},{"id":16,"latex":"\\\\left(b,0\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"}]}}\n    },\n    {\n      "title": "General Form",\n      "graphHash": "4acfppghta",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "ax+by=c", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"latex": "a=1", "domain": {"max": 10, "min": 0}, "color": "#F79646", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 2}, {"latex": "b=1", "domain": {"max": 10, "min": 0}, "color": "#8064A2", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 3}, {"latex": "c=1", "domain": {"max": 10, "min": 0}, "color": "#000000", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 4}]}}\n    },\n    {\n      "title": "Visualizing Slope",\n      "graphHash": "h4kwopbouh",\n      "state": {"graph":{"viewport":{"xmin":-3,"ymin":-10,"xmax":3,"ymax":10},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":false,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\left(1,m\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000"},{"id":509,"latex":"m=1.82","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":487,"latex":"\\\\floor\\\\left(x\\\\right)\\\\cdot m\\\\le y\\\\le mx","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"},{"id":508,"latex":"mx\\\\le y\\\\le\\\\floor\\\\left(x\\\\right)\\\\cdot m","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"}]}}\n    }\n  ]\n},\n{\n  "section": "Parabolas",\n  "examples": [\n    {\n      "title": "Standard Form",\n      "graphHash": "3ltwect0mc",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y=ax^2+bx+c", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"latex": "a=1", "domain": {"max": 10, "min": 0}, "color": "#C0504D", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 19}, {"latex": "b=0", "domain": {"max": 10, "min": 0}, "color": "#9BBB59", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 18}, {"latex": "c=1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 17}]}}\n    },\n    {\n      "title": "Vertex Form",\n      "graphHash": "mey71rif1d",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10, "ymin": -5.537, "ymax": 5.537, "xmax": 10}}, "expressions": {"list": [{"color": "#C0504D", "latex": "y=a\\\\left(x-h\\\\right)^2+k", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "always"}, {"latex": "a=1", "domain": {"max": 10, "min": 0}, "color": "#C0504D", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 25}, {"latex": "h=1", "domain": {"max": 10, "min": 0}, "color": "#9BBB59", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 24}, {"latex": "k=0", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 23}, {"color": "#8064A2", "latex": "\\\\left(h,\\\\space k\\\\right)", "domain": {"max": 10, "min": 0}, "id": 26, "userRequestedGraphing": "default"}]}}\n    },\n    {\n      "title": "Factored Form",\n      "graphHash": "qgxlpjyebd",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.942,"xmax":10,"ymax":5.98},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y=a\\\\left(x-x_1\\\\right)\\\\left(x-x_2\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":22,"latex":"a=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000","sliderMin":-10,"sliderMax":10},{"id":21,"latex":"x_1=-2","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":20,"latex":"x_2=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2","sliderMin":-10,"sliderMax":10},{"id":23,"latex":"\\\\left(x_1,0\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646"},{"id":24,"latex":"\\\\left(x_2,0\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646"}]}}\n    },\n    {\n      "title": "Standard Form with Tangent",\n      "graphHash": "bqr4ko6wi9",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y\\\\ge ax^2+bx+c","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":19,"latex":"a=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D","sliderMin":-10,"sliderMax":10},{"id":18,"latex":"b=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#9BBB59","sliderMin":-10,"sliderMax":10},{"id":17,"latex":"c=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":21,"latex":"y\\\\space=\\\\space bx+c","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"}]}}\n    }\n  ]\n},\n{\n  "section": "Trigonometry",\n  "examples": [\n    {\n      "title": "Period and Amplitude",\n      "graphHash": "pjtapprsyt",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -10.056, "ymin": -7.352, "ymax": 7.352, "xmax": 9.944}}, "expressions": {"list": [{"text": "Sinusoid with amplitude \\"a\\" and period \\"b\\"", "id": 10}, {"color": "#C0504D", "latex": "a\\\\space\\\\cos\\\\left(\\\\frac{2\\\\pi x}{b}\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"latex": "a=2.58", "domain": {"max": 10, "min": 0}, "color": "#F79646", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 3}, {"latex": "b=4.65", "domain": {"max": 10, "min": 0}, "color": "#8064A2", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 2}, {"color": "#8064A2", "latex": "\\\\left(b,\\\\space at\\\\right)", "domain": {"max": 1, "min": 0}, "id": 4, "userRequestedGraphing": "always"}, {"color": "#4F81BD", "latex": "\\\\left(bt,\\\\space a\\\\right)", "domain": {"max": 1, "min": 0}, "id": 5, "userRequestedGraphing": "default"}]}}\n    },\n    {\n      "title": "Phase",\n      "graphHash": "rfo6v7r5vg",\n      "state": {"graph":{"viewport":{"xmin":-10.949,"ymin":-3,"xmax":11,"ymax":2},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":false,"labelXMode":"pi","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\cos\\\\left(x\\\\space-\\\\space p\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":13,"latex":"p=1.64","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":14,"latex":"\\\\cos\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#4F81BD"},{"id":17,"latex":"\\\\left(pt,\\\\space1\\\\right)","domain":{"min":0,"max":1},"userRequestedGraphing":"default","color":"#C0504D"}]}}\n    },\n    {\n      "title": "All the Trig Functions",\n      "graphHash": "v3hgzjtpo5",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-6.095,"xmax":10,"ymax":6.095},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":false,"showAxes":true,"squareAxes":true,"labelXMode":"pi","labelYMode":""},"expressions":{"list":[{"id":28,"text":"Click on the icon next to each trig function to turn it on or off:"},{"id":27,"latex":"\\\\sin\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":22,"latex":"\\\\cos\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#8064A2"},{"id":23,"latex":"\\\\tan\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#F79646"},{"id":24,"latex":"\\\\csc\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#000000"},{"id":25,"latex":"\\\\sec\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#4F81BD"},{"id":26,"latex":"\\\\cot\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#9BBB59"}]}}\n    },\n    {\n      "title": "Wave Interference",\n      "graphHash": "ae1kce4fwm",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":140,"latex":"a=-1.17","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":1,"latex":"f\\\\left(x\\\\right)=\\\\sin\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646"},{"id":2,"latex":"g\\\\left(x\\\\right)=\\\\sin\\\\left(x+a\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646"},{"id":5,"latex":"f\\\\left(x\\\\right)+g\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"}]}}\n    },\n    {\n      "title": "Unit Circle",\n      "graphHash": "aer4wpiiad",\n      "state": {"graph":{"viewport":{"xmin":-2.5,"ymin":-1.49,"xmax":2.5,"ymax":1.4905},"showLabels":true,"degreeMode":true,"showGrid":false,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"x^2+y^2=1","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#4F81BD"},{"id":19,"latex":"\\\\left(\\\\cos a,\\\\space\\\\sin a\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":20,"latex":"a=30","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646","sliderMin":0,"sliderMax":360},{"id":22,"latex":"y=\\\\left(\\\\tan a\\\\right)\\\\cdot x\\\\left\\\\{0<x<\\\\cos a\\\\right\\\\}","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#C0504D"},{"id":26,"latex":"y=\\\\left(\\\\tan a\\\\right)\\\\cdot x\\\\left\\\\{\\\\cos a<x<0\\\\right\\\\}","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#C0504D"},{"id":23,"latex":"x=\\\\cos(a)\\\\left\\\\{0<y<\\\\sin(a)\\\\right\\\\}","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#C0504D"},{"id":27,"latex":"x=\\\\cos(a)\\\\left\\\\{\\\\sin(a)<y<0\\\\right\\\\}","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#C0504D"}]}}\n    }\n  ]\n},\n{\n  "section": "Conic Sections",\n  "examples": [\n    {\n      "title": "Circle",\n      "graphHash": "bkmtndf38y",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\left(x-a\\\\right)^2+\\\\left(y-b\\\\right)^2<r^2","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":6,"latex":"r\\\\space=\\\\space2.5","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#9BBB59","sliderMin":-10,"sliderMax":10},{"id":5,"latex":"a=0","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":4,"latex":"b=0","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#000000","sliderMin":-10,"sliderMax":10}]}}\n      } ,\n      {\n        "title": "Parabola and Focus",\n        "graphHash": "naug1puabq",\n        "state": {"graph":{"viewport":{"xmin":-6.122,"ymin":-3.492,"xmax":6.364,"ymax":5.114},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":false,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y=\\\\frac{x^2}{4p}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"},{"id":64,"latex":"p=1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000","sliderMin":0.5,"sliderMax":5},{"id":65,"latex":"\\\\left(0,\\\\space p\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":81,"latex":"y\\\\space=\\\\space-p","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"}]}}\n      },\n      {\n        "title": "Ellipse with Foci",\n        "graphHash": "fwn45vpf2z",\n        "state": {"graph":{"viewport":{"xmin":-8.918,"ymin":-5.215,"xmax":8.86,"ymax":5.324},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"\\\\frac{x^2}{a^2}+\\\\frac{y^2}{b^2}\\\\ge1","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":4,"latex":"a=5","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2","sliderMin":3,"sliderMax":6},{"id":2,"latex":"b=3","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2","sliderMin":1,"sliderMax":3},{"id":5,"latex":"c=\\\\sqrt{\\\\left(a^2-b^2\\\\right)}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":6,"latex":"\\\\left(c,0\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#000000"},{"id":7,"latex":"\\\\left(-c,0\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"}]}}\n      },\n      {\n        "title": "Hyperbola",\n        "graphHash": "321ynqvpjh",\n        "state": {"graph":{"viewport":{"xmin":-9.594,"ymin":-4.136,"xmax":10.406,"ymax":7.786},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":23,"latex":"\\\\frac{y^2}{b^{2\\\\space}}-\\\\frac{x^2}{a^2}=1","domain":{"min":0,"max":10},"userRequestedGraphing":"always","color":"#9BBB59"},{"id":17,"latex":"\\\\frac{x^2}{a^2}-\\\\frac{y^2}{b^2}=1","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#4F81BD"},{"id":24,"latex":"a=1","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#9BBB59","sliderMin":0.01,"sliderMax":5},{"id":25,"latex":"b=1","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#C0504D","sliderMin":0.01,"sliderMax":5,"sliderInterval":""}]}}\n      }\n    ]\n  },\n{\n  "section": "Polar Graphing",\n  "examples": [\n    {\n      "title": "Polar Rose",\n      "graphHash": "zg6mokdc9e",\n      "state": {"graph":{"viewport":{"xmin":-2.1,"ymin":-2,"xmax":2.1,"ymax":2},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"r\\\\space\\\\le\\\\space\\\\sin\\\\left(\\\\frac{a}{b}\\\\theta\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":82,"latex":"a=5","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#F79646","sliderMin":1,"sliderMax":10,"sliderInterval":1},{"id":81,"latex":"b=6","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#8064A2","sliderMin":1,"sliderMax":10,"sliderInterval":1}]}}\n    },\n    {\n      "title": "Logarithmic Spiral",\n      "graphHash": "ucm7smj9fz",\n      "state": {"graph":{"viewport":{"xmin":-1200,"ymin":-1000,"xmax":1200,"ymax":1000},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":83,"latex":"r\\\\space=\\\\space a^{\\\\theta}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":84,"latex":"a=1.25","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#4F81BD","sliderMin":1.1,"sliderMax":5}]}}\n    },\n    {\n      "title": "Limacon",\n      "graphHash": "ie57pljxzm",\n      "state": {"graph":{"viewport":{"xmin":-8,"ymin":-10,"xmax":8,"ymax":10},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":83,"latex":"r\\\\space=\\\\space a+b\\\\cdot\\\\cos\\\\left(\\\\theta\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":84,"latex":"a=2","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#4F81BD","sliderMin":0,"sliderMax":5},{"id":85,"latex":"b=3","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#9BBB59","sliderMin":0,"sliderMax":5}]}}\n    },\n    {\n      "title": "Polar Conic Sections",\n      "graphHash": "kk3axf8oon",\n      "state": {"graph":{"viewport":{"xmin":-11,"ymin":-5,"xmax":11,"ymax":5},"showLabels":true,"degreeMode":false,"showGrid":true,"polarMode":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"r\\\\space=\\\\space\\\\frac{1}{1-a\\\\cdot\\\\cos\\\\left(\\\\theta-b\\\\right)}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":3,"latex":"a=1","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#F79646","sliderMin":-10,"sliderMax":10},{"id":2,"latex":"b=0","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#8064A2","sliderMin":-10,"sliderMax":10}]}}\n    }\n  ]\n},\n{\n  "section": "Transformations",\n  "examples": [\n    {\n      "title": "Translating Any Function",\n      "graphHash": "0ksctv1hm4",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -7.901, "ymin": -4.379, "ymax": 4.368, "xmax": 7.902}}, "expressions": {"list": [{"color": "#C0504D", "latex": "f\\\\left(x\\\\right)=x^2+\\\\sin\\\\left(3x\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"text": "Function g(x) is a transformed version of function f(x).", "id": 49}, {"color": "#F79646", "latex": "g\\\\left(x\\\\right)=f\\\\left(x-h\\\\right)+k", "domain": {"max": 10, "min": 0}, "id": 45, "userRequestedGraphing": "default"}, {"text": "What effect does k have on the function g(x)?", "id": 51}, {"latex": "h=2", "domain": {"max": 10, "min": 0}, "color": "#000000", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 46}, {"text": "What effect does h have on the function g(x)", "id": 53}, {"latex": "k=-1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 47}]}}\n    },\n    {\n      "title": "Scaling Any Function",\n      "graphHash": "doxva7ciht",\n      "state": {"graph": {"squareAxes": true, "showLabels": true, "showGrid": true, "showAxes": true, "labelXMode": "", "degreeMode": false, "labelYMode": "", "viewport": {"xmin": -7.901, "ymin": -4.379, "ymax": 4.368, "xmax": 7.902}}, "expressions": {"list": [{"color": "#C0504D", "latex": "f\\\\left(x\\\\right)=x^2+\\\\sin\\\\left(3x\\\\right)", "domain": {"max": 10, "min": 0}, "id": 1, "userRequestedGraphing": "default"}, {"text": "Function g(x) is a transformed version of function f(x).", "id": 49}, {"color": "#F79646", "latex": "g\\\\left(x\\\\right)=af\\\\left(\\\\frac{x}{b}\\\\right)", "domain": {"max": 10, "min": 0}, "id": 45, "userRequestedGraphing": "default"}, {"text": "What effect does a have on the function g(x)?", "id": 51}, {"latex": "a=0.5", "domain": {"max": 10, "min": 0}, "color": "#000000", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 46}, {"text": "What effect does b have on the function g(x)", "id": 53}, {"latex": "b=1", "domain": {"max": 10, "min": 0}, "color": "#4F81BD", "sliderMin": -10, "userRequestedGraphing": "default", "sliderMax": 10, "id": 47}]}}\n    },\n    {\n      "title": "Reflections of a Function",\n      "graphHash": "ynmlumjvz8",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"f\\\\left(x\\\\right)=\\\\left(x-3\\\\right)^3-x+5","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":92,"latex":"-f\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#4F81BD"},{"id":96,"latex":"f\\\\left(-x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#9BBB59"},{"id":97,"latex":"-f\\\\left(-x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#000000"}]}}\n    },\n    {\n      "title": "Inverse of a Function",\n      "graphHash": "tif5liedlj",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.928,"xmax":10,"ymax":5.929},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"f\\\\left(x\\\\right)=.2x^3+.1x^5","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":155,"latex":"x=f\\\\left(y\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":156,"latex":"y=x","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"},{"id":158,"latex":"a=1.74","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000","sliderMin":-10,"sliderMax":10},{"id":157,"latex":"\\\\left(a,f\\\\left(a\\\\right)\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#000000"},{"id":159,"latex":"\\\\left(f\\\\left(a\\\\right),a\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"}]}}\n    }\n  ]\n},\n{\n  "section": "Calculus",\n  "examples": [\n    {\n      "title": "Derivatives",\n      "graphHash": "aqgbwm3qfd",\n\n      "state": {"graph":{"viewport":{"xmin":-8.874,"ymin":-6.286,"xmax":11.127,"ymax":5.637},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"f\\\\left(x\\\\right)\\\\space=\\\\space ax^3+cx","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":150,"latex":"a=0.42","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#9BBB59","sliderMin":-10,"sliderMax":10},{"id":148,"latex":"c=-1.64","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#000000","sliderMin":-10,"sliderMax":10},{"id":146,"latex":"g\\\\left(x\\\\right)\\\\space=\\\\space\\\\frac{d}{dx}f\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"}]}}\n    },\n    {\n      "title": "Secant Line",\n      "graphHash": "irip8pnpdf",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":3,"latex":"f\\\\left(x\\\\right)=\\\\sin\\\\left(x\\\\right)+.3x","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"},{"id":7,"latex":"a=0.23","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":13,"latex":"h=2","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#F79646","sliderMin":0.1,"sliderMax":2},{"id":16,"latex":"m=\\\\frac{\\\\left(f\\\\left(a+h\\\\right)-f\\\\left(a\\\\right)\\\\right)}{h}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"},{"id":20,"latex":"y=m\\\\left(x-a\\\\right)+f\\\\left(a\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":23,"latex":"\\\\left(a,f\\\\left(a\\\\right)\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"},{"id":24,"latex":"\\\\left(a+h,f\\\\left(a+h\\\\right)\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"}]}}\n    },\n    {\n      "title": "Tangent Line",\n      "graphHash": "dlzhsldcgo",\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":3,"latex":"f\\\\left(x\\\\right)=\\\\sin\\\\left(x\\\\right)+.3x","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD"},{"id":6,"latex":"g\\\\left(x\\\\right)=\\\\frac{d}{dx}f\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#000000"},{"id":7,"latex":"a=1.27","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#4F81BD","sliderMin":-10,"sliderMax":10},{"id":12,"latex":"y=g\\\\left(a\\\\right)\\\\left(x-a\\\\right)+f\\\\left(a\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":13,"latex":"\\\\left(a,\\\\space f\\\\left(a\\\\right)\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"}]}}\n    },\n    {\n      "title": "Taylor Expansion of sin(x)",\n      "graphHash": "gkjridbqfj",\n\n      "state": {"graph":{"viewport":{"xmin":-10,"ymin":-5.961,"xmax":10,"ymax":5.961},"showLabels":true,"degreeMode":false,"showGrid":true,"showAxes":true,"squareAxes":true,"labelXMode":"","labelYMode":""},"expressions":{"list":[{"id":1,"latex":"y\\\\space=\\\\space\\\\sin\\\\left(x\\\\right)","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#C0504D"},{"id":161,"latex":"y\\\\space=\\\\space\\\\sum_{n=0}^a\\\\frac{\\\\left(-1\\\\right)^nx^{\\\\left(2n+1\\\\right)}}{\\\\left(2n+1\\\\right)!}","domain":{"min":0,"max":10},"userRequestedGraphing":"default","color":"#8064A2"},{"id":162,"latex":"a=1","domain":{"min":0,"max":10},"userRequestedGraphing":"never","color":"#F79646","sliderMin":0,"sliderMax":10,"sliderInterval":1}]}}\n    }\n  ]\n}]';});

define('template!mygraphs', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div>\n  <div id="resources-container" class="hidden">\n    <div class="search-container">\n      <input id="search-mygraphs" type="text" placeholder="Search for a graph by title" />\n      <span class="icon-search search-icon"></span>\n    </div>\n    <div class="scrollable">\n      <div class="login-reminder">\n        <a class=\'btn action-createaccount\'>Create an Account</a> or <a class=\'action-login\'>Sign In</a>\n        <div>\n          to save your graphs!\n        </div>\n      </div>\n      \n      <div class="new-blank-graph action-newblankgraph">\n        <div class="new-blank-graph-inner">\n          <span>+</span> New Blank Graph\n        </div>\n      </div>\n      \n      <div class="template-spinning">\n        <img src="wait.gif" width="16px" height="16px" /> loading graphs...\n      </div>\n\n      <ul class="template-list">\n\n      </ul>\n      <div class=\'no-matches\'>\n        Sorry, we didn\'t find any graphs with that title.\n      </div>\n      <img src="logo180.png" class="brand"/>\n    </div>\n\n\n    <div class="graph-preview">\n      <span class="button action-open-graph white-bg-btn btn-success">Open graph!</span>\n      \n      <span class="button action-cancel white-bg-btn">Cancel</span>\n      <h4 class="title"></h4>\n      <div class="screenshot-container action-open-graph" style="position: relative">\n        <iframe class="screenshot" src="embed.html" frameborder=0></iframe>\n        <div class="screenshot-clickjack"></div>\n      </div>\n      <div class="active-arrow"><div class="graphic"></div></div>\n    </div>\n  </div>\n\n  <div id="resources-cover" class="action-close-resources"></div>\n</div>\n';
}
return __p;
};});
define('template!mygraphs_savedgraph', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<li class="saved-graph graph-link-container">\n  <div class="graph-link action-preview-graph">\n    <span class="thumb" style="background-image: url('+
( obj.__oldProperties.thumbURL || obj.thumbURL )+
')"></span>\n    <span class="title">'+
( obj.__oldProperties.title || obj.title )+
'</span>\n    <span class="date variable-date">'+
( obj.displayDate )+
'</span>\n    <span class="actions">\n      <span class="icon-remove action-removegraph"></span>\n    </span>\n  </div>\n  <div class=\'deleted\'>\n\t  This graph has been deleted. <a class=\'action-cancelremovegraph\'>Undo</a>\n  </div>\n</li>';
}
return __p;
};});
define('template!mygraphs_examplegraph', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<li class="action-preview-graph graph-link-container example-graph">\n  <img src="example.png" />\n  <span class="title">'+
( displayTitle )+
'</span>\n  <span class="date">example</span>\n</li>';
}
return __p;
};});
define('main/mygraphs_view',['require','loadcss!css/mygraphs','jquery','pjs','underscore','undoredo','main/graph','main/focus','main/toast','lib/keys','lib/underscore_view','text!data/resources_examples.json','template!mygraphs','template!mygraphs_savedgraph','template!mygraphs_examplegraph','main/resize','vendor/jquery.html5-placeholder-shim','lib/jquery.scrollvisible'],function(require) {
  require('loadcss!css/mygraphs');
  
  var $ = require('jquery');
  var P = require('pjs');
  var _ = require('underscore');
  var UndoRedo = require('undoredo');
  var Graph = require('main/graph');
  var Focus = require('main/focus');
  var Toast = require('main/toast');
  var Keys = require('lib/keys');
  
  var UnderscoreView = require('lib/underscore_view');
  var exampleGraphsString = require('text!data/resources_examples.json');
  var template = require('template!mygraphs');
  var template_mygraphs_savedgraph = require('template!mygraphs_savedgraph');
  var template_mygraphs_examplegraph = require('template!mygraphs_examplegraph');

  var Resize = require('main/resize');
  require('vendor/jquery.html5-placeholder-shim');
  require('lib/jquery.scrollvisible');

  var MyGraphsView = P(UnderscoreView, function (view, _super) {
    view.template = template;

    view.removeTimeouts = {};

    view.init = function (stateController, graphsController, userController, modals) {
      _super.init.call(this);
      this.stateController = stateController;
      this.graphsController = graphsController;
      this.userController = userController;
      this.modals = modals;
      this.graphViews = [];
      this.hidePreviewOnScroll = true;
      
      // convert from sectioned examples to flat list
      var sectionedExamples = JSON.parse(exampleGraphsString);
      var flatExampleGraphs = [];
      _.each(sectionedExamples, function (section, i) {
        _.each(section.examples, function (example, j) {
          
          var exampleGraph = Graph({
            hash: example.graphHash,
            title: section.section + ": " + example.title,
            graphData: JSON.stringify(example.state)
          });
          
          flatExampleGraphs.push(exampleGraph);
        });
      });
      this.exampleGraphs = flatExampleGraphs;
      
      this.userController.observe('currentUser', this.renderLayout.bind(this));
      this.observe('isSpinning', this.renderLayout.bind(this));
    };
    
    view.focusSearchBar = function () {
      this.$('#search-mygraphs').focus();
    };

    view.toggleVisible = function () {
      if ($('body').hasClass('resources-open')) {
        this.close();
      } else {
        this.open();
      }
    };
    
    view.filterGraphs = function () {
      var query = this.$('#search-mygraphs').val().toLowerCase();
      
      this.$('.new-blank-graph').toggle(query.length === 0);

      var matches = 0;
      this.graphViews.forEach(function (view) {
        view.applyFilter(query);
        if (view.$().is(':visible')) {
          matches++;
          //TO DO: highlighting?
        }
      });
    
      this.$('.no-matches').toggle(matches === 0 && query.length !== 0);

      //don't clear this if we're navigating by arrow keys
      this.clearCurrentPreview();
    };

    view.onSearchChange = function (evt) {
      //escape pressed -- clear input? just bikeshedding.
      if (Keys.lookup(evt) === Keys.ESCAPE) {
        this.$('#search-mygraphs').attr('value','');
        this.filterGraphs();
      }

      //don't run the filter graphs code on escape, enter, up, or down
      if ([Keys.UP, Keys.DOWN, Keys.ESCAPE, Keys.ENTER].indexOf(Keys.lookup(evt)) === -1) {
        this.filterGraphs();
      }
    };

    view.newBlankGraph = function () {
      this.clearCurrentPreview();
      this.graphsController.clearGraph();
      UndoRedo.markAsSaved();
      var self = this;
      Toast.show("New graph created.", function () {
        self.open();
      });
      this.close();
    };

    //this starts the process of deleting a graph, but the 
    //deletion isn't executed until 3 seconds of toast is shown and ignored
    view.startRemoveGraph = function (evt) {
      var $target = $(evt.target).closest('.graph-link-container');

      // maps from index in dom to index in graphsController list. Could
      // be different if we have other things in the dom in between our saved
      // graphs (eg, a deleted graph)
      var view = this.graphViews[this.getIndexFromTarget($target)];
      if (!view || !view.model) return;
      
      var index = _.indexOf(this.graphsController.content, view.model);

      $target.addClass("deleting");
      var self = this;

      this.clearRemoveTimeout(index);
      this.removeTimeouts[index] = setTimeout(function() {
        $target.find('a').addClass('inactive');
        $target.slideUp('fast');

        //rerender the preview arrow
        setTimeout(function() {
          self.graphsController.remove(view.model);
          self.repositionPreview();
        }, 300);

      }, 3000);
    };

    view.clearRemoveTimeout = function (index) {
      if (this.removeTimeouts[index]) {
        clearTimeout(this.removeTimeouts[index]);
      }
    };

    view.repositionPreview = function () {
      if (this.currentPreview) {
        this.positionPreview(this.$('.selected'));
      }
    };

    view.cancelRemoveGraph = function (evt) {
      var $target = $(evt.target).closest('.graph-link-container');

      // maps from index in dom to index in graphsController list. Could
      // be different if we have other things in the dom in between our saved
      // graphs (eg, a deleted graph)
      var view = this.graphViews[this.getIndexFromTarget($target)];
      var index = _.indexOf(this.graphsController.content, view.model);
      if (index === -1) return;
      
      $target.removeClass('deleting');

      this.clearRemoveTimeout(index);
    };

    view.didCreateElement = function () {
      var self = this;

      this.$preview = this.$('.graph-preview');
      this.$previewArrow = this.$preview.children('.active-arrow');
      this.$previewTitle = this.$preview.children('.title');
      this.$previewScreenshot = this.$preview.children('.screenshot');
      
      this.$('.scrollable').on('scroll', function (evt){
        if (self.hidePreviewOnScroll) {
          self.clearCurrentPreview();
        }
      });
      
      this.$('#search-mygraphs').on('change keypress keyup keydown copy paste cut', function (evt) {
        self.onSearchChange(evt);
      });
      
      this.$('.action-login').on('tap', this.login.bind(this));
      this.$('.action-createaccount').on('tap', this.createAccount.bind(this));
      this.$().on('click', 'a', function (evt) {evt.preventDefault();});

      this.$().on('tap', '.action-newblankgraph', this.newBlankGraph.bind(this));
      this.$().on('tap', '.action-cancel', this.clearCurrentPreview.bind(this));

      this.$().on('tap', '.action-preview-graph', function (evt) {
        var $target = $(evt.target).closest('.graph-link-container');
        if ($target.hasClass('selected')) {
          self.selectPreview(null);
        } else {
          self.selectPreview($target);
        }
      });
      
      this.$().on('tap', '.action-removegraph', this.startRemoveGraph.bind(this));

      this.$().on('tap', '.action-cancelremovegraph', this.cancelRemoveGraph.bind(this));

      //background cover
      // if clicked and a preview is open, close that preview
      // otherwise, close the resources tab
      this.$('.action-close-resources').on('tapstart', function (evt) {
        if (self.currentPreview) {
          self.clearCurrentPreview();
        } else {
          self.close();
        }
      });

      this.$('.action-open-graph').on('tap', this.openPreview.bind(this));
      
      this.previewIframe = this.$('iframe.screenshot')[0];
      
      this.setProperty('isSpinning', false);
      this.graphsController.startUpdatingGraphsCallbacks.push(function () {
        self.removeAllSavedGraphsFromDom();
        self.setProperty('isSpinning', true);
      });
      this.graphsController.updateGraphsSuccessCallbacks.push(function () {
        self.addAllGraphsToDom();
        self.setProperty('isSpinning', false);
      });
      this.graphsController.updateGraphsErrorCallbacks.push(function () {
        self.setProperty('isSpinning', false);
        // TODO error view not implemented. Might be nice to have a "try again"
        // button.
      });

      this.graphsController.graphAddedCallbacks.push(function (index) {
        var graphView = SavedGraphView(self.graphsController.content[index]);
        self.addGraphToDom(index, graphView);
      });
      this.graphsController.clearCallbacks.push(function () {
        self.removeAllSavedGraphsFromDom();
        self.setProperty('isSpinning', true);
      });

      this.graphsController.graphRemovedCallbacks.push(function (index) {
        var graphView = self.graphViews.splice(index, 1)[0];
        graphView.$().remove();
      });
      
      // add examples to dom
      var list = this.$('.template-list');
      this.exampleViews = this.exampleGraphs.map(ExampleGraphView);
      this.exampleViews.forEach(function (exampleView) {
        exampleView.appendTo(list);
      });
      this.graphViews = this.exampleViews.slice(0);
      
      this.renderLayout();
      this.filterGraphs();
    };
    
    view.getIndexFromTarget = function ($target) {
      if ($target.length === 0) return undefined;
      
      return $target.prevAll().length;
    };
    
    view.selectPreview = function ($preview) {
      if (!$preview || !$preview.length || $preview.hasClass('deleting')) {
        this.clearCurrentPreview();
      } else {
        var index = this.getIndexFromTarget($preview);
        
        this.$('.selected').removeClass('selected');
        $preview.addClass('selected');
        
        this.setCurrentPreview(this.graphViews[index].model);
        this.positionPreview($preview);
      }
    };

    view.createAccount = function () {
      this.modals.createAccountDialog.show();
    };

    view.login = function () {
      this.modals.loginDialog.show();
    };

    view.removeAllSavedGraphsFromDom = function () {
      // only delete the saved graphs, not the examples
      this.graphViews.forEach(function (graphView) {
        if (graphView.isSavedGraph) {
          graphView.$().remove();
        }
      });
      
      // only have examples left
      this.graphViews = this.exampleViews.slice(0);
    };
    
    view.addGraphToDom = function (index, graphView) {
      this.graphViews.splice(index, 0, graphView);
      
      if (index === 0) {
        graphView.prependTo(this.$('.template-list'));
      } else {
        graphView.insertAfter(this.$('.template-list > :nth-child('+index+')'));
      }
      this.filterGraphs();
    };

    view.addAllGraphsToDom = function () {
      var graphs = this.graphsController.content.map(SavedGraphView);
      
      // put the new graphs first, and the old ones afterwards
      this.graphViews = graphs.concat(this.graphViews);

      // make sure all the items are in the correct order. The items that
      // were already in the dom (examples) will be appended to the dom again.
      // the way that works is they're be removed from the list and reinserted
      // at the end of the list.
      var list = $('.template-list');
      this.graphViews.forEach(function (view) {
        view.appendTo(list);
      });
            
      this.filterGraphs();
    };

    view.renderLayout = function () {
      
      // exit early if the dom isn't created yet
      if (!this.$()[0]) return;
      
      var userIsLoggedIn = !!this.userController.currentUser;
      var isSpinning = !!this.isSpinning;
      
      // decide if login-reminder is open
      this.$('.login-reminder').toggle(!userIsLoggedIn);
      
      // only show spinner if user is logged in
      this.$('.template-spinning').toggle(userIsLoggedIn && isSpinning);
    };
    
    view.updateDisplayDates = function() {
      this.graphsController.content.forEach(function (graph) {
        graph.updateDisplayDate();
      });
    };

    view.openPreview = function () {
      var self = this;
      var preview = self.currentPreview;
      if (!preview) return;
      
      setTimeout(function () {
        self.graphsController.loadGraph(preview.copy());
        UndoRedo.markAsSaved();

		var temptitle=preview.__oldProperties.title||preview.title;
        var str = 'Opened \'Untitled Graph\'';
        if (temptitle) {
          str = (temptitle.length > 15 ?
                      'Opened \'' + temptitle.substr(0, 15) + '...\'' :
                      'Opened \'' + temptitle + '\'');
        }
        Toast.show(str, function() {
          self.open();
        });
      });
      self.close();
    };

    view.clearCurrentPreview = function() {
      this.$preview.hide();
      $('body').removeClass('preview-open');
      this.currentPreview = null;
      this.$('li.selected').removeClass('selected');
    };

    view.setCurrentPreview = function (preview) {

      this.currentPreview = preview;
      this.$previewTitle.text(preview.displayTitle);
      $('body').addClass('preview-open');
      this.$preview.show();
      this.previewIframe.contentWindow.postMessage(JSON.stringify({
        type: 'setState',
        payload: this.currentPreview.graphData
      }), '*');
    };
    
    view.getSelected = function () {
      var selected = this.$('.selected:visible');
      return selected.length ? selected : null;
    };

    view.selectUp = function (evt) {
      var selected = this.getSelected();
      if (!selected) return;
      
      var prev = $(selected.prevAll(':visible:not(.removed-graph)')[0]);
      if (prev.length) {
        this.selectPreview(prev);
        evt.preventDefault();
      }
    };

    view.selectDown = function (evt) {
      var selected = this.getSelected();
      
      if (!selected) {
        evt.preventDefault();
        var first_visible = this.$('.template-list > :not(.removed-graph)').filter(':visible')[0];
        if (first_visible) {
          this.selectPreview($(first_visible));
        }
        return;
      }

      var next = $(selected.nextAll(':visible:not(.removed-graph)')[0]);
      if (next.length) {
        this.selectPreview(next);
        evt.preventDefault();
      }
    };
   
    // our strategy is to try to keep the arrow in it's natural
    // position and move the entire preview up or down to line the
    // arrow up. That should be possible unless it'd require the
    // preview to go below the bottom of the screen. In that case,
    // we put the preview on the bottom of the screen and move the
    // arrow.
    view.positionPreview = function ($target) {
      
      // scroll the target into view
      var targetHeight = $target.outerHeight();
      this.hidePreviewOnScroll = false;
      this.$('.scrollable').scrollVisible($target, targetHeight, -targetHeight);
      
      // must put on timeout because the 'scroll' event from scrollVisible happens at beginning of next run loop.
      setTimeout(function () {
        this.hidePreviewOnScroll = true;
      }.bind(this), 0);
      
      // restores the arrow to it's natural position
      this.$previewArrow.css('top','');
      
      // check where the arrow is, where the preview window is, and where we want to center the arrow on
      var arrowOffset = this.$previewArrow.offset().top - this.$preview.offset().top;
      var centerArrowY = $target.offset().top + targetHeight / 2;
      
      // figure out how far down we can move the preview before it is uncomfortably low on the screen
      var previewHeight = this.$preview.outerHeight();
      var maxBottom = Resize.currentScreen.height - 5;
      var maxPreviewTop = maxBottom - previewHeight;
      var newPreviewTop = centerArrowY - arrowOffset;
      
      // the preview is too low, we must put the preview at the bottom of the screen
      // and move the arrow itself
      if (newPreviewTop > maxPreviewTop) {
       newPreviewTop = maxPreviewTop;
       this.$previewArrow.css('top', centerArrowY - newPreviewTop);
      }

      // move the preview to where it needs to go
      this.$preview.css('top', newPreviewTop);
    };

    view.close = function () {
      this.clearCurrentPreview();
      $('body').removeClass('resources-open');
      Resize.waitForCSSAnimation('#sliding-interior', /transform/);

      $(document.activeElement).blur();
      this.$('#search-mygraphs').attr('value', '');
      this.filterGraphs();
      $(document).off('keydown.mygraphs-view');
      
      this.graphsController.setProperty('lastRemoved', undefined);
    };

    view.open = function () {
      $('body').addClass('resources-open');
      Resize.waitForCSSAnimation('#sliding-interior', /transform/);
      Focus.takeFocus();
      // update the dates and fix placeholder
      this.updateDisplayDates();
      if ($.placeholder) $.placeholder.shim();

      var self = this;
      //listen for arrow keys
      $(document).on('keydown.mygraphs-view', function(evt) {
        var key = Keys.lookup(evt);
        
        if (key === Keys.UP) {
          self.selectUp(evt);
          evt.preventDefault();
        } else if (key === Keys.DOWN) {
          self.selectDown(evt);
          evt.preventDefault();
        } else if (key === Keys.ENTER) {
          self.openPreview();
        } else if (key === Keys.ESCAPE) {
          self.clearCurrentPreview();
        }
      });
    };
  });
  
  // view for the individual examples
  var ExampleGraphView = P(UnderscoreView, function (view, _super) {
    view.template = template_mygraphs_examplegraph;
    view.isExample = true;
    
    view.init = function (example) {
      _super.init.call(this);
      this.model = example;
    };
    
    view.applyFilter = function (query) {
      this.$().toggle(this.model.displayTitle.toLowerCase().indexOf(query) >= 0);
    };
    
    view.getTemplateParams = function () {
      return JSON.parse(JSON.stringify(this.model));
    };
  });

  // view for the individual saved graphs
  var SavedGraphView = P(UnderscoreView, function (view, _super) {
    view.template = template_mygraphs_savedgraph;
    view.isSavedGraph = true;
    
    view.init = function (graph) {
      _super.init.call(this);
      this.model = graph;
      this.model.observe('displayDate', this.updateDisplayDate.bind(this));
    };
    
    view.didCreateElement = function () {
      this.updateDisplayDate();
    };
    
    view.getTemplateParams = function () {
      return JSON.parse(JSON.stringify(this.model));
    };
    
    view.applyFilter = function (query) {
      this.$().toggle(this.model.displayTitle.toLowerCase().indexOf(query) >= 0);
    };
    
    view.updateDisplayDate = function () {
      var displayDate = this.model.displayDate;
      if (displayDate !== this.lastDisplayDate) {
        this.lastDisplayDate = displayDate;
        this.$('.variable-date').text(displayDate);
      }
    };
  });

  return MyGraphsView;
});

define('template!subheader', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div>\n  <div class=\'left-floaters\'>\n\n      <span class="subheader-btn action-opendrawer tooltip-nw" tooltip="Open Graph (ctrl+o)">\n        <i class="icon-hamburger"></i>\n      </span>\n\n      <span class=\'divider\'></span>\n\n      <span class="title-div">\n        <span class="variable-title tooltip action-savedialog" tooltip="Save As or Rename (ctrl+shift+s)"></span>\n        ';
 if (user) { 
;__p+='\n        <span class="action-save">\n          <span class="save-btn tooltip-offset" tooltip="Save (ctrl+s)">\n            <i class="icon-save"></i> \n          </span>\n          <span class="saving-notice">saving...</span>\n          <span class="save-success">saved!</span>\n          <span class="save-failure">error saving</span>\n        </span>\n        ';
 } 
;__p+='\n      </span> \n  </div>\n\n  <div class=\'right-floaters\'>\n\n    <!-- reverse order, because these all float right -->\n\n    <span \n      class="subheader-btn action-help tooltip"\n      tooltip="Help"\n    >\n        <i class="icon-question-sign"></i>\n    </span>\n\n    <span class=\'divider\'></span>\n\n    <span \n      class="tooltip subheader-btn action-settings"\n      tooltip="Window Settings"\n    >\n        <i class="icon-wrench"></i>\n    </span>\n\n    <span class=\'divider\'></span>\n\n    ';
 if (user) { 
;__p+='\n\n      ';
__p+='\n \n        <span class=\'btn-group\'>\n        <span \n          id="print_btn"\n    style="padding:0px 0px 0px 0px!important;margin:-3px 0px 0px 0px"      class=\'tooltip-offset subheader-btn\'\n      onclick="mkscr()"    tooltip="Screenshot"\n        >\n            <i class="icon-save"></i>\n        </span>\n      <span \n          id="print_btn"\n    style="padding:0px 0px 0px 0px!important;margin:-3px 0px 0px 0px"      class=\'tooltip-offset subheader-btn action-print\'\n          tooltip="Print"\n        >\n            <i class="icon-print"></i>\n        </span>\n      </span>\n\n      ';
__p+='\n\n      <span class=\'divider\'></span>\n\n      <span id="top_logout" class="gray_btn">\n        <span class="email">\n          '+
( name )+
'\n          <i class=\'icon-caret-down\'></i>\n        </span>\n      </span>\n    ';
 } else { 
;__p+='\n      <span id ="login">\n      <a id="create-account" class="btn-green action-createaccount">Create Account</a> or\n      <a id="sign-in" class="action-login">Sign In</a>\n      </span>\n  <span class=\'btn-group\'>\n        <span \n          id="print_btn"\n    style="padding:0px 0px 0px 0px!important;margin:-3px 0px 0px 0px"      class=\'tooltip-offset subheader-btn\'\n      onclick="mkscr()"    tooltip="Screenshot"\n        >\n            <i class="icon-save"></i>\n        </span>\n      <span \n          id="print_btn"\n    style="padding:0px 0px 0px 0px!important;margin:-3px 0px 0px 0px"      class=\'tooltip-offset subheader-btn action-print\'\n          tooltip="Print"\n        >\n            <i class="icon-print"></i>\n        </span>\n      </span>\n\n      ';
 }
;__p+='\n  </div>\n\n  <div class=\'center\'>\n    <a href="/" target=\'_blank\' class="home-link" title="Home">\n      Graph\n    </a>\n  </div>\n\n  <div id="zoom-pillbox">\n      <span \n        class="tooltip-e action-zoomin"\n        tooltip="Zoom In"\n        tipsy-offset="15"\n      >\n          <i class="icon-plus"></i>\n      </span>\n      <span \n        class="tooltip-e action-zoomrestore"\n        tooltip="Restore Default Zoom"\n        tipsy-offset="15"\n      >\n          <i class="icon-home"></i>\n      </span>\n      <span \n        class="tooltip-e action-zoomout"\n        tooltip="Zoom Out"\n        tipsy-offset="15"\n      >\n          <i class="icon-minus"></i>\n      </span>\n  </div>\n</div>\n';
}
return __p;
};});
/*
* subtoolbar
* this is the row of buttons above the calc
*/

define('main/subheader',['require','jquery','lib/underscore_view','pjs','lib/browser','lib/track_feature','undoredo','main/resize','main/focus','tipsy','main/help','main/settings_view_desktop','main/account_dropdown','main/mygraphs_view','template!subheader'],function(require){
  var $ = require('jquery');
  var UnderscoreView = require('lib/underscore_view');
  var P = require('pjs');
  var Browser = require('lib/browser');
  var Feature = require('lib/track_feature');
  var UndoRedo = require('undoredo');
  var Resize = require('main/resize');
  var Focus = require('main/focus');
  require('tipsy');

  var HelpView = require('main/help');
  var SettingsView = require('main/settings_view_desktop');
  var AccountView = require('main/account_dropdown');
  var MyGraphsView = require('main/mygraphs_view');

  var template = require('template!subheader');

  /*
  * view for the settings bar
  */

  var SubheaderView = P(UnderscoreView, function (view, _super) {
    view.template = template;
    view.$saveBtn = null;

    view.init = function (
      userController,
      graphsController,
      graphController,
      stateController,
      modals
    ) {
      _super.init.call(this);
      this.userController = userController;
      this.graphsController = graphsController;
      this.graphController = graphController;
      this.modals = modals;

      this.helpView = HelpView(
        userController,
        graphsController,
        stateController,
        modals
      );
      this.settingsView = SettingsView(graphController);

      this.myGraphsView = MyGraphsView(stateController, graphsController, userController, modals);


      //needs helpview to be able to open up the feedback box
      this.accountView = AccountView(userController, this.helpView, modals);
      

      this.childViews = [
        this.helpView,
        this.settingsView,
        this.accountView
      ];

      var self = this;
      this.childViews.forEach(function (view) {
        view.subheaderView = self;
      });
    };

    view.didCreateElement = function () {
      this.$saveBtn = this.$('.action-save');

      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        delegate: '.tooltip'
      });

      //a few need extra offset
      this.$().tipsy({
        fade: 'fast',
        title: 'tooltip',
        wait: 500,
        offset: 7,
        delegate: '.tooltip-offset'
      });

      // Note: this will happen more than once if the subheader view is
      // rerendered
      this.childViews.forEach(function(view) {
        view.appendTo('#subheader');
      });

      this.myGraphsView.appendTo('#main');

      var self = this;

      ['w', 'e', 'nw'].forEach(function(dir) {
        self.$().tipsy({
          fade: 'fast',
          title: 'tooltip',
          wait: 500,
          gravity: dir,
          delegate: '.tooltip-' + dir
        });
      });

      //bind to events in the graphs controller
      this.graphsController.startSavingCallbacks.push(this.saveStart.bind(this));
      this.graphsController.saveSuccessCallbacks.push(this.saveSuccess.bind(this));
      this.graphsController.saveSuccessCallbacks.push(this.graphChanged.bind(this));
      this.graphsController.saveErrorCallbacks.push(this.saveFailure.bind(this));

      //bind to the Undo/Redo system so we can display when the graph has unsaved changes
      UndoRedo.changesCallbacks.push(this.graphChanged.bind(this));
      
      // event listeners
      this.$('.action-share, .action-mygraphs, .action-help, .action-settings', this.menuPressed.bind(this));
      this.settingsView.setupOpenButton(this.$('.action-settings'), 'tap');
      this.helpView.setupOpenButton(this.$('.action-help'), 'tap');
      this.accountView.setupOpenButton(this.$('#top_logout'), 'tap');


      this.$('.action-opendrawer').on('tap', this.openDrawer.bind(this));
      this.$('.action-savedialog').on('tap', this.saveDialog.bind(this));
      this.$saveBtn.on('tap', this.simpleSave.bind(this));
      this.$('.action-print').on('tap', this.print.bind(this));
      this.$('.action-zoomin').on('tap', this.zoomIn.bind(this));
      this.$('.action-zoomrestore').on('tap', this.zoomRestore.bind(this));
      this.$('.action-zoomout').on('tap', this.zoomOut.bind(this));
      this.$('.action-login').on('tap', this.login.bind(this));
      this.$('.action-createaccount').on('tap', this.createAccount.bind(this));
      this.updateTitle();
      
      this.graphsController.observe('currentGraph', function () {
        self.updateTitle();
      });

      this.userController.observe('currentUser', this.rerender.bind(this));
    };
    
    view.graphChanged = function() {
      var hasChanges = !!UndoRedo.changedSinceSave();
      this.$('.save-btn').attr('tooltip', (hasChanges ? "Save Changes (ctrl+s)" : "No Unsaved Changes"));
      this.$('.title-div').toggleClass('has-changes', hasChanges);
    };

    view.openDrawer = function () {
      this.myGraphsView.toggleVisible();
    };

    view.getTemplateParams = function (){
      var name = (this.userController.currentUser ? this.userController.currentUser.name : null);
      return  {
        IS_ANDROID: Browser.IS_ANDROID,
        user: this.userController.currentUser,
        name: name
      };
    };
    
    view.updateTitle = function () {
      var graph = this.graphsController.currentGraph;
      var title = (graph && (graph.title||graph.__oldProperties.title) ? (graph.title||graph.__oldProperties.title) : 'Untitled Graph');
	  //console.log(graph);
      this.$('.variable-title').text(title);
    };

    //this can be called by ctrl-S or by clicking the save icon
    //it executes the save, but doesn't pop up the dialog unless it's your first save
    view.simpleSave = function () {
      if (this.userController.currentUser &&
          this.graphsController.currentGraph.hasOwnProperty('title')
      ) {
        // Already saved, so don't bother with the dialog
        //TODO is there a better way of detecting this?
        this.graphsController.save(this.graphsController.currentGraph);
      } else {
        this.saveDialog();
      }
    };
    
    // TODO - switch from keyCode to something that identifies which keys we're talking about.
    view.handleKeydown = function (evt) {
      if (evt.ctrlKey || evt.metaKey) {
        if (evt.keyCode == 83) {
          evt.preventDefault();
          if (evt.shiftKey) {
            this.saveDialog();
          } else {
            this.simpleSave();
          }
        } else if (evt.keyCode == 79) {

          //power user feature: focus search box when you press ctrl-o or cmd-o
          evt.preventDefault();
          this.openDrawer();
          var self= this;

          if ($('body').hasClass('resources-open')) {
            setTimeout(function() {
              self.myGraphsView.focusSearchBar();
            }, 1);
          }
        }
      }
    };
    view.saveDialog = function() {
      if (this.userController.currentUser) {
        this.modals.saveDialog.show();
      } else {
        this.modals.createAccountDialog.showThenSave();
      }
    };

    view.saveStart = function() {
      this.$saveBtn.addClass('saving');
      //console.log("start saving animation");
    };
    view.saveSuccess = function() {
      this.$saveBtn.removeClass('saving').addClass('success');
      UndoRedo.markAsSaved();

      var self = this;
      setTimeout(function() {
        self.$saveBtn.removeClass('success');
      }, 2000);

    };
    view.saveFailure = function() {
      this.$saveBtn.removeClass('saving').addClass('failure');
      var self = this;
      setTimeout(function() {
        self.$saveBtn.removeClass('failure');
      }, 2000);
    };

    view.print = function(evt) {
      //execute a window.print
      window.print();
      return;
    };
    
    //
    // right hand tools
    //
    
    view.zoomIn = function() {
      Feature.use('Zoom In');
      this.graphController.zoom("in");
    };

    view.zoomRestore = function() {
      Feature.use('Zoom Restore');
      this.graphController.zoom("default");
    };

    view.zoomOut = function() {
      Feature.use('Zoom Out');
      this.graphController.zoom("out");
    };
    
    view.login = function() {
      this.modals.loginDialog.show();
    };

    view.createAccount = function() {
      this.modals.createAccountDialog.show();
    };

    view.menuPressed = function(view) {
      // blur any textbox that has focus. On some devices, such as ipad
      // and nexus 7, (and qunit!) this doesn't happen automatically.
      Focus.takeFocus();
    };
    
    //each of the dropdowns (share_options, graph_settings, help)
    //queries this to find out how tall it should (max)
    view.popoverHeight = function() {
      var height = Resize.fullScreen.height;
      var subheaderTop = $('#subheader').position().top;
      return height - subheaderTop - 52;
    };

  });

  return SubheaderView;
});

define('loadcss!css/keypad', function(){});
//from http://www.w3schools.com/js/js_cookies.asp
define('main/cookie',[],function () {
  function eraseCalculatorCookie(c_name) {
    //document.cookie = c_name + "= ;path=/;expires=Thu, 01 Jan 1970 00:00:01 GMT";
  }

  function getCookie(c_name) {
    // We were having problems with cookies being set on two paths: both
    // / and /calculator. This erases the cookie at /calculator before any
    // reads. Can delete this call (and the definition of eraseCalculatorCookie)
    // one month after it launches, so roughly May 1, 2013.
    eraseCalculatorCookie(c_name);

    var encoded_c_name = encodeURIComponent(c_name);
    var i,x,y,ARRcookies=document.cookie.split(";");
    for (i=0;i<ARRcookies.length;i++)
    {
      x=ARRcookies[i].substr(0,ARRcookies[i].indexOf("="));
      y=ARRcookies[i].substr(ARRcookies[i].indexOf("=")+1);
      x=x.replace(/^\s+|\s+$/g,"");
      if (x==encoded_c_name) {
        return decodeURIComponent(y);
      }
    }
  }

  function setCookie(c_name, value, duration) {
    //set a javascript cookie
    var expires = new Date();
    expires.setDate(expires.getDate() + 30);
    document.cookie = (
      encodeURIComponent(c_name) +
      "=" + encodeURIComponent(value) +
      "; expires=" + expires.toUTCString() +
      "; path=/"
    );
  }

  return {
    getCookie: getCookie,
    setCookie: setCookie
  };
});

define('template!keypad', ['underscore'], function(_) {return function(obj){
var __p='';var print=function(){__p+=Array.prototype.join.call(arguments, '')};
with(obj||{}){
__p+='<div class=\'graph-keypad\'>\n  <div class=\'keys-container\'>\n    <div class=\'keys-background do-not-blur\'>\n      <div class=\'keys\'>\n\n        <div class=\'functions-popover popover top\' popover="true">\n          <div class=\'popover-interior\'>\n            <div class=\'header\'>\n              <table><tr>\n              ';
 _.each(popups.functionsPopup, function(contents, section) { 
;__p+='\n                <td>\n                  <span key="'+
(contents.tab.id)+
'" class="heading tappable btn btn-inverse'+
((section == "trig" ?  " selected":""))+
'">\n                    '+
( contents.tab.html )+
'\n                  </span>\n                </td>\n              ';
 }) 
;__p+='\n              </tr></table>\n            </div>\n\n            ';
 _.each(popups.functionsPopup, function(contents, section) { 
;__p+='\n              <table class=\'interior-buttons\' section=\''+
(section)+
'\'>\n                ';
 if (section == "trig") { 
;__p+='\n                  <tr class=\'section-headings\'>\n                    <td>trig</td>\n                    <td>inverse</td>\n                    <td>hyperb</td>\n                  </tr>\n                ';
 } 
;__p+='\n                <tr>\n\n                ';

                   var i = 0;
                    _.each(contents.funcs, function(func) {
                
;__p+='\n                  '+
((i%3 == 0 ? "</tr><tr>" : ""))+
'\n                  ';
 i++ 
;__p+='\n                  <td>\n                    <span\n                      class="option btn tappable'+
(func.aClass ? " " + func.aClass : "")+
' '+
(func.id)+
'-key"\n                      key="'+
(func.id)+
'"\n                    >\n                      '+
( func.html )+
'\n                    </span>\n                  </td>\n              ';
 }) 
;__p+='\n              </tr></table>\n            ';
 }) 
;__p+='\n          </div>\n          <div class=\'arrow\'></div>\n        </div>\n\n        <canvas class="handwriting-area"></canvas>\n\n        ';
 _.each(buttons, function(keypad, keypadID) { 
;__p+='\n         <div class="'+
(keypadID)+
'">\n           ';
 _.each(keypad, function(row) { 
;__p+='\n             <div class="row">\n               ';
 _.each(row['keys'], function(key) { 
;__p+='<div\n                   class="cell '+
(key.cellClass ? key.cellClass: "")+
'"\n                 >\n                   ';
 if (key.html) { 
;__p+='\n                     <a\n                       class="'+
(key.aClass ? key.aClass : "")+
' '+
(key.id)+
'-key"\n                       key="'+
(key.id)+
'"\n                     >\n                       '+
( key.html )+
'\n                     </a>\n                   ';
 } 
;__p+='\n                 </div>';
 }) 
;__p+='\n               <div style=\'clear:both\'></div>\n             </div>\n           ';
 }) 
;__p+='\n         </div>\n        ';
 }) 
;__p+='\n        <div style=\'clear:both\'></div>\n      </div>\n\n      ';
 if (userMinimizable) { 
;__p+='\n      <div class=\'minimize-keypad\'>\n        <i class=\'icon-keyboard minimize-keyboard-icon\'></i>\n        <i class=\'icon-caret-down\'></i>\n      </div>\n      ';
 } 
;__p+='\n    </div>\n  </div>\n  \n  ';
 if (userMinimizable) { 
;__p+='\n    <div class="show-keypad" class="do-not-blur">\n      <i class=\'icon-keyboard maximize-keyboard-icon\'></i>\n      <i class="icon-caret-up do-not-blur"></i>\n    </div>\n  ';
 } 
;__p+='\n  \n</div>\n';
}
return __p;
};});
define('text!data/keypad_keys.json',[],function () { return '{\n"trigFuncs":        ["sin","cos","tan","csc","sec","cot"],\n\n"oneArgFuncs":      ["ceil","floor","round","abs","ln","log","exp"],\n\n"twoArgFuncs":      ["min","max","lcm","gcd","mod", "nCr", "nPr"],\n\n"tabs":             ["trig","calc","misc"],\n\n"staticKeys": {\n  "unknown":          {"display":{"html":"?"},\n                      "action":{"text":"?"}},\n  "pi":               {"display":{"html":"&pi;"},\n                      "action":{"text":"pi"}},\n  "leftparen":        {"display":{"html":"("},\n                      "action":{"text":"("}},\n  "rightparen":       {"display":{"html":")"},\n                      "action":{"text":")"}},\n  "sqrt":             {"display":{"html":"&radic;"},\n                      "action":{"text":"sqrt"}},\n  "cuberoot":         {"display":{"html":"<sup>3</sup>&radic;", "noMQ": true},\n                      "action":{"custom":"cuberoot"}},\n  "lt":               {"display":{"html":"&lt;"},\n                      "action":{"text":"<"}},\n  "gt":               {"display":{"html":"&gt;"},\n                      "action":{"text":">"}},\n  "le":               {"display":{"html":"&le;"},\n                      "action":{"text":"<="}},\n  "ge":               {"display":{"html":"&ge;"},\n                      "action":{"text":">="}},\n\n  "squared":          {"display":{"aClass":"exponent", "html":"a^2"},\n                      "action":{"custom":"squared"}},\n\n  "exponent":         {"display":{"aClass":"exponent", "html":"a^b"},\n                      "action":{"text":"^"}},\n  "subscript":        {"display":{"html":"a_b"},\n                      "action":{"text":"_"}},\n  "fact":             {"display":{"html":"x!"},\n                      "action":{"text":"!"}},\n  "theta":            {"display":{"html":"&theta;"},\n                      "action":{"text":"theta"}},\n  "leftbrace":        {"display":{"html":"{", "noMQ":true},\n                      "action":{"text":"{"}},\n  "rightbrace":       {"display":{"html":"}", "noMQ":true},\n                      "action":{"text":"}"}},\n  "colon":            {"display":{"html":":"},\n                      "action":{"text":":"}},\n  "comma":            {"display":{"html":","},\n                      "action":{"text":","}},\n\n  "times":            {"display":{"html":"&times;"},\n                      "action":{"text":"*"}},\n  "plus":             {"display":{"html":"+"},\n                      "action":{"text":"+"}},\n  "divide":           {"display":{"html":"&divide;"},\n                      "action":{"text":"/"}},\n  "minus":            {"display":{"html":"&ndash;"},\n                      "action":{"text":"-"}},\n  "equals":           {"display":{"html":"="},\n                      "action":{"text":"="}},\n  "decimal":          {"display":{"html":"."},\n                      "action":{"text":"."}},\n\n  "backspace":        {"display":{"aClass":"always-enabled", \n                                "html":"<span class=\\"backspace-img\\"></span><i class=\\"icon-delete\\"></i>"\n                               },\n                      "action":{"key":"Backspace"}},\n  "enter":            {"display":{"aClass":"always-enabled", "html":"ent<span>er</span>"},\n                      "action":{"key":"Enter"}},\n\n  "narrowToggleLetters":    {"display":{"aClass":"always-enabled toggle-btn", "html":"A B C"},\n                      "action":{"changeLayout": "letters"}},\n  "toggleLetters":    {"display":{"aClass":"always-enabled toggle-btn", "html":"A B C", "colspan":2},\n                      "action":{"changeLayout": "letters"}},\n  "toggleHandwriting":{"display":{"aClass":"always-enabled toggle-btn", "html":"~write~"},\n                      "action":{"changeLayout": "handwriting"}},\n  "toggleNumbers":    {"display":{"aClass":"always-enabled toggle-btn", \n                                "html":"1<span> </span>2<span> </span>3", \n                                "colspan":1\n                               },\n                      "action":{"changeLayout":"mainNumbers"}},\n\n  "popupFunctions":  {"display":{"aClass":"always-enabled toggle-btn", "html":"functions", "colspan":2},\n                      "action":{"popup": "functions"}},\n\n  "blank":            {"display":{},\n                      "action":{}},\n\n  "halfBlank":        {"display":{"colspan":0.5},\n                      "action":{}},\n\n  "left":             {"display":{"aClass":"always-enabled", "html":"&larr;"},\n                      "action":{"key":"Left"}},\n  "up":               {"display":{"aClass":"always-enabled", "html":"&uarr;"},\n                      "action":{"key":"Up"}},\n  "right":            {"display":{"aClass":"always-enabled", "html":"&rarr;"},\n                      "action":{"key":"Right"}},\n  "down":             {"display":{"aClass":"always-enabled", "html":"&darr;"},\n                      "action":{"key":"Down"}},\n\n  "toggleAltLeft":    {"display":{"aClass":"always-enabled toggle-btn", "html":"more", "colspan":2},\n                      "action":{"changeLayout": "altNumbers"}},\n  "toggleMainLeft":   {"display":{"aClass":"always-enabled toggle-btn active", "html":"more", "colspan":2},\n                      "action":{"changeLayout": "mainNumbers"}},\n  "loga":             {"display":{"html":"log_a"},\n                      "action":{"custom":"loga"}},\n  "ddx":              {"display":{"html":"d/dx"},\n                      "action":{"custom":"d/dx"}},\n  "sum":              {"display":{"html":"\\\\sum"},\n                      "action":{"text":"sum"}},\n  "prod":             {"display":{"html":"\\\\prod"},\n                      "action":{"text":"prod"}}\n  }\n}\n';});

define('main/keypad_keys',['require','jquery','underscore','mathquill','text!data/keypad_keys.json'],function(require){
  var $ = require('jquery');
  var _ = require('underscore');
  require('mathquill');
  var keypad_data = JSON.parse(require('text!data/keypad_keys.json'));
  var i;

  //Start with explicitly defined keys
  var keys = keypad_data.staticKeys;

  //Expand summary-form data from JSON to create input structure for keypad
  _.each(keypad_data.tabs, function(t){
    keys[t+'Tab'] = {display:{html:t}, action:{tab:t}};
  });

  _.each(keypad_data.oneArgFuncs, function (f) {
    keys[f] = {display:{html:f},action:{func:f}};
  });

  _.each(keypad_data.twoArgFuncs, function (f) {
    keys[f] = {display:{html:f},action:{func:f, args:2}};
  });

  _.each(keypad_data.trigFuncs, function (fn) {
    _.each([fn, 'arc'+fn,fn+'h'], function (f) {
      keys[f] = {display:{html:f},action:{func:f}};
    });
  });

  for (i = 0; i < 26; i++) { // a-f
    var ch = String.fromCharCode(97+i);
    keys[ch] = {display:{html:ch}, action:{text:ch}};
  }

  for (i = 0; i < 10; i++) { // 0-9
    var num = String.fromCharCode(48+i);
    keys[num] = {display:{html:num}, action:{text:num}};
  }

  var genButton = function (key, buttonId) {
    var display = key.display;
    var action = key.action;

    display.id = buttonId;
    
    if (!('cellClass' in display)) display.cellClass = '';

    if (!('aClass' in display)) display.aClass = '';

    if (display.colspan) {

      if (display.cellClass) display.cellClass += ' ';

      switch(display.colspan) {
        case 0.5:
        display.cellClass += 'halfwide';
        break;
        case 1.5:
        display.cellClass += 'oneandhalfwide';
        break;
        case 2:
        display.cellClass += 'twowide';
        break;
      }
    }

    if (display.html) {
      display.aClass = (display.aClass ? display.aClass + ' key' : 'key');
      
      if (display.actionOn == 'tapstart') {
        display.aClass += ' tapstartable';
      } else {
        display.aClass += ' tappable';
      }
    }

    if (
      !(action.tab || action.key || action.popup || action.changeLayout) &&
      !display.noMQ && display.html
    ) {
      display.mathquill = true;

      // ask mathquill for an html version of itself
      // note: this will break for things like parentheses with contents,
      // which need to be inserted into the dom to know their correct size.
      // but works for uncomplicated mathquill
      // WARNING - if run multiple times, this will modify this.keys in breaking ways
      display.html = $('<span>' + display.html + '</span>').mathquill().mathquill('html');
      display.aClass += ' mathquill-rendered-math';
    }
  };

  _.each(keys, genButton);

  return keys;
});

define('main/keypad_view',['require','loadcss!css/keypad','jquery','underscore','lib/browser','main/resize','main/cookie','template!keypad','lib/underscore_view','main/config','pjs','main/cookie','main/keypad_keys'],function (require) {
  require('loadcss!css/keypad');

  var $ = require('jquery');
  var _ = require('underscore');
  var Browser = require('lib/browser');
  var Resize = require('main/resize');
  var Cookie = require('main/cookie');
  var template = require('template!keypad');
  var UnderscoreView = require('lib/underscore_view');
  var Config = require('main/config');
  var P = require('pjs');

  require('main/cookie');
  var KEYS = require('main/keypad_keys');

  var KeypadView = P(UnderscoreView, function (view, _super){

    view.template = template;
    view.isOpen = false;
    // Flag for whether the user has minimized the keypad with the minimize
    // button. In this case, we keep it minimized unless the user opens it with
    // the open keypad button.
    view.userMinimized = false;

    view.init = function (expressionsView) {
      this.keys = KEYS;
      this.expressionsView = expressionsView;
      this.setupKeypad();
      this.setLayout('mainNumbers');
    };

    view.didCreateElement = function(){
      var self = this;
      
      //handles to the various buttons that we're going to use a lot
      self.$hideBtn = self.$('.minimize-keypad');
      self.$showBtn = self.$('.show-keypad');
      self.$funcPopover = self.$('.functions-popover');
      self.$container = self.$('.keys-container');
      self.$keys = self.$('.keys');
      self.$funcBtn = self.$('.popupFunctions-key');
      self.setTab('trig');
  
      self.$().on('tap', '.tappable', function (evt) {
        var button = $(evt.target).closest('.tappable');
        self.buttonClicked(button);
      });

      self.$().on('tapstart', '.tapstartable', function (evt) {
        var button = $(evt.target).closest('.tapstartable');
        self.buttonClicked(button);
      });

      self.expressionsView.observe('needFakeKeypad', function () {
        self.requestSetIsOpen(self.expressionsView.needFakeKeypad);
      });

      self.expressionsView.observe('editDisabled', function () {
        self.setKeysDisabled(self.expressionsView.editDisabled);
      });

      self.$showBtn.show();

      //initialize hide & show
      self.$hideBtn.on("tap", function () {
        self.userMinimized = true;
        Cookie.setCookie("keypadMinimized", "true");
        self._hideKeypad();
      });

      self.$showBtn.on("tap", function () {
        self.userMinimized = false;
        Cookie.setCookie("keypadMinimized", "false");
        self._showKeypad();

        //use currently selected expression if one is selected (no-op if it's also focused)
        var selected = self.expressionsView.getSelected();
        if (selected && selected.isExpression) {
          self.expressionsView.getItemView(selected.id).addFocus();
          return;
        }
        
        //if currently selected is a table, return early if it already has focus
        if (selected && selected.isTable && self.expressionsView.itemFocused) {
          return;
        }

        //see if we minimized the keypad from an existing element
        var item = self.expressionsView.getLastFocusedItem();
        
        //if not, get the element at the top of the list
        if (!item) item = self.expressionsView.getFirstVisibleItem();

        //search downward until we find an expression that we can focus
        while (item && !item.isExpression) {
          item = self.expressionsView.getItemByIndex(item.index + 1);
        }
        
        //if we found an item: focus it!
        if (item) {
          self.expressionsView.getItemView(item.id).addFocus();
          return;
        }
        
        //append a blank expression at the bottom of the list, and focus that
        self.expressionsView.appendBlankExpression();
      });

      self.userMinimized = (Cookie.getCookie("keypadMinimized") === "true");
    };

    view._hideKeypad = function () {
      clearTimeout(this.__showHideTimeout);
      this.isOpen = false;
      var self = this;

      self.$container.css('transform', 'translate3d(0, 255px, 0)');

      self.$container.hide();
      if (Browser.IS_IE8 || Browser.IS_IE9) {
        // IE<10 doesn't support transitions, so we shouldn't fade the button 
        // in
        self.$showBtn.show();
      } else {
        self.$showBtn.fadeIn();
      }
      this.hidePopups();
      Resize.trigger();
    };

    view._showKeypad = function () {
      clearTimeout(this.__showHideTimeout);
      this.setLayout("mainNumbers");
      this.$showBtn.hide();
      this.$container.show();
      this.isOpen = true;
      var self = this;
      this.__showHideTimeout = setTimeout(function () {
        self.$container.css('transform', 'translate3d(0, 0, 0)');
        Resize.waitForCSSAnimation(self.$container, /transform/);
      });
    };

    view.requestSetIsOpen = function (isOpen) {
      if (this.userMinimized  && !this.isOpen) return;
      if (isOpen === this.isOpen) return;

      if (isOpen) {
        this._showKeypad();
      } else {
        this._hideKeypad();
      }
    };
  
    view.setKeysDisabled = function (isDisabled) {
      this.$keys.toggleClass('keys-disabled', !!isDisabled);
    };

    view.getButton = function (buttonId) {
      if (!this.keys[buttonId])
        buttonId = "unknown";
      return this.keys[buttonId].display;
    };

    view.buttonArray = function (buttonsString) {
      return _.map(buttonsString.split(' '), this.getButton, this);
    };

    view.setupKeypad = function () {

      this.buttons = {
        mainNumbersLeft: [
          {keys: this.buttonArray('x y squared') },
          {keys: this.buttonArray('lt gt exponent') },
          {keys: this.buttonArray('leftparen rightparen comma') },
          {keys: this.buttonArray('toggleAltLeft sqrt') }
        ],

        altNumbersLeft: [
          {keys: this.buttonArray('r theta pi') },
          {keys: this.buttonArray('le ge subscript') },
          {keys: this.buttonArray('leftbrace rightbrace colon') },
          {keys: this.buttonArray('toggleMainLeft cuberoot') }
        ],

        numbersMiddle: [
          {keys: this.buttonArray('7 8 9 divide') },
          {keys: this.buttonArray('4 5 6 times') },
          {keys: this.buttonArray('1 2 3 minus') },
          {keys: this.buttonArray('0 decimal equals plus') }
        ],

        numbersRight: [
          {keys: this.buttonArray('popupFunctions backspace') },
          {keys: this.buttonArray('toggleLetters enter') },
          {keys: this.buttonArray('blank up blank') },
          {keys: this.buttonArray('left down right') }
        ],

        letters: [
          {keys: this.buttonArray('q w e r t y u i o p backspace') },
          {keys: this.buttonArray('halfBlank a s d f g h j k l halfBlank toggleNumbers') },
          {keys: this.buttonArray('blank z x c v b n m comma blank enter') },
          {keys: this.buttonArray(
            'halfBlank pi subscript leftparen rightparen plus minus times divide equals blank halfBlank'
          )}
        ],
      };

      this.popups = {
        functionsPopup: {
          trig: {
            tab:this.getButton('trigTab'),
            funcs: this.buttonArray(
              'sin arcsin sinh cos arccos cosh tan arctan tanh csc arccsc csch sec arcsec sech cot arccot coth'
            )
          },

          calc: {
            tab: this.getButton('calcTab'),
            funcs: this.buttonArray('exp ln log loga ddx sum prod fact e')
          },

          misc: {
            tab: this.getButton('miscTab'),
            funcs: this.buttonArray('ceil floor round abs min max lcm gcd mod nCr nPr fact')
          }
        }
      };
    };

    view.getTemplateParams = function(){
        return {buttons: this.buttons, popups: this.popups, userMinimizable: (!Config.get('tablet'))};
    };

    view.height = function () {
      return this.isOpen ? this.$container.height() : 0;
    };

    view.setLayout = function (newLayout) {
      this.$().removeClass('layout-letters layout-altNumbers layout-mainNumbers layout-handwriting')
              .addClass('layout-' + newLayout);
    };

    view.setTab = function (newTab) {
      var tabs = ['trig','calc','misc'];
      var self = this;
      _.each(tabs, function (tab) {
        self.$('[key=' + tab + 'Tab]').removeClass('selected');
        self.$('[section=' + tab + ']').hide();
      });
      this.$('[key=' + newTab + 'Tab]').addClass('selected');
      this.$('[section=' + newTab + ']').show();
    };

    view.hidePopups = function () {
      this.$funcBtn.removeClass("active");
      this.$funcPopover.hide();
    };

    view.setPopup = function (newPopup) {
      if (newPopup === 'functions') {
        //this just changes which direction the arrowhead is pointing
        if ($(window).height() < 525) {
          this.$funcPopover.removeClass("top").addClass("left");
        } else {
          this.$funcPopover.removeClass("left").addClass("top");
        }
        this.$funcBtn.toggleClass("active");
        this.$funcPopover.toggle();
      }
    };

    view.insMQText = function (str) {
      var editor = this.expressionsView.getActiveMathquill();
      for (var i=0; i<str.length; i++) {
        editor.mathquill("onText", str.charAt(i));
      }
    };

    view.buttonClicked = function (button) {
      var keyID        = this.$(button).attr('key'),
          buttonAction = this.keys[keyID].action;

      if (buttonAction.changeLayout) {
        this.hidePopups();
        this.setLayout(buttonAction.changeLayout);

        //if switched to handwriting layout, set canvas size
        if (buttonAction.changeLayout === 'handwriting') {
          this.$canvas[0].width = this.pxRatio * parseInt(this.$canvas.width(), 10);
          this.$canvas[0].height = this.pxRatio * parseInt(this.$canvas.height(), 10);
        }
        return;
      }
      if (buttonAction.tab) {
        this.setTab(buttonAction.tab);
        return;
      }
      if (buttonAction.popup) {
        this.setPopup(buttonAction.popup);
        return;
      }
    
      //if we've clicked a button while in alt-layout, switch back to main
      if (this.$().hasClass('altNumbers')) {
        this.setLayout('mainNumbers');
      }

      //hide popup when any button is pressed (Except a popup or tab button)
      this.hidePopups();

      var editor = this.expressionsView.getActiveMathquill();
      if (!editor.length) {
      
        // makes it so that the keypad works for the non-editable table cells.
        var selected = this.expressionsView.getSelected();
        if (selected && selected.isTable ) {
          if (selected.selectedCell) {
            var view = this.expressionsView.getItemView(selected.id);
            view.doKeyAction(buttonAction.key);
          }
        }
      
        return;
      }

      try {
          if (buttonAction.key) {
            editor.mathquill("onKey", buttonAction.key);
          } else if (buttonAction.text) {
            this.insMQText(buttonAction.text);
          } else if (buttonAction.func) {
            var suffix = '\\left( \\right)';
            if (buttonAction.args === 2) {
              suffix = '\\left({},{}\\right)';
            }
            editor.mathquill('write', buttonAction.func + suffix);
              editor.mathquill('onKey', 'Left');
            if (buttonAction.args === 2) {
              editor.mathquill('onKey', 'Left');
            }
          
          } else if (buttonAction.custom) {
            switch (buttonAction.custom) {
              case 'loga':
                editor.mathquill('write','log_{}\\left( \\right)');
                editor.mathquill('onKey', 'Left');
                editor.mathquill('onKey', 'Left');
                editor.mathquill('onKey', 'Left');
                break;
              case 'cuberoot':
                editor.mathquill('write', '\\sqrt[3]{}');
                editor.mathquill('onKey', 'Left');
                break;
              case 'squared':
                //route as if it's the exponent button, so that we get
                //the nice behavior where exponentiating an exponent is treated
                //as a backspace
                this.insMQText('^2');
                editor.mathquill('onKey', 'Right');
                break;
              case 'cubed':
                editor.mathquill('write', '^{3}');
                break;
              case 'd/dx':
                editor.mathquill('write','\\frac{d}{dx}');
                break;
            }
          }

          // after everything is said and done, tell mathquill it rendered. This
          // will update the value stored for the expressions latex. And that
          // will cause this change to go into undo/redo.
          editor.trigger('render');
      } catch (e) {
        //console.log(e);
      }
    };
  });

  return KeypadView;
});

define('main/keypad_view_desktop',['require','pjs','./keypad_view'],function(require){
  var P = require('pjs');

  var Keypad = require('./keypad_view');

  var KeypadDesktop = P(Keypad, function (view, _super){

  });
  
  return KeypadDesktop;
});
//Abstract out getState and setState functionality
//TODO - setState is still pretty gross, but this is better than copy/pasting that grossness

define('main/state_controller',['require','pjs','undoredo'],function (require) {
  var P = require('pjs');
  var UndoRedo = require('undoredo');

  var StateController = P(function (proto) {
    
    var BLANK_STATE = {
      'graph': {
        'viewport': {
          'xmin': -10,
          'xmax': 10,
          'ymin': -10,
          'ymax': 10
        },
        'showLabels': true,
        'showGrid': true,
        'showAxes': true,
        'squareAxes': true,
        'labelXMode': '',
        'labelYMode':''
      },
      'expressions': {'list': [{'id': 1,'latex': '','selected' :true}]}
    };
    
    proto.init = function (graphController, expressionsModel, graphSettings, expressionsView) {
      this.graphController = graphController;
      this.expressionsModel = expressionsModel;
      this.graphSettings = graphSettings;
      this.isFirstSetState = true;
      this.expressionsView = expressionsView;
    };

    proto.getState = function (encoding) {
      /* jshint nonstandard: true */
      var obj = {
        graph: this.graphController.getState(),
        expressions: this.expressionsModel.getState()
      };
      if (encoding == 'escaped') {
        return escape(JSON.stringify(obj));
      } else {
        return obj;
      }
    };

    proto.setState = function (state, encoding) {
      /* jshint nonstandard: true */
      this.graphSettings.setProperty('POIs', false);
      this.expressionsView.setSelected(null);

      //don't set blank state more than once
      if (
        !this.isFirstSetState &&
        (state === null) &&
        this.expressionsModel.isEmpty()
      ) {
        return;
      }

      var self = this;
      var manipulator = function (state, encoding) {
        if (!state) state = BLANK_STATE;
        if (encoding === 'escaped' || typeof state === 'string') {
          try {
            state = JSON.parse(unescape(state));
          } catch (e) {
            alert('invalid state!'); return;
          }
        }
        // Empty the evaluator and the graph so that when we switch to the new
        // viewport, we don't flash a rescaled version of the old state.
        if ('expressions' in state) {
          self.expressionsModel.setState({ list: [] });
        }

        self.graphController.manager.clear();
        self.graphController.manager.redrawGraphsLayer();

        if ('graph' in state) {
          if (!('degreeMode' in state.graph)) state.graph.degreeMode = false;

          self.graphController.setState(state.graph);
        }

        if ('expressions' in state) {
          self.expressionsModel.setState(state.expressions);
        }
      };

      //apply it this first time, but don't add to undo/redo
      if (this.isFirstSetState) {
        manipulator(state, encoding);
        this.isFirstSetState = false;
        return;
      }

      var curState = this.getState();
      UndoRedo.addTransaction({
        type: UndoRedo.CAUSE_OF_CHANGE,
        undo: function () { manipulator(curState); },
        redo: function () { manipulator(state, encoding); },

        // we stringify two json objects that come out of the same function.
        // If the objects are the same, then the stringified versions will be
        // exactly the same.
        ensureChangeOccured: function () {
          var newState = JSON.stringify(self.getState());
          var oldState = JSON.stringify(curState);

          return oldState === newState;
        }
      });
    };

    proto.setBlank = function () {
      this.setState(BLANK_STATE);
      UndoRedo.markAsSaved();
    };
  });

  return StateController;

});

define('lib/set_list_height',['require','main/resize'],function (require) {
  var Resize = require('main/resize');
  
  var init = function (expressionsView, keypadView) {
    var resize = function () {
      var keypad_height = keypadView.height();
      expressionsView.setBottom(keypad_height);
      expressionsView.ensureActiveChildIsVisible();
    };

    Resize.register(resize);
  };
  
  return {init: init};
});

// Listens to expressionsView and propagates selection changes to the grapher
// and evaluator.
//
// TODO this could be *much* simpler if we had a better model for expressing
// selection within a table.
define('main/propagate_selection',['require'],function (require) {
  function propagateSelection(expressionsView, grapher, evaluator) {
    var lastSelectedId;
    var lastSelectedModel;
    
    // Show pois for the currently selected equation.
    var onSelectedExpressionChange = function () {
      var selected = expressionsView.getSelected();
      // setups up a listener for changes in selection within tables. It's fine
      // that we add these observers for even non-tables.
      if (selected !== lastSelectedModel) {
        if (lastSelectedModel) {
          lastSelectedModel.unobserve('selectedCell.calcjs');
        }
        if (selected) {
          selected.observe('selectedCell.calcjs', onSelectedExpressionChange);
        }
        lastSelectedModel = selected;
      }
      
      var selectedId = (selected) ? selected.id : undefined;

      if (selected && selected.isTable) {
        var selectedCell = selected.selectedCell;
        if (selectedCell) {
          var selectedCol = selected.columns[selectedCell.column];
          selectedId = selectedCol ? selectedCol.id : undefined;
        } else {
          selectedId = undefined;
        }
      }

      var idChanged = (selectedId !== lastSelectedId);

      if (idChanged) {
        grapher.select(selectedId);
        var intersectIds = grapher.getOpenIntersectionIds();
        if (typeof selectedId !== "undefined") intersectIds[selectedId] = true;
        evaluator.setIntersectIds(intersectIds);
        // Causes a redraw that will update the grapher appearance.
        evaluator.updateIntersections(selectedId);
      }

      lastSelectedId = selectedId;
    };

    expressionsView.observe('selectedItem', onSelectedExpressionChange);
  }

  return propagateSelection;
});



/*
 * The ipad has some quirky scrolling behavior. This module fixes them.
 * NOTE: this module is only for vertical scrolling. Horizontal page scroll
 *       can be turned off by an html setting. If we want, we can enable
 *       this module to monitor horizontal scrolling as well.
 *
 * On the ipad you can scroll an entire page by:
 *     a) Sliding your finger on a non scrollable object.
 *     b) Sliding your finger on a scrollable object in a direction
 *        that the scrollable object is already maxed out.
 *
 * You can preventDefault() the 'touchMove' event and that will prevent
 *  the ipad from scrolling the entire page. The only problem is that this
 *  also prevents any scrollable area from scrolling.
 *
 * The solution is to monitor the 'touchStart' event to predict what will
 *  happen when the user moves their finger. It predicts both movements up
 *  and down. If it predicts that the entire page will be scrolled, it
 *  makes that movement as invalid. If it predicts that a scrollable area
 *  will be scrolled, it makes the movement as valid.
 *
 * On 'touchMove', this module looks up the prediction for the direction the
 *  user moved. If the movement was valid, it lets the movement continue on
 *  and scroll the scrollable area. If the movement was invalid, it does a
 *  preventDefault() on the 'touchMove' event to prevent the entire page from
 *  scrolling.
 *
 * Also important to know is that once you grab a scrollable area and start
 *  scrolling, you're safe. The page won't scroll even if you max the
 *  scrollable area out and keep dragging in that direction.
 *
 * The prediction routine runs up the ancestors of the evt.target and finds
 * the first that:
 *
 *  1) has overflow and overflow-y properties that allow scrolling
 *                 AND
 *    2) has scrollTop != 0 (can be scrolled downward)
 *                          AND/OR
 *    3) has scrollTop that can be incremented (can be scrolled upward)
 */
 
/* global jQuery */
;(function ($) {
  /* jshint bitwise: false */

  //some constants
  var NONE = 0;
  var UP = 1;
  var DOWN = 2;

  //holds the state
  var validMoveDirections = NONE;
  var startTouches = null;

  //decides which directions an element can be scrolled
  $(document).bind('touchstart', function(evt) {

    var dom = $(evt.target);
    validMoveDirections = NONE;

    while (validMoveDirections === NONE && dom.length) {

      //mobile safari throws error if you try to do normal
      //.css() on the top most element
      if (dom[0].tagName === undefined) {
        break;
      }

      //some elements (like the slider) can disable scrolling on tapStart
      if (dom.closest('[disablescroll]').length) {
        validMoveDirections = NONE;
        return;
      }
      
      var overflow = dom.css('overflow');
      var overflow_y = dom.css('overflow-y');

      //check if overflow allows it to be scrolled
      if (overflow !== "hidden" && overflow !== "visible" &&
          overflow_y !== "hidden" && overflow_y !== "hidden" ) {

        //can be scrolled downward if it isn't scrolled to the very top
        var scrollTop = dom.scrollTop();
        if (scrollTop !== 0) {
          validMoveDirections = DOWN;
        }

        //can be scrolled upward if we try to scroll it upward and
        //it succeeds
        dom.scrollTop(scrollTop+1);
        if (dom.scrollTop() !== scrollTop) {
          
          //mark up as a valid scroll
          validMoveDirections = UP | validMoveDirections;
          
          //move it back to where it was
          dom.scrollTop(scrollTop);
        }
      }

      dom = dom.parent();
    }

    //if any scroll is valid, lets save the original touchStart event
    //so that we can compare it with the touchMove event later to decide
    //which direction the user scrolled.
    if (validMoveDirections !== NONE) {
      startTouches = [];

      //We must clone the original touchStart event instead of simply
      //saving a reference to it. For some reason, the original touchStart
      //event updates it's pageY, screenY, etc properties as you scroll.
      //That means that touchStart.screenY will always equal the
      //touchMove.screenY event when you compare them.
      var origTouches = evt.originalEvent.touches;
      for (var i=0; i<origTouches.length; i++) {
        var clonedTouch = {};
        for (var j in origTouches[i] ) {
          if (origTouches[i].hasOwnProperty(j)) {
            clonedTouch[j] = origTouches[i][j];
          }
        }
        startTouches.push( clonedTouch );
      }
    }
  });

  //decides if the the movement is in a valid direction.
  $(document).bind('touchmove', function(evt) {

    //makes sure this is the first touchmove after touchstart
    if (startTouches) {

      //get positions of the touch and move events
      var startTouch = startTouches[0];
      var moveTouch = evt.originalEvent.touches[0];

      //find the direction we moved our finger
      //var deltaX = moveTouch.screenX - startTouch.screenX;
      var deltaY = moveTouch.screenY - startTouch.screenY;

      //check if any of the movements weren't allowed
      //and if not, say that NO move is allowed. Will
      //get caught later at bottom of the function.
      if (deltaY > 0 && !(validMoveDirections & DOWN)) {
        validMoveDirections = NONE;
      } else if (deltaY < 0 && !(validMoveDirections & UP)) {
        validMoveDirections = NONE;
      }

      //first touchmove has been processed
      if (deltaY) {
        startTouches = null;
      }
    }
    
    //don't scroll the entire screen
    if (validMoveDirections === NONE) {
      evt.preventDefault();
    }
  });

  //resets the state
  $(document).bind('touchend', function() {
    validMoveDirections = NONE;
    startTouches = null;
  });

})(jQuery);


define("lib/ipad.scrollfix", function(){});



define('main/calc_desktop',['require','jquery','main/config','main/evaluator','main/graph','graphing/grapher','graphing/poicontroller','graphing/graphcontroller','main/user_controller','main/graphs_controller','main/graph_settings','main/timermodules','expressions/list','expressions/list_view_desktop','main/resize','main/focus','undoredo','lib/browser','main/modals_controller','main/initialize_controllers','main/subheader','main/keypad_view_desktop','main/state_controller','lib/set_list_height','main/propagate_selection','lib/ipad.scrollfix'],function (require) {
  var $ = require('jquery');
  var Config = require('main/config');
  var Evaluator = require('main/evaluator');
  var Graph = require('main/graph');
  var Grapher = require('graphing/grapher');
  var POIController = require('graphing/poicontroller');
  var GraphController = require('graphing/graphcontroller');
  var UserController = require('main/user_controller');
  var GraphsController = require('main/graphs_controller');
  var GraphSettings = require('main/graph_settings');
  var timerModules = require('main/timermodules');
  var ExpressionList = require('expressions/list');
  var ExpressionListView = require('expressions/list_view_desktop');
  var Resize = require('main/resize');
  var Focus = require('main/focus');
  var UndoRedo = require('undoredo');
  var Browser = require('lib/browser');
  var ModalsController = require('main/modals_controller');
  var initializeControllers = require('main/initialize_controllers');
  var SubheaderView = require('main/subheader');
  var KeypadView = require('main/keypad_view_desktop');
  var StateController = require('main/state_controller');
  var setListHeight = require('lib/set_list_height');
  var propagateSelection = require('main/propagate_selection');

  require('lib/ipad.scrollfix');

  // Init the Resize module
  Resize.init({stickyFullScreen: false});

  var expressionsModel = ExpressionList();
  var expressionsView = ExpressionListView(expressionsModel);

  var keypadView = KeypadView(expressionsView);
  
  setListHeight.init(expressionsView, keypadView);

  var evaluator = Evaluator(Config.get('workerURL'));
  var graphSettings = GraphSettings();
  var grapher = new Grapher($('#grapher'), graphSettings);
  // Warning, order matters here because both of these bind touch event
  // handlers, and we need tracing (poiController) to get priority over
  // dragging (graphController).
  var poiController = new POIController(grapher);
  var graphController = GraphController(grapher);
  graphSettings.registerCallbacks(graphController, expressionsView);
  
  graphSettings.observe('degreeMode', function(){
    evaluator.setDegreeMode(graphSettings.degreeMode);
  });

  var stateController = StateController(
    graphController,
    expressionsModel,
    graphSettings,
    expressionsView
  );

  var graphsController = GraphsController(graphController, stateController);

  expressionsView.triggerClearGraph = function () {
    graphsController.clearGraph();
    UndoRedo.markAsSaved();
  };

  // back button support
  $(window).on('popstate', function(evt) {
    var state = evt.originalEvent.state;
    if (!state) return;
    graphsController.loadGraph(Graph(state));
  });

  var userController = UserController(graphsController);
  
  var modalsController = ModalsController(userController, graphsController);
  var modals = modalsController.modals;

  var subheaderView = SubheaderView(
    userController,
    graphsController,
    graphController,
    stateController,
    modals
  );

  propagateSelection(expressionsView, grapher, evaluator);

  graphController.triggerViewportStable = function () {
    var projection = grapher.createProjection();
    evaluator.setViewState({
      viewport: projection.viewport.toObject(),
      screen: projection.screen
    });

    // if we've set it back to square, keep it square on changes
    if (grapher.viewport.isSquare(grapher.screen)) {
      grapher.settings.setProperty('squareAxes', true);
    }

    // TODO - this might cause graphController.setViewport() a few times. That
    //        in turn might cause this exact same function to get called a few
    //        times. After all settings have been saved, a call to setProperties()
    //        will do nothing and will not call graphController.setViewport().
    //
    //        would be better if the observer inside of graph_settings.js
    //        fired only once. But even then we'd call evaluator.recompute()
    //        twice here. Once the line above and once the line below.
    subheaderView.settingsView.setViewport(graphController.getViewport());
  };

  evaluator.triggerStatusChange = function (changes) {
    expressionsView.onChange(changes);
  };
  evaluator.triggerGraphComputed = function (id, graphData) {
    grapher.updateSketch(id, graphData);
  };

  evaluator.triggerRemove = function (id) { grapher.hide(id); };

  evaluator.triggerUpdateIntersections = function (id, intersections) {
    grapher.updateIntersections(id, intersections);
    grapher.redrawPOILayer();
  };

  evaluator.triggerRender = function () {
    poiController.handleTraceUpdate(); //Needed for updating trace with animation
    grapher.redrawContentLayers();
  };
  evaluator.triggerRenderSlowly = function () { grapher.redrawSlowly(); };

  expressionsModel.triggerAddExp = function (obj) {
    if (!obj) return;
    // if we've completely erased the contents of this expression, then
    // we need to act like it's a new expression. We remove the old sketch
    // so that we don't remember POI information.
    if (obj.latex === '' && this.type !== 'table') {
      grapher.removeGraphSketch(obj.id);
    }

    evaluator.addStatement(obj);
  };
  expressionsModel.triggerRemoveExp = function (id) {
    evaluator.removeStatement(id);
  };
  expressionsModel.triggerRemoveExps = function (ids) {
    evaluator.removeStatements(ids);
  };
  expressionsModel.triggerCompleteState = function (state) {
    evaluator.setCompleteState(state);
  };

  expressionsModel.batchEvaluation = evaluator.batch.bind(evaluator);

  poiController.triggerStartTracingBranch = function(id) {
    expressionsView.setSelected(expressionsModel.getItemById(id));
  };
  
  poiController.triggerEmptyTouchStart = function () {
    expressionsView.setSelected(null);
  };

  poiController.triggerStartMovingPoint = function (id) {
    expressionsView.onStartMovingPoint(id);
  };

  poiController.triggerMovePoint = function (id, values) {
    // Batch updates so that sliders corresponding to both coordinates are
    // updated togther
    evaluator.batch(function () { expressionsView.onMovePoint(id, values); });
  };

  poiController.triggerStopMovingPoint = function (id) {
    expressionsView.onStopMovingPoint(id);
  };

  poiController.triggerPointSelected = function (id) {
    expressionsView.setSelected(expressionsModel.getItemById(id));
  };

  Focus.takeFocus = function () {
    expressionsView.setSelected(null);
  };

  // setup ajax so that any time we get a 401 Unauthorized response that it
  // sends us to loggedOut
  $.ajaxSetup({statusCode: {401: function() { userController.logout(); }}});

  //This top-level location should becomes the place where all nontrivial document.ready() activities happen
  $(document).ready(function () {
    keypadView.appendTo('#sliding-interior');
    expressionsView.appendTo('#sliding-interior');

    //Pulling these to the top level for increased visibility.
    //Would ideally like to get rid of these
    timerModules.load('expressions.renderviewport', expressionsView, grapher);

    //Setup undo-redo listeners
    $(document).bind('keydown', UndoRedo.handleKeydown.bind(UndoRedo));
    //Setup save shortcut listener
    $(document).bind('keydown', subheaderView.handleKeydown.bind(subheaderView));
    //Setup sliders play/stop listener
    $(document).bind('keydown', expressionsView.handleKeydown.bind(expressionsView));

    modalsController.ready();
    //Show warning modal for unsupported browsers (because of screensize, for example)
    if (!Browser.CAPABLE_BROWSER) {
      modals.unsupportedBrowserDialog.show();
    }

    subheaderView.appendTo('#subheader');

    // the below should happen automatically, but doesn't on iPad / android
    // this lets you defocus the currently focused expression by clicking the
    // topbar
    $('#header').on("tapstart", function(evt) {
      Focus.takeFocus();
    });

    $('#loading_div').fadeOut();
    $('#grapher').show();

    // Start triggering updates when window resizes
    Resize.monitor();
  });
  
  var changedSinceSave = function() {
    return UndoRedo.changedSinceSave();
  };
  
  //make sure the user doesn't accidentally leave the page!
  if(!Config.get('no_navigation_warning')){
    $(window).bind('beforeunload', function(){
      if (changedSinceSave()) {
        return 'Are you sure you want to leave? Any unsaved work will be lost!';
      }
      return null;
    });
  }
  
  Resize.register(function () {
    
    // calculate new width and height of grapher. draw the grapher to the
    // fullScreen size, not just the currentSize. That's to keep the grapher
    // from resizing when soft keyboard opens on android.
    var offset = grapher.$.offset();
    var w = Resize.fullScreen.width - offset.left + $('#sliding-interior').offset().left;
    var h = Resize.fullScreen.height - offset.top;
    
    if (window.grapher && grapher.updateScreenSize(w, h)) {
      grapher.redrawAllLayers();
    }
    
    if (window.grapher && grapher.settings && grapher.settings.squareAxes) {
      graphController.enforceSquareAxes();
    }
  });

  // Fills in currentUser and currentGraph based on load data.
  initializeControllers(userController, graphsController);

  //Record analytics visit

  return {
    changedSinceSave: changedSinceSave,
    userController: userController,
    expressions: expressionsView,
    grapher: grapher,
    evaluator: evaluator,
    graphController: graphController,
    setState: stateController.setState.bind(stateController),
    setBlank: stateController.setBlank.bind(stateController),
    getState: stateController.getState.bind(stateController)
  };
});


requirejs(['main/calc_desktop'], function (Calc) {
  // Calc global has singletons like expressions and userController that are
  // useful for debugging and testing.
  window.Calc = Calc;
});

define("toplevel/calculator_desktop", function(){});
